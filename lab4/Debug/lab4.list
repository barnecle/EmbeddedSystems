
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb0  08005eb0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb8  08005eb8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000a8  08005f68  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08005f68  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b31  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277b  00000000  00000000  00032c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00035388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00035f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c586  00000000  00000000  00036aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f759  00000000  00000000  00053026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa620  00000000  00000000  0006277f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010cd9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a5c  00000000  00000000  0010cdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b8c 	.word	0x08005b8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08005b8c 	.word	0x08005b8c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <disable>:
 */

#include "main.h"
#include "interrupt.h"

uint32_t disable(void) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000592:	f3ef 8310 	mrs	r3, PRIMASK
 8000596:	603b      	str	r3, [r7, #0]
  return(result);
 8000598:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 800059a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <restore>:

void restore(uint32_t priority_mask) {
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f383 8810 	msr	PRIMASK, r3
}
 80005c0:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b089      	sub	sp, #36	; 0x24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	e853 3f00 	ldrex	r3, [r3]
 80005e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	61fb      	str	r3, [r7, #28]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	69fa      	ldr	r2, [r7, #28]
 80005ee:	61ba      	str	r2, [r7, #24]
 80005f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005f2:	6979      	ldr	r1, [r7, #20]
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	e841 2300 	strex	r3, r2, [r1]
 80005fa:	613b      	str	r3, [r7, #16]
   return(result);
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e9      	bne.n	80005d6 <LL_USART_EnableIT_RXNE+0x8>
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	3724      	adds	r7, #36	; 0x24
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	; 0x40
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fe44 	bl	80012a2 <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t command_line[QUEUE_SIZE];
  uint8_t ch;
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;
  int n = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f881 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f99b 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f969 	bl	80008fc <MX_USART2_UART_Init>
  MX_RTC_Init();
 800062a:	f000 f8d3 	bl	80007d4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800062e:	4833      	ldr	r0, [pc, #204]	; (80006fc <main+0xec>)
 8000630:	f000 fc20 	bl	8000e74 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);
 8000634:	4832      	ldr	r0, [pc, #200]	; (8000700 <main+0xf0>)
 8000636:	f7ff ffca 	bl	80005ce <LL_USART_EnableIT_RXNE>
  printf("\r\nSystem Running\n\r");
 800063a:	4832      	ldr	r0, [pc, #200]	; (8000704 <main+0xf4>)
 800063c:	f003 ffe2 	bl	8004604 <iprintf>
  printf("\r\nSTM$");
 8000640:	4831      	ldr	r0, [pc, #196]	; (8000708 <main+0xf8>)
 8000642:	f003 ffdf 	bl	8004604 <iprintf>
  date.WeekDay = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	753b      	strb	r3, [r7, #20]
  date.Month = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	757b      	strb	r3, [r7, #21]
  date.Date = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	75bb      	strb	r3, [r7, #22]
  date.Year = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	75fb      	strb	r3, [r7, #23]
  time.Hours = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	703b      	strb	r3, [r7, #0]
  time.Minutes = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	707b      	strb	r3, [r7, #1]
  HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	4829      	ldr	r0, [pc, #164]	; (800070c <main+0xfc>)
 8000668:	f002 fbb5 	bl	8002dd6 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc,&time,RTC_FORMAT_BIN);
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	4826      	ldr	r0, [pc, #152]	; (800070c <main+0xfc>)
 8000674:	f002 fab6 	bl	8002be4 <HAL_RTC_SetTime>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    if ((ch = dequeue(&rx_queue))) {
 8000678:	4825      	ldr	r0, [pc, #148]	; (8000710 <main+0x100>)
 800067a:	f000 fbd1 	bl	8000e20 <dequeue>
 800067e:	4603      	mov	r3, r0
 8000680:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000684:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0f5      	beq.n	8000678 <main+0x68>
      putchar(ch);
 800068c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000690:	4618      	mov	r0, r3
 8000692:	f003 ffcf 	bl	8004634 <putchar>
      command_line[n] = ch;
 8000696:	f107 0218 	add.w	r2, r7, #24
 800069a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069c:	4413      	add	r3, r2
 800069e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80006a2:	701a      	strb	r2, [r3, #0]
      if(ch == '\r' || ch == '\n'){
 80006a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80006a8:	2b0d      	cmp	r3, #13
 80006aa:	d003      	beq.n	80006b4 <main+0xa4>
 80006ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80006b0:	2b0a      	cmp	r3, #10
 80006b2:	d11f      	bne.n	80006f4 <main+0xe4>
	command_line[n] = '\0'; //end of string
 80006b4:	f107 0218 	add.w	r2, r7, #24
 80006b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ba:	4413      	add	r3, r2
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
      	if(!execute_command(command_line)){
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f993 	bl	80009f0 <execute_command>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d103      	bne.n	80006d8 <main+0xc8>
	  printf("\r\nOK");
 80006d0:	4810      	ldr	r0, [pc, #64]	; (8000714 <main+0x104>)
 80006d2:	f003 ff97 	bl	8004604 <iprintf>
 80006d6:	e002      	b.n	80006de <main+0xce>
	}else{
	  printf("\r\nNOK");
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <main+0x108>)
 80006da:	f003 ff93 	bl	8004604 <iprintf>
	}
	n = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	printf("\r\n");
 80006e2:	480e      	ldr	r0, [pc, #56]	; (800071c <main+0x10c>)
 80006e4:	f004 f82a 	bl	800473c <puts>
	printDateTime();
 80006e8:	f000 fa8c 	bl	8000c04 <printDateTime>
	printf(" IULS>");
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <main+0x110>)
 80006ee:	f003 ff89 	bl	8004604 <iprintf>
 80006f2:	e002      	b.n	80006fa <main+0xea>
      }else{
	n++;
 80006f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f6:	3301      	adds	r3, #1
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if ((ch = dequeue(&rx_queue))) {
 80006fa:	e7bd      	b.n	8000678 <main+0x68>
 80006fc:	20000128 	.word	0x20000128
 8000700:	40004400 	.word	0x40004400
 8000704:	08005bc4 	.word	0x08005bc4
 8000708:	08005bd8 	.word	0x08005bd8
 800070c:	200000fc 	.word	0x200000fc
 8000710:	200000d4 	.word	0x200000d4
 8000714:	08005be0 	.word	0x08005be0
 8000718:	08005be8 	.word	0x08005be8
 800071c:	08005bf0 	.word	0x08005bf0
 8000720:	08005bf4 	.word	0x08005bf4

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	; 0x58
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2244      	movs	r2, #68	; 0x44
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f003 ff5e 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000746:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074a:	f001 f971 	bl	8001a30 <HAL_PWREx_ControlVoltageScaling>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000754:	f000 fb26 	bl	8000da4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000758:	f001 f94c 	bl	80019f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <SystemClock_Config+0xac>)
 800075e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000762:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <SystemClock_Config+0xac>)
 8000764:	f023 0318 	bic.w	r3, r3, #24
 8000768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800076c:	231c      	movs	r3, #28
 800076e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000784:	2300      	movs	r3, #0
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4618      	mov	r0, r3
 800078e:	f001 f9a5 	bl	8001adc <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000798:	f000 fb04 	bl	8000da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	2101      	movs	r1, #1
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fdf7 	bl	80023a8 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007c0:	f000 faf0 	bl	8000da4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007c4:	f002 f97c 	bl	8002ac0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007c8:	bf00      	nop
 80007ca:	3758      	adds	r7, #88	; 0x58
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b092      	sub	sp, #72	; 0x48
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007ea:	2300      	movs	r3, #0
 80007ec:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	222c      	movs	r2, #44	; 0x2c
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fefd 	bl	80045f4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007fa:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <MX_RTC_Init+0x120>)
 80007fc:	4a3e      	ldr	r2, [pc, #248]	; (80008f8 <MX_RTC_Init+0x124>)
 80007fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <MX_RTC_Init+0x120>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <MX_RTC_Init+0x120>)
 8000808:	227f      	movs	r2, #127	; 0x7f
 800080a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <MX_RTC_Init+0x120>)
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <MX_RTC_Init+0x120>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_RTC_Init+0x120>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <MX_RTC_Init+0x120>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_RTC_Init+0x120>)
 8000826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_RTC_Init+0x120>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000832:	4830      	ldr	r0, [pc, #192]	; (80008f4 <MX_RTC_Init+0x120>)
 8000834:	f002 f954 	bl	8002ae0 <HAL_RTC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 fab1 	bl	8000da4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800084e:	2300      	movs	r3, #0
 8000850:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800085c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	4823      	ldr	r0, [pc, #140]	; (80008f4 <MX_RTC_Init+0x120>)
 8000866:	f002 f9bd 	bl	8002be4 <HAL_RTC_SetTime>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000870:	f000 fa98 	bl	8000da4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000874:	2301      	movs	r3, #1
 8000876:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800087a:	2301      	movs	r3, #1
 800087c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000880:	2301      	movs	r3, #1
 8000882:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800088c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	4817      	ldr	r0, [pc, #92]	; (80008f4 <MX_RTC_Init+0x120>)
 8000896:	f002 fa9e 	bl	8002dd6 <HAL_RTC_SetDate>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 80008a0:	f000 fa80 	bl	8000da4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80008ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2201      	movs	r2, #1
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_RTC_Init+0x120>)
 80008dc:	f002 fb4f 	bl	8002f7e <HAL_RTC_SetAlarm>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_RTC_Init+0x116>
  {
    Error_Handler();
 80008e6:	f000 fa5d 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3748      	adds	r7, #72	; 0x48
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000fc 	.word	0x200000fc
 80008f8:	40002800 	.word	0x40002800

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <MX_USART2_UART_Init+0x5c>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000940:	f002 fcd2 	bl	80032e8 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 fa2b 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000128 	.word	0x20000128
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_GPIO_Init+0x8c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_GPIO_Init+0x8c>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_GPIO_Init+0x8c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_GPIO_Init+0x8c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <MX_GPIO_Init+0x8c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_GPIO_Init+0x8c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_GPIO_Init+0x8c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <MX_GPIO_Init+0x8c>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_GPIO_Init+0x8c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2108      	movs	r1, #8
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <MX_GPIO_Init+0x90>)
 80009c0:	f000 ffe6 	bl	8001990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009c4:	2308      	movs	r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0x90>)
 80009dc:	f000 fe66 	bl	80016ac <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000400 	.word	0x48000400

080009f0 <execute_command>:

/* USER CODE BEGIN 4 */
int execute_command(uint8_t * line) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <execute_command+0x98>)
 80009fa:	617b      	str	r3, [r7, #20]
  int success = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d102      	bne.n	8000a0c <execute_command+0x1c>
    return (-1); // Passed a bad pointer
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0a:	e038      	b.n	8000a7e <execute_command+0x8e>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 f83a 	bl	8000a90 <parse_command>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a22:	d121      	bne.n	8000a68 <execute_command+0x78>
    printf("Error with parse command\n\r");
 8000a24:	4819      	ldr	r0, [pc, #100]	; (8000a8c <execute_command+0x9c>)
 8000a26:	f003 fded 	bl	8004604 <iprintf>
    return (-1);
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2e:	e026      	b.n	8000a7e <execute_command+0x8e>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fbc9 	bl	80001d0 <strcmp>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10e      	bne.n	8000a62 <execute_command+0x72>
      if (!p->cmd_function) {
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <execute_command+0x62>
        return (-1);
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a50:	e015      	b.n	8000a7e <execute_command+0x8e>
      }
      (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	4610      	mov	r0, r2
 8000a5a:	4798      	blx	r3
      success = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
      break;
 8000a60:	e006      	b.n	8000a70 <execute_command+0x80>
    }
    p++;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3308      	adds	r3, #8
 8000a66:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1df      	bne.n	8000a30 <execute_command+0x40>
  }
  if (success) {
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <execute_command+0x8a>
    return (0);
 8000a76:	2300      	movs	r3, #0
 8000a78:	e001      	b.n	8000a7e <execute_command+0x8e>
  }
  else {
    return (-1);
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
  }
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	08005bfc 	.word	0x08005bfc

08000a90 <parse_command>:
int parse_command (uint8_t *line, uint8_t **command, uint8_t **args){
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]

  uint8_t *line_temp;
  if((!line) || (!command) || (!args)){ //check for bad pointer
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d005      	beq.n	8000aae <parse_command+0x1e>
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <parse_command+0x1e>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <parse_command+0x24>
    return(-1);
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ab2:	e01d      	b.n	8000af0 <parse_command+0x60>
  }
  line_temp= line;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	617b      	str	r3, [r7, #20]
  *command = line;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
  //strcpy(line_left, line);
  while(*line_temp != ','){ //increment through input to find end of command
 8000abe:	e00b      	b.n	8000ad8 <parse_command+0x48>
    if(!*line_temp){
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d104      	bne.n	8000ad2 <parse_command+0x42>
      *args = '\0'; //no arguments
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
      return(0);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e00e      	b.n	8000af0 <parse_command+0x60>
    }
    line_temp++;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  while(*line_temp != ','){ //increment through input to find end of command
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b2c      	cmp	r3, #44	; 0x2c
 8000ade:	d1ef      	bne.n	8000ac0 <parse_command+0x30>
  }

  *line_temp = '\0'; //replace comma with null for end of command string
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
  *args = line_temp +1; //one char past null is beginning of arguments
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
  return 0;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	371c      	adds	r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <help_command>:
void help_command(char *args){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  printf("\r\nAvailable Commands:\n\r");
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <help_command+0x30>)
 8000b06:	f003 fd7d 	bl	8004604 <iprintf>
  printf("lon\n\r");
 8000b0a:	4809      	ldr	r0, [pc, #36]	; (8000b30 <help_command+0x34>)
 8000b0c:	f003 fd7a 	bl	8004604 <iprintf>
  printf("lof\n\r");
 8000b10:	4808      	ldr	r0, [pc, #32]	; (8000b34 <help_command+0x38>)
 8000b12:	f003 fd77 	bl	8004604 <iprintf>
  printf("test\n\r");
 8000b16:	4808      	ldr	r0, [pc, #32]	; (8000b38 <help_command+0x3c>)
 8000b18:	f003 fd74 	bl	8004604 <iprintf>
  printf("ds\n\r");
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <help_command+0x40>)
 8000b1e:	f003 fd71 	bl	8004604 <iprintf>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	08005c18 	.word	0x08005c18
 8000b30:	08005c30 	.word	0x08005c30
 8000b34:	08005c38 	.word	0x08005c38
 8000b38:	08005c40 	.word	0x08005c40
 8000b3c:	08005c48 	.word	0x08005c48

08000b40 <lon_command>:
void lon_command(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  if(led_on == 0){
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <lon_command+0x2c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10a      	bne.n	8000b62 <lon_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <lon_command+0x30>)
 8000b50:	f000 ff36 	bl	80019c0 <HAL_GPIO_TogglePin>
    led_on = 1;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <lon_command+0x2c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
    printf("\r\nLED ON\n\r");
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <lon_command+0x34>)
 8000b5c:	f003 fd52 	bl	8004604 <iprintf>
  }else{
    printf("\r\nLED ALREADY ON\n\r");
  }

}
 8000b60:	e002      	b.n	8000b68 <lon_command+0x28>
    printf("\r\nLED ALREADY ON\n\r");
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <lon_command+0x38>)
 8000b64:	f003 fd4e 	bl	8004604 <iprintf>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200000c4 	.word	0x200000c4
 8000b70:	48000400 	.word	0x48000400
 8000b74:	08005c50 	.word	0x08005c50
 8000b78:	08005c5c 	.word	0x08005c5c

08000b7c <lof_command>:
void lof_command(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  if(led_on == 1){
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <lof_command+0x2c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10a      	bne.n	8000b9e <lof_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b88:	2108      	movs	r1, #8
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <lof_command+0x30>)
 8000b8c:	f000 ff18 	bl	80019c0 <HAL_GPIO_TogglePin>
    led_on = 0;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <lof_command+0x2c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
    printf("\r\nLED OFF\n\r");
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <lof_command+0x34>)
 8000b98:	f003 fd34 	bl	8004604 <iprintf>
  }else{
    printf("\r\nLED ALREADY OFF\n\r");
  }

}
 8000b9c:	e002      	b.n	8000ba4 <lof_command+0x28>
    printf("\r\nLED ALREADY OFF\n\r");
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <lof_command+0x38>)
 8000ba0:	f003 fd30 	bl	8004604 <iprintf>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000c4 	.word	0x200000c4
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	08005c70 	.word	0x08005c70
 8000bb4:	08005c7c 	.word	0x08005c7c

08000bb8 <test_command>:
void test_command(char *args){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  printf("\r\ntest\n\r");
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <test_command+0x44>)
 8000bc2:	f003 fd1f 	bl	8004604 <iprintf>
  while(*args!='\0'){
 8000bc6:	e00f      	b.n	8000be8 <test_command+0x30>
    if(*args!=','){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b2c      	cmp	r3, #44	; 0x2c
 8000bce:	d005      	beq.n	8000bdc <test_command+0x24>
      putchar(*args);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fd2d 	bl	8004634 <putchar>
 8000bda:	e002      	b.n	8000be2 <test_command+0x2a>
    }else{
      printf("\r\n");
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <test_command+0x48>)
 8000bde:	f003 fdad 	bl	800473c <puts>
    }
    args++;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3301      	adds	r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
  while(*args!='\0'){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1eb      	bne.n	8000bc8 <test_command+0x10>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	08005c90 	.word	0x08005c90
 8000c00:	08005bf0 	.word	0x08005bf0

08000c04 <printDateTime>:
void printDateTime(){
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af04      	add	r7, sp, #16
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480f      	ldr	r0, [pc, #60]	; (8000c50 <printDateTime+0x4c>)
 8000c12:	f002 f884 	bl	8002d1e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480c      	ldr	r0, [pc, #48]	; (8000c50 <printDateTime+0x4c>)
 8000c20:	f002 f960 	bl	8002ee4 <HAL_RTC_GetDate>
	printf("%2.2u/%2.2u/%4.4u %2.2u:%2.2u:%2.2u",date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds);
 8000c24:	7d7b      	ldrb	r3, [r7, #21]
 8000c26:	461c      	mov	r4, r3
 8000c28:	7dbb      	ldrb	r3, [r7, #22]
 8000c2a:	461d      	mov	r5, r3
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000c32:	783a      	ldrb	r2, [r7, #0]
 8000c34:	7879      	ldrb	r1, [r7, #1]
 8000c36:	78b8      	ldrb	r0, [r7, #2]
 8000c38:	9002      	str	r0, [sp, #8]
 8000c3a:	9101      	str	r1, [sp, #4]
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	462a      	mov	r2, r5
 8000c40:	4621      	mov	r1, r4
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <printDateTime+0x50>)
 8000c44:	f003 fcde 	bl	8004604 <iprintf>
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c50:	200000fc 	.word	0x200000fc
 8000c54:	08005c9c 	.word	0x08005c9c

08000c58 <dateSet_command>:
void dateSet_command(char *args){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	//HAL_StatusTypeDef hal;
	int comma_count = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
	char* start_of_num = args;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
	int numbers[3];
	while(*args!='\0'){
 8000c68:	e021      	b.n	8000cae <dateSet_command+0x56>
	    if(*args==','){
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b2c      	cmp	r3, #44	; 0x2c
 8000c70:	d113      	bne.n	8000c9a <dateSet_command+0x42>
	    	*args = '\0';
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
	        numbers[comma_count] = atoi(start_of_num);
 8000c78:	69b8      	ldr	r0, [r7, #24]
 8000c7a:	f003 fc7b 	bl	8004574 <atoi>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	f107 0120 	add.w	r1, r7, #32
 8000c88:	440b      	add	r3, r1
 8000c8a:	f843 2c18 	str.w	r2, [r3, #-24]
	        comma_count += 1;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3301      	adds	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
	        start_of_num = args+1;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3301      	adds	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
	    }
	    if(comma_count>2){
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	dd03      	ble.n	8000ca8 <dateSet_command+0x50>
	    	printf("\r\n error \n\r");
 8000ca0:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <dateSet_command+0xa0>)
 8000ca2:	f003 fcaf 	bl	8004604 <iprintf>
 8000ca6:	e023      	b.n	8000cf0 <dateSet_command+0x98>
	    	return;
	    }
	    args++;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1d9      	bne.n	8000c6a <dateSet_command+0x12>
	  }
	numbers[comma_count] = atoi(start_of_num);
 8000cb6:	69b8      	ldr	r0, [r7, #24]
 8000cb8:	f003 fc5c 	bl	8004574 <atoi>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	f107 0120 	add.w	r1, r7, #32
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f843 2c18 	str.w	r2, [r3, #-24]
	date.WeekDay = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	753b      	strb	r3, [r7, #20]
	date.Month = numbers[0];
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	757b      	strb	r3, [r7, #21]
	date.Date = numbers[1];
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	75bb      	strb	r3, [r7, #22]
	date.Year = numbers[2];
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	75fb      	strb	r3, [r7, #23]
	HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <dateSet_command+0xa4>)
 8000cec:	f002 f873 	bl	8002dd6 <HAL_RTC_SetDate>
	//hal = HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
	//printf("\r\n%x\r\n",hal);
}
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	08005cc0 	.word	0x08005cc0
 8000cfc:	200000fc 	.word	0x200000fc

08000d00 <timeSet_command>:
void timeSet_command(char *args){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	int comma_count = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* start_of_num = args;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	int numbers[3];
	while(*args!='\0'){
 8000d10:	e021      	b.n	8000d56 <timeSet_command+0x56>
		if(*args==','){
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b2c      	cmp	r3, #44	; 0x2c
 8000d18:	d113      	bne.n	8000d42 <timeSet_command+0x42>
			*args = '\0';
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
		    numbers[comma_count] = atoi(start_of_num);
 8000d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d22:	f003 fc27 	bl	8004574 <atoi>
 8000d26:	4602      	mov	r2, r0
 8000d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d30:	440b      	add	r3, r1
 8000d32:	f843 2c28 	str.w	r2, [r3, #-40]
		    comma_count += 1;
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	3301      	adds	r3, #1
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		    start_of_num = args+1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(comma_count>2){
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	dd03      	ble.n	8000d50 <timeSet_command+0x50>
			printf("\r\n error \n\r");
 8000d48:	4814      	ldr	r0, [pc, #80]	; (8000d9c <timeSet_command+0x9c>)
 8000d4a:	f003 fc5b 	bl	8004604 <iprintf>
 8000d4e:	e021      	b.n	8000d94 <timeSet_command+0x94>
		    return;
		}
		args++;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3301      	adds	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1d9      	bne.n	8000d12 <timeSet_command+0x12>
	}
	numbers[comma_count] = atoi(start_of_num);
 8000d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d60:	f003 fc08 	bl	8004574 <atoi>
 8000d64:	4602      	mov	r2, r0
 8000d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d6e:	440b      	add	r3, r1
 8000d70:	f843 2c28 	str.w	r2, [r3, #-40]
	time.Hours = numbers[0];
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	753b      	strb	r3, [r7, #20]
	time.Minutes = numbers[1];
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	757b      	strb	r3, [r7, #21]
	time.Seconds = numbers[2];
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	75bb      	strb	r3, [r7, #22]

	HAL_RTC_SetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <timeSet_command+0xa0>)
 8000d90:	f001 ff28 	bl	8002be4 <HAL_RTC_SetTime>
}
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08005cc0 	.word	0x08005cc0
 8000da0:	200000fc 	.word	0x200000fc

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>

08000dae <enqueue>:
  buf->head=0;
  buf->tail=0;
  restore(mask);
}

int enqueue (queue_t *buf, uint8_t data) {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000dbe:	f7ff fbe3 	bl	8000588 <disable>
 8000dc2:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	425a      	negs	r2, r3
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	f002 021f 	and.w	r2, r2, #31
 8000dd4:	bf58      	it	pl
 8000dd6:	4253      	negpl	r3, r2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6852      	ldr	r2, [r2, #4]
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d014      	beq.n	8000e0a <enqueue+0x5c>
    buf->buffer[buf->head]=data;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4413      	add	r3, r2
 8000de8:	78fa      	ldrb	r2, [r7, #3]
 8000dea:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	425a      	negs	r2, r3
 8000df4:	f003 031f 	and.w	r3, r3, #31
 8000df8:	f002 021f 	and.w	r2, r2, #31
 8000dfc:	bf58      	it	pl
 8000dfe:	4253      	negpl	r3, r2
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6013      	str	r3, [r2, #0]
    return_val=0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	e002      	b.n	8000e10 <enqueue+0x62>
  }
  else {
    return_val=-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e0e:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f7ff fbcc 	bl	80005ae <restore>
  return (return_val);
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000e2c:	f7ff fbac 	bl	8000588 <disable>
 8000e30:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d011      	beq.n	8000e62 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	7a1b      	ldrb	r3, [r3, #8]
 8000e48:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	425a      	negs	r2, r3
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	f002 021f 	and.w	r2, r2, #31
 8000e5a:	bf58      	it	pl
 8000e5c:	4253      	negpl	r3, r2
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 8000e62:	68b8      	ldr	r0, [r7, #8]
 8000e64:	f7ff fba3 	bl	80005ae <restore>
  return(return_val);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	b2db      	uxtb	r3, r3
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <RetargetInit+0x28>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <RetargetInit+0x2c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6898      	ldr	r0, [r3, #8]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f003 fc5d 	bl	800474c <setvbuf>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200001ac 	.word	0x200001ac
 8000ea0:	20000044 	.word	0x20000044

08000ea4 <_isatty>:

int _isatty(int fd) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db04      	blt.n	8000ebc <_isatty+0x18>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	dc01      	bgt.n	8000ebc <_isatty+0x18>
    return 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e005      	b.n	8000ec8 <_isatty+0x24>

  errno = EBADF;
 8000ebc:	f003 fb5e 	bl	800457c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2209      	movs	r2, #9
 8000ec4:	601a      	str	r2, [r3, #0]
  return 0;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_write>:

int _write(int fd, char* ptr, int len) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d002      	beq.n	8000ee8 <_write+0x18>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d111      	bne.n	8000f0c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <_write+0x54>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	f002 fa45 	bl	8003384 <HAL_UART_Transmit>
 8000efa:	4603      	mov	r3, r0
 8000efc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <_write+0x38>
      return len;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	e008      	b.n	8000f1a <_write+0x4a>
    else
      return EIO;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	e006      	b.n	8000f1a <_write+0x4a>
  }
  errno = EBADF;
 8000f0c:	f003 fb36 	bl	800457c <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2209      	movs	r2, #9
 8000f14:	601a      	str	r2, [r3, #0]
  return -1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001ac 	.word	0x200001ac

08000f28 <_close>:

int _close(int fd) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db04      	blt.n	8000f40 <_close+0x18>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	dc01      	bgt.n	8000f40 <_close+0x18>
    return 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e006      	b.n	8000f4e <_close+0x26>

  errno = EBADF;
 8000f40:	f003 fb1c 	bl	800457c <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2209      	movs	r2, #9
 8000f48:	601a      	str	r2, [r3, #0]
  return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000f62:	f003 fb0b 	bl	800457c <__errno>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2209      	movs	r2, #9
 8000f6a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_read>:

int _read(int fd, char* ptr, int len) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d110      	bne.n	8000fac <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <_read+0x4c>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f92:	2201      	movs	r2, #1
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	f002 fa89 	bl	80034ac <HAL_UART_Receive>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <_read+0x30>
      return 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e008      	b.n	8000fba <_read+0x42>
    else
      return EIO;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	e006      	b.n	8000fba <_read+0x42>
  }
  errno = EBADF;
 8000fac:	f003 fae6 	bl	800457c <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2209      	movs	r2, #9
 8000fb4:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001ac 	.word	0x200001ac

08000fc8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db08      	blt.n	8000fea <_fstat+0x22>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dc05      	bgt.n	8000fea <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe4:	605a      	str	r2, [r3, #4]
    return 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e005      	b.n	8000ff6 <_fstat+0x2e>
  }

  errno = EBADF;
 8000fea:	f003 fac7 	bl	800457c <__errno>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2209      	movs	r2, #9
 8000ff2:	601a      	str	r2, [r3, #0]
  return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_MspInit+0x44>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6613      	str	r3, [r2, #96]	; 0x60
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_MspInit+0x44>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_MspInit+0x44>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6593      	str	r3, [r2, #88]	; 0x58
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2234      	movs	r2, #52	; 0x34
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f003 facb 	bl	80045f4 <memset>
  if(hrtc->Instance==RTC)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_RTC_MspInit+0x58>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d117      	bne.n	8001098 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fb9b 	bl	80027b4 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001084:	f7ff fe8e 	bl	8000da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_RTC_MspInit+0x5c>)
 800108a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <HAL_RTC_MspInit+0x5c>)
 8001090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3740      	adds	r7, #64	; 0x40
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40002800 	.word	0x40002800
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b096      	sub	sp, #88	; 0x58
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2234      	movs	r2, #52	; 0x34
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fa93 	bl	80045f4 <memset>
  if(huart->Instance==USART2)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <HAL_UART_MspInit+0xdc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d150      	bne.n	800117a <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fb65 	bl	80027b4 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff fe58 	bl	8000da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_UART_MspInit+0xe0>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	4a23      	ldr	r2, [pc, #140]	; (8001188 <HAL_UART_MspInit+0xe0>)
 80010fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_UART_MspInit+0xe0>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_UART_MspInit+0xe0>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_UART_MspInit+0xe0>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_UART_MspInit+0xe0>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001124:	2304      	movs	r3, #4
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001134:	2307      	movs	r3, #7
 8001136:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f000 fab3 	bl	80016ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001158:	2303      	movs	r3, #3
 800115a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f000 faa1 	bl	80016ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2026      	movs	r0, #38	; 0x26
 8001170:	f000 f9e7 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001174:	2026      	movs	r0, #38	; 0x26
 8001176:	f000 fa00 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3758      	adds	r7, #88	; 0x58
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40004400 	.word	0x40004400
 8001188:	40021000 	.word	0x40021000

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 f8b8 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e6:	480f      	ldr	r0, [pc, #60]	; (8001224 <USART2_IRQHandler+0x44>)
 80011e8:	f002 fa32 	bl	8003650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  uint8_t ch;
  ch = getchar();
 80011ec:	f003 f9cc 	bl	8004588 <getchar>
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  if (enqueue(&rx_queue,ch)) {
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <USART2_IRQHandler+0x48>)
 80011fa:	f7ff fdd8 	bl	8000dae <enqueue>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <USART2_IRQHandler+0x34>
    dequeue(&rx_queue);
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <USART2_IRQHandler+0x48>)
 8001206:	f7ff fe0b 	bl	8000e20 <dequeue>
    enqueue(&rx_queue,ch);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4619      	mov	r1, r3
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <USART2_IRQHandler+0x48>)
 8001210:	f7ff fdcd 	bl	8000dae <enqueue>
  if(buf.head == (MAX_BUF-1)){
    buf.head = 0;
  }else{
    buf.head++;
    }*/
  HAL_UART_IRQHandler(&huart2);
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <USART2_IRQHandler+0x44>)
 8001216:	f002 fa1b 	bl	8003650 <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000128 	.word	0x20000128
 8001228:	200000d4 	.word	0x200000d4

0800122c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001254:	f7ff ffea 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <LoopForever+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f003 f995 	bl	80045ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001282:	f7ff f9c5 	bl	8000610 <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001288:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001294:	08005ec0 	.word	0x08005ec0
  ldr r2, =_sbss
 8001298:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800129c:	200001c4 	.word	0x200001c4

080012a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_2_IRQHandler>

080012a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f93d 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f80e 	bl	80012d4 <HAL_InitTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	e001      	b.n	80012c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c4:	f7ff fe9c 	bl	8001000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_InitTick+0x6c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d023      	beq.n	8001330 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_InitTick+0x70>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_InitTick+0x6c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f949 	bl	8001596 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d809      	bhi.n	8001324 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f000 f913 	bl	8001542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_InitTick+0x74>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e007      	b.n	8001334 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e004      	b.n	8001334 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e001      	b.n	8001334 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000040 	.word	0x20000040
 8001344:	20000038 	.word	0x20000038
 8001348:	2000003c 	.word	0x2000003c

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000040 	.word	0x20000040
 8001370:	200001b0 	.word	0x200001b0

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200001b0 	.word	0x200001b0

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff3e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff31 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d008      	beq.n	80015d8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2204      	movs	r2, #4
 80015ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e022      	b.n	800161e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 020e 	bic.w	r2, r2, #14
 80015e6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f003 021c 	and.w	r2, r3, #28
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d005      	beq.n	800164e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2204      	movs	r2, #4
 8001646:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e029      	b.n	80016a2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 020e 	bic.w	r2, r2, #14
 800165c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021c 	and.w	r2, r3, #28
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
    }
  }
  return status;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ba:	e14e      	b.n	800195a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2101      	movs	r1, #1
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8140 	beq.w	8001954 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d005      	beq.n	80016ec <HAL_GPIO_Init+0x40>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d130      	bne.n	800174e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001722:	2201      	movs	r2, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f003 0201 	and.w	r2, r3, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b03      	cmp	r3, #3
 8001758:	d017      	beq.n	800178a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d123      	bne.n	80017de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	08da      	lsrs	r2, r3, #3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3208      	adds	r2, #8
 80017d8:	6939      	ldr	r1, [r7, #16]
 80017da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0203 	and.w	r2, r3, #3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 809a 	beq.w	8001954 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6613      	str	r3, [r2, #96]	; 0x60
 800182c:	4b52      	ldr	r3, [pc, #328]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001838:	4a50      	ldr	r2, [pc, #320]	; (800197c <HAL_GPIO_Init+0x2d0>)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	220f      	movs	r2, #15
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001862:	d013      	beq.n	800188c <HAL_GPIO_Init+0x1e0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a46      	ldr	r2, [pc, #280]	; (8001980 <HAL_GPIO_Init+0x2d4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00d      	beq.n	8001888 <HAL_GPIO_Init+0x1dc>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a45      	ldr	r2, [pc, #276]	; (8001984 <HAL_GPIO_Init+0x2d8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d007      	beq.n	8001884 <HAL_GPIO_Init+0x1d8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a44      	ldr	r2, [pc, #272]	; (8001988 <HAL_GPIO_Init+0x2dc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_GPIO_Init+0x1d4>
 800187c:	2303      	movs	r3, #3
 800187e:	e006      	b.n	800188e <HAL_GPIO_Init+0x1e2>
 8001880:	2307      	movs	r3, #7
 8001882:	e004      	b.n	800188e <HAL_GPIO_Init+0x1e2>
 8001884:	2302      	movs	r3, #2
 8001886:	e002      	b.n	800188e <HAL_GPIO_Init+0x1e2>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_GPIO_Init+0x1e2>
 800188c:	2300      	movs	r3, #0
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	f002 0203 	and.w	r2, r2, #3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4093      	lsls	r3, r2
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189e:	4937      	ldr	r1, [pc, #220]	; (800197c <HAL_GPIO_Init+0x2d0>)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ac:	4b37      	ldr	r3, [pc, #220]	; (800198c <HAL_GPIO_Init+0x2e0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d0:	4a2e      	ldr	r2, [pc, #184]	; (800198c <HAL_GPIO_Init+0x2e0>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <HAL_GPIO_Init+0x2e0>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_GPIO_Init+0x2e0>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_GPIO_Init+0x2e0>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_GPIO_Init+0x2e0>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_GPIO_Init+0x2e0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_GPIO_Init+0x2e0>)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f aea9 	bne.w	80016bc <HAL_GPIO_Init+0x10>
  }
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	371c      	adds	r7, #28
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	48000400 	.word	0x48000400
 8001984:	48000800 	.word	0x48000800
 8001988:	48000c00 	.word	0x48000c00
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
 800199c:	4613      	mov	r3, r2
 800199e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	041a      	lsls	r2, r3, #16
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43d9      	mvns	r1, r3
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	400b      	ands	r3, r1
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40007000 	.word	0x40007000

08001a14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40007000 	.word	0x40007000

08001a30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a3e:	d130      	bne.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a4c:	d038      	beq.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2232      	movs	r2, #50	; 0x32
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	3301      	adds	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a74:	e002      	b.n	8001a7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a88:	d102      	bne.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f2      	bne.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9c:	d110      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e00f      	b.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aae:	d007      	beq.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001abe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	20000038 	.word	0x20000038
 8001ad8:	431bde83 	.word	0x431bde83

08001adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f000 bc56 	b.w	800239c <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af0:	4ba1      	ldr	r3, [pc, #644]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001afa:	4b9f      	ldr	r3, [pc, #636]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80e6 	beq.w	8001cde <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4c>
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	f040 808d 	bne.w	8001c3a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f040 8089 	bne.w	8001c3a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b28:	4b93      	ldr	r3, [pc, #588]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_RCC_OscConfig+0x66>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f000 bc2d 	b.w	800239c <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b46:	4b8c      	ldr	r3, [pc, #560]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <HAL_RCC_OscConfig+0x80>
 8001b52:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b5a:	e005      	b.n	8001b68 <HAL_RCC_OscConfig+0x8c>
 8001b5c:	4b86      	ldr	r3, [pc, #536]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d224      	bcs.n	8001bb6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fdbf 	bl	80026f4 <RCC_SetFlashLatencyFromMSIRange>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f000 bc0d 	b.w	800239c <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b82:	4b7d      	ldr	r3, [pc, #500]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7c      	ldr	r2, [pc, #496]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	4977      	ldr	r1, [pc, #476]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba0:	4b75      	ldr	r3, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	4972      	ldr	r1, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	e025      	b.n	8001c02 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb6:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6f      	ldr	r2, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	496a      	ldr	r1, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	4965      	ldr	r1, [pc, #404]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fd7e 	bl	80026f4 <RCC_SetFlashLatencyFromMSIRange>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e3cc      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c02:	f000 fcb3 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	495a      	ldr	r1, [pc, #360]	; (8001d7c <HAL_RCC_OscConfig+0x2a0>)
 8001c14:	5ccb      	ldrb	r3, [r1, r3]
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <HAL_RCC_OscConfig+0x2a4>)
 8001c20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c22:	4b58      	ldr	r3, [pc, #352]	; (8001d84 <HAL_RCC_OscConfig+0x2a8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fb54 	bl	80012d4 <HAL_InitTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d052      	beq.n	8001cdc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	e3b0      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d032      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c42:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fb91 	bl	8001374 <HAL_GetTick>
 8001c52:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c56:	f7ff fb8d 	bl	8001374 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e399      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a3f      	ldr	r2, [pc, #252]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c7a:	f043 0308 	orr.w	r3, r3, #8
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	493a      	ldr	r1, [pc, #232]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c92:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	4935      	ldr	r1, [pc, #212]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
 8001ca6:	e01a      	b.n	8001cde <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fb5e 	bl	8001374 <HAL_GetTick>
 8001cb8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb5a 	bl	8001374 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e366      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1e0>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d073      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_OscConfig+0x220>
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d10e      	bne.n	8001d14 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d063      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x2f4>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d15f      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e343      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x250>
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0x28c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x274>
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0x28c>
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_RCC_OscConfig+0x29c>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01b      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff fb00 	bl	8001374 <HAL_GetTick>
 8001d74:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e010      	b.n	8001d9a <HAL_RCC_OscConfig+0x2be>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08005ccc 	.word	0x08005ccc
 8001d80:	20000038 	.word	0x20000038
 8001d84:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff faf4 	bl	8001374 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e300      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9a:	4ba0      	ldr	r3, [pc, #640]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x2ac>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fae4 	bl	8001374 <HAL_GetTick>
 8001dac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fae0 	bl	8001374 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e2ec      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc2:	4b96      	ldr	r3, [pc, #600]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2d4>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d060      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_OscConfig+0x314>
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d119      	bne.n	8001e1e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d116      	bne.n	8001e1e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	4b8a      	ldr	r3, [pc, #552]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_OscConfig+0x32c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e2c9      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b84      	ldr	r3, [pc, #528]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	4981      	ldr	r1, [pc, #516]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1c:	e040      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d023      	beq.n	8001e6e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e26:	4b7d      	ldr	r3, [pc, #500]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7c      	ldr	r2, [pc, #496]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7ff fa9f 	bl	8001374 <HAL_GetTick>
 8001e36:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fa9b 	bl	8001374 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e2a7      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4c:	4b73      	ldr	r3, [pc, #460]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b70      	ldr	r3, [pc, #448]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	496d      	ldr	r1, [pc, #436]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
 8001e6c:	e018      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6e:	4b6b      	ldr	r3, [pc, #428]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fa7b 	bl	8001374 <HAL_GetTick>
 8001e7e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff fa77 	bl	8001374 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e283      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e94:	4b61      	ldr	r3, [pc, #388]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d07f      	beq.n	8001fac <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d05f      	beq.n	8001f74 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eba:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d037      	beq.n	8001f3a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e25c      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001eec:	4b4b      	ldr	r3, [pc, #300]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef2:	4a4a      	ldr	r2, [pc, #296]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001efc:	f7ff fa3a 	bl	8001374 <HAL_GetTick>
 8001f00:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7ff fa36 	bl	8001374 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b11      	cmp	r3, #17
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e242      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ef      	bne.n	8001f04 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001f24:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	f023 0210 	bic.w	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	493a      	ldr	r1, [pc, #232]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f40:	4a36      	ldr	r2, [pc, #216]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fa13 	bl	8001374 <HAL_GetTick>
 8001f4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff fa0f 	bl	8001374 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b11      	cmp	r3, #17
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e21b      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0ef      	beq.n	8001f52 <HAL_RCC_OscConfig+0x476>
 8001f72:	e01b      	b.n	8001fac <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7a:	4a28      	ldr	r2, [pc, #160]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f9f6 	bl	8001374 <HAL_GetTick>
 8001f88:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f9f2 	bl	8001374 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1fe      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ef      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80c1 	beq.w	800213c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10e      	bne.n	8001fea <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a12      	ldr	r2, [pc, #72]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_RCC_OscConfig+0x540>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_RCC_OscConfig+0x544>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d11c      	bne.n	8002030 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_OscConfig+0x544>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_RCC_OscConfig+0x544>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7ff f9b7 	bl	8001374 <HAL_GetTick>
 8002006:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002008:	e00c      	b.n	8002024 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7ff f9b3 	bl	8001374 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d905      	bls.n	8002024 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1bf      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	4bb1      	ldr	r3, [pc, #708]	; (80022ec <HAL_RCC_OscConfig+0x810>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ec      	beq.n	800200a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02c      	beq.n	8002096 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800203c:	4bac      	ldr	r3, [pc, #688]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	49a8      	ldr	r1, [pc, #672]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002062:	4ba3      	ldr	r3, [pc, #652]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	4aa1      	ldr	r2, [pc, #644]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002072:	4b9f      	ldr	r3, [pc, #636]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	4a9d      	ldr	r2, [pc, #628]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002082:	e018      	b.n	80020b6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002084:	4b9a      	ldr	r3, [pc, #616]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a99      	ldr	r2, [pc, #612]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002094:	e00f      	b.n	80020b6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002096:	4b96      	ldr	r3, [pc, #600]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	4a94      	ldr	r2, [pc, #592]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020a6:	4b92      	ldr	r3, [pc, #584]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	4a90      	ldr	r2, [pc, #576]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80020ae:	f023 0304 	bic.w	r3, r3, #4
 80020b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7ff f959 	bl	8001374 <HAL_GetTick>
 80020c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff f955 	bl	8001374 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e15f      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020dc:	4b84      	ldr	r3, [pc, #528]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ed      	beq.n	80020c6 <HAL_RCC_OscConfig+0x5ea>
 80020ea:	e01d      	b.n	8002128 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7ff f942 	bl	8001374 <HAL_GetTick>
 80020f0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7ff f93e 	bl	8001374 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e148      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800210a:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ed      	bne.n	80020f4 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002118:	4b75      	ldr	r3, [pc, #468]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a74      	ldr	r2, [pc, #464]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a6e      	ldr	r2, [pc, #440]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d03c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01c      	beq.n	800218a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002150:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002156:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7ff f908 	bl	8001374 <HAL_GetTick>
 8002164:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002168:	f7ff f904 	bl	8001374 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e110      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800217c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCC_OscConfig+0x68c>
 8002188:	e01b      	b.n	80021c2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800218a:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800218c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7ff f8eb 	bl	8001374 <HAL_GetTick>
 800219e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a2:	f7ff f8e7 	bl	8001374 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0f3      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021b4:	4b4e      	ldr	r3, [pc, #312]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80021b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ef      	bne.n	80021a2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80e7 	beq.w	800239a <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	f040 80b7 	bne.w	8002344 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021d6:	4b46      	ldr	r3, [pc, #280]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0203 	and.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d124      	bne.n	8002234 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f4:	3b01      	subs	r3, #1
 80021f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d11b      	bne.n	8002234 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d113      	bne.n	8002234 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	3b01      	subs	r3, #1
 800221a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d109      	bne.n	8002234 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	3b01      	subs	r3, #1
 800222e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d061      	beq.n	80022f8 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d056      	beq.n	80022e8 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002244:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002246:	f7ff f895 	bl	8001374 <HAL_GetTick>
 800224a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff f891 	bl	8001374 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e09d      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226c:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_RCC_OscConfig+0x818>)
 8002272:	4013      	ands	r3, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800227c:	3a01      	subs	r2, #1
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002286:	0212      	lsls	r2, r2, #8
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800228e:	0852      	lsrs	r2, r2, #1
 8002290:	3a01      	subs	r2, #1
 8002292:	0552      	lsls	r2, r2, #21
 8002294:	4311      	orrs	r1, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800229a:	0852      	lsrs	r2, r2, #1
 800229c:	3a01      	subs	r2, #1
 800229e:	0652      	lsls	r2, r2, #25
 80022a0:	430a      	orrs	r2, r1
 80022a2:	4913      	ldr	r1, [pc, #76]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c0:	f7ff f858 	bl	8001374 <HAL_GetTick>
 80022c4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff f854 	bl	8001374 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e060      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_OscConfig+0x814>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e6:	e058      	b.n	800239a <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e057      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
 80022ec:	40007000 	.word	0x40007000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f8:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d14a      	bne.n	800239a <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a26      	ldr	r2, [pc, #152]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 800230a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800231c:	f7ff f82a 	bl	8001374 <HAL_GetTick>
 8002320:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7ff f826 	bl	8001374 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e032      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x848>
 8002342:	e02a      	b.n	800239a <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d025      	beq.n	8002396 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 8002350:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002354:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 800235c:	f023 0303 	bic.w	r3, r3, #3
 8002360:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 8002368:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800236c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7ff f801 	bl	8001374 <HAL_GetTick>
 8002372:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe fffd 	bl	8001374 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e009      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_OscConfig+0x8c8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x89a>
 8002394:	e001      	b.n	800239a <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3728      	adds	r7, #40	; 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0c8      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b66      	ldr	r3, [pc, #408]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4961      	ldr	r1, [pc, #388]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b0      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d04c      	beq.n	8002492 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002400:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d121      	bne.n	8002450 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e09e      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d107      	bne.n	8002428 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d115      	bne.n	8002450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e092      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002430:	4b4a      	ldr	r3, [pc, #296]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e086      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002440:	4b46      	ldr	r3, [pc, #280]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e07e      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 0203 	bic.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	493f      	ldr	r1, [pc, #252]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002462:	f7fe ff87 	bl	8001374 <HAL_GetTick>
 8002466:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002468:	e00a      	b.n	8002480 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246a:	f7fe ff83 	bl	8001374 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e066      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 020c 	and.w	r2, r3, #12
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	429a      	cmp	r2, r3
 8002490:	d1eb      	bne.n	800246a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	492c      	ldr	r1, [pc, #176]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d210      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4924      	ldr	r1, [pc, #144]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e036      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4918      	ldr	r1, [pc, #96]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4910      	ldr	r1, [pc, #64]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251e:	f000 f825 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490c      	ldr	r1, [pc, #48]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fec6 	bl	80012d4 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	72fb      	strb	r3, [r7, #11]

  return status;
 800254c:	7afb      	ldrb	r3, [r7, #11]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000
 800255c:	40021000 	.word	0x40021000
 8002560:	08005ccc 	.word	0x08005ccc
 8002564:	20000038 	.word	0x20000038
 8002568:	2000003c 	.word	0x2000003c

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d121      	bne.n	80025de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d11e      	bne.n	80025de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a0:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e005      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025c8:	4a2b      	ldr	r2, [pc, #172]	; (8002678 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d102      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_GetSysClockFreq+0x110>)
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	e004      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_RCC_GetSysClockFreq+0x114>)
 80025f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d134      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0xa6>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d003      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0xac>
 8002610:	e005      	b.n	800261e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_RCC_GetSysClockFreq+0x110>)
 8002614:	617b      	str	r3, [r7, #20]
      break;
 8002616:	e005      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_GetSysClockFreq+0x114>)
 800261a:	617b      	str	r3, [r7, #20]
      break;
 800261c:	e002      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	617b      	str	r3, [r7, #20]
      break;
 8002622:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	3301      	adds	r3, #1
 8002630:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	fb02 f203 	mul.w	r2, r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	0e5b      	lsrs	r3, r3, #25
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	3301      	adds	r3, #1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002664:	69bb      	ldr	r3, [r7, #24]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	08005ce4 	.word	0x08005ce4
 800267c:	00f42400 	.word	0x00f42400
 8002680:	007a1200 	.word	0x007a1200

08002684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_RCC_GetHCLKFreq+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000038 	.word	0x20000038

0800269c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a0:	f7ff fff0 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08005cdc 	.word	0x08005cdc

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026cc:	f7ff ffda 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0adb      	lsrs	r3, r3, #11
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4904      	ldr	r1, [pc, #16]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08005cdc 	.word	0x08005cdc

080026f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800270c:	f7ff f982 	bl	8001a14 <HAL_PWREx_GetVoltageRange>
 8002710:	6178      	str	r0, [r7, #20]
 8002712:	e014      	b.n	800273e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	4a24      	ldr	r2, [pc, #144]	; (80027ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	6593      	str	r3, [r2, #88]	; 0x58
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800272c:	f7ff f972 	bl	8001a14 <HAL_PWREx_GetVoltageRange>
 8002730:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002744:	d10b      	bne.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d919      	bls.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2ba0      	cmp	r3, #160	; 0xa0
 8002750:	d902      	bls.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002752:	2302      	movs	r3, #2
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	e013      	b.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002758:	2301      	movs	r3, #1
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	e010      	b.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d902      	bls.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002764:	2303      	movs	r3, #3
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e00a      	b.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d102      	bne.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002770:	2302      	movs	r3, #2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	e004      	b.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b70      	cmp	r3, #112	; 0x70
 800277a:	d101      	bne.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800277c:	2301      	movs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 0207 	bic.w	r2, r3, #7
 8002788:	4909      	ldr	r1, [pc, #36]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40022000 	.word	0x40022000

080027b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027bc:	2300      	movs	r3, #0
 80027be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c0:	2300      	movs	r3, #0
 80027c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 809e 	beq.w	800290e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	4b40      	ldr	r3, [pc, #256]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	4a3f      	ldr	r2, [pc, #252]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6593      	str	r3, [r2, #88]	; 0x58
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002804:	2301      	movs	r3, #1
 8002806:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002808:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a39      	ldr	r2, [pc, #228]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800280e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002812:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002814:	f7fe fdae 	bl	8001374 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800281a:	e009      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281c:	f7fe fdaa 	bl	8001374 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d902      	bls.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	74fb      	strb	r3, [r7, #19]
        break;
 800282e:	e005      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002830:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ef      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d15a      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01e      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	429a      	cmp	r2, r3
 800285c:	d019      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002868:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800286a:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800288a:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d016      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fd6a 	bl	8001374 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	e00b      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe fd66 	bl	8001374 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d902      	bls.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	74fb      	strb	r3, [r7, #19]
            break;
 80028ba:	e006      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0ec      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4904      	ldr	r1, [pc, #16]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028e6:	e009      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
 80028ec:	e006      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x148>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fc:	7c7b      	ldrb	r3, [r7, #17]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a6d      	ldr	r2, [pc, #436]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291a:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f023 0203 	bic.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4964      	ldr	r1, [pc, #400]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800293c:	4b5f      	ldr	r3, [pc, #380]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f023 020c 	bic.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	495c      	ldr	r1, [pc, #368]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295e:	4b57      	ldr	r3, [pc, #348]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4953      	ldr	r1, [pc, #332]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002980:	4b4e      	ldr	r3, [pc, #312]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	494b      	ldr	r1, [pc, #300]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029a2:	4b46      	ldr	r3, [pc, #280]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4942      	ldr	r1, [pc, #264]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	493a      	ldr	r1, [pc, #232]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029e6:	4b35      	ldr	r3, [pc, #212]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	4931      	ldr	r1, [pc, #196]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	4929      	ldr	r1, [pc, #164]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4920      	ldr	r1, [pc, #128]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	4918      	ldr	r1, [pc, #96]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a12      	ldr	r2, [pc, #72]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a76:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	490a      	ldr	r1, [pc, #40]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ab0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d073      	beq.n	8002bda <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe fa9e 	bl	8001048 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002b12:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	22ca      	movs	r2, #202	; 0xca
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2253      	movs	r2, #83	; 0x53
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fb2d 	bl	800318c <RTC_EnterInitMode>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d14e      	bne.n	8002bda <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4e:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6999      	ldr	r1, [r3, #24]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6912      	ldr	r2, [r2, #16]
 8002b76:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6919      	ldr	r1, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fb33 	bl	80031f8 <RTC_ExitInitMode>
 8002b92:	4603      	mov	r3, r0
 8002b94:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d11e      	bne.n	8002bda <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002baa:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6999      	ldr	r1, [r3, #24]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_RTC_SetTime+0x1a>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e08b      	b.n	8002d16 <HAL_RTC_SetTime+0x132>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	22ca      	movs	r2, #202	; 0xca
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2253      	movs	r2, #83	; 0x53
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fab4 	bl	800318c <RTC_EnterInitMode>
 8002c24:	4603      	mov	r3, r0
 8002c26:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d163      	bne.n	8002cf6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d126      	bne.n	8002c82 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fb11 	bl	8003274 <RTC_ByteToBcd2>
 8002c52:	4603      	mov	r3, r0
 8002c54:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fb0a 	bl	8003274 <RTC_ByteToBcd2>
 8002c60:	4603      	mov	r3, r0
 8002c62:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c64:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	789b      	ldrb	r3, [r3, #2]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fb02 	bl	8003274 <RTC_ByteToBcd2>
 8002c70:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c72:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	78db      	ldrb	r3, [r3, #3]
 8002c7a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e018      	b.n	8002cb4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2200      	movs	r2, #0
 8002c94:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ca2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ca8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	78db      	ldrb	r3, [r3, #3]
 8002cae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cc2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd2:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6999      	ldr	r1, [r3, #24]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fa83 	bl	80031f8 <RTC_ExitInitMode>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}

08002d1e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d50:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	0d9b      	lsrs	r3, r3, #22
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11a      	bne.n	8002dcc <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fa8a 	bl	80032b4 <RTC_Bcd2ToByte>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fa81 	bl	80032b4 <RTC_Bcd2ToByte>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	789b      	ldrb	r3, [r3, #2]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fa78 	bl	80032b4 <RTC_Bcd2ToByte>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dd6:	b590      	push	{r4, r7, lr}
 8002dd8:	b087      	sub	sp, #28
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_RTC_SetDate+0x1a>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e075      	b.n	8002edc <HAL_RTC_SetDate+0x106>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10e      	bne.n	8002e24 <HAL_RTC_SetDate+0x4e>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	785b      	ldrb	r3, [r3, #1]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	f023 0310 	bic.w	r3, r3, #16
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	330a      	adds	r3, #10
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d11c      	bne.n	8002e64 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	78db      	ldrb	r3, [r3, #3]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fa20 	bl	8003274 <RTC_ByteToBcd2>
 8002e34:	4603      	mov	r3, r0
 8002e36:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	785b      	ldrb	r3, [r3, #1]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fa19 	bl	8003274 <RTC_ByteToBcd2>
 8002e42:	4603      	mov	r3, r0
 8002e44:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e46:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	789b      	ldrb	r3, [r3, #2]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa11 	bl	8003274 <RTC_ByteToBcd2>
 8002e52:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e54:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e00e      	b.n	8002e82 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	78db      	ldrb	r3, [r3, #3]
 8002e68:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	785b      	ldrb	r3, [r3, #1]
 8002e6e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e70:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e76:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	22ca      	movs	r2, #202	; 0xca
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2253      	movs	r2, #83	; 0x53
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f97a 	bl	800318c <RTC_EnterInitMode>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002eac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002eb0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f9a0 	bl	80031f8 <RTC_ExitInitMode>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	22ff      	movs	r2, #255	; 0xff
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd90      	pop	{r4, r7, pc}

08002ee4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002efa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002efe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	0b5b      	lsrs	r3, r3, #13
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11a      	bne.n	8002f74 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	78db      	ldrb	r3, [r3, #3]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f9b6 	bl	80032b4 <RTC_Bcd2ToByte>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f9ad 	bl	80032b4 <RTC_Bcd2ToByte>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	789b      	ldrb	r3, [r3, #2]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f9a4 	bl	80032b4 <RTC_Bcd2ToByte>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002f7e:	b590      	push	{r4, r7, lr}
 8002f80:	b087      	sub	sp, #28
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_RTC_SetAlarm+0x1a>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0cf      	b.n	8003138 <HAL_RTC_SetAlarm+0x1ba>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d137      	bne.n	800301e <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f954 	bl	8003274 <RTC_ByteToBcd2>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f94d 	bl	8003274 <RTC_ByteToBcd2>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002fde:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	789b      	ldrb	r3, [r3, #2]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f945 	bl	8003274 <RTC_ByteToBcd2>
 8002fea:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002fec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	78db      	ldrb	r3, [r3, #3]
 8002ff4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002ff6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f937 	bl	8003274 <RTC_ByteToBcd2>
 8003006:	4603      	mov	r3, r0
 8003008:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800300a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003012:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	e023      	b.n	8003066 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800303e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003044:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	78db      	ldrb	r3, [r3, #3]
 800304a:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800304c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003054:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003056:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800305c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	22ca      	movs	r2, #202	; 0xca
 8003078:	625a      	str	r2, [r3, #36]	; 0x24
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2253      	movs	r2, #83	; 0x53
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d124      	bne.n	80030d6 <HAL_RTC_SetAlarm+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800309a:	619a      	str	r2, [r3, #24]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2201      	movs	r2, #1
 80030a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030b2:	619a      	str	r2, [r3, #24]
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d2:	619a      	str	r2, [r3, #24]
 80030d4:	e023      	b.n	800311e <HAL_RTC_SetAlarm+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030e4:	619a      	str	r2, [r3, #24]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2202      	movs	r2, #2
 80030ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fc:	619a      	str	r2, [r3, #24]
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	22ff      	movs	r2, #255	; 0xff
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003156:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8003158:	f7fe f90c 	bl	8001374 <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800315e:	e009      	b.n	8003174 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003160:	f7fe f908 	bl	8001374 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800316e:	d901      	bls.n	8003174 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e007      	b.n	8003184 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ee      	beq.n	8003160 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d123      	bne.n	80031ee <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80031b6:	f7fe f8dd 	bl	8001374 <HAL_GetTick>
 80031ba:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031bc:	e00d      	b.n	80031da <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80031be:	f7fe f8d9 	bl	8001374 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031cc:	d905      	bls.n	80031da <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d102      	bne.n	80031ee <RTC_EnterInitMode+0x62>
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d1e7      	bne.n	80031be <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <RTC_ExitInitMode+0x78>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <RTC_ExitInitMode+0x78>)
 800320a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800320e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <RTC_ExitInitMode+0x78>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10c      	bne.n	8003236 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff8f 	bl	8003140 <HAL_RTC_WaitForSynchro>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01e      	beq.n	8003266 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e017      	b.n	8003266 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <RTC_ExitInitMode+0x78>)
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <RTC_ExitInitMode+0x78>)
 800323c:	f023 0320 	bic.w	r3, r3, #32
 8003240:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ff7c 	bl	8003140 <HAL_RTC_WaitForSynchro>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2203      	movs	r2, #3
 8003252:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <RTC_ExitInitMode+0x78>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4a04      	ldr	r2, [pc, #16]	; (8003270 <RTC_ExitInitMode+0x78>)
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40002800 	.word	0x40002800

08003274 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003286:	e005      	b.n	8003294 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	3b0a      	subs	r3, #10
 8003292:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	2b09      	cmp	r3, #9
 8003298:	d8f6      	bhi.n	8003288 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	b2db      	uxtb	r3, r3
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	4413      	add	r3, r2
 80032da:	b2db      	uxtb	r3, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e040      	b.n	800337c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fecc 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fc94 	bl	8003c54 <UART_SetConfig>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e022      	b.n	800337c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 febc 	bl	80040bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 ff43 	bl	8004200 <UART_CheckIdleState>
 800337a:	4603      	mov	r3, r0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003398:	2b20      	cmp	r3, #32
 800339a:	f040 8082 	bne.w	80034a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_UART_Transmit+0x26>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e07a      	b.n	80034a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_UART_Transmit+0x38>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e073      	b.n	80034a4 <HAL_UART_Transmit+0x120>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2221      	movs	r2, #33	; 0x21
 80033d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033d2:	f7fd ffcf 	bl	8001374 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f0:	d108      	bne.n	8003404 <HAL_UART_Transmit+0x80>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d104      	bne.n	8003404 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	e003      	b.n	800340c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003414:	e02d      	b.n	8003472 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 ff36 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e039      	b.n	80034a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	881a      	ldrh	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003442:	b292      	uxth	r2, r2
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	3302      	adds	r3, #2
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	e008      	b.n	8003460 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	b292      	uxth	r2, r2
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3301      	adds	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1cb      	bne.n	8003416 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	2140      	movs	r1, #64	; 0x40
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 ff02 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e005      	b.n	80034a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	f040 80bf 	bne.w	8003644 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_Receive+0x26>
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0b7      	b.n	8003646 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Receive+0x38>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e0b0      	b.n	8003646 <HAL_UART_Receive+0x19a>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2222      	movs	r2, #34	; 0x22
 80034f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003500:	f7fd ff38 	bl	8001374 <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351e:	d10e      	bne.n	800353e <HAL_UART_Receive+0x92>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_UART_Receive+0x88>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800352e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003532:	e02d      	b.n	8003590 <HAL_UART_Receive+0xe4>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800353c:	e028      	b.n	8003590 <HAL_UART_Receive+0xe4>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_UART_Receive+0xb6>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <HAL_UART_Receive+0xac>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003556:	e01b      	b.n	8003590 <HAL_UART_Receive+0xe4>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	227f      	movs	r2, #127	; 0x7f
 800355c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003560:	e016      	b.n	8003590 <HAL_UART_Receive+0xe4>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800356a:	d10d      	bne.n	8003588 <HAL_UART_Receive+0xdc>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <HAL_UART_Receive+0xd2>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	227f      	movs	r2, #127	; 0x7f
 8003578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800357c:	e008      	b.n	8003590 <HAL_UART_Receive+0xe4>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	223f      	movs	r2, #63	; 0x3f
 8003582:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003586:	e003      	b.n	8003590 <HAL_UART_Receive+0xe4>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003596:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d108      	bne.n	80035b4 <HAL_UART_Receive+0x108>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e003      	b.n	80035bc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80035c4:	e033      	b.n	800362e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2120      	movs	r1, #32
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fe5e 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e032      	b.n	8003646 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	8a7b      	ldrh	r3, [r7, #18]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	3302      	adds	r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e00d      	b.n	800361c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003606:	b29b      	uxth	r3, r3
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8a7b      	ldrh	r3, [r7, #18]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4013      	ands	r3, r2
 8003610:	b2da      	uxtb	r2, r3
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1c5      	bne.n	80035c6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b0ba      	sub	sp, #232	; 0xe8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003676:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800367a:	f640 030f 	movw	r3, #2063	; 0x80f
 800367e:	4013      	ands	r3, r2
 8003680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d115      	bne.n	80036b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800368c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00f      	beq.n	80036b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 82a6 	beq.w	8003bfa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
      }
      return;
 80036b6:	e2a0      	b.n	8003bfa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80036b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8117 	beq.w	80038f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036d2:	4b85      	ldr	r3, [pc, #532]	; (80038e8 <HAL_UART_IRQHandler+0x298>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 810a 	beq.w	80038f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d011      	beq.n	800370c <HAL_UART_IRQHandler+0xbc>
 80036e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2201      	movs	r2, #1
 80036fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d011      	beq.n	800373c <HAL_UART_IRQHandler+0xec>
 8003718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2202      	movs	r2, #2
 800372a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d011      	beq.n	800376c <HAL_UART_IRQHandler+0x11c>
 8003748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2204      	movs	r2, #4
 800375a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003762:	f043 0202 	orr.w	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d017      	beq.n	80037a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003788:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2208      	movs	r2, #8
 8003796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379e:	f043 0208 	orr.w	r2, r3, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d012      	beq.n	80037da <HAL_UART_IRQHandler+0x18a>
 80037b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 820c 	beq.w	8003bfe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d005      	beq.n	8003832 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800382a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800382e:	2b00      	cmp	r3, #0
 8003830:	d04f      	beq.n	80038d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fdf1 	bl	800441a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d141      	bne.n	80038ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3308      	adds	r3, #8
 800384c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800385c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3308      	adds	r3, #8
 800386e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800387e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800388a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1d9      	bne.n	8003846 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a13      	ldr	r2, [pc, #76]	; (80038ec <HAL_UART_IRQHandler+0x29c>)
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd febf 	bl	800162a <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d017      	beq.n	80038e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00f      	b.n	80038e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f9b0 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00b      	b.n	80038e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f9ac 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e007      	b.n	80038e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f9a8 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80038e0:	e18d      	b.n	8003bfe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	bf00      	nop
    return;
 80038e4:	e18b      	b.n	8003bfe <HAL_UART_IRQHandler+0x5ae>
 80038e6:	bf00      	nop
 80038e8:	04000120 	.word	0x04000120
 80038ec:	080044e1 	.word	0x080044e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	f040 8146 	bne.w	8003b86 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 813f 	beq.w	8003b86 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8138 	beq.w	8003b86 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2210      	movs	r2, #16
 800391c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	f040 80b4 	bne.w	8003a96 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800393a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 815f 	beq.w	8003c02 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800394a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800394e:	429a      	cmp	r2, r3
 8003950:	f080 8157 	bcs.w	8003c02 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800395a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 8085 	bne.w	8003a7a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800398c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800399a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800399e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1da      	bne.n	8003970 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3308      	adds	r3, #8
 80039c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3308      	adds	r3, #8
 80039da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e1      	bne.n	80039ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e3      	bne.n	80039f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e4      	bne.n	8003a3a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd fd9a 	bl	80015ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8d4 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a94:	e0b5      	b.n	8003c02 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80a7 	beq.w	8003c06 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80a2 	beq.w	8003c06 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e4      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	623b      	str	r3, [r7, #32]
   return(result);
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b1c:	633a      	str	r2, [r7, #48]	; 0x30
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e3      	bne.n	8003af8 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0310 	bic.w	r3, r3, #16
 8003b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	617b      	str	r3, [r7, #20]
   return(result);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e4      	bne.n	8003b42 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f85c 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b84:	e03f      	b.n	8003c06 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00e      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x560>
 8003b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fcd9 	bl	8004560 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bae:	e02d      	b.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01c      	beq.n	8003c0a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
    }
    return;
 8003bd8:	e017      	b.n	8003c0a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d012      	beq.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
 8003be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fc8a 	bl	800450c <UART_EndTransmit_IT>
    return;
 8003bf8:	e008      	b.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003c0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c0c:	37e8      	adds	r7, #232	; 0xe8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop

08003c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4baa      	ldr	r3, [pc, #680]	; (8003f28 <UART_SetConfig+0x2d4>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	69f9      	ldr	r1, [r7, #28]
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a9f      	ldr	r2, [pc, #636]	; (8003f2c <UART_SetConfig+0x2d8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a96      	ldr	r2, [pc, #600]	; (8003f30 <UART_SetConfig+0x2dc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d121      	bne.n	8003d1e <UART_SetConfig+0xca>
 8003cda:	4b96      	ldr	r3, [pc, #600]	; (8003f34 <UART_SetConfig+0x2e0>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d817      	bhi.n	8003d18 <UART_SetConfig+0xc4>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0x9c>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d01 	.word	0x08003d01
 8003cf4:	08003d0d 	.word	0x08003d0d
 8003cf8:	08003d07 	.word	0x08003d07
 8003cfc:	08003d13 	.word	0x08003d13
 8003d00:	2301      	movs	r3, #1
 8003d02:	76fb      	strb	r3, [r7, #27]
 8003d04:	e096      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d06:	2302      	movs	r3, #2
 8003d08:	76fb      	strb	r3, [r7, #27]
 8003d0a:	e093      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	76fb      	strb	r3, [r7, #27]
 8003d10:	e090      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d12:	2308      	movs	r3, #8
 8003d14:	76fb      	strb	r3, [r7, #27]
 8003d16:	e08d      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	76fb      	strb	r3, [r7, #27]
 8003d1c:	e08a      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a85      	ldr	r2, [pc, #532]	; (8003f38 <UART_SetConfig+0x2e4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d132      	bne.n	8003d8e <UART_SetConfig+0x13a>
 8003d28:	4b82      	ldr	r3, [pc, #520]	; (8003f34 <UART_SetConfig+0x2e0>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d828      	bhi.n	8003d88 <UART_SetConfig+0x134>
 8003d36:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <UART_SetConfig+0xe8>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d71 	.word	0x08003d71
 8003d40:	08003d89 	.word	0x08003d89
 8003d44:	08003d89 	.word	0x08003d89
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d7d 	.word	0x08003d7d
 8003d50:	08003d89 	.word	0x08003d89
 8003d54:	08003d89 	.word	0x08003d89
 8003d58:	08003d89 	.word	0x08003d89
 8003d5c:	08003d77 	.word	0x08003d77
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d89 	.word	0x08003d89
 8003d6c:	08003d83 	.word	0x08003d83
 8003d70:	2300      	movs	r3, #0
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	e05e      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d76:	2302      	movs	r3, #2
 8003d78:	76fb      	strb	r3, [r7, #27]
 8003d7a:	e05b      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	76fb      	strb	r3, [r7, #27]
 8003d80:	e058      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d82:	2308      	movs	r3, #8
 8003d84:	76fb      	strb	r3, [r7, #27]
 8003d86:	e055      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	76fb      	strb	r3, [r7, #27]
 8003d8c:	e052      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6a      	ldr	r2, [pc, #424]	; (8003f3c <UART_SetConfig+0x2e8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d120      	bne.n	8003dda <UART_SetConfig+0x186>
 8003d98:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <UART_SetConfig+0x2e0>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003da2:	2b30      	cmp	r3, #48	; 0x30
 8003da4:	d013      	beq.n	8003dce <UART_SetConfig+0x17a>
 8003da6:	2b30      	cmp	r3, #48	; 0x30
 8003da8:	d814      	bhi.n	8003dd4 <UART_SetConfig+0x180>
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d009      	beq.n	8003dc2 <UART_SetConfig+0x16e>
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d810      	bhi.n	8003dd4 <UART_SetConfig+0x180>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <UART_SetConfig+0x168>
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d006      	beq.n	8003dc8 <UART_SetConfig+0x174>
 8003dba:	e00b      	b.n	8003dd4 <UART_SetConfig+0x180>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	e038      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	76fb      	strb	r3, [r7, #27]
 8003dc6:	e035      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	e032      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	76fb      	strb	r3, [r7, #27]
 8003dd2:	e02f      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	e02c      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a53      	ldr	r2, [pc, #332]	; (8003f2c <UART_SetConfig+0x2d8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d125      	bne.n	8003e30 <UART_SetConfig+0x1dc>
 8003de4:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <UART_SetConfig+0x2e0>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df2:	d017      	beq.n	8003e24 <UART_SetConfig+0x1d0>
 8003df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df8:	d817      	bhi.n	8003e2a <UART_SetConfig+0x1d6>
 8003dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfe:	d00b      	beq.n	8003e18 <UART_SetConfig+0x1c4>
 8003e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e04:	d811      	bhi.n	8003e2a <UART_SetConfig+0x1d6>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <UART_SetConfig+0x1be>
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0e:	d006      	beq.n	8003e1e <UART_SetConfig+0x1ca>
 8003e10:	e00b      	b.n	8003e2a <UART_SetConfig+0x1d6>
 8003e12:	2300      	movs	r3, #0
 8003e14:	76fb      	strb	r3, [r7, #27]
 8003e16:	e00d      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	76fb      	strb	r3, [r7, #27]
 8003e1c:	e00a      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	76fb      	strb	r3, [r7, #27]
 8003e22:	e007      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003e24:	2308      	movs	r3, #8
 8003e26:	76fb      	strb	r3, [r7, #27]
 8003e28:	e004      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	76fb      	strb	r3, [r7, #27]
 8003e2e:	e001      	b.n	8003e34 <UART_SetConfig+0x1e0>
 8003e30:	2310      	movs	r3, #16
 8003e32:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <UART_SetConfig+0x2d8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	f040 8082 	bne.w	8003f44 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e40:	7efb      	ldrb	r3, [r7, #27]
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d823      	bhi.n	8003e8e <UART_SetConfig+0x23a>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x1f8>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e8f 	.word	0x08003e8f
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e8f 	.word	0x08003e8f
 8003e5c:	08003e7f 	.word	0x08003e7f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e8f 	.word	0x08003e8f
 8003e68:	08003e8f 	.word	0x08003e8f
 8003e6c:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e70:	f7fe fc14 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 8003e74:	6178      	str	r0, [r7, #20]
        break;
 8003e76:	e00f      	b.n	8003e98 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <UART_SetConfig+0x2ec>)
 8003e7a:	617b      	str	r3, [r7, #20]
        break;
 8003e7c:	e00c      	b.n	8003e98 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7fe fb75 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8003e82:	6178      	str	r0, [r7, #20]
        break;
 8003e84:	e008      	b.n	8003e98 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	617b      	str	r3, [r7, #20]
        break;
 8003e8c:	e004      	b.n	8003e98 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	76bb      	strb	r3, [r7, #26]
        break;
 8003e96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8100 	beq.w	80040a0 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d305      	bcc.n	8003ebc <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d902      	bls.n	8003ec2 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	76bb      	strb	r3, [r7, #26]
 8003ec0:	e0ee      	b.n	80040a0 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	020b      	lsls	r3, r1, #8
 8003ed4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ed8:	0202      	lsls	r2, r0, #8
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	6849      	ldr	r1, [r1, #4]
 8003ede:	0849      	lsrs	r1, r1, #1
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	1814      	adds	r4, r2, r0
 8003ee8:	eb43 0501 	adc.w	r5, r3, r1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f7fc f9c9 	bl	8000290 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4613      	mov	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0c:	d308      	bcc.n	8003f20 <UART_SetConfig+0x2cc>
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f14:	d204      	bcs.n	8003f20 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e0bf      	b.n	80040a0 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	76bb      	strb	r3, [r7, #26]
 8003f24:	e0bc      	b.n	80040a0 <UART_SetConfig+0x44c>
 8003f26:	bf00      	nop
 8003f28:	efff69f3 	.word	0xefff69f3
 8003f2c:	40008000 	.word	0x40008000
 8003f30:	40013800 	.word	0x40013800
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40004400 	.word	0x40004400
 8003f3c:	40004800 	.word	0x40004800
 8003f40:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4c:	d15b      	bne.n	8004006 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8003f4e:	7efb      	ldrb	r3, [r7, #27]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d828      	bhi.n	8003fa6 <UART_SetConfig+0x352>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x308>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f91 	.word	0x08003f91
 8003f68:	08003fa7 	.word	0x08003fa7
 8003f6c:	08003f97 	.word	0x08003f97
 8003f70:	08003fa7 	.word	0x08003fa7
 8003f74:	08003fa7 	.word	0x08003fa7
 8003f78:	08003fa7 	.word	0x08003fa7
 8003f7c:	08003f9f 	.word	0x08003f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f80:	f7fe fb8c 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 8003f84:	6178      	str	r0, [r7, #20]
        break;
 8003f86:	e013      	b.n	8003fb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7fe fb9e 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	6178      	str	r0, [r7, #20]
        break;
 8003f8e:	e00f      	b.n	8003fb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f90:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <UART_SetConfig+0x464>)
 8003f92:	617b      	str	r3, [r7, #20]
        break;
 8003f94:	e00c      	b.n	8003fb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7fe fae9 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8003f9a:	6178      	str	r0, [r7, #20]
        break;
 8003f9c:	e008      	b.n	8003fb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	617b      	str	r3, [r7, #20]
        break;
 8003fa4:	e004      	b.n	8003fb0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	76bb      	strb	r3, [r7, #26]
        break;
 8003fae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d074      	beq.n	80040a0 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	005a      	lsls	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	d916      	bls.n	8004000 <UART_SetConfig+0x3ac>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd8:	d212      	bcs.n	8004000 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f023 030f 	bic.w	r3, r3, #15
 8003fe2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	89fb      	ldrh	r3, [r7, #14]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	89fa      	ldrh	r2, [r7, #14]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	e04f      	b.n	80040a0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	76bb      	strb	r3, [r7, #26]
 8004004:	e04c      	b.n	80040a0 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004006:	7efb      	ldrb	r3, [r7, #27]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d828      	bhi.n	800405e <UART_SetConfig+0x40a>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <UART_SetConfig+0x3c0>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004039 	.word	0x08004039
 8004018:	08004041 	.word	0x08004041
 800401c:	08004049 	.word	0x08004049
 8004020:	0800405f 	.word	0x0800405f
 8004024:	0800404f 	.word	0x0800404f
 8004028:	0800405f 	.word	0x0800405f
 800402c:	0800405f 	.word	0x0800405f
 8004030:	0800405f 	.word	0x0800405f
 8004034:	08004057 	.word	0x08004057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7fe fb30 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 800403c:	6178      	str	r0, [r7, #20]
        break;
 800403e:	e013      	b.n	8004068 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7fe fb42 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8004044:	6178      	str	r0, [r7, #20]
        break;
 8004046:	e00f      	b.n	8004068 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <UART_SetConfig+0x464>)
 800404a:	617b      	str	r3, [r7, #20]
        break;
 800404c:	e00c      	b.n	8004068 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404e:	f7fe fa8d 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8004052:	6178      	str	r0, [r7, #20]
        break;
 8004054:	e008      	b.n	8004068 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405a:	617b      	str	r3, [r7, #20]
        break;
 800405c:	e004      	b.n	8004068 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	76bb      	strb	r3, [r7, #26]
        break;
 8004066:	bf00      	nop
    }

    if (pclk != 0U)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d018      	beq.n	80040a0 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	085a      	lsrs	r2, r3, #1
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	441a      	add	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b0f      	cmp	r3, #15
 8004086:	d909      	bls.n	800409c <UART_SetConfig+0x448>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408e:	d205      	bcs.n	800409c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	e001      	b.n	80040a0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bdb0      	pop	{r4, r5, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	00f42400 	.word	0x00f42400

080040bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01a      	beq.n	80041d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ba:	d10a      	bne.n	80041d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
  }
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004210:	f7fd f8b0 	bl	8001374 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b08      	cmp	r3, #8
 8004222:	d10e      	bne.n	8004242 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f82d 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e023      	b.n	800428a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d10e      	bne.n	800426e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f817 	bl	8004292 <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e00d      	b.n	800428a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b09c      	sub	sp, #112	; 0x70
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a2:	e0a5      	b.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042aa:	f000 80a1 	beq.w	80043f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fd f861 	bl	8001374 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80042be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d13e      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042d8:	667b      	str	r3, [r7, #100]	; 0x64
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e6      	bne.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004316:	64ba      	str	r2, [r7, #72]	; 0x48
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800431c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e5      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e067      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d04f      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435e:	d147      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004368:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800437e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
 800438a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043bc:	623a      	str	r2, [r7, #32]
 80043be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	69f9      	ldr	r1, [r7, #28]
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e010      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	429a      	cmp	r2, r3
 800440c:	f43f af4a 	beq.w	80042a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3770      	adds	r7, #112	; 0x70
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800441a:	b480      	push	{r7}
 800441c:	b095      	sub	sp, #84	; 0x54
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	643b      	str	r3, [r7, #64]	; 0x40
 8004442:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e6      	bne.n	8004422 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	61fb      	str	r3, [r7, #28]
   return(result);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	64bb      	str	r3, [r7, #72]	; 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3308      	adds	r3, #8
 8004472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448c:	2b01      	cmp	r3, #1
 800448e:	d118      	bne.n	80044c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	60bb      	str	r3, [r7, #8]
   return(result);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f023 0310 	bic.w	r3, r3, #16
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	613b      	str	r3, [r7, #16]
   return(result);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e6      	bne.n	8004490 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044d4:	bf00      	nop
 80044d6:	3754      	adds	r7, #84	; 0x54
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f7ff fb92 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	60bb      	str	r3, [r7, #8]
   return(result);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6979      	ldr	r1, [r7, #20]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	613b      	str	r3, [r7, #16]
   return(result);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e6      	bne.n	8004514 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fb5e 	bl	8003c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004558:	bf00      	nop
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <atoi>:
 8004574:	220a      	movs	r2, #10
 8004576:	2100      	movs	r1, #0
 8004578:	f000 ba32 	b.w	80049e0 <strtol>

0800457c <__errno>:
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <__errno+0x8>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000044 	.word	0x20000044

08004588 <getchar>:
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <getchar+0x20>)
 800458a:	b510      	push	{r4, lr}
 800458c:	681c      	ldr	r4, [r3, #0]
 800458e:	b124      	cbz	r4, 800459a <getchar+0x12>
 8004590:	69a3      	ldr	r3, [r4, #24]
 8004592:	b913      	cbnz	r3, 800459a <getchar+0x12>
 8004594:	4620      	mov	r0, r4
 8004596:	f000 fc19 	bl	8004dcc <__sinit>
 800459a:	6861      	ldr	r1, [r4, #4]
 800459c:	4620      	mov	r0, r4
 800459e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a2:	f000 bccd 	b.w	8004f40 <_getc_r>
 80045a6:	bf00      	nop
 80045a8:	20000044 	.word	0x20000044

080045ac <__libc_init_array>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	4d0d      	ldr	r5, [pc, #52]	; (80045e4 <__libc_init_array+0x38>)
 80045b0:	4c0d      	ldr	r4, [pc, #52]	; (80045e8 <__libc_init_array+0x3c>)
 80045b2:	1b64      	subs	r4, r4, r5
 80045b4:	10a4      	asrs	r4, r4, #2
 80045b6:	2600      	movs	r6, #0
 80045b8:	42a6      	cmp	r6, r4
 80045ba:	d109      	bne.n	80045d0 <__libc_init_array+0x24>
 80045bc:	4d0b      	ldr	r5, [pc, #44]	; (80045ec <__libc_init_array+0x40>)
 80045be:	4c0c      	ldr	r4, [pc, #48]	; (80045f0 <__libc_init_array+0x44>)
 80045c0:	f001 fae4 	bl	8005b8c <_init>
 80045c4:	1b64      	subs	r4, r4, r5
 80045c6:	10a4      	asrs	r4, r4, #2
 80045c8:	2600      	movs	r6, #0
 80045ca:	42a6      	cmp	r6, r4
 80045cc:	d105      	bne.n	80045da <__libc_init_array+0x2e>
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d4:	4798      	blx	r3
 80045d6:	3601      	adds	r6, #1
 80045d8:	e7ee      	b.n	80045b8 <__libc_init_array+0xc>
 80045da:	f855 3b04 	ldr.w	r3, [r5], #4
 80045de:	4798      	blx	r3
 80045e0:	3601      	adds	r6, #1
 80045e2:	e7f2      	b.n	80045ca <__libc_init_array+0x1e>
 80045e4:	08005eb8 	.word	0x08005eb8
 80045e8:	08005eb8 	.word	0x08005eb8
 80045ec:	08005eb8 	.word	0x08005eb8
 80045f0:	08005ebc 	.word	0x08005ebc

080045f4 <memset>:
 80045f4:	4402      	add	r2, r0
 80045f6:	4603      	mov	r3, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <iprintf>:
 8004604:	b40f      	push	{r0, r1, r2, r3}
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <iprintf+0x2c>)
 8004608:	b513      	push	{r0, r1, r4, lr}
 800460a:	681c      	ldr	r4, [r3, #0]
 800460c:	b124      	cbz	r4, 8004618 <iprintf+0x14>
 800460e:	69a3      	ldr	r3, [r4, #24]
 8004610:	b913      	cbnz	r3, 8004618 <iprintf+0x14>
 8004612:	4620      	mov	r0, r4
 8004614:	f000 fbda 	bl	8004dcc <__sinit>
 8004618:	ab05      	add	r3, sp, #20
 800461a:	9a04      	ldr	r2, [sp, #16]
 800461c:	68a1      	ldr	r1, [r4, #8]
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	4620      	mov	r0, r4
 8004622:	f000 fe11 	bl	8005248 <_vfiprintf_r>
 8004626:	b002      	add	sp, #8
 8004628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800462c:	b004      	add	sp, #16
 800462e:	4770      	bx	lr
 8004630:	20000044 	.word	0x20000044

08004634 <putchar>:
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <putchar+0x28>)
 8004636:	b513      	push	{r0, r1, r4, lr}
 8004638:	681c      	ldr	r4, [r3, #0]
 800463a:	4601      	mov	r1, r0
 800463c:	b134      	cbz	r4, 800464c <putchar+0x18>
 800463e:	69a3      	ldr	r3, [r4, #24]
 8004640:	b923      	cbnz	r3, 800464c <putchar+0x18>
 8004642:	9001      	str	r0, [sp, #4]
 8004644:	4620      	mov	r0, r4
 8004646:	f000 fbc1 	bl	8004dcc <__sinit>
 800464a:	9901      	ldr	r1, [sp, #4]
 800464c:	68a2      	ldr	r2, [r4, #8]
 800464e:	4620      	mov	r0, r4
 8004650:	b002      	add	sp, #8
 8004652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004656:	f001 b8bb 	b.w	80057d0 <_putc_r>
 800465a:	bf00      	nop
 800465c:	20000044 	.word	0x20000044

08004660 <_puts_r>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	460e      	mov	r6, r1
 8004664:	4605      	mov	r5, r0
 8004666:	b118      	cbz	r0, 8004670 <_puts_r+0x10>
 8004668:	6983      	ldr	r3, [r0, #24]
 800466a:	b90b      	cbnz	r3, 8004670 <_puts_r+0x10>
 800466c:	f000 fbae 	bl	8004dcc <__sinit>
 8004670:	69ab      	ldr	r3, [r5, #24]
 8004672:	68ac      	ldr	r4, [r5, #8]
 8004674:	b913      	cbnz	r3, 800467c <_puts_r+0x1c>
 8004676:	4628      	mov	r0, r5
 8004678:	f000 fba8 	bl	8004dcc <__sinit>
 800467c:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <_puts_r+0xd0>)
 800467e:	429c      	cmp	r4, r3
 8004680:	d120      	bne.n	80046c4 <_puts_r+0x64>
 8004682:	686c      	ldr	r4, [r5, #4]
 8004684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004686:	07db      	lsls	r3, r3, #31
 8004688:	d405      	bmi.n	8004696 <_puts_r+0x36>
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	0598      	lsls	r0, r3, #22
 800468e:	d402      	bmi.n	8004696 <_puts_r+0x36>
 8004690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004692:	f000 fc96 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	0719      	lsls	r1, r3, #28
 800469a:	d51d      	bpl.n	80046d8 <_puts_r+0x78>
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	b1db      	cbz	r3, 80046d8 <_puts_r+0x78>
 80046a0:	3e01      	subs	r6, #1
 80046a2:	68a3      	ldr	r3, [r4, #8]
 80046a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046a8:	3b01      	subs	r3, #1
 80046aa:	60a3      	str	r3, [r4, #8]
 80046ac:	bb39      	cbnz	r1, 80046fe <_puts_r+0x9e>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da38      	bge.n	8004724 <_puts_r+0xc4>
 80046b2:	4622      	mov	r2, r4
 80046b4:	210a      	movs	r1, #10
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 f99c 	bl	80049f4 <__swbuf_r>
 80046bc:	3001      	adds	r0, #1
 80046be:	d011      	beq.n	80046e4 <_puts_r+0x84>
 80046c0:	250a      	movs	r5, #10
 80046c2:	e011      	b.n	80046e8 <_puts_r+0x88>
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <_puts_r+0xd4>)
 80046c6:	429c      	cmp	r4, r3
 80046c8:	d101      	bne.n	80046ce <_puts_r+0x6e>
 80046ca:	68ac      	ldr	r4, [r5, #8]
 80046cc:	e7da      	b.n	8004684 <_puts_r+0x24>
 80046ce:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <_puts_r+0xd8>)
 80046d0:	429c      	cmp	r4, r3
 80046d2:	bf08      	it	eq
 80046d4:	68ec      	ldreq	r4, [r5, #12]
 80046d6:	e7d5      	b.n	8004684 <_puts_r+0x24>
 80046d8:	4621      	mov	r1, r4
 80046da:	4628      	mov	r0, r5
 80046dc:	f000 f9dc 	bl	8004a98 <__swsetup_r>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d0dd      	beq.n	80046a0 <_puts_r+0x40>
 80046e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80046e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ea:	07da      	lsls	r2, r3, #31
 80046ec:	d405      	bmi.n	80046fa <_puts_r+0x9a>
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	059b      	lsls	r3, r3, #22
 80046f2:	d402      	bmi.n	80046fa <_puts_r+0x9a>
 80046f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046f6:	f000 fc65 	bl	8004fc4 <__retarget_lock_release_recursive>
 80046fa:	4628      	mov	r0, r5
 80046fc:	bd70      	pop	{r4, r5, r6, pc}
 80046fe:	2b00      	cmp	r3, #0
 8004700:	da04      	bge.n	800470c <_puts_r+0xac>
 8004702:	69a2      	ldr	r2, [r4, #24]
 8004704:	429a      	cmp	r2, r3
 8004706:	dc06      	bgt.n	8004716 <_puts_r+0xb6>
 8004708:	290a      	cmp	r1, #10
 800470a:	d004      	beq.n	8004716 <_puts_r+0xb6>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	6022      	str	r2, [r4, #0]
 8004712:	7019      	strb	r1, [r3, #0]
 8004714:	e7c5      	b.n	80046a2 <_puts_r+0x42>
 8004716:	4622      	mov	r2, r4
 8004718:	4628      	mov	r0, r5
 800471a:	f000 f96b 	bl	80049f4 <__swbuf_r>
 800471e:	3001      	adds	r0, #1
 8004720:	d1bf      	bne.n	80046a2 <_puts_r+0x42>
 8004722:	e7df      	b.n	80046e4 <_puts_r+0x84>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	250a      	movs	r5, #10
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	6022      	str	r2, [r4, #0]
 800472c:	701d      	strb	r5, [r3, #0]
 800472e:	e7db      	b.n	80046e8 <_puts_r+0x88>
 8004730:	08005e3c 	.word	0x08005e3c
 8004734:	08005e5c 	.word	0x08005e5c
 8004738:	08005e1c 	.word	0x08005e1c

0800473c <puts>:
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <puts+0xc>)
 800473e:	4601      	mov	r1, r0
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	f7ff bf8d 	b.w	8004660 <_puts_r>
 8004746:	bf00      	nop
 8004748:	20000044 	.word	0x20000044

0800474c <setvbuf>:
 800474c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004750:	461d      	mov	r5, r3
 8004752:	4b5d      	ldr	r3, [pc, #372]	; (80048c8 <setvbuf+0x17c>)
 8004754:	681f      	ldr	r7, [r3, #0]
 8004756:	4604      	mov	r4, r0
 8004758:	460e      	mov	r6, r1
 800475a:	4690      	mov	r8, r2
 800475c:	b127      	cbz	r7, 8004768 <setvbuf+0x1c>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	b913      	cbnz	r3, 8004768 <setvbuf+0x1c>
 8004762:	4638      	mov	r0, r7
 8004764:	f000 fb32 	bl	8004dcc <__sinit>
 8004768:	4b58      	ldr	r3, [pc, #352]	; (80048cc <setvbuf+0x180>)
 800476a:	429c      	cmp	r4, r3
 800476c:	d167      	bne.n	800483e <setvbuf+0xf2>
 800476e:	687c      	ldr	r4, [r7, #4]
 8004770:	f1b8 0f02 	cmp.w	r8, #2
 8004774:	d006      	beq.n	8004784 <setvbuf+0x38>
 8004776:	f1b8 0f01 	cmp.w	r8, #1
 800477a:	f200 809f 	bhi.w	80048bc <setvbuf+0x170>
 800477e:	2d00      	cmp	r5, #0
 8004780:	f2c0 809c 	blt.w	80048bc <setvbuf+0x170>
 8004784:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004786:	07db      	lsls	r3, r3, #31
 8004788:	d405      	bmi.n	8004796 <setvbuf+0x4a>
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	0598      	lsls	r0, r3, #22
 800478e:	d402      	bmi.n	8004796 <setvbuf+0x4a>
 8004790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004792:	f000 fc16 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 8004796:	4621      	mov	r1, r4
 8004798:	4638      	mov	r0, r7
 800479a:	f000 fa71 	bl	8004c80 <_fflush_r>
 800479e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047a0:	b141      	cbz	r1, 80047b4 <setvbuf+0x68>
 80047a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047a6:	4299      	cmp	r1, r3
 80047a8:	d002      	beq.n	80047b0 <setvbuf+0x64>
 80047aa:	4638      	mov	r0, r7
 80047ac:	f000 fc78 	bl	80050a0 <_free_r>
 80047b0:	2300      	movs	r3, #0
 80047b2:	6363      	str	r3, [r4, #52]	; 0x34
 80047b4:	2300      	movs	r3, #0
 80047b6:	61a3      	str	r3, [r4, #24]
 80047b8:	6063      	str	r3, [r4, #4]
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	0619      	lsls	r1, r3, #24
 80047be:	d503      	bpl.n	80047c8 <setvbuf+0x7c>
 80047c0:	6921      	ldr	r1, [r4, #16]
 80047c2:	4638      	mov	r0, r7
 80047c4:	f000 fc6c 	bl	80050a0 <_free_r>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	f1b8 0f02 	cmp.w	r8, #2
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	d06c      	beq.n	80048b4 <setvbuf+0x168>
 80047da:	ab01      	add	r3, sp, #4
 80047dc:	466a      	mov	r2, sp
 80047de:	4621      	mov	r1, r4
 80047e0:	4638      	mov	r0, r7
 80047e2:	f000 fbf0 	bl	8004fc6 <__swhatbuf_r>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	4318      	orrs	r0, r3
 80047ea:	81a0      	strh	r0, [r4, #12]
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	d130      	bne.n	8004852 <setvbuf+0x106>
 80047f0:	9d00      	ldr	r5, [sp, #0]
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 fc4c 	bl	8005090 <malloc>
 80047f8:	4606      	mov	r6, r0
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d155      	bne.n	80048aa <setvbuf+0x15e>
 80047fe:	f8dd 9000 	ldr.w	r9, [sp]
 8004802:	45a9      	cmp	r9, r5
 8004804:	d14a      	bne.n	800489c <setvbuf+0x150>
 8004806:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800480a:	2200      	movs	r2, #0
 800480c:	60a2      	str	r2, [r4, #8]
 800480e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004812:	6022      	str	r2, [r4, #0]
 8004814:	6122      	str	r2, [r4, #16]
 8004816:	2201      	movs	r2, #1
 8004818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800481c:	6162      	str	r2, [r4, #20]
 800481e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	07d2      	lsls	r2, r2, #31
 8004826:	81a3      	strh	r3, [r4, #12]
 8004828:	d405      	bmi.n	8004836 <setvbuf+0xea>
 800482a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800482e:	d102      	bne.n	8004836 <setvbuf+0xea>
 8004830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004832:	f000 fbc7 	bl	8004fc4 <__retarget_lock_release_recursive>
 8004836:	4628      	mov	r0, r5
 8004838:	b003      	add	sp, #12
 800483a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <setvbuf+0x184>)
 8004840:	429c      	cmp	r4, r3
 8004842:	d101      	bne.n	8004848 <setvbuf+0xfc>
 8004844:	68bc      	ldr	r4, [r7, #8]
 8004846:	e793      	b.n	8004770 <setvbuf+0x24>
 8004848:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <setvbuf+0x188>)
 800484a:	429c      	cmp	r4, r3
 800484c:	bf08      	it	eq
 800484e:	68fc      	ldreq	r4, [r7, #12]
 8004850:	e78e      	b.n	8004770 <setvbuf+0x24>
 8004852:	2e00      	cmp	r6, #0
 8004854:	d0cd      	beq.n	80047f2 <setvbuf+0xa6>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	b913      	cbnz	r3, 8004860 <setvbuf+0x114>
 800485a:	4638      	mov	r0, r7
 800485c:	f000 fab6 	bl	8004dcc <__sinit>
 8004860:	f1b8 0f01 	cmp.w	r8, #1
 8004864:	bf08      	it	eq
 8004866:	89a3      	ldrheq	r3, [r4, #12]
 8004868:	6026      	str	r6, [r4, #0]
 800486a:	bf04      	itt	eq
 800486c:	f043 0301 	orreq.w	r3, r3, #1
 8004870:	81a3      	strheq	r3, [r4, #12]
 8004872:	89a2      	ldrh	r2, [r4, #12]
 8004874:	f012 0308 	ands.w	r3, r2, #8
 8004878:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800487c:	d01c      	beq.n	80048b8 <setvbuf+0x16c>
 800487e:	07d3      	lsls	r3, r2, #31
 8004880:	bf41      	itttt	mi
 8004882:	2300      	movmi	r3, #0
 8004884:	426d      	negmi	r5, r5
 8004886:	60a3      	strmi	r3, [r4, #8]
 8004888:	61a5      	strmi	r5, [r4, #24]
 800488a:	bf58      	it	pl
 800488c:	60a5      	strpl	r5, [r4, #8]
 800488e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004890:	f015 0501 	ands.w	r5, r5, #1
 8004894:	d115      	bne.n	80048c2 <setvbuf+0x176>
 8004896:	f412 7f00 	tst.w	r2, #512	; 0x200
 800489a:	e7c8      	b.n	800482e <setvbuf+0xe2>
 800489c:	4648      	mov	r0, r9
 800489e:	f000 fbf7 	bl	8005090 <malloc>
 80048a2:	4606      	mov	r6, r0
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d0ae      	beq.n	8004806 <setvbuf+0xba>
 80048a8:	464d      	mov	r5, r9
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	e7d0      	b.n	8004856 <setvbuf+0x10a>
 80048b4:	2500      	movs	r5, #0
 80048b6:	e7a8      	b.n	800480a <setvbuf+0xbe>
 80048b8:	60a3      	str	r3, [r4, #8]
 80048ba:	e7e8      	b.n	800488e <setvbuf+0x142>
 80048bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80048c0:	e7b9      	b.n	8004836 <setvbuf+0xea>
 80048c2:	2500      	movs	r5, #0
 80048c4:	e7b7      	b.n	8004836 <setvbuf+0xea>
 80048c6:	bf00      	nop
 80048c8:	20000044 	.word	0x20000044
 80048cc:	08005e3c 	.word	0x08005e3c
 80048d0:	08005e5c 	.word	0x08005e5c
 80048d4:	08005e1c 	.word	0x08005e1c

080048d8 <_strtol_l.isra.0>:
 80048d8:	2b01      	cmp	r3, #1
 80048da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048de:	d001      	beq.n	80048e4 <_strtol_l.isra.0+0xc>
 80048e0:	2b24      	cmp	r3, #36	; 0x24
 80048e2:	d906      	bls.n	80048f2 <_strtol_l.isra.0+0x1a>
 80048e4:	f7ff fe4a 	bl	800457c <__errno>
 80048e8:	2316      	movs	r3, #22
 80048ea:	6003      	str	r3, [r0, #0]
 80048ec:	2000      	movs	r0, #0
 80048ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f2:	4f3a      	ldr	r7, [pc, #232]	; (80049dc <_strtol_l.isra.0+0x104>)
 80048f4:	468e      	mov	lr, r1
 80048f6:	4676      	mov	r6, lr
 80048f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80048fc:	5de5      	ldrb	r5, [r4, r7]
 80048fe:	f015 0508 	ands.w	r5, r5, #8
 8004902:	d1f8      	bne.n	80048f6 <_strtol_l.isra.0+0x1e>
 8004904:	2c2d      	cmp	r4, #45	; 0x2d
 8004906:	d134      	bne.n	8004972 <_strtol_l.isra.0+0x9a>
 8004908:	f89e 4000 	ldrb.w	r4, [lr]
 800490c:	f04f 0801 	mov.w	r8, #1
 8004910:	f106 0e02 	add.w	lr, r6, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d05c      	beq.n	80049d2 <_strtol_l.isra.0+0xfa>
 8004918:	2b10      	cmp	r3, #16
 800491a:	d10c      	bne.n	8004936 <_strtol_l.isra.0+0x5e>
 800491c:	2c30      	cmp	r4, #48	; 0x30
 800491e:	d10a      	bne.n	8004936 <_strtol_l.isra.0+0x5e>
 8004920:	f89e 4000 	ldrb.w	r4, [lr]
 8004924:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004928:	2c58      	cmp	r4, #88	; 0x58
 800492a:	d14d      	bne.n	80049c8 <_strtol_l.isra.0+0xf0>
 800492c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004930:	2310      	movs	r3, #16
 8004932:	f10e 0e02 	add.w	lr, lr, #2
 8004936:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800493a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800493e:	2600      	movs	r6, #0
 8004940:	fbbc f9f3 	udiv	r9, ip, r3
 8004944:	4635      	mov	r5, r6
 8004946:	fb03 ca19 	mls	sl, r3, r9, ip
 800494a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800494e:	2f09      	cmp	r7, #9
 8004950:	d818      	bhi.n	8004984 <_strtol_l.isra.0+0xac>
 8004952:	463c      	mov	r4, r7
 8004954:	42a3      	cmp	r3, r4
 8004956:	dd24      	ble.n	80049a2 <_strtol_l.isra.0+0xca>
 8004958:	2e00      	cmp	r6, #0
 800495a:	db1f      	blt.n	800499c <_strtol_l.isra.0+0xc4>
 800495c:	45a9      	cmp	r9, r5
 800495e:	d31d      	bcc.n	800499c <_strtol_l.isra.0+0xc4>
 8004960:	d101      	bne.n	8004966 <_strtol_l.isra.0+0x8e>
 8004962:	45a2      	cmp	sl, r4
 8004964:	db1a      	blt.n	800499c <_strtol_l.isra.0+0xc4>
 8004966:	fb05 4503 	mla	r5, r5, r3, r4
 800496a:	2601      	movs	r6, #1
 800496c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004970:	e7eb      	b.n	800494a <_strtol_l.isra.0+0x72>
 8004972:	2c2b      	cmp	r4, #43	; 0x2b
 8004974:	bf08      	it	eq
 8004976:	f89e 4000 	ldrbeq.w	r4, [lr]
 800497a:	46a8      	mov	r8, r5
 800497c:	bf08      	it	eq
 800497e:	f106 0e02 	addeq.w	lr, r6, #2
 8004982:	e7c7      	b.n	8004914 <_strtol_l.isra.0+0x3c>
 8004984:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004988:	2f19      	cmp	r7, #25
 800498a:	d801      	bhi.n	8004990 <_strtol_l.isra.0+0xb8>
 800498c:	3c37      	subs	r4, #55	; 0x37
 800498e:	e7e1      	b.n	8004954 <_strtol_l.isra.0+0x7c>
 8004990:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004994:	2f19      	cmp	r7, #25
 8004996:	d804      	bhi.n	80049a2 <_strtol_l.isra.0+0xca>
 8004998:	3c57      	subs	r4, #87	; 0x57
 800499a:	e7db      	b.n	8004954 <_strtol_l.isra.0+0x7c>
 800499c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80049a0:	e7e4      	b.n	800496c <_strtol_l.isra.0+0x94>
 80049a2:	2e00      	cmp	r6, #0
 80049a4:	da05      	bge.n	80049b2 <_strtol_l.isra.0+0xda>
 80049a6:	2322      	movs	r3, #34	; 0x22
 80049a8:	6003      	str	r3, [r0, #0]
 80049aa:	4665      	mov	r5, ip
 80049ac:	b942      	cbnz	r2, 80049c0 <_strtol_l.isra.0+0xe8>
 80049ae:	4628      	mov	r0, r5
 80049b0:	e79d      	b.n	80048ee <_strtol_l.isra.0+0x16>
 80049b2:	f1b8 0f00 	cmp.w	r8, #0
 80049b6:	d000      	beq.n	80049ba <_strtol_l.isra.0+0xe2>
 80049b8:	426d      	negs	r5, r5
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	d0f7      	beq.n	80049ae <_strtol_l.isra.0+0xd6>
 80049be:	b10e      	cbz	r6, 80049c4 <_strtol_l.isra.0+0xec>
 80049c0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80049c4:	6011      	str	r1, [r2, #0]
 80049c6:	e7f2      	b.n	80049ae <_strtol_l.isra.0+0xd6>
 80049c8:	2430      	movs	r4, #48	; 0x30
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1b3      	bne.n	8004936 <_strtol_l.isra.0+0x5e>
 80049ce:	2308      	movs	r3, #8
 80049d0:	e7b1      	b.n	8004936 <_strtol_l.isra.0+0x5e>
 80049d2:	2c30      	cmp	r4, #48	; 0x30
 80049d4:	d0a4      	beq.n	8004920 <_strtol_l.isra.0+0x48>
 80049d6:	230a      	movs	r3, #10
 80049d8:	e7ad      	b.n	8004936 <_strtol_l.isra.0+0x5e>
 80049da:	bf00      	nop
 80049dc:	08005d19 	.word	0x08005d19

080049e0 <strtol>:
 80049e0:	4613      	mov	r3, r2
 80049e2:	460a      	mov	r2, r1
 80049e4:	4601      	mov	r1, r0
 80049e6:	4802      	ldr	r0, [pc, #8]	; (80049f0 <strtol+0x10>)
 80049e8:	6800      	ldr	r0, [r0, #0]
 80049ea:	f7ff bf75 	b.w	80048d8 <_strtol_l.isra.0>
 80049ee:	bf00      	nop
 80049f0:	20000044 	.word	0x20000044

080049f4 <__swbuf_r>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	460e      	mov	r6, r1
 80049f8:	4614      	mov	r4, r2
 80049fa:	4605      	mov	r5, r0
 80049fc:	b118      	cbz	r0, 8004a06 <__swbuf_r+0x12>
 80049fe:	6983      	ldr	r3, [r0, #24]
 8004a00:	b90b      	cbnz	r3, 8004a06 <__swbuf_r+0x12>
 8004a02:	f000 f9e3 	bl	8004dcc <__sinit>
 8004a06:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <__swbuf_r+0x98>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	d12b      	bne.n	8004a64 <__swbuf_r+0x70>
 8004a0c:	686c      	ldr	r4, [r5, #4]
 8004a0e:	69a3      	ldr	r3, [r4, #24]
 8004a10:	60a3      	str	r3, [r4, #8]
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	071a      	lsls	r2, r3, #28
 8004a16:	d52f      	bpl.n	8004a78 <__swbuf_r+0x84>
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	b36b      	cbz	r3, 8004a78 <__swbuf_r+0x84>
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	1ac0      	subs	r0, r0, r3
 8004a22:	6963      	ldr	r3, [r4, #20]
 8004a24:	b2f6      	uxtb	r6, r6
 8004a26:	4283      	cmp	r3, r0
 8004a28:	4637      	mov	r7, r6
 8004a2a:	dc04      	bgt.n	8004a36 <__swbuf_r+0x42>
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f926 	bl	8004c80 <_fflush_r>
 8004a34:	bb30      	cbnz	r0, 8004a84 <__swbuf_r+0x90>
 8004a36:	68a3      	ldr	r3, [r4, #8]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	60a3      	str	r3, [r4, #8]
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	6022      	str	r2, [r4, #0]
 8004a42:	701e      	strb	r6, [r3, #0]
 8004a44:	6963      	ldr	r3, [r4, #20]
 8004a46:	3001      	adds	r0, #1
 8004a48:	4283      	cmp	r3, r0
 8004a4a:	d004      	beq.n	8004a56 <__swbuf_r+0x62>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	07db      	lsls	r3, r3, #31
 8004a50:	d506      	bpl.n	8004a60 <__swbuf_r+0x6c>
 8004a52:	2e0a      	cmp	r6, #10
 8004a54:	d104      	bne.n	8004a60 <__swbuf_r+0x6c>
 8004a56:	4621      	mov	r1, r4
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f000 f911 	bl	8004c80 <_fflush_r>
 8004a5e:	b988      	cbnz	r0, 8004a84 <__swbuf_r+0x90>
 8004a60:	4638      	mov	r0, r7
 8004a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <__swbuf_r+0x9c>)
 8004a66:	429c      	cmp	r4, r3
 8004a68:	d101      	bne.n	8004a6e <__swbuf_r+0x7a>
 8004a6a:	68ac      	ldr	r4, [r5, #8]
 8004a6c:	e7cf      	b.n	8004a0e <__swbuf_r+0x1a>
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <__swbuf_r+0xa0>)
 8004a70:	429c      	cmp	r4, r3
 8004a72:	bf08      	it	eq
 8004a74:	68ec      	ldreq	r4, [r5, #12]
 8004a76:	e7ca      	b.n	8004a0e <__swbuf_r+0x1a>
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f000 f80c 	bl	8004a98 <__swsetup_r>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d0cb      	beq.n	8004a1c <__swbuf_r+0x28>
 8004a84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a88:	e7ea      	b.n	8004a60 <__swbuf_r+0x6c>
 8004a8a:	bf00      	nop
 8004a8c:	08005e3c 	.word	0x08005e3c
 8004a90:	08005e5c 	.word	0x08005e5c
 8004a94:	08005e1c 	.word	0x08005e1c

08004a98 <__swsetup_r>:
 8004a98:	4b32      	ldr	r3, [pc, #200]	; (8004b64 <__swsetup_r+0xcc>)
 8004a9a:	b570      	push	{r4, r5, r6, lr}
 8004a9c:	681d      	ldr	r5, [r3, #0]
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	b125      	cbz	r5, 8004aae <__swsetup_r+0x16>
 8004aa4:	69ab      	ldr	r3, [r5, #24]
 8004aa6:	b913      	cbnz	r3, 8004aae <__swsetup_r+0x16>
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 f98f 	bl	8004dcc <__sinit>
 8004aae:	4b2e      	ldr	r3, [pc, #184]	; (8004b68 <__swsetup_r+0xd0>)
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	d10f      	bne.n	8004ad4 <__swsetup_r+0x3c>
 8004ab4:	686c      	ldr	r4, [r5, #4]
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004abc:	0719      	lsls	r1, r3, #28
 8004abe:	d42c      	bmi.n	8004b1a <__swsetup_r+0x82>
 8004ac0:	06dd      	lsls	r5, r3, #27
 8004ac2:	d411      	bmi.n	8004ae8 <__swsetup_r+0x50>
 8004ac4:	2309      	movs	r3, #9
 8004ac6:	6033      	str	r3, [r6, #0]
 8004ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad2:	e03e      	b.n	8004b52 <__swsetup_r+0xba>
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <__swsetup_r+0xd4>)
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	d101      	bne.n	8004ade <__swsetup_r+0x46>
 8004ada:	68ac      	ldr	r4, [r5, #8]
 8004adc:	e7eb      	b.n	8004ab6 <__swsetup_r+0x1e>
 8004ade:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <__swsetup_r+0xd8>)
 8004ae0:	429c      	cmp	r4, r3
 8004ae2:	bf08      	it	eq
 8004ae4:	68ec      	ldreq	r4, [r5, #12]
 8004ae6:	e7e6      	b.n	8004ab6 <__swsetup_r+0x1e>
 8004ae8:	0758      	lsls	r0, r3, #29
 8004aea:	d512      	bpl.n	8004b12 <__swsetup_r+0x7a>
 8004aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aee:	b141      	cbz	r1, 8004b02 <__swsetup_r+0x6a>
 8004af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af4:	4299      	cmp	r1, r3
 8004af6:	d002      	beq.n	8004afe <__swsetup_r+0x66>
 8004af8:	4630      	mov	r0, r6
 8004afa:	f000 fad1 	bl	80050a0 <_free_r>
 8004afe:	2300      	movs	r3, #0
 8004b00:	6363      	str	r3, [r4, #52]	; 0x34
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6063      	str	r3, [r4, #4]
 8004b0e:	6923      	ldr	r3, [r4, #16]
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	f043 0308 	orr.w	r3, r3, #8
 8004b18:	81a3      	strh	r3, [r4, #12]
 8004b1a:	6923      	ldr	r3, [r4, #16]
 8004b1c:	b94b      	cbnz	r3, 8004b32 <__swsetup_r+0x9a>
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b28:	d003      	beq.n	8004b32 <__swsetup_r+0x9a>
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f000 fa6f 	bl	8005010 <__smakebuf_r>
 8004b32:	89a0      	ldrh	r0, [r4, #12]
 8004b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b38:	f010 0301 	ands.w	r3, r0, #1
 8004b3c:	d00a      	beq.n	8004b54 <__swsetup_r+0xbc>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60a3      	str	r3, [r4, #8]
 8004b42:	6963      	ldr	r3, [r4, #20]
 8004b44:	425b      	negs	r3, r3
 8004b46:	61a3      	str	r3, [r4, #24]
 8004b48:	6923      	ldr	r3, [r4, #16]
 8004b4a:	b943      	cbnz	r3, 8004b5e <__swsetup_r+0xc6>
 8004b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b50:	d1ba      	bne.n	8004ac8 <__swsetup_r+0x30>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	0781      	lsls	r1, r0, #30
 8004b56:	bf58      	it	pl
 8004b58:	6963      	ldrpl	r3, [r4, #20]
 8004b5a:	60a3      	str	r3, [r4, #8]
 8004b5c:	e7f4      	b.n	8004b48 <__swsetup_r+0xb0>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e7f7      	b.n	8004b52 <__swsetup_r+0xba>
 8004b62:	bf00      	nop
 8004b64:	20000044 	.word	0x20000044
 8004b68:	08005e3c 	.word	0x08005e3c
 8004b6c:	08005e5c 	.word	0x08005e5c
 8004b70:	08005e1c 	.word	0x08005e1c

08004b74 <__sflush_r>:
 8004b74:	898a      	ldrh	r2, [r1, #12]
 8004b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	0710      	lsls	r0, r2, #28
 8004b7e:	460c      	mov	r4, r1
 8004b80:	d458      	bmi.n	8004c34 <__sflush_r+0xc0>
 8004b82:	684b      	ldr	r3, [r1, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	dc05      	bgt.n	8004b94 <__sflush_r+0x20>
 8004b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dc02      	bgt.n	8004b94 <__sflush_r+0x20>
 8004b8e:	2000      	movs	r0, #0
 8004b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b96:	2e00      	cmp	r6, #0
 8004b98:	d0f9      	beq.n	8004b8e <__sflush_r+0x1a>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ba0:	682f      	ldr	r7, [r5, #0]
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	d032      	beq.n	8004c0c <__sflush_r+0x98>
 8004ba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	075a      	lsls	r2, r3, #29
 8004bac:	d505      	bpl.n	8004bba <__sflush_r+0x46>
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	1ac0      	subs	r0, r0, r3
 8004bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bb4:	b10b      	cbz	r3, 8004bba <__sflush_r+0x46>
 8004bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bb8:	1ac0      	subs	r0, r0, r3
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bc0:	6a21      	ldr	r1, [r4, #32]
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	47b0      	blx	r6
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	d106      	bne.n	8004bda <__sflush_r+0x66>
 8004bcc:	6829      	ldr	r1, [r5, #0]
 8004bce:	291d      	cmp	r1, #29
 8004bd0:	d82c      	bhi.n	8004c2c <__sflush_r+0xb8>
 8004bd2:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <__sflush_r+0x108>)
 8004bd4:	40ca      	lsrs	r2, r1
 8004bd6:	07d6      	lsls	r6, r2, #31
 8004bd8:	d528      	bpl.n	8004c2c <__sflush_r+0xb8>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	6062      	str	r2, [r4, #4]
 8004bde:	04d9      	lsls	r1, r3, #19
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	6022      	str	r2, [r4, #0]
 8004be4:	d504      	bpl.n	8004bf0 <__sflush_r+0x7c>
 8004be6:	1c42      	adds	r2, r0, #1
 8004be8:	d101      	bne.n	8004bee <__sflush_r+0x7a>
 8004bea:	682b      	ldr	r3, [r5, #0]
 8004bec:	b903      	cbnz	r3, 8004bf0 <__sflush_r+0x7c>
 8004bee:	6560      	str	r0, [r4, #84]	; 0x54
 8004bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf2:	602f      	str	r7, [r5, #0]
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	d0ca      	beq.n	8004b8e <__sflush_r+0x1a>
 8004bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d002      	beq.n	8004c06 <__sflush_r+0x92>
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 fa4d 	bl	80050a0 <_free_r>
 8004c06:	2000      	movs	r0, #0
 8004c08:	6360      	str	r0, [r4, #52]	; 0x34
 8004c0a:	e7c1      	b.n	8004b90 <__sflush_r+0x1c>
 8004c0c:	6a21      	ldr	r1, [r4, #32]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b0      	blx	r6
 8004c14:	1c41      	adds	r1, r0, #1
 8004c16:	d1c7      	bne.n	8004ba8 <__sflush_r+0x34>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0c4      	beq.n	8004ba8 <__sflush_r+0x34>
 8004c1e:	2b1d      	cmp	r3, #29
 8004c20:	d001      	beq.n	8004c26 <__sflush_r+0xb2>
 8004c22:	2b16      	cmp	r3, #22
 8004c24:	d101      	bne.n	8004c2a <__sflush_r+0xb6>
 8004c26:	602f      	str	r7, [r5, #0]
 8004c28:	e7b1      	b.n	8004b8e <__sflush_r+0x1a>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c30:	81a3      	strh	r3, [r4, #12]
 8004c32:	e7ad      	b.n	8004b90 <__sflush_r+0x1c>
 8004c34:	690f      	ldr	r7, [r1, #16]
 8004c36:	2f00      	cmp	r7, #0
 8004c38:	d0a9      	beq.n	8004b8e <__sflush_r+0x1a>
 8004c3a:	0793      	lsls	r3, r2, #30
 8004c3c:	680e      	ldr	r6, [r1, #0]
 8004c3e:	bf08      	it	eq
 8004c40:	694b      	ldreq	r3, [r1, #20]
 8004c42:	600f      	str	r7, [r1, #0]
 8004c44:	bf18      	it	ne
 8004c46:	2300      	movne	r3, #0
 8004c48:	eba6 0807 	sub.w	r8, r6, r7
 8004c4c:	608b      	str	r3, [r1, #8]
 8004c4e:	f1b8 0f00 	cmp.w	r8, #0
 8004c52:	dd9c      	ble.n	8004b8e <__sflush_r+0x1a>
 8004c54:	6a21      	ldr	r1, [r4, #32]
 8004c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c58:	4643      	mov	r3, r8
 8004c5a:	463a      	mov	r2, r7
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	47b0      	blx	r6
 8004c60:	2800      	cmp	r0, #0
 8004c62:	dc06      	bgt.n	8004c72 <__sflush_r+0xfe>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c70:	e78e      	b.n	8004b90 <__sflush_r+0x1c>
 8004c72:	4407      	add	r7, r0
 8004c74:	eba8 0800 	sub.w	r8, r8, r0
 8004c78:	e7e9      	b.n	8004c4e <__sflush_r+0xda>
 8004c7a:	bf00      	nop
 8004c7c:	20400001 	.word	0x20400001

08004c80 <_fflush_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	690b      	ldr	r3, [r1, #16]
 8004c84:	4605      	mov	r5, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	b913      	cbnz	r3, 8004c90 <_fflush_r+0x10>
 8004c8a:	2500      	movs	r5, #0
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	b118      	cbz	r0, 8004c9a <_fflush_r+0x1a>
 8004c92:	6983      	ldr	r3, [r0, #24]
 8004c94:	b90b      	cbnz	r3, 8004c9a <_fflush_r+0x1a>
 8004c96:	f000 f899 	bl	8004dcc <__sinit>
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <_fflush_r+0x6c>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	d11b      	bne.n	8004cd8 <_fflush_r+0x58>
 8004ca0:	686c      	ldr	r4, [r5, #4]
 8004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0ef      	beq.n	8004c8a <_fflush_r+0xa>
 8004caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cac:	07d0      	lsls	r0, r2, #31
 8004cae:	d404      	bmi.n	8004cba <_fflush_r+0x3a>
 8004cb0:	0599      	lsls	r1, r3, #22
 8004cb2:	d402      	bmi.n	8004cba <_fflush_r+0x3a>
 8004cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cb6:	f000 f984 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f7ff ff59 	bl	8004b74 <__sflush_r>
 8004cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc4:	07da      	lsls	r2, r3, #31
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	d4e0      	bmi.n	8004c8c <_fflush_r+0xc>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	059b      	lsls	r3, r3, #22
 8004cce:	d4dd      	bmi.n	8004c8c <_fflush_r+0xc>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd2:	f000 f977 	bl	8004fc4 <__retarget_lock_release_recursive>
 8004cd6:	e7d9      	b.n	8004c8c <_fflush_r+0xc>
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <_fflush_r+0x70>)
 8004cda:	429c      	cmp	r4, r3
 8004cdc:	d101      	bne.n	8004ce2 <_fflush_r+0x62>
 8004cde:	68ac      	ldr	r4, [r5, #8]
 8004ce0:	e7df      	b.n	8004ca2 <_fflush_r+0x22>
 8004ce2:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <_fflush_r+0x74>)
 8004ce4:	429c      	cmp	r4, r3
 8004ce6:	bf08      	it	eq
 8004ce8:	68ec      	ldreq	r4, [r5, #12]
 8004cea:	e7da      	b.n	8004ca2 <_fflush_r+0x22>
 8004cec:	08005e3c 	.word	0x08005e3c
 8004cf0:	08005e5c 	.word	0x08005e5c
 8004cf4:	08005e1c 	.word	0x08005e1c

08004cf8 <fflush>:
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	b920      	cbnz	r0, 8004d06 <fflush+0xe>
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <fflush+0x18>)
 8004cfe:	4905      	ldr	r1, [pc, #20]	; (8004d14 <fflush+0x1c>)
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f000 b8fe 	b.w	8004f02 <_fwalk_reent>
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <fflush+0x20>)
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	f7ff bfb9 	b.w	8004c80 <_fflush_r>
 8004d0e:	bf00      	nop
 8004d10:	08005d14 	.word	0x08005d14
 8004d14:	08004c81 	.word	0x08004c81
 8004d18:	20000044 	.word	0x20000044

08004d1c <std>:
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	4604      	mov	r4, r0
 8004d22:	e9c0 3300 	strd	r3, r3, [r0]
 8004d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d2a:	6083      	str	r3, [r0, #8]
 8004d2c:	8181      	strh	r1, [r0, #12]
 8004d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d30:	81c2      	strh	r2, [r0, #14]
 8004d32:	6183      	str	r3, [r0, #24]
 8004d34:	4619      	mov	r1, r3
 8004d36:	2208      	movs	r2, #8
 8004d38:	305c      	adds	r0, #92	; 0x5c
 8004d3a:	f7ff fc5b 	bl	80045f4 <memset>
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <std+0x38>)
 8004d40:	6263      	str	r3, [r4, #36]	; 0x24
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <std+0x3c>)
 8004d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d46:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <std+0x40>)
 8004d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <std+0x44>)
 8004d4c:	6224      	str	r4, [r4, #32]
 8004d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d50:	bd10      	pop	{r4, pc}
 8004d52:	bf00      	nop
 8004d54:	080058d9 	.word	0x080058d9
 8004d58:	080058fb 	.word	0x080058fb
 8004d5c:	08005933 	.word	0x08005933
 8004d60:	08005957 	.word	0x08005957

08004d64 <_cleanup_r>:
 8004d64:	4901      	ldr	r1, [pc, #4]	; (8004d6c <_cleanup_r+0x8>)
 8004d66:	f000 b8cc 	b.w	8004f02 <_fwalk_reent>
 8004d6a:	bf00      	nop
 8004d6c:	08004c81 	.word	0x08004c81

08004d70 <__sfmoreglue>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	1e4a      	subs	r2, r1, #1
 8004d74:	2568      	movs	r5, #104	; 0x68
 8004d76:	4355      	muls	r5, r2
 8004d78:	460e      	mov	r6, r1
 8004d7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d7e:	f000 f9df 	bl	8005140 <_malloc_r>
 8004d82:	4604      	mov	r4, r0
 8004d84:	b140      	cbz	r0, 8004d98 <__sfmoreglue+0x28>
 8004d86:	2100      	movs	r1, #0
 8004d88:	e9c0 1600 	strd	r1, r6, [r0]
 8004d8c:	300c      	adds	r0, #12
 8004d8e:	60a0      	str	r0, [r4, #8]
 8004d90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d94:	f7ff fc2e 	bl	80045f4 <memset>
 8004d98:	4620      	mov	r0, r4
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}

08004d9c <__sfp_lock_acquire>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	; (8004da4 <__sfp_lock_acquire+0x8>)
 8004d9e:	f000 b910 	b.w	8004fc2 <__retarget_lock_acquire_recursive>
 8004da2:	bf00      	nop
 8004da4:	200001bc 	.word	0x200001bc

08004da8 <__sfp_lock_release>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__sfp_lock_release+0x8>)
 8004daa:	f000 b90b 	b.w	8004fc4 <__retarget_lock_release_recursive>
 8004dae:	bf00      	nop
 8004db0:	200001bc 	.word	0x200001bc

08004db4 <__sinit_lock_acquire>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__sinit_lock_acquire+0x8>)
 8004db6:	f000 b904 	b.w	8004fc2 <__retarget_lock_acquire_recursive>
 8004dba:	bf00      	nop
 8004dbc:	200001b7 	.word	0x200001b7

08004dc0 <__sinit_lock_release>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	; (8004dc8 <__sinit_lock_release+0x8>)
 8004dc2:	f000 b8ff 	b.w	8004fc4 <__retarget_lock_release_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	200001b7 	.word	0x200001b7

08004dcc <__sinit>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	f7ff fff0 	bl	8004db4 <__sinit_lock_acquire>
 8004dd4:	69a3      	ldr	r3, [r4, #24]
 8004dd6:	b11b      	cbz	r3, 8004de0 <__sinit+0x14>
 8004dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ddc:	f7ff bff0 	b.w	8004dc0 <__sinit_lock_release>
 8004de0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004de4:	6523      	str	r3, [r4, #80]	; 0x50
 8004de6:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <__sinit+0x68>)
 8004de8:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <__sinit+0x6c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dee:	42a3      	cmp	r3, r4
 8004df0:	bf04      	itt	eq
 8004df2:	2301      	moveq	r3, #1
 8004df4:	61a3      	streq	r3, [r4, #24]
 8004df6:	4620      	mov	r0, r4
 8004df8:	f000 f820 	bl	8004e3c <__sfp>
 8004dfc:	6060      	str	r0, [r4, #4]
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f000 f81c 	bl	8004e3c <__sfp>
 8004e04:	60a0      	str	r0, [r4, #8]
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 f818 	bl	8004e3c <__sfp>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	60e0      	str	r0, [r4, #12]
 8004e10:	2104      	movs	r1, #4
 8004e12:	6860      	ldr	r0, [r4, #4]
 8004e14:	f7ff ff82 	bl	8004d1c <std>
 8004e18:	68a0      	ldr	r0, [r4, #8]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2109      	movs	r1, #9
 8004e1e:	f7ff ff7d 	bl	8004d1c <std>
 8004e22:	68e0      	ldr	r0, [r4, #12]
 8004e24:	2202      	movs	r2, #2
 8004e26:	2112      	movs	r1, #18
 8004e28:	f7ff ff78 	bl	8004d1c <std>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	61a3      	str	r3, [r4, #24]
 8004e30:	e7d2      	b.n	8004dd8 <__sinit+0xc>
 8004e32:	bf00      	nop
 8004e34:	08005d14 	.word	0x08005d14
 8004e38:	08004d65 	.word	0x08004d65

08004e3c <__sfp>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	4607      	mov	r7, r0
 8004e40:	f7ff ffac 	bl	8004d9c <__sfp_lock_acquire>
 8004e44:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <__sfp+0x84>)
 8004e46:	681e      	ldr	r6, [r3, #0]
 8004e48:	69b3      	ldr	r3, [r6, #24]
 8004e4a:	b913      	cbnz	r3, 8004e52 <__sfp+0x16>
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f7ff ffbd 	bl	8004dcc <__sinit>
 8004e52:	3648      	adds	r6, #72	; 0x48
 8004e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	d503      	bpl.n	8004e64 <__sfp+0x28>
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	b30b      	cbz	r3, 8004ea4 <__sfp+0x68>
 8004e60:	6836      	ldr	r6, [r6, #0]
 8004e62:	e7f7      	b.n	8004e54 <__sfp+0x18>
 8004e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e68:	b9d5      	cbnz	r5, 8004ea0 <__sfp+0x64>
 8004e6a:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <__sfp+0x88>)
 8004e6c:	60e3      	str	r3, [r4, #12]
 8004e6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e72:	6665      	str	r5, [r4, #100]	; 0x64
 8004e74:	f000 f8a4 	bl	8004fc0 <__retarget_lock_init_recursive>
 8004e78:	f7ff ff96 	bl	8004da8 <__sfp_lock_release>
 8004e7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e84:	6025      	str	r5, [r4, #0]
 8004e86:	61a5      	str	r5, [r4, #24]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e90:	f7ff fbb0 	bl	80045f4 <memset>
 8004e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea0:	3468      	adds	r4, #104	; 0x68
 8004ea2:	e7d9      	b.n	8004e58 <__sfp+0x1c>
 8004ea4:	2104      	movs	r1, #4
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f7ff ff62 	bl	8004d70 <__sfmoreglue>
 8004eac:	4604      	mov	r4, r0
 8004eae:	6030      	str	r0, [r6, #0]
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d1d5      	bne.n	8004e60 <__sfp+0x24>
 8004eb4:	f7ff ff78 	bl	8004da8 <__sfp_lock_release>
 8004eb8:	230c      	movs	r3, #12
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	e7ee      	b.n	8004e9c <__sfp+0x60>
 8004ebe:	bf00      	nop
 8004ec0:	08005d14 	.word	0x08005d14
 8004ec4:	ffff0001 	.word	0xffff0001

08004ec8 <_fwalk>:
 8004ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ecc:	460f      	mov	r7, r1
 8004ece:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8004ed8:	f1b8 0801 	subs.w	r8, r8, #1
 8004edc:	d505      	bpl.n	8004eea <_fwalk+0x22>
 8004ede:	6824      	ldr	r4, [r4, #0]
 8004ee0:	2c00      	cmp	r4, #0
 8004ee2:	d1f7      	bne.n	8004ed4 <_fwalk+0xc>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eea:	89ab      	ldrh	r3, [r5, #12]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d906      	bls.n	8004efe <_fwalk+0x36>
 8004ef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	d002      	beq.n	8004efe <_fwalk+0x36>
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b8      	blx	r7
 8004efc:	4306      	orrs	r6, r0
 8004efe:	3568      	adds	r5, #104	; 0x68
 8004f00:	e7ea      	b.n	8004ed8 <_fwalk+0x10>

08004f02 <_fwalk_reent>:
 8004f02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f06:	4606      	mov	r6, r0
 8004f08:	4688      	mov	r8, r1
 8004f0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f0e:	2700      	movs	r7, #0
 8004f10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f14:	f1b9 0901 	subs.w	r9, r9, #1
 8004f18:	d505      	bpl.n	8004f26 <_fwalk_reent+0x24>
 8004f1a:	6824      	ldr	r4, [r4, #0]
 8004f1c:	2c00      	cmp	r4, #0
 8004f1e:	d1f7      	bne.n	8004f10 <_fwalk_reent+0xe>
 8004f20:	4638      	mov	r0, r7
 8004f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f26:	89ab      	ldrh	r3, [r5, #12]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d907      	bls.n	8004f3c <_fwalk_reent+0x3a>
 8004f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f30:	3301      	adds	r3, #1
 8004f32:	d003      	beq.n	8004f3c <_fwalk_reent+0x3a>
 8004f34:	4629      	mov	r1, r5
 8004f36:	4630      	mov	r0, r6
 8004f38:	47c0      	blx	r8
 8004f3a:	4307      	orrs	r7, r0
 8004f3c:	3568      	adds	r5, #104	; 0x68
 8004f3e:	e7e9      	b.n	8004f14 <_fwalk_reent+0x12>

08004f40 <_getc_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	460c      	mov	r4, r1
 8004f44:	4605      	mov	r5, r0
 8004f46:	b118      	cbz	r0, 8004f50 <_getc_r+0x10>
 8004f48:	6983      	ldr	r3, [r0, #24]
 8004f4a:	b90b      	cbnz	r3, 8004f50 <_getc_r+0x10>
 8004f4c:	f7ff ff3e 	bl	8004dcc <__sinit>
 8004f50:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <_getc_r+0x74>)
 8004f52:	429c      	cmp	r4, r3
 8004f54:	d11e      	bne.n	8004f94 <_getc_r+0x54>
 8004f56:	686c      	ldr	r4, [r5, #4]
 8004f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f5a:	07d8      	lsls	r0, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_getc_r+0x2a>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	0599      	lsls	r1, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_getc_r+0x2a>
 8004f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f66:	f000 f82c 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	da19      	bge.n	8004fa8 <_getc_r+0x68>
 8004f74:	4628      	mov	r0, r5
 8004f76:	4621      	mov	r1, r4
 8004f78:	f000 fc72 	bl	8005860 <__srget_r>
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f80:	07da      	lsls	r2, r3, #31
 8004f82:	d405      	bmi.n	8004f90 <_getc_r+0x50>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	059b      	lsls	r3, r3, #22
 8004f88:	d402      	bmi.n	8004f90 <_getc_r+0x50>
 8004f8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f8c:	f000 f81a 	bl	8004fc4 <__retarget_lock_release_recursive>
 8004f90:	4628      	mov	r0, r5
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <_getc_r+0x78>)
 8004f96:	429c      	cmp	r4, r3
 8004f98:	d101      	bne.n	8004f9e <_getc_r+0x5e>
 8004f9a:	68ac      	ldr	r4, [r5, #8]
 8004f9c:	e7dc      	b.n	8004f58 <_getc_r+0x18>
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <_getc_r+0x7c>)
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	bf08      	it	eq
 8004fa4:	68ec      	ldreq	r4, [r5, #12]
 8004fa6:	e7d7      	b.n	8004f58 <_getc_r+0x18>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	6022      	str	r2, [r4, #0]
 8004fae:	781d      	ldrb	r5, [r3, #0]
 8004fb0:	e7e5      	b.n	8004f7e <_getc_r+0x3e>
 8004fb2:	bf00      	nop
 8004fb4:	08005e3c 	.word	0x08005e3c
 8004fb8:	08005e5c 	.word	0x08005e5c
 8004fbc:	08005e1c 	.word	0x08005e1c

08004fc0 <__retarget_lock_init_recursive>:
 8004fc0:	4770      	bx	lr

08004fc2 <__retarget_lock_acquire_recursive>:
 8004fc2:	4770      	bx	lr

08004fc4 <__retarget_lock_release_recursive>:
 8004fc4:	4770      	bx	lr

08004fc6 <__swhatbuf_r>:
 8004fc6:	b570      	push	{r4, r5, r6, lr}
 8004fc8:	460e      	mov	r6, r1
 8004fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	b096      	sub	sp, #88	; 0x58
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	461d      	mov	r5, r3
 8004fd6:	da07      	bge.n	8004fe8 <__swhatbuf_r+0x22>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	602b      	str	r3, [r5, #0]
 8004fdc:	89b3      	ldrh	r3, [r6, #12]
 8004fde:	061a      	lsls	r2, r3, #24
 8004fe0:	d410      	bmi.n	8005004 <__swhatbuf_r+0x3e>
 8004fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe6:	e00e      	b.n	8005006 <__swhatbuf_r+0x40>
 8004fe8:	466a      	mov	r2, sp
 8004fea:	f000 fcdb 	bl	80059a4 <_fstat_r>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	dbf2      	blt.n	8004fd8 <__swhatbuf_r+0x12>
 8004ff2:	9a01      	ldr	r2, [sp, #4]
 8004ff4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ff8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ffc:	425a      	negs	r2, r3
 8004ffe:	415a      	adcs	r2, r3
 8005000:	602a      	str	r2, [r5, #0]
 8005002:	e7ee      	b.n	8004fe2 <__swhatbuf_r+0x1c>
 8005004:	2340      	movs	r3, #64	; 0x40
 8005006:	2000      	movs	r0, #0
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	b016      	add	sp, #88	; 0x58
 800500c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005010 <__smakebuf_r>:
 8005010:	898b      	ldrh	r3, [r1, #12]
 8005012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005014:	079d      	lsls	r5, r3, #30
 8005016:	4606      	mov	r6, r0
 8005018:	460c      	mov	r4, r1
 800501a:	d507      	bpl.n	800502c <__smakebuf_r+0x1c>
 800501c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	2301      	movs	r3, #1
 8005026:	6163      	str	r3, [r4, #20]
 8005028:	b002      	add	sp, #8
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	ab01      	add	r3, sp, #4
 800502e:	466a      	mov	r2, sp
 8005030:	f7ff ffc9 	bl	8004fc6 <__swhatbuf_r>
 8005034:	9900      	ldr	r1, [sp, #0]
 8005036:	4605      	mov	r5, r0
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f881 	bl	8005140 <_malloc_r>
 800503e:	b948      	cbnz	r0, 8005054 <__smakebuf_r+0x44>
 8005040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005044:	059a      	lsls	r2, r3, #22
 8005046:	d4ef      	bmi.n	8005028 <__smakebuf_r+0x18>
 8005048:	f023 0303 	bic.w	r3, r3, #3
 800504c:	f043 0302 	orr.w	r3, r3, #2
 8005050:	81a3      	strh	r3, [r4, #12]
 8005052:	e7e3      	b.n	800501c <__smakebuf_r+0xc>
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <__smakebuf_r+0x7c>)
 8005056:	62b3      	str	r3, [r6, #40]	; 0x28
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	6020      	str	r0, [r4, #0]
 800505c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	9b00      	ldr	r3, [sp, #0]
 8005064:	6163      	str	r3, [r4, #20]
 8005066:	9b01      	ldr	r3, [sp, #4]
 8005068:	6120      	str	r0, [r4, #16]
 800506a:	b15b      	cbz	r3, 8005084 <__smakebuf_r+0x74>
 800506c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005070:	4630      	mov	r0, r6
 8005072:	f000 fca9 	bl	80059c8 <_isatty_r>
 8005076:	b128      	cbz	r0, 8005084 <__smakebuf_r+0x74>
 8005078:	89a3      	ldrh	r3, [r4, #12]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	89a0      	ldrh	r0, [r4, #12]
 8005086:	4305      	orrs	r5, r0
 8005088:	81a5      	strh	r5, [r4, #12]
 800508a:	e7cd      	b.n	8005028 <__smakebuf_r+0x18>
 800508c:	08004d65 	.word	0x08004d65

08005090 <malloc>:
 8005090:	4b02      	ldr	r3, [pc, #8]	; (800509c <malloc+0xc>)
 8005092:	4601      	mov	r1, r0
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	f000 b853 	b.w	8005140 <_malloc_r>
 800509a:	bf00      	nop
 800509c:	20000044 	.word	0x20000044

080050a0 <_free_r>:
 80050a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050a2:	2900      	cmp	r1, #0
 80050a4:	d048      	beq.n	8005138 <_free_r+0x98>
 80050a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050aa:	9001      	str	r0, [sp, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f1a1 0404 	sub.w	r4, r1, #4
 80050b2:	bfb8      	it	lt
 80050b4:	18e4      	addlt	r4, r4, r3
 80050b6:	f000 fca9 	bl	8005a0c <__malloc_lock>
 80050ba:	4a20      	ldr	r2, [pc, #128]	; (800513c <_free_r+0x9c>)
 80050bc:	9801      	ldr	r0, [sp, #4]
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	4615      	mov	r5, r2
 80050c2:	b933      	cbnz	r3, 80050d2 <_free_r+0x32>
 80050c4:	6063      	str	r3, [r4, #4]
 80050c6:	6014      	str	r4, [r2, #0]
 80050c8:	b003      	add	sp, #12
 80050ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050ce:	f000 bca3 	b.w	8005a18 <__malloc_unlock>
 80050d2:	42a3      	cmp	r3, r4
 80050d4:	d90b      	bls.n	80050ee <_free_r+0x4e>
 80050d6:	6821      	ldr	r1, [r4, #0]
 80050d8:	1862      	adds	r2, r4, r1
 80050da:	4293      	cmp	r3, r2
 80050dc:	bf04      	itt	eq
 80050de:	681a      	ldreq	r2, [r3, #0]
 80050e0:	685b      	ldreq	r3, [r3, #4]
 80050e2:	6063      	str	r3, [r4, #4]
 80050e4:	bf04      	itt	eq
 80050e6:	1852      	addeq	r2, r2, r1
 80050e8:	6022      	streq	r2, [r4, #0]
 80050ea:	602c      	str	r4, [r5, #0]
 80050ec:	e7ec      	b.n	80050c8 <_free_r+0x28>
 80050ee:	461a      	mov	r2, r3
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	b10b      	cbz	r3, 80050f8 <_free_r+0x58>
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	d9fa      	bls.n	80050ee <_free_r+0x4e>
 80050f8:	6811      	ldr	r1, [r2, #0]
 80050fa:	1855      	adds	r5, r2, r1
 80050fc:	42a5      	cmp	r5, r4
 80050fe:	d10b      	bne.n	8005118 <_free_r+0x78>
 8005100:	6824      	ldr	r4, [r4, #0]
 8005102:	4421      	add	r1, r4
 8005104:	1854      	adds	r4, r2, r1
 8005106:	42a3      	cmp	r3, r4
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	d1dd      	bne.n	80050c8 <_free_r+0x28>
 800510c:	681c      	ldr	r4, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	6053      	str	r3, [r2, #4]
 8005112:	4421      	add	r1, r4
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	e7d7      	b.n	80050c8 <_free_r+0x28>
 8005118:	d902      	bls.n	8005120 <_free_r+0x80>
 800511a:	230c      	movs	r3, #12
 800511c:	6003      	str	r3, [r0, #0]
 800511e:	e7d3      	b.n	80050c8 <_free_r+0x28>
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1961      	adds	r1, r4, r5
 8005124:	428b      	cmp	r3, r1
 8005126:	bf04      	itt	eq
 8005128:	6819      	ldreq	r1, [r3, #0]
 800512a:	685b      	ldreq	r3, [r3, #4]
 800512c:	6063      	str	r3, [r4, #4]
 800512e:	bf04      	itt	eq
 8005130:	1949      	addeq	r1, r1, r5
 8005132:	6021      	streq	r1, [r4, #0]
 8005134:	6054      	str	r4, [r2, #4]
 8005136:	e7c7      	b.n	80050c8 <_free_r+0x28>
 8005138:	b003      	add	sp, #12
 800513a:	bd30      	pop	{r4, r5, pc}
 800513c:	200000c8 	.word	0x200000c8

08005140 <_malloc_r>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	1ccd      	adds	r5, r1, #3
 8005144:	f025 0503 	bic.w	r5, r5, #3
 8005148:	3508      	adds	r5, #8
 800514a:	2d0c      	cmp	r5, #12
 800514c:	bf38      	it	cc
 800514e:	250c      	movcc	r5, #12
 8005150:	2d00      	cmp	r5, #0
 8005152:	4606      	mov	r6, r0
 8005154:	db01      	blt.n	800515a <_malloc_r+0x1a>
 8005156:	42a9      	cmp	r1, r5
 8005158:	d903      	bls.n	8005162 <_malloc_r+0x22>
 800515a:	230c      	movs	r3, #12
 800515c:	6033      	str	r3, [r6, #0]
 800515e:	2000      	movs	r0, #0
 8005160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005162:	f000 fc53 	bl	8005a0c <__malloc_lock>
 8005166:	4921      	ldr	r1, [pc, #132]	; (80051ec <_malloc_r+0xac>)
 8005168:	680a      	ldr	r2, [r1, #0]
 800516a:	4614      	mov	r4, r2
 800516c:	b99c      	cbnz	r4, 8005196 <_malloc_r+0x56>
 800516e:	4f20      	ldr	r7, [pc, #128]	; (80051f0 <_malloc_r+0xb0>)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	b923      	cbnz	r3, 800517e <_malloc_r+0x3e>
 8005174:	4621      	mov	r1, r4
 8005176:	4630      	mov	r0, r6
 8005178:	f000 fb9e 	bl	80058b8 <_sbrk_r>
 800517c:	6038      	str	r0, [r7, #0]
 800517e:	4629      	mov	r1, r5
 8005180:	4630      	mov	r0, r6
 8005182:	f000 fb99 	bl	80058b8 <_sbrk_r>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	d123      	bne.n	80051d2 <_malloc_r+0x92>
 800518a:	230c      	movs	r3, #12
 800518c:	6033      	str	r3, [r6, #0]
 800518e:	4630      	mov	r0, r6
 8005190:	f000 fc42 	bl	8005a18 <__malloc_unlock>
 8005194:	e7e3      	b.n	800515e <_malloc_r+0x1e>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	1b5b      	subs	r3, r3, r5
 800519a:	d417      	bmi.n	80051cc <_malloc_r+0x8c>
 800519c:	2b0b      	cmp	r3, #11
 800519e:	d903      	bls.n	80051a8 <_malloc_r+0x68>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	441c      	add	r4, r3
 80051a4:	6025      	str	r5, [r4, #0]
 80051a6:	e004      	b.n	80051b2 <_malloc_r+0x72>
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	42a2      	cmp	r2, r4
 80051ac:	bf0c      	ite	eq
 80051ae:	600b      	streq	r3, [r1, #0]
 80051b0:	6053      	strne	r3, [r2, #4]
 80051b2:	4630      	mov	r0, r6
 80051b4:	f000 fc30 	bl	8005a18 <__malloc_unlock>
 80051b8:	f104 000b 	add.w	r0, r4, #11
 80051bc:	1d23      	adds	r3, r4, #4
 80051be:	f020 0007 	bic.w	r0, r0, #7
 80051c2:	1ac2      	subs	r2, r0, r3
 80051c4:	d0cc      	beq.n	8005160 <_malloc_r+0x20>
 80051c6:	1a1b      	subs	r3, r3, r0
 80051c8:	50a3      	str	r3, [r4, r2]
 80051ca:	e7c9      	b.n	8005160 <_malloc_r+0x20>
 80051cc:	4622      	mov	r2, r4
 80051ce:	6864      	ldr	r4, [r4, #4]
 80051d0:	e7cc      	b.n	800516c <_malloc_r+0x2c>
 80051d2:	1cc4      	adds	r4, r0, #3
 80051d4:	f024 0403 	bic.w	r4, r4, #3
 80051d8:	42a0      	cmp	r0, r4
 80051da:	d0e3      	beq.n	80051a4 <_malloc_r+0x64>
 80051dc:	1a21      	subs	r1, r4, r0
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 fb6a 	bl	80058b8 <_sbrk_r>
 80051e4:	3001      	adds	r0, #1
 80051e6:	d1dd      	bne.n	80051a4 <_malloc_r+0x64>
 80051e8:	e7cf      	b.n	800518a <_malloc_r+0x4a>
 80051ea:	bf00      	nop
 80051ec:	200000c8 	.word	0x200000c8
 80051f0:	200000cc 	.word	0x200000cc

080051f4 <__sfputc_r>:
 80051f4:	6893      	ldr	r3, [r2, #8]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	b410      	push	{r4}
 80051fc:	6093      	str	r3, [r2, #8]
 80051fe:	da08      	bge.n	8005212 <__sfputc_r+0x1e>
 8005200:	6994      	ldr	r4, [r2, #24]
 8005202:	42a3      	cmp	r3, r4
 8005204:	db01      	blt.n	800520a <__sfputc_r+0x16>
 8005206:	290a      	cmp	r1, #10
 8005208:	d103      	bne.n	8005212 <__sfputc_r+0x1e>
 800520a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800520e:	f7ff bbf1 	b.w	80049f4 <__swbuf_r>
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	1c58      	adds	r0, r3, #1
 8005216:	6010      	str	r0, [r2, #0]
 8005218:	7019      	strb	r1, [r3, #0]
 800521a:	4608      	mov	r0, r1
 800521c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005220:	4770      	bx	lr

08005222 <__sfputs_r>:
 8005222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005224:	4606      	mov	r6, r0
 8005226:	460f      	mov	r7, r1
 8005228:	4614      	mov	r4, r2
 800522a:	18d5      	adds	r5, r2, r3
 800522c:	42ac      	cmp	r4, r5
 800522e:	d101      	bne.n	8005234 <__sfputs_r+0x12>
 8005230:	2000      	movs	r0, #0
 8005232:	e007      	b.n	8005244 <__sfputs_r+0x22>
 8005234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005238:	463a      	mov	r2, r7
 800523a:	4630      	mov	r0, r6
 800523c:	f7ff ffda 	bl	80051f4 <__sfputc_r>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d1f3      	bne.n	800522c <__sfputs_r+0xa>
 8005244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005248 <_vfiprintf_r>:
 8005248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524c:	460d      	mov	r5, r1
 800524e:	b09d      	sub	sp, #116	; 0x74
 8005250:	4614      	mov	r4, r2
 8005252:	4698      	mov	r8, r3
 8005254:	4606      	mov	r6, r0
 8005256:	b118      	cbz	r0, 8005260 <_vfiprintf_r+0x18>
 8005258:	6983      	ldr	r3, [r0, #24]
 800525a:	b90b      	cbnz	r3, 8005260 <_vfiprintf_r+0x18>
 800525c:	f7ff fdb6 	bl	8004dcc <__sinit>
 8005260:	4b89      	ldr	r3, [pc, #548]	; (8005488 <_vfiprintf_r+0x240>)
 8005262:	429d      	cmp	r5, r3
 8005264:	d11b      	bne.n	800529e <_vfiprintf_r+0x56>
 8005266:	6875      	ldr	r5, [r6, #4]
 8005268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800526a:	07d9      	lsls	r1, r3, #31
 800526c:	d405      	bmi.n	800527a <_vfiprintf_r+0x32>
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	059a      	lsls	r2, r3, #22
 8005272:	d402      	bmi.n	800527a <_vfiprintf_r+0x32>
 8005274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005276:	f7ff fea4 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 800527a:	89ab      	ldrh	r3, [r5, #12]
 800527c:	071b      	lsls	r3, r3, #28
 800527e:	d501      	bpl.n	8005284 <_vfiprintf_r+0x3c>
 8005280:	692b      	ldr	r3, [r5, #16]
 8005282:	b9eb      	cbnz	r3, 80052c0 <_vfiprintf_r+0x78>
 8005284:	4629      	mov	r1, r5
 8005286:	4630      	mov	r0, r6
 8005288:	f7ff fc06 	bl	8004a98 <__swsetup_r>
 800528c:	b1c0      	cbz	r0, 80052c0 <_vfiprintf_r+0x78>
 800528e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005290:	07dc      	lsls	r4, r3, #31
 8005292:	d50e      	bpl.n	80052b2 <_vfiprintf_r+0x6a>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005298:	b01d      	add	sp, #116	; 0x74
 800529a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529e:	4b7b      	ldr	r3, [pc, #492]	; (800548c <_vfiprintf_r+0x244>)
 80052a0:	429d      	cmp	r5, r3
 80052a2:	d101      	bne.n	80052a8 <_vfiprintf_r+0x60>
 80052a4:	68b5      	ldr	r5, [r6, #8]
 80052a6:	e7df      	b.n	8005268 <_vfiprintf_r+0x20>
 80052a8:	4b79      	ldr	r3, [pc, #484]	; (8005490 <_vfiprintf_r+0x248>)
 80052aa:	429d      	cmp	r5, r3
 80052ac:	bf08      	it	eq
 80052ae:	68f5      	ldreq	r5, [r6, #12]
 80052b0:	e7da      	b.n	8005268 <_vfiprintf_r+0x20>
 80052b2:	89ab      	ldrh	r3, [r5, #12]
 80052b4:	0598      	lsls	r0, r3, #22
 80052b6:	d4ed      	bmi.n	8005294 <_vfiprintf_r+0x4c>
 80052b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ba:	f7ff fe83 	bl	8004fc4 <__retarget_lock_release_recursive>
 80052be:	e7e9      	b.n	8005294 <_vfiprintf_r+0x4c>
 80052c0:	2300      	movs	r3, #0
 80052c2:	9309      	str	r3, [sp, #36]	; 0x24
 80052c4:	2320      	movs	r3, #32
 80052c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ce:	2330      	movs	r3, #48	; 0x30
 80052d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005494 <_vfiprintf_r+0x24c>
 80052d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052d8:	f04f 0901 	mov.w	r9, #1
 80052dc:	4623      	mov	r3, r4
 80052de:	469a      	mov	sl, r3
 80052e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052e4:	b10a      	cbz	r2, 80052ea <_vfiprintf_r+0xa2>
 80052e6:	2a25      	cmp	r2, #37	; 0x25
 80052e8:	d1f9      	bne.n	80052de <_vfiprintf_r+0x96>
 80052ea:	ebba 0b04 	subs.w	fp, sl, r4
 80052ee:	d00b      	beq.n	8005308 <_vfiprintf_r+0xc0>
 80052f0:	465b      	mov	r3, fp
 80052f2:	4622      	mov	r2, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	4630      	mov	r0, r6
 80052f8:	f7ff ff93 	bl	8005222 <__sfputs_r>
 80052fc:	3001      	adds	r0, #1
 80052fe:	f000 80aa 	beq.w	8005456 <_vfiprintf_r+0x20e>
 8005302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005304:	445a      	add	r2, fp
 8005306:	9209      	str	r2, [sp, #36]	; 0x24
 8005308:	f89a 3000 	ldrb.w	r3, [sl]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80a2 	beq.w	8005456 <_vfiprintf_r+0x20e>
 8005312:	2300      	movs	r3, #0
 8005314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800531c:	f10a 0a01 	add.w	sl, sl, #1
 8005320:	9304      	str	r3, [sp, #16]
 8005322:	9307      	str	r3, [sp, #28]
 8005324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005328:	931a      	str	r3, [sp, #104]	; 0x68
 800532a:	4654      	mov	r4, sl
 800532c:	2205      	movs	r2, #5
 800532e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005332:	4858      	ldr	r0, [pc, #352]	; (8005494 <_vfiprintf_r+0x24c>)
 8005334:	f7fa ff5c 	bl	80001f0 <memchr>
 8005338:	9a04      	ldr	r2, [sp, #16]
 800533a:	b9d8      	cbnz	r0, 8005374 <_vfiprintf_r+0x12c>
 800533c:	06d1      	lsls	r1, r2, #27
 800533e:	bf44      	itt	mi
 8005340:	2320      	movmi	r3, #32
 8005342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005346:	0713      	lsls	r3, r2, #28
 8005348:	bf44      	itt	mi
 800534a:	232b      	movmi	r3, #43	; 0x2b
 800534c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005350:	f89a 3000 	ldrb.w	r3, [sl]
 8005354:	2b2a      	cmp	r3, #42	; 0x2a
 8005356:	d015      	beq.n	8005384 <_vfiprintf_r+0x13c>
 8005358:	9a07      	ldr	r2, [sp, #28]
 800535a:	4654      	mov	r4, sl
 800535c:	2000      	movs	r0, #0
 800535e:	f04f 0c0a 	mov.w	ip, #10
 8005362:	4621      	mov	r1, r4
 8005364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005368:	3b30      	subs	r3, #48	; 0x30
 800536a:	2b09      	cmp	r3, #9
 800536c:	d94e      	bls.n	800540c <_vfiprintf_r+0x1c4>
 800536e:	b1b0      	cbz	r0, 800539e <_vfiprintf_r+0x156>
 8005370:	9207      	str	r2, [sp, #28]
 8005372:	e014      	b.n	800539e <_vfiprintf_r+0x156>
 8005374:	eba0 0308 	sub.w	r3, r0, r8
 8005378:	fa09 f303 	lsl.w	r3, r9, r3
 800537c:	4313      	orrs	r3, r2
 800537e:	9304      	str	r3, [sp, #16]
 8005380:	46a2      	mov	sl, r4
 8005382:	e7d2      	b.n	800532a <_vfiprintf_r+0xe2>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	1d19      	adds	r1, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	9103      	str	r1, [sp, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	bfbb      	ittet	lt
 8005390:	425b      	neglt	r3, r3
 8005392:	f042 0202 	orrlt.w	r2, r2, #2
 8005396:	9307      	strge	r3, [sp, #28]
 8005398:	9307      	strlt	r3, [sp, #28]
 800539a:	bfb8      	it	lt
 800539c:	9204      	strlt	r2, [sp, #16]
 800539e:	7823      	ldrb	r3, [r4, #0]
 80053a0:	2b2e      	cmp	r3, #46	; 0x2e
 80053a2:	d10c      	bne.n	80053be <_vfiprintf_r+0x176>
 80053a4:	7863      	ldrb	r3, [r4, #1]
 80053a6:	2b2a      	cmp	r3, #42	; 0x2a
 80053a8:	d135      	bne.n	8005416 <_vfiprintf_r+0x1ce>
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	1d1a      	adds	r2, r3, #4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	9203      	str	r2, [sp, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bfb8      	it	lt
 80053b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80053ba:	3402      	adds	r4, #2
 80053bc:	9305      	str	r3, [sp, #20]
 80053be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80054a4 <_vfiprintf_r+0x25c>
 80053c2:	7821      	ldrb	r1, [r4, #0]
 80053c4:	2203      	movs	r2, #3
 80053c6:	4650      	mov	r0, sl
 80053c8:	f7fa ff12 	bl	80001f0 <memchr>
 80053cc:	b140      	cbz	r0, 80053e0 <_vfiprintf_r+0x198>
 80053ce:	2340      	movs	r3, #64	; 0x40
 80053d0:	eba0 000a 	sub.w	r0, r0, sl
 80053d4:	fa03 f000 	lsl.w	r0, r3, r0
 80053d8:	9b04      	ldr	r3, [sp, #16]
 80053da:	4303      	orrs	r3, r0
 80053dc:	3401      	adds	r4, #1
 80053de:	9304      	str	r3, [sp, #16]
 80053e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e4:	482c      	ldr	r0, [pc, #176]	; (8005498 <_vfiprintf_r+0x250>)
 80053e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053ea:	2206      	movs	r2, #6
 80053ec:	f7fa ff00 	bl	80001f0 <memchr>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d03f      	beq.n	8005474 <_vfiprintf_r+0x22c>
 80053f4:	4b29      	ldr	r3, [pc, #164]	; (800549c <_vfiprintf_r+0x254>)
 80053f6:	bb1b      	cbnz	r3, 8005440 <_vfiprintf_r+0x1f8>
 80053f8:	9b03      	ldr	r3, [sp, #12]
 80053fa:	3307      	adds	r3, #7
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	3308      	adds	r3, #8
 8005402:	9303      	str	r3, [sp, #12]
 8005404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005406:	443b      	add	r3, r7
 8005408:	9309      	str	r3, [sp, #36]	; 0x24
 800540a:	e767      	b.n	80052dc <_vfiprintf_r+0x94>
 800540c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005410:	460c      	mov	r4, r1
 8005412:	2001      	movs	r0, #1
 8005414:	e7a5      	b.n	8005362 <_vfiprintf_r+0x11a>
 8005416:	2300      	movs	r3, #0
 8005418:	3401      	adds	r4, #1
 800541a:	9305      	str	r3, [sp, #20]
 800541c:	4619      	mov	r1, r3
 800541e:	f04f 0c0a 	mov.w	ip, #10
 8005422:	4620      	mov	r0, r4
 8005424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005428:	3a30      	subs	r2, #48	; 0x30
 800542a:	2a09      	cmp	r2, #9
 800542c:	d903      	bls.n	8005436 <_vfiprintf_r+0x1ee>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0c5      	beq.n	80053be <_vfiprintf_r+0x176>
 8005432:	9105      	str	r1, [sp, #20]
 8005434:	e7c3      	b.n	80053be <_vfiprintf_r+0x176>
 8005436:	fb0c 2101 	mla	r1, ip, r1, r2
 800543a:	4604      	mov	r4, r0
 800543c:	2301      	movs	r3, #1
 800543e:	e7f0      	b.n	8005422 <_vfiprintf_r+0x1da>
 8005440:	ab03      	add	r3, sp, #12
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	462a      	mov	r2, r5
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <_vfiprintf_r+0x258>)
 8005448:	a904      	add	r1, sp, #16
 800544a:	4630      	mov	r0, r6
 800544c:	f3af 8000 	nop.w
 8005450:	4607      	mov	r7, r0
 8005452:	1c78      	adds	r0, r7, #1
 8005454:	d1d6      	bne.n	8005404 <_vfiprintf_r+0x1bc>
 8005456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005458:	07d9      	lsls	r1, r3, #31
 800545a:	d405      	bmi.n	8005468 <_vfiprintf_r+0x220>
 800545c:	89ab      	ldrh	r3, [r5, #12]
 800545e:	059a      	lsls	r2, r3, #22
 8005460:	d402      	bmi.n	8005468 <_vfiprintf_r+0x220>
 8005462:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005464:	f7ff fdae 	bl	8004fc4 <__retarget_lock_release_recursive>
 8005468:	89ab      	ldrh	r3, [r5, #12]
 800546a:	065b      	lsls	r3, r3, #25
 800546c:	f53f af12 	bmi.w	8005294 <_vfiprintf_r+0x4c>
 8005470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005472:	e711      	b.n	8005298 <_vfiprintf_r+0x50>
 8005474:	ab03      	add	r3, sp, #12
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	462a      	mov	r2, r5
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <_vfiprintf_r+0x258>)
 800547c:	a904      	add	r1, sp, #16
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f880 	bl	8005584 <_printf_i>
 8005484:	e7e4      	b.n	8005450 <_vfiprintf_r+0x208>
 8005486:	bf00      	nop
 8005488:	08005e3c 	.word	0x08005e3c
 800548c:	08005e5c 	.word	0x08005e5c
 8005490:	08005e1c 	.word	0x08005e1c
 8005494:	08005e7c 	.word	0x08005e7c
 8005498:	08005e86 	.word	0x08005e86
 800549c:	00000000 	.word	0x00000000
 80054a0:	08005223 	.word	0x08005223
 80054a4:	08005e82 	.word	0x08005e82

080054a8 <_printf_common>:
 80054a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	4616      	mov	r6, r2
 80054ae:	4699      	mov	r9, r3
 80054b0:	688a      	ldr	r2, [r1, #8]
 80054b2:	690b      	ldr	r3, [r1, #16]
 80054b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bfb8      	it	lt
 80054bc:	4613      	movlt	r3, r2
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054c4:	4607      	mov	r7, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b10a      	cbz	r2, 80054ce <_printf_common+0x26>
 80054ca:	3301      	adds	r3, #1
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	0699      	lsls	r1, r3, #26
 80054d2:	bf42      	ittt	mi
 80054d4:	6833      	ldrmi	r3, [r6, #0]
 80054d6:	3302      	addmi	r3, #2
 80054d8:	6033      	strmi	r3, [r6, #0]
 80054da:	6825      	ldr	r5, [r4, #0]
 80054dc:	f015 0506 	ands.w	r5, r5, #6
 80054e0:	d106      	bne.n	80054f0 <_printf_common+0x48>
 80054e2:	f104 0a19 	add.w	sl, r4, #25
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	6832      	ldr	r2, [r6, #0]
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dc26      	bgt.n	800553e <_printf_common+0x96>
 80054f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054f4:	1e13      	subs	r3, r2, #0
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	bf18      	it	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	0692      	lsls	r2, r2, #26
 80054fe:	d42b      	bmi.n	8005558 <_printf_common+0xb0>
 8005500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d01e      	beq.n	800554c <_printf_common+0xa4>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	68e5      	ldr	r5, [r4, #12]
 8005512:	6832      	ldr	r2, [r6, #0]
 8005514:	f003 0306 	and.w	r3, r3, #6
 8005518:	2b04      	cmp	r3, #4
 800551a:	bf08      	it	eq
 800551c:	1aad      	subeq	r5, r5, r2
 800551e:	68a3      	ldr	r3, [r4, #8]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	bf0c      	ite	eq
 8005524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005528:	2500      	movne	r5, #0
 800552a:	4293      	cmp	r3, r2
 800552c:	bfc4      	itt	gt
 800552e:	1a9b      	subgt	r3, r3, r2
 8005530:	18ed      	addgt	r5, r5, r3
 8005532:	2600      	movs	r6, #0
 8005534:	341a      	adds	r4, #26
 8005536:	42b5      	cmp	r5, r6
 8005538:	d11a      	bne.n	8005570 <_printf_common+0xc8>
 800553a:	2000      	movs	r0, #0
 800553c:	e008      	b.n	8005550 <_printf_common+0xa8>
 800553e:	2301      	movs	r3, #1
 8005540:	4652      	mov	r2, sl
 8005542:	4649      	mov	r1, r9
 8005544:	4638      	mov	r0, r7
 8005546:	47c0      	blx	r8
 8005548:	3001      	adds	r0, #1
 800554a:	d103      	bne.n	8005554 <_printf_common+0xac>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005554:	3501      	adds	r5, #1
 8005556:	e7c6      	b.n	80054e6 <_printf_common+0x3e>
 8005558:	18e1      	adds	r1, r4, r3
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	2030      	movs	r0, #48	; 0x30
 800555e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005562:	4422      	add	r2, r4
 8005564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800556c:	3302      	adds	r3, #2
 800556e:	e7c7      	b.n	8005500 <_printf_common+0x58>
 8005570:	2301      	movs	r3, #1
 8005572:	4622      	mov	r2, r4
 8005574:	4649      	mov	r1, r9
 8005576:	4638      	mov	r0, r7
 8005578:	47c0      	blx	r8
 800557a:	3001      	adds	r0, #1
 800557c:	d0e6      	beq.n	800554c <_printf_common+0xa4>
 800557e:	3601      	adds	r6, #1
 8005580:	e7d9      	b.n	8005536 <_printf_common+0x8e>
	...

08005584 <_printf_i>:
 8005584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	460c      	mov	r4, r1
 800558a:	4691      	mov	r9, r2
 800558c:	7e27      	ldrb	r7, [r4, #24]
 800558e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005590:	2f78      	cmp	r7, #120	; 0x78
 8005592:	4680      	mov	r8, r0
 8005594:	469a      	mov	sl, r3
 8005596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559a:	d807      	bhi.n	80055ac <_printf_i+0x28>
 800559c:	2f62      	cmp	r7, #98	; 0x62
 800559e:	d80a      	bhi.n	80055b6 <_printf_i+0x32>
 80055a0:	2f00      	cmp	r7, #0
 80055a2:	f000 80d8 	beq.w	8005756 <_printf_i+0x1d2>
 80055a6:	2f58      	cmp	r7, #88	; 0x58
 80055a8:	f000 80a3 	beq.w	80056f2 <_printf_i+0x16e>
 80055ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055b4:	e03a      	b.n	800562c <_printf_i+0xa8>
 80055b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ba:	2b15      	cmp	r3, #21
 80055bc:	d8f6      	bhi.n	80055ac <_printf_i+0x28>
 80055be:	a001      	add	r0, pc, #4	; (adr r0, 80055c4 <_printf_i+0x40>)
 80055c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	08005631 	.word	0x08005631
 80055cc:	080055ad 	.word	0x080055ad
 80055d0:	080055ad 	.word	0x080055ad
 80055d4:	080055ad 	.word	0x080055ad
 80055d8:	080055ad 	.word	0x080055ad
 80055dc:	08005631 	.word	0x08005631
 80055e0:	080055ad 	.word	0x080055ad
 80055e4:	080055ad 	.word	0x080055ad
 80055e8:	080055ad 	.word	0x080055ad
 80055ec:	080055ad 	.word	0x080055ad
 80055f0:	0800573d 	.word	0x0800573d
 80055f4:	08005661 	.word	0x08005661
 80055f8:	0800571f 	.word	0x0800571f
 80055fc:	080055ad 	.word	0x080055ad
 8005600:	080055ad 	.word	0x080055ad
 8005604:	0800575f 	.word	0x0800575f
 8005608:	080055ad 	.word	0x080055ad
 800560c:	08005661 	.word	0x08005661
 8005610:	080055ad 	.word	0x080055ad
 8005614:	080055ad 	.word	0x080055ad
 8005618:	08005727 	.word	0x08005727
 800561c:	680b      	ldr	r3, [r1, #0]
 800561e:	1d1a      	adds	r2, r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	600a      	str	r2, [r1, #0]
 8005624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800562c:	2301      	movs	r3, #1
 800562e:	e0a3      	b.n	8005778 <_printf_i+0x1f4>
 8005630:	6825      	ldr	r5, [r4, #0]
 8005632:	6808      	ldr	r0, [r1, #0]
 8005634:	062e      	lsls	r6, r5, #24
 8005636:	f100 0304 	add.w	r3, r0, #4
 800563a:	d50a      	bpl.n	8005652 <_printf_i+0xce>
 800563c:	6805      	ldr	r5, [r0, #0]
 800563e:	600b      	str	r3, [r1, #0]
 8005640:	2d00      	cmp	r5, #0
 8005642:	da03      	bge.n	800564c <_printf_i+0xc8>
 8005644:	232d      	movs	r3, #45	; 0x2d
 8005646:	426d      	negs	r5, r5
 8005648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564c:	485e      	ldr	r0, [pc, #376]	; (80057c8 <_printf_i+0x244>)
 800564e:	230a      	movs	r3, #10
 8005650:	e019      	b.n	8005686 <_printf_i+0x102>
 8005652:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005656:	6805      	ldr	r5, [r0, #0]
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	bf18      	it	ne
 800565c:	b22d      	sxthne	r5, r5
 800565e:	e7ef      	b.n	8005640 <_printf_i+0xbc>
 8005660:	680b      	ldr	r3, [r1, #0]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	1d18      	adds	r0, r3, #4
 8005666:	6008      	str	r0, [r1, #0]
 8005668:	0628      	lsls	r0, r5, #24
 800566a:	d501      	bpl.n	8005670 <_printf_i+0xec>
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	e002      	b.n	8005676 <_printf_i+0xf2>
 8005670:	0669      	lsls	r1, r5, #25
 8005672:	d5fb      	bpl.n	800566c <_printf_i+0xe8>
 8005674:	881d      	ldrh	r5, [r3, #0]
 8005676:	4854      	ldr	r0, [pc, #336]	; (80057c8 <_printf_i+0x244>)
 8005678:	2f6f      	cmp	r7, #111	; 0x6f
 800567a:	bf0c      	ite	eq
 800567c:	2308      	moveq	r3, #8
 800567e:	230a      	movne	r3, #10
 8005680:	2100      	movs	r1, #0
 8005682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005686:	6866      	ldr	r6, [r4, #4]
 8005688:	60a6      	str	r6, [r4, #8]
 800568a:	2e00      	cmp	r6, #0
 800568c:	bfa2      	ittt	ge
 800568e:	6821      	ldrge	r1, [r4, #0]
 8005690:	f021 0104 	bicge.w	r1, r1, #4
 8005694:	6021      	strge	r1, [r4, #0]
 8005696:	b90d      	cbnz	r5, 800569c <_printf_i+0x118>
 8005698:	2e00      	cmp	r6, #0
 800569a:	d04d      	beq.n	8005738 <_printf_i+0x1b4>
 800569c:	4616      	mov	r6, r2
 800569e:	fbb5 f1f3 	udiv	r1, r5, r3
 80056a2:	fb03 5711 	mls	r7, r3, r1, r5
 80056a6:	5dc7      	ldrb	r7, [r0, r7]
 80056a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056ac:	462f      	mov	r7, r5
 80056ae:	42bb      	cmp	r3, r7
 80056b0:	460d      	mov	r5, r1
 80056b2:	d9f4      	bls.n	800569e <_printf_i+0x11a>
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d10b      	bne.n	80056d0 <_printf_i+0x14c>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	07df      	lsls	r7, r3, #31
 80056bc:	d508      	bpl.n	80056d0 <_printf_i+0x14c>
 80056be:	6923      	ldr	r3, [r4, #16]
 80056c0:	6861      	ldr	r1, [r4, #4]
 80056c2:	4299      	cmp	r1, r3
 80056c4:	bfde      	ittt	le
 80056c6:	2330      	movle	r3, #48	; 0x30
 80056c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80056d0:	1b92      	subs	r2, r2, r6
 80056d2:	6122      	str	r2, [r4, #16]
 80056d4:	f8cd a000 	str.w	sl, [sp]
 80056d8:	464b      	mov	r3, r9
 80056da:	aa03      	add	r2, sp, #12
 80056dc:	4621      	mov	r1, r4
 80056de:	4640      	mov	r0, r8
 80056e0:	f7ff fee2 	bl	80054a8 <_printf_common>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d14c      	bne.n	8005782 <_printf_i+0x1fe>
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ec:	b004      	add	sp, #16
 80056ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f2:	4835      	ldr	r0, [pc, #212]	; (80057c8 <_printf_i+0x244>)
 80056f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	680e      	ldr	r6, [r1, #0]
 80056fc:	061f      	lsls	r7, r3, #24
 80056fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005702:	600e      	str	r6, [r1, #0]
 8005704:	d514      	bpl.n	8005730 <_printf_i+0x1ac>
 8005706:	07d9      	lsls	r1, r3, #31
 8005708:	bf44      	itt	mi
 800570a:	f043 0320 	orrmi.w	r3, r3, #32
 800570e:	6023      	strmi	r3, [r4, #0]
 8005710:	b91d      	cbnz	r5, 800571a <_printf_i+0x196>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f023 0320 	bic.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	2310      	movs	r3, #16
 800571c:	e7b0      	b.n	8005680 <_printf_i+0xfc>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f043 0320 	orr.w	r3, r3, #32
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	2378      	movs	r3, #120	; 0x78
 8005728:	4828      	ldr	r0, [pc, #160]	; (80057cc <_printf_i+0x248>)
 800572a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800572e:	e7e3      	b.n	80056f8 <_printf_i+0x174>
 8005730:	065e      	lsls	r6, r3, #25
 8005732:	bf48      	it	mi
 8005734:	b2ad      	uxthmi	r5, r5
 8005736:	e7e6      	b.n	8005706 <_printf_i+0x182>
 8005738:	4616      	mov	r6, r2
 800573a:	e7bb      	b.n	80056b4 <_printf_i+0x130>
 800573c:	680b      	ldr	r3, [r1, #0]
 800573e:	6826      	ldr	r6, [r4, #0]
 8005740:	6960      	ldr	r0, [r4, #20]
 8005742:	1d1d      	adds	r5, r3, #4
 8005744:	600d      	str	r5, [r1, #0]
 8005746:	0635      	lsls	r5, r6, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x1cc>
 800574c:	6018      	str	r0, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x1d2>
 8005750:	0671      	lsls	r1, r6, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x1c8>
 8005754:	8018      	strh	r0, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	4616      	mov	r6, r2
 800575c:	e7ba      	b.n	80056d4 <_printf_i+0x150>
 800575e:	680b      	ldr	r3, [r1, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	600a      	str	r2, [r1, #0]
 8005764:	681e      	ldr	r6, [r3, #0]
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	4630      	mov	r0, r6
 800576c:	f7fa fd40 	bl	80001f0 <memchr>
 8005770:	b108      	cbz	r0, 8005776 <_printf_i+0x1f2>
 8005772:	1b80      	subs	r0, r0, r6
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005780:	e7a8      	b.n	80056d4 <_printf_i+0x150>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	4632      	mov	r2, r6
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d0ab      	beq.n	80056e8 <_printf_i+0x164>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d413      	bmi.n	80057be <_printf_i+0x23a>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	bfb8      	it	lt
 800579e:	4618      	movlt	r0, r3
 80057a0:	e7a4      	b.n	80056ec <_printf_i+0x168>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4632      	mov	r2, r6
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d09b      	beq.n	80056e8 <_printf_i+0x164>
 80057b0:	3501      	adds	r5, #1
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	9903      	ldr	r1, [sp, #12]
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dcf2      	bgt.n	80057a2 <_printf_i+0x21e>
 80057bc:	e7eb      	b.n	8005796 <_printf_i+0x212>
 80057be:	2500      	movs	r5, #0
 80057c0:	f104 0619 	add.w	r6, r4, #25
 80057c4:	e7f5      	b.n	80057b2 <_printf_i+0x22e>
 80057c6:	bf00      	nop
 80057c8:	08005e8d 	.word	0x08005e8d
 80057cc:	08005e9e 	.word	0x08005e9e

080057d0 <_putc_r>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	460d      	mov	r5, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	4606      	mov	r6, r0
 80057d8:	b118      	cbz	r0, 80057e2 <_putc_r+0x12>
 80057da:	6983      	ldr	r3, [r0, #24]
 80057dc:	b90b      	cbnz	r3, 80057e2 <_putc_r+0x12>
 80057de:	f7ff faf5 	bl	8004dcc <__sinit>
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <_putc_r+0x84>)
 80057e4:	429c      	cmp	r4, r3
 80057e6:	d124      	bne.n	8005832 <_putc_r+0x62>
 80057e8:	6874      	ldr	r4, [r6, #4]
 80057ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057ec:	07d8      	lsls	r0, r3, #31
 80057ee:	d405      	bmi.n	80057fc <_putc_r+0x2c>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	0599      	lsls	r1, r3, #22
 80057f4:	d402      	bmi.n	80057fc <_putc_r+0x2c>
 80057f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057f8:	f7ff fbe3 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 80057fc:	68a3      	ldr	r3, [r4, #8]
 80057fe:	3b01      	subs	r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	60a3      	str	r3, [r4, #8]
 8005804:	da05      	bge.n	8005812 <_putc_r+0x42>
 8005806:	69a2      	ldr	r2, [r4, #24]
 8005808:	4293      	cmp	r3, r2
 800580a:	db1c      	blt.n	8005846 <_putc_r+0x76>
 800580c:	b2eb      	uxtb	r3, r5
 800580e:	2b0a      	cmp	r3, #10
 8005810:	d019      	beq.n	8005846 <_putc_r+0x76>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	6022      	str	r2, [r4, #0]
 8005818:	701d      	strb	r5, [r3, #0]
 800581a:	b2ed      	uxtb	r5, r5
 800581c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800581e:	07da      	lsls	r2, r3, #31
 8005820:	d405      	bmi.n	800582e <_putc_r+0x5e>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	059b      	lsls	r3, r3, #22
 8005826:	d402      	bmi.n	800582e <_putc_r+0x5e>
 8005828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582a:	f7ff fbcb 	bl	8004fc4 <__retarget_lock_release_recursive>
 800582e:	4628      	mov	r0, r5
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <_putc_r+0x88>)
 8005834:	429c      	cmp	r4, r3
 8005836:	d101      	bne.n	800583c <_putc_r+0x6c>
 8005838:	68b4      	ldr	r4, [r6, #8]
 800583a:	e7d6      	b.n	80057ea <_putc_r+0x1a>
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <_putc_r+0x8c>)
 800583e:	429c      	cmp	r4, r3
 8005840:	bf08      	it	eq
 8005842:	68f4      	ldreq	r4, [r6, #12]
 8005844:	e7d1      	b.n	80057ea <_putc_r+0x1a>
 8005846:	4629      	mov	r1, r5
 8005848:	4622      	mov	r2, r4
 800584a:	4630      	mov	r0, r6
 800584c:	f7ff f8d2 	bl	80049f4 <__swbuf_r>
 8005850:	4605      	mov	r5, r0
 8005852:	e7e3      	b.n	800581c <_putc_r+0x4c>
 8005854:	08005e3c 	.word	0x08005e3c
 8005858:	08005e5c 	.word	0x08005e5c
 800585c:	08005e1c 	.word	0x08005e1c

08005860 <__srget_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	460c      	mov	r4, r1
 8005864:	4605      	mov	r5, r0
 8005866:	b118      	cbz	r0, 8005870 <__srget_r+0x10>
 8005868:	6983      	ldr	r3, [r0, #24]
 800586a:	b90b      	cbnz	r3, 8005870 <__srget_r+0x10>
 800586c:	f7ff faae 	bl	8004dcc <__sinit>
 8005870:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <__srget_r+0x4c>)
 8005872:	429c      	cmp	r4, r3
 8005874:	d10d      	bne.n	8005892 <__srget_r+0x32>
 8005876:	686c      	ldr	r4, [r5, #4]
 8005878:	4621      	mov	r1, r4
 800587a:	4628      	mov	r0, r5
 800587c:	f000 f8ee 	bl	8005a5c <__srefill_r>
 8005880:	b988      	cbnz	r0, 80058a6 <__srget_r+0x46>
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	3b01      	subs	r3, #1
 8005886:	6063      	str	r3, [r4, #4]
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	6022      	str	r2, [r4, #0]
 800588e:	7818      	ldrb	r0, [r3, #0]
 8005890:	bd38      	pop	{r3, r4, r5, pc}
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <__srget_r+0x50>)
 8005894:	429c      	cmp	r4, r3
 8005896:	d101      	bne.n	800589c <__srget_r+0x3c>
 8005898:	68ac      	ldr	r4, [r5, #8]
 800589a:	e7ed      	b.n	8005878 <__srget_r+0x18>
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <__srget_r+0x54>)
 800589e:	429c      	cmp	r4, r3
 80058a0:	bf08      	it	eq
 80058a2:	68ec      	ldreq	r4, [r5, #12]
 80058a4:	e7e8      	b.n	8005878 <__srget_r+0x18>
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058aa:	e7f1      	b.n	8005890 <__srget_r+0x30>
 80058ac:	08005e3c 	.word	0x08005e3c
 80058b0:	08005e5c 	.word	0x08005e5c
 80058b4:	08005e1c 	.word	0x08005e1c

080058b8 <_sbrk_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d06      	ldr	r5, [pc, #24]	; (80058d4 <_sbrk_r+0x1c>)
 80058bc:	2300      	movs	r3, #0
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	f000 f954 	bl	8005b70 <_sbrk>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_sbrk_r+0x1a>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_sbrk_r+0x1a>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200001c0 	.word	0x200001c0

080058d8 <__sread>:
 80058d8:	b510      	push	{r4, lr}
 80058da:	460c      	mov	r4, r1
 80058dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e0:	f000 f8a0 	bl	8005a24 <_read_r>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	bfab      	itete	ge
 80058e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058ea:	89a3      	ldrhlt	r3, [r4, #12]
 80058ec:	181b      	addge	r3, r3, r0
 80058ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058f2:	bfac      	ite	ge
 80058f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80058f6:	81a3      	strhlt	r3, [r4, #12]
 80058f8:	bd10      	pop	{r4, pc}

080058fa <__swrite>:
 80058fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fe:	461f      	mov	r7, r3
 8005900:	898b      	ldrh	r3, [r1, #12]
 8005902:	05db      	lsls	r3, r3, #23
 8005904:	4605      	mov	r5, r0
 8005906:	460c      	mov	r4, r1
 8005908:	4616      	mov	r6, r2
 800590a:	d505      	bpl.n	8005918 <__swrite+0x1e>
 800590c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005910:	2302      	movs	r3, #2
 8005912:	2200      	movs	r2, #0
 8005914:	f000 f868 	bl	80059e8 <_lseek_r>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800591e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005922:	81a3      	strh	r3, [r4, #12]
 8005924:	4632      	mov	r2, r6
 8005926:	463b      	mov	r3, r7
 8005928:	4628      	mov	r0, r5
 800592a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800592e:	f000 b817 	b.w	8005960 <_write_r>

08005932 <__sseek>:
 8005932:	b510      	push	{r4, lr}
 8005934:	460c      	mov	r4, r1
 8005936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593a:	f000 f855 	bl	80059e8 <_lseek_r>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	bf15      	itete	ne
 8005944:	6560      	strne	r0, [r4, #84]	; 0x54
 8005946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800594a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800594e:	81a3      	strheq	r3, [r4, #12]
 8005950:	bf18      	it	ne
 8005952:	81a3      	strhne	r3, [r4, #12]
 8005954:	bd10      	pop	{r4, pc}

08005956 <__sclose>:
 8005956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595a:	f000 b813 	b.w	8005984 <_close_r>
	...

08005960 <_write_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4d07      	ldr	r5, [pc, #28]	; (8005980 <_write_r+0x20>)
 8005964:	4604      	mov	r4, r0
 8005966:	4608      	mov	r0, r1
 8005968:	4611      	mov	r1, r2
 800596a:	2200      	movs	r2, #0
 800596c:	602a      	str	r2, [r5, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	f7fb faae 	bl	8000ed0 <_write>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_write_r+0x1e>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_write_r+0x1e>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	200001c0 	.word	0x200001c0

08005984 <_close_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d06      	ldr	r5, [pc, #24]	; (80059a0 <_close_r+0x1c>)
 8005988:	2300      	movs	r3, #0
 800598a:	4604      	mov	r4, r0
 800598c:	4608      	mov	r0, r1
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	f7fb faca 	bl	8000f28 <_close>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_close_r+0x1a>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_close_r+0x1a>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	200001c0 	.word	0x200001c0

080059a4 <_fstat_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d07      	ldr	r5, [pc, #28]	; (80059c4 <_fstat_r+0x20>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	f7fb fb09 	bl	8000fc8 <_fstat>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	d102      	bne.n	80059c0 <_fstat_r+0x1c>
 80059ba:	682b      	ldr	r3, [r5, #0]
 80059bc:	b103      	cbz	r3, 80059c0 <_fstat_r+0x1c>
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	bd38      	pop	{r3, r4, r5, pc}
 80059c2:	bf00      	nop
 80059c4:	200001c0 	.word	0x200001c0

080059c8 <_isatty_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d06      	ldr	r5, [pc, #24]	; (80059e4 <_isatty_r+0x1c>)
 80059cc:	2300      	movs	r3, #0
 80059ce:	4604      	mov	r4, r0
 80059d0:	4608      	mov	r0, r1
 80059d2:	602b      	str	r3, [r5, #0]
 80059d4:	f7fb fa66 	bl	8000ea4 <_isatty>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_isatty_r+0x1a>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_isatty_r+0x1a>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	200001c0 	.word	0x200001c0

080059e8 <_lseek_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d07      	ldr	r5, [pc, #28]	; (8005a08 <_lseek_r+0x20>)
 80059ec:	4604      	mov	r4, r0
 80059ee:	4608      	mov	r0, r1
 80059f0:	4611      	mov	r1, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	602a      	str	r2, [r5, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7fb faad 	bl	8000f56 <_lseek>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_lseek_r+0x1e>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_lseek_r+0x1e>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	200001c0 	.word	0x200001c0

08005a0c <__malloc_lock>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	; (8005a14 <__malloc_lock+0x8>)
 8005a0e:	f7ff bad8 	b.w	8004fc2 <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	200001b8 	.word	0x200001b8

08005a18 <__malloc_unlock>:
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <__malloc_unlock+0x8>)
 8005a1a:	f7ff bad3 	b.w	8004fc4 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	200001b8 	.word	0x200001b8

08005a24 <_read_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d07      	ldr	r5, [pc, #28]	; (8005a44 <_read_r+0x20>)
 8005a28:	4604      	mov	r4, r0
 8005a2a:	4608      	mov	r0, r1
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fb faa0 	bl	8000f78 <_read>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_read_r+0x1e>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_read_r+0x1e>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	200001c0 	.word	0x200001c0

08005a48 <lflush>:
 8005a48:	8983      	ldrh	r3, [r0, #12]
 8005a4a:	f003 0309 	and.w	r3, r3, #9
 8005a4e:	2b09      	cmp	r3, #9
 8005a50:	d101      	bne.n	8005a56 <lflush+0xe>
 8005a52:	f7ff b951 	b.w	8004cf8 <fflush>
 8005a56:	2000      	movs	r0, #0
 8005a58:	4770      	bx	lr
	...

08005a5c <__srefill_r>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4605      	mov	r5, r0
 8005a62:	b118      	cbz	r0, 8005a6c <__srefill_r+0x10>
 8005a64:	6983      	ldr	r3, [r0, #24]
 8005a66:	b90b      	cbnz	r3, 8005a6c <__srefill_r+0x10>
 8005a68:	f7ff f9b0 	bl	8004dcc <__sinit>
 8005a6c:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <__srefill_r+0x100>)
 8005a6e:	429c      	cmp	r4, r3
 8005a70:	d10a      	bne.n	8005a88 <__srefill_r+0x2c>
 8005a72:	686c      	ldr	r4, [r5, #4]
 8005a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6063      	str	r3, [r4, #4]
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	069e      	lsls	r6, r3, #26
 8005a80:	d50c      	bpl.n	8005a9c <__srefill_r+0x40>
 8005a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a86:	e066      	b.n	8005b56 <__srefill_r+0xfa>
 8005a88:	4b35      	ldr	r3, [pc, #212]	; (8005b60 <__srefill_r+0x104>)
 8005a8a:	429c      	cmp	r4, r3
 8005a8c:	d101      	bne.n	8005a92 <__srefill_r+0x36>
 8005a8e:	68ac      	ldr	r4, [r5, #8]
 8005a90:	e7f0      	b.n	8005a74 <__srefill_r+0x18>
 8005a92:	4b34      	ldr	r3, [pc, #208]	; (8005b64 <__srefill_r+0x108>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	bf08      	it	eq
 8005a98:	68ec      	ldreq	r4, [r5, #12]
 8005a9a:	e7eb      	b.n	8005a74 <__srefill_r+0x18>
 8005a9c:	0758      	lsls	r0, r3, #29
 8005a9e:	d448      	bmi.n	8005b32 <__srefill_r+0xd6>
 8005aa0:	06d9      	lsls	r1, r3, #27
 8005aa2:	d405      	bmi.n	8005ab0 <__srefill_r+0x54>
 8005aa4:	2309      	movs	r3, #9
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	e7e8      	b.n	8005a82 <__srefill_r+0x26>
 8005ab0:	071a      	lsls	r2, r3, #28
 8005ab2:	d50b      	bpl.n	8005acc <__srefill_r+0x70>
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7ff f8e2 	bl	8004c80 <_fflush_r>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d1e0      	bne.n	8005a82 <__srefill_r+0x26>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	60a0      	str	r0, [r4, #8]
 8005ac4:	f023 0308 	bic.w	r3, r3, #8
 8005ac8:	81a3      	strh	r3, [r4, #12]
 8005aca:	61a0      	str	r0, [r4, #24]
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	f043 0304 	orr.w	r3, r3, #4
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b91b      	cbnz	r3, 8005ae0 <__srefill_r+0x84>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7ff fa98 	bl	8005010 <__smakebuf_r>
 8005ae0:	89a6      	ldrh	r6, [r4, #12]
 8005ae2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005ae6:	07b3      	lsls	r3, r6, #30
 8005ae8:	d00f      	beq.n	8005b0a <__srefill_r+0xae>
 8005aea:	2301      	movs	r3, #1
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	4b1e      	ldr	r3, [pc, #120]	; (8005b68 <__srefill_r+0x10c>)
 8005af0:	491e      	ldr	r1, [pc, #120]	; (8005b6c <__srefill_r+0x110>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	f006 0609 	and.w	r6, r6, #9
 8005af8:	f7ff f9e6 	bl	8004ec8 <_fwalk>
 8005afc:	2e09      	cmp	r6, #9
 8005afe:	81a7      	strh	r7, [r4, #12]
 8005b00:	d103      	bne.n	8005b0a <__srefill_r+0xae>
 8005b02:	4621      	mov	r1, r4
 8005b04:	4628      	mov	r0, r5
 8005b06:	f7ff f835 	bl	8004b74 <__sflush_r>
 8005b0a:	6922      	ldr	r2, [r4, #16]
 8005b0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b0e:	6963      	ldr	r3, [r4, #20]
 8005b10:	6a21      	ldr	r1, [r4, #32]
 8005b12:	6022      	str	r2, [r4, #0]
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b0      	blx	r6
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	6060      	str	r0, [r4, #4]
 8005b1c:	dc1c      	bgt.n	8005b58 <__srefill_r+0xfc>
 8005b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b22:	bf17      	itett	ne
 8005b24:	2200      	movne	r2, #0
 8005b26:	f043 0320 	orreq.w	r3, r3, #32
 8005b2a:	6062      	strne	r2, [r4, #4]
 8005b2c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005b30:	e7bc      	b.n	8005aac <__srefill_r+0x50>
 8005b32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b34:	2900      	cmp	r1, #0
 8005b36:	d0cd      	beq.n	8005ad4 <__srefill_r+0x78>
 8005b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b3c:	4299      	cmp	r1, r3
 8005b3e:	d002      	beq.n	8005b46 <__srefill_r+0xea>
 8005b40:	4628      	mov	r0, r5
 8005b42:	f7ff faad 	bl	80050a0 <_free_r>
 8005b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0c0      	beq.n	8005ad4 <__srefill_r+0x78>
 8005b52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e7fc      	b.n	8005b56 <__srefill_r+0xfa>
 8005b5c:	08005e3c 	.word	0x08005e3c
 8005b60:	08005e5c 	.word	0x08005e5c
 8005b64:	08005e1c 	.word	0x08005e1c
 8005b68:	08005d14 	.word	0x08005d14
 8005b6c:	08005a49 	.word	0x08005a49

08005b70 <_sbrk>:
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <_sbrk+0x14>)
 8005b72:	6819      	ldr	r1, [r3, #0]
 8005b74:	4602      	mov	r2, r0
 8005b76:	b909      	cbnz	r1, 8005b7c <_sbrk+0xc>
 8005b78:	4903      	ldr	r1, [pc, #12]	; (8005b88 <_sbrk+0x18>)
 8005b7a:	6019      	str	r1, [r3, #0]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	4402      	add	r2, r0
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	4770      	bx	lr
 8005b84:	200000d0 	.word	0x200000d0
 8005b88:	200001c8 	.word	0x200001c8

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr
