
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e90  08008e90  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e90  08008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e98  08008e98  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e9c  08008e9c  00018e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08008ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200000c8  08008f68  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08008f68  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e844  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000388b  00000000  00000000  0003e93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  000421c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  000438d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200be  00000000  00000000  00044e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9f2  00000000  00000000  00064efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c74e5  00000000  00000000  0007f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146dd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd4  00000000  00000000  00146e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b3c 	.word	0x08008b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08008b3c 	.word	0x08008b3c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <read_vrefint>:
#include <stdio.h>
#include "battery.h"

extern ADC_HandleTypeDef hadc1;

uint32_t read_vrefint(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  static uint32_t first_time_up = 1;
  static ADC_ChannelConfTypeDef sConfig = {0};
  uint32_t rawVintref;

  if (first_time_up) {
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <read_vrefint+0xb4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d014      	beq.n	80005c0 <read_vrefint+0x38>
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <read_vrefint+0xb8>)
 8000598:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <read_vrefint+0xbc>)
 800059a:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <read_vrefint+0xb8>)
 800059e:	2206      	movs	r2, #6
 80005a0:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <read_vrefint+0xb8>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	609a      	str	r2, [r3, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <read_vrefint+0xb8>)
 80005aa:	227f      	movs	r2, #127	; 0x7f
 80005ac:	60da      	str	r2, [r3, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <read_vrefint+0xb8>)
 80005b0:	2204      	movs	r2, #4
 80005b2:	611a      	str	r2, [r3, #16]
    sConfig.Offset = 0;
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <read_vrefint+0xb8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
    first_time_up = 0;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <read_vrefint+0xb4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
  }
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <read_vrefint+0xb8>)
 80005c2:	2206      	movs	r2, #6
 80005c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80005c6:	491e      	ldr	r1, [pc, #120]	; (8000640 <read_vrefint+0xb8>)
 80005c8:	481f      	ldr	r0, [pc, #124]	; (8000648 <read_vrefint+0xc0>)
 80005ca:	f002 f9fb 	bl	80029c4 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <read_vrefint+0x50>
      Error_Handler();
 80005d4:	f000 fe58 	bl	8001288 <Error_Handler>
  }
  while (HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK);   // Calibrate the A2D
 80005d8:	bf00      	nop
 80005da:	217f      	movs	r1, #127	; 0x7f
 80005dc:	481a      	ldr	r0, [pc, #104]	; (8000648 <read_vrefint+0xc0>)
 80005de:	f002 ffa4 	bl	800352a <HAL_ADCEx_Calibration_Start>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f8      	bne.n	80005da <read_vrefint+0x52>
  HAL_ADC_Start(&hadc1);
 80005e8:	4817      	ldr	r0, [pc, #92]	; (8000648 <read_vrefint+0xc0>)
 80005ea:	f001 fde7 	bl	80021bc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <read_vrefint+0xc0>)
 80005f4:	f001 fed0 	bl	8002398 <HAL_ADC_PollForConversion>
  rawVintref = HAL_ADC_GetValue(&hadc1);
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <read_vrefint+0xc0>)
 80005fa:	f001 ff9d 	bl	8002538 <HAL_ADC_GetValue>
 80005fe:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop(&hadc1);
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <read_vrefint+0xc0>)
 8000602:	f001 fe95 	bl	8002330 <HAL_ADC_Stop>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <read_vrefint+0xb8>)
 8000608:	220c      	movs	r2, #12
 800060a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <read_vrefint+0xb8>)
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <read_vrefint+0xc0>)
 8000610:	f002 f9d8 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <read_vrefint+0x96>
      Error_Handler();
 800061a:	f000 fe35 	bl	8001288 <Error_Handler>
  }
  return(__HAL_ADC_CALC_VREFANALOG_VOLTAGE(rawVintref, ADC_RESOLUTION_12B));
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <read_vrefint+0xc4>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000628:	fb03 f202 	mul.w	r2, r3, r2
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000
 8000640:	200000e4 	.word	0x200000e4
 8000644:	80000001 	.word	0x80000001
 8000648:	20000160 	.word	0x20000160
 800064c:	1fff75aa 	.word	0x1fff75aa

08000650 <disable>:
 */

#include "main.h"
#include "interrupt.h"

uint32_t disable(void) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800065a:	f3ef 8310 	mrs	r3, PRIMASK
 800065e:	603b      	str	r3, [r7, #0]
  return(result);
 8000660:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 8000662:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000668:	687b      	ldr	r3, [r7, #4]
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <restore>:

void restore(uint32_t priority_mask) {
 8000676:	b480      	push	{r7}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	f383 8810 	msr	PRIMASK, r3
}
 8000688:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000696:	b480      	push	{r7}
 8000698:	b089      	sub	sp, #36	; 0x24
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	e853 3f00 	ldrex	r3, [r3]
 80006a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	61fb      	str	r3, [r7, #28]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	69fa      	ldr	r2, [r7, #28]
 80006b6:	61ba      	str	r2, [r7, #24]
 80006b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006ba:	6979      	ldr	r1, [r7, #20]
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	e841 2300 	strex	r3, r2, [r1]
 80006c2:	613b      	str	r3, [r7, #16]
   return(result);
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1e9      	bne.n	800069e <LL_USART_EnableIT_RXNE+0x8>
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3724      	adds	r7, #36	; 0x24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <HAL_TIM_IC_CaptureCallback>:
int temp_command();
int battery_command();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  enum {EDGE1,EDGE2};
  static uint32_t last = 0;
  static uint32_t state = EDGE1;
  uint32_t next;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7f1b      	ldrb	r3, [r3, #28]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d136      	bne.n	8000756 <HAL_TIM_IC_CaptureCallback+0x7e>
	  next = htim->Instance->CCR1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	60fb      	str	r3, [r7, #12]
	  switch(state){
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x88>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <HAL_TIM_IC_CaptureCallback+0x26>
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d007      	beq.n	800070c <HAL_TIM_IC_CaptureCallback+0x34>
 80006fc:	e027      	b.n	800074e <HAL_TIM_IC_CaptureCallback+0x76>
	  case EDGE1:
		  last = next;
 80006fe:	4a19      	ldr	r2, [pc, #100]	; (8000764 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6013      	str	r3, [r2, #0]
		  state = EDGE2;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
		  break;
 800070a:	e025      	b.n	8000758 <HAL_TIM_IC_CaptureCallback+0x80>
	  case EDGE2:
		  if(next>last){
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	429a      	cmp	r2, r3
 8000714:	d906      	bls.n	8000724 <HAL_TIM_IC_CaptureCallback+0x4c>
			  period = next-last;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e009      	b.n	8000738 <HAL_TIM_IC_CaptureCallback+0x60>
		  }
		  else{
			  period = htim->Instance->ARR - last + next;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1ad2      	subs	r2, r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000736:	6013      	str	r3, [r2, #0]
		  }
		  state = EDGE1;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x88>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
		  HAL_TIM_IC_Stop_IT(&htim2,TIM_CHANNEL_1);
 800073e:	2100      	movs	r1, #0
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000742:	f005 fadb 	bl	8005cfc <HAL_TIM_IC_Stop_IT>
		  timer_done = 1;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
		  break;
 800074c:	e004      	b.n	8000758 <HAL_TIM_IC_CaptureCallback+0x80>
	  default:
		  state = EDGE1;
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
		  break;
 8000754:	e000      	b.n	8000758 <HAL_TIM_IC_CaptureCallback+0x80>
	  }
  }
 8000756:	bf00      	nop
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000010c 	.word	0x2000010c
 8000764:	20000110 	.word	0x20000110
 8000768:	20000104 	.word	0x20000104
 800076c:	200001f0 	.word	0x200001f0
 8000770:	20000108 	.word	0x20000108

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f001 f91c 	bl	80019b6 <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t command_line[QUEUE_SIZE];
  uint8_t ch;
  //RTC_DateTypeDef date;
  //RTC_TimeTypeDef time;
  int n = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f88b 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 fa83 	bl	8000c90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078a:	f000 fa51 	bl	8000c30 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800078e:	f000 f955 	bl	8000a3c <MX_RTC_Init>
  MX_ADC1_Init();
 8000792:	f000 f8db 	bl	800094c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000796:	f000 f9f1 	bl	8000b7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Init(&hadc1); // Initialize the A2D
 800079a:	4834      	ldr	r0, [pc, #208]	; (800086c <main+0xf8>)
 800079c:	f001 fbc0 	bl	8001f20 <HAL_ADC_Init>
  while (HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK);   // Calibrate the A2D
 80007a0:	bf00      	nop
 80007a2:	217f      	movs	r1, #127	; 0x7f
 80007a4:	4831      	ldr	r0, [pc, #196]	; (800086c <main+0xf8>)
 80007a6:	f002 fec0 	bl	800352a <HAL_ADCEx_Calibration_Start>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f8      	bne.n	80007a2 <main+0x2e>
  RetargetInit(&huart2);
 80007b0:	482f      	ldr	r0, [pc, #188]	; (8000870 <main+0xfc>)
 80007b2:	f000 fdd1 	bl	8001358 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);
 80007b6:	482f      	ldr	r0, [pc, #188]	; (8000874 <main+0x100>)
 80007b8:	f7ff ff6d 	bl	8000696 <LL_USART_EnableIT_RXNE>
  printf("\r\nSystem Running\n\r");
 80007bc:	482e      	ldr	r0, [pc, #184]	; (8000878 <main+0x104>)
 80007be:	f006 fef9 	bl	80075b4 <iprintf>
  printf("\r\nSTM$");
 80007c2:	482e      	ldr	r0, [pc, #184]	; (800087c <main+0x108>)
 80007c4:	f006 fef6 	bl	80075b4 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(toggle){
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <main+0x10c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00d      	beq.n	80007ec <main+0x78>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007d0:	2108      	movs	r1, #8
 80007d2:	482c      	ldr	r0, [pc, #176]	; (8000884 <main+0x110>)
 80007d4:	f003 fa8a 	bl	8003cec <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80007d8:	2064      	movs	r0, #100	; 0x64
 80007da:	f001 f925 	bl	8001a28 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007de:	2108      	movs	r1, #8
 80007e0:	4828      	ldr	r0, [pc, #160]	; (8000884 <main+0x110>)
 80007e2:	f003 fa83 	bl	8003cec <HAL_GPIO_TogglePin>
		toggle = 0;
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <main+0x10c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	}
    if ((ch = dequeue(&rx_queue))) {
 80007ec:	4826      	ldr	r0, [pc, #152]	; (8000888 <main+0x114>)
 80007ee:	f000 fd89 	bl	8001304 <dequeue>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80007f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0e3      	beq.n	80007c8 <main+0x54>
      putchar(ch);
 8000800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000804:	4618      	mov	r0, r3
 8000806:	f006 feed 	bl	80075e4 <putchar>
      command_line[n] = ch;
 800080a:	463a      	mov	r2, r7
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	4413      	add	r3, r2
 8000810:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000814:	701a      	strb	r2, [r3, #0]
      if(ch == '\r' || ch == '\n'){
 8000816:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800081a:	2b0d      	cmp	r3, #13
 800081c:	d003      	beq.n	8000826 <main+0xb2>
 800081e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000822:	2b0a      	cmp	r3, #10
 8000824:	d11d      	bne.n	8000862 <main+0xee>
    	  command_line[n] = '\0'; //end of string
 8000826:	463a      	mov	r2, r7
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	4413      	add	r3, r2
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
    	  if(!execute_command(command_line)){
 8000830:	463b      	mov	r3, r7
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fa76 	bl	8000d24 <execute_command>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d103      	bne.n	8000846 <main+0xd2>
    		  printf("\r\nOK");
 800083e:	4813      	ldr	r0, [pc, #76]	; (800088c <main+0x118>)
 8000840:	f006 feb8 	bl	80075b4 <iprintf>
 8000844:	e002      	b.n	800084c <main+0xd8>
    	  }else{
    		  printf("\r\nNOK");
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <main+0x11c>)
 8000848:	f006 feb4 	bl	80075b4 <iprintf>
    	  }
    	  n = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
    	  printf("\r\n");
 8000850:	4810      	ldr	r0, [pc, #64]	; (8000894 <main+0x120>)
 8000852:	f006 ff4b 	bl	80076ec <puts>
    	  printDateTime();
 8000856:	f000 fb71 	bl	8000f3c <printDateTime>
    	  printf(" IULS>");
 800085a:	480f      	ldr	r0, [pc, #60]	; (8000898 <main+0x124>)
 800085c:	f006 feaa 	bl	80075b4 <iprintf>
 8000860:	e002      	b.n	8000868 <main+0xf4>
      }else{
    	  n++;
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	3301      	adds	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
	if(toggle){
 8000868:	e7ae      	b.n	80007c8 <main+0x54>
 800086a:	bf00      	nop
 800086c:	20000160 	.word	0x20000160
 8000870:	2000023c 	.word	0x2000023c
 8000874:	40004400 	.word	0x40004400
 8000878:	08008b8c 	.word	0x08008b8c
 800087c:	08008ba0 	.word	0x08008ba0
 8000880:	20000100 	.word	0x20000100
 8000884:	48000400 	.word	0x48000400
 8000888:	20000138 	.word	0x20000138
 800088c:	08008ba8 	.word	0x08008ba8
 8000890:	08008bb0 	.word	0x08008bb0
 8000894:	08008bb8 	.word	0x08008bb8
 8000898:	08008bbc 	.word	0x08008bbc

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b096      	sub	sp, #88	; 0x58
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2244      	movs	r2, #68	; 0x44
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f006 fe7a 	bl	80075a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	463b      	mov	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008c2:	f003 fa4b 	bl	8003d5c <HAL_PWREx_ControlVoltageScaling>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008cc:	f000 fcdc 	bl	8001288 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d0:	f003 fa26 	bl	8003d20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <SystemClock_Config+0xac>)
 80008d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008da:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <SystemClock_Config+0xac>)
 80008dc:	f023 0318 	bic.w	r3, r3, #24
 80008e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80008e4:	231c      	movs	r3, #28
 80008e6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4618      	mov	r0, r3
 8000906:	f003 fa7f 	bl	8003e08 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000910:	f000 fcba 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f003 fed1 	bl	80046d4 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000938:	f000 fca6 	bl	8001288 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800093c:	f004 fa88 	bl	8004e50 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000940:	bf00      	nop
 8000942:	3758      	adds	r7, #88	; 0x58
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000970:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <MX_ADC1_Init+0xe8>)
 8000972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000976:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 800097a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <MX_ADC1_Init+0xe4>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_ADC1_Init+0xe4>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000990:	2204      	movs	r2, #4
 8000992:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000996:	2200      	movs	r2, #0
 8000998:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <MX_ADC1_Init+0xe4>)
 800099c:	2200      	movs	r2, #0
 800099e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d0:	4817      	ldr	r0, [pc, #92]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009d2:	f001 faa5 	bl	8001f20 <HAL_ADC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009dc:	f000 fc54 	bl	8001288 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_ADC1_Init+0xe4>)
 80009ec:	f002 fe30 	bl	8003650 <HAL_ADCEx_MultiModeConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009f6:	f000 fc47 	bl	8001288 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_ADC1_Init+0xec>)
 80009fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fe:	2306      	movs	r3, #6
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a06:	237f      	movs	r3, #127	; 0x7f
 8000a08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_ADC1_Init+0xe4>)
 8000a18:	f001 ffd4 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000a22:	f000 fc31 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000160 	.word	0x20000160
 8000a34:	50040000 	.word	0x50040000
 8000a38:	c7520000 	.word	0xc7520000

08000a3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b092      	sub	sp, #72	; 0x48
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	222c      	movs	r2, #44	; 0x2c
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 fda1 	bl	80075a4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a62:	4b43      	ldr	r3, [pc, #268]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a64:	4a43      	ldr	r2, [pc, #268]	; (8000b74 <MX_RTC_Init+0x138>)
 8000a66:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a68:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a6e:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a70:	227f      	movs	r2, #127	; 0x7f
 8000a72:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a74:	4b3e      	ldr	r3, [pc, #248]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a76:	22ff      	movs	r2, #255	; 0xff
 8000a78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a80:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a86:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a92:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a9a:	4835      	ldr	r0, [pc, #212]	; (8000b70 <MX_RTC_Init+0x134>)
 8000a9c:	f004 f9e8 	bl	8004e70 <HAL_RTC_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 fbef 	bl	8001288 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ac4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4619      	mov	r1, r3
 8000acc:	4828      	ldr	r0, [pc, #160]	; (8000b70 <MX_RTC_Init+0x134>)
 8000ace:	f004 fa51 	bl	8004f74 <HAL_RTC_SetTime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000ad8:	f000 fbd6 	bl	8001288 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000af4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_RTC_Init+0x134>)
 8000afe:	f004 fb32 	bl	8005166 <HAL_RTC_SetDate>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000b08:	f000 fbbe 	bl	8001288 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_RTC_Init+0x13c>)
 8000b26:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_RTC_Init+0x134>)
 8000b44:	f004 fbe4 	bl	8005310 <HAL_RTC_SetAlarm_IT>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_RTC_Init+0x116>
  {
    Error_Handler();
 8000b4e:	f000 fb9b 	bl	8001288 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000b52:	2300      	movs	r3, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_RTC_Init+0x134>)
 8000b5a:	f004 fdcb 	bl	80056f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8000b64:	f000 fb90 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3748      	adds	r7, #72	; 0x48
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001c4 	.word	0x200001c4
 8000b74:	40002800 	.word	0x40002800
 8000b78:	80808000 	.word	0x80808000

08000b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000bc2:	481a      	ldr	r0, [pc, #104]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000bc4:	f004 ff1c 	bl	8005a00 <HAL_TIM_IC_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bce:	f000 fb5b 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000be2:	f005 fcab 	bl	800653c <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000bec:	f000 fb4c 	bl	8001288 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	4619      	mov	r1, r3
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000c08:	f005 fa4f 	bl	80060aa <HAL_TIM_IC_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c12:	f000 fb39 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000c18:	f004 fe9e 	bl	8005958 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1); // Turn on the IRQ for CH1 input capture
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM2_Init+0xb0>)
 8000c20:	f004 ff46 	bl	8005ab0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200001f0 	.word	0x200001f0

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c36:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <MX_USART2_UART_Init+0x5c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c74:	f005 fd5e 	bl	8006734 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 fb03 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000023c 	.word	0x2000023c
 8000c8c:	40004400 	.word	0x40004400

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_GPIO_Init+0x8c>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <MX_GPIO_Init+0x90>)
 8000cf4:	f002 ffe2 	bl	8003cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0x90>)
 8000d10:	f002 fe62 	bl	80039d8 <HAL_GPIO_Init>

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400

08000d24 <execute_command>:

/* USER CODE BEGIN 4 */
int execute_command(uint8_t * line) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <execute_command+0x94>)
 8000d2e:	617b      	str	r3, [r7, #20]
  int success = 1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <execute_command+0x1c>
    return (-1); // Passed a bad pointer
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3e:	e037      	b.n	8000db0 <execute_command+0x8c>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000d40:	f107 0208 	add.w	r2, r7, #8
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f838 	bl	8000dc0 <parse_command>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d56:	d120      	bne.n	8000d9a <execute_command+0x76>
    printf("Error with parse command\n\r");
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <execute_command+0x98>)
 8000d5a:	f006 fc2b 	bl	80075b4 <iprintf>
    return (-1);
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d62:	e025      	b.n	8000db0 <execute_command+0x8c>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fa2f 	bl	80001d0 <strcmp>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10d      	bne.n	8000d94 <execute_command+0x70>
      if (!p->cmd_function) {
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <execute_command+0x62>
        return (-1);
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d84:	e014      	b.n	8000db0 <execute_command+0x8c>
      }
      success = (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4798      	blx	r3
 8000d90:	6138      	str	r0, [r7, #16]
      //success = 1;
      break;
 8000d92:	e006      	b.n	8000da2 <execute_command+0x7e>
    }
    p++;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3308      	adds	r3, #8
 8000d98:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1e0      	bne.n	8000d64 <execute_command+0x40>
  }
  if (success == 0) {
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <execute_command+0x88>
    return (0);
 8000da8:	2300      	movs	r3, #0
 8000daa:	e001      	b.n	8000db0 <execute_command+0x8c>
  }
  else {
    return (-1);
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
  }
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	08008bc4 	.word	0x08008bc4

08000dc0 <parse_command>:
int parse_command (uint8_t *line, uint8_t **command, uint8_t **args){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]

  uint8_t *line_temp;
  if((!line) || (!command) || (!args)){ //check for bad pointer
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <parse_command+0x1e>
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <parse_command+0x1e>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <parse_command+0x24>
    return(-1);
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de2:	e01d      	b.n	8000e20 <parse_command+0x60>
  }
  line_temp= line;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	617b      	str	r3, [r7, #20]
  *command = line;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	601a      	str	r2, [r3, #0]
  //strcpy(line_left, line);
  while(*line_temp != ','){ //increment through input to find end of command
 8000dee:	e00b      	b.n	8000e08 <parse_command+0x48>
    if(!*line_temp){
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d104      	bne.n	8000e02 <parse_command+0x42>
      *args = '\0'; //no arguments
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
      return(0);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e00e      	b.n	8000e20 <parse_command+0x60>
    }
    line_temp++;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  while(*line_temp != ','){ //increment through input to find end of command
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b2c      	cmp	r3, #44	; 0x2c
 8000e0e:	d1ef      	bne.n	8000df0 <parse_command+0x30>
  }

  *line_temp = '\0'; //replace comma with null for end of command string
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
  *args = line_temp +1; //one char past null is beginning of arguments
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
  return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <help_command>:
int help_command(char *args){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  printf("\r\nAvailable Commands:\n\r");
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <help_command+0x30>)
 8000e36:	f006 fbbd 	bl	80075b4 <iprintf>
  printf("lon\n\r");
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <help_command+0x34>)
 8000e3c:	f006 fbba 	bl	80075b4 <iprintf>
  printf("lof\n\r");
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <help_command+0x38>)
 8000e42:	f006 fbb7 	bl	80075b4 <iprintf>
  printf("test\n\r");
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <help_command+0x3c>)
 8000e48:	f006 fbb4 	bl	80075b4 <iprintf>
  printf("ds\n\r");
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <help_command+0x40>)
 8000e4e:	f006 fbb1 	bl	80075b4 <iprintf>
  return 0;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08008be0 	.word	0x08008be0
 8000e60:	08008bf8 	.word	0x08008bf8
 8000e64:	08008c00 	.word	0x08008c00
 8000e68:	08008c08 	.word	0x08008c08
 8000e6c:	08008c10 	.word	0x08008c10

08000e70 <lon_command>:
int lon_command(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  if(led_on == 0){
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <lon_command+0x30>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10a      	bne.n	8000e92 <lon_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <lon_command+0x34>)
 8000e80:	f002 ff34 	bl	8003cec <HAL_GPIO_TogglePin>
    led_on = 1;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <lon_command+0x30>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
    printf("\r\nLED ON\n\r");
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <lon_command+0x38>)
 8000e8c:	f006 fb92 	bl	80075b4 <iprintf>
 8000e90:	e002      	b.n	8000e98 <lon_command+0x28>
  }else{
    printf("\r\nLED ALREADY ON\n\r");
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <lon_command+0x3c>)
 8000e94:	f006 fb8e 	bl	80075b4 <iprintf>
  }
  return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000fc 	.word	0x200000fc
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	08008c18 	.word	0x08008c18
 8000eac:	08008c24 	.word	0x08008c24

08000eb0 <lof_command>:
int lof_command(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  if(led_on == 1){
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <lof_command+0x30>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d10a      	bne.n	8000ed2 <lof_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <lof_command+0x34>)
 8000ec0:	f002 ff14 	bl	8003cec <HAL_GPIO_TogglePin>
    led_on = 0;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <lof_command+0x30>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
    printf("\r\nLED OFF\n\r");
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <lof_command+0x38>)
 8000ecc:	f006 fb72 	bl	80075b4 <iprintf>
 8000ed0:	e002      	b.n	8000ed8 <lof_command+0x28>
  }else{
    printf("\r\nLED ALREADY OFF\n\r");
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <lof_command+0x3c>)
 8000ed4:	f006 fb6e 	bl	80075b4 <iprintf>
  }
  return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000fc 	.word	0x200000fc
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	08008c38 	.word	0x08008c38
 8000eec:	08008c44 	.word	0x08008c44

08000ef0 <test_command>:
int test_command(char *args){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  printf("\r\ntest\n\r");
 8000ef8:	480e      	ldr	r0, [pc, #56]	; (8000f34 <test_command+0x44>)
 8000efa:	f006 fb5b 	bl	80075b4 <iprintf>
  while(*args!='\0'){
 8000efe:	e00f      	b.n	8000f20 <test_command+0x30>
    if(*args!=','){
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b2c      	cmp	r3, #44	; 0x2c
 8000f06:	d005      	beq.n	8000f14 <test_command+0x24>
      putchar(*args);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f006 fb69 	bl	80075e4 <putchar>
 8000f12:	e002      	b.n	8000f1a <test_command+0x2a>
    }else{
      printf("\r\n");
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <test_command+0x48>)
 8000f16:	f006 fbe9 	bl	80076ec <puts>
    }
    args++;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
  while(*args!='\0'){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1eb      	bne.n	8000f00 <test_command+0x10>
  }
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	08008c58 	.word	0x08008c58
 8000f38:	08008bb8 	.word	0x08008bb8

08000f3c <printDateTime>:
void printDateTime(){
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af04      	add	r7, sp, #16
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	4619      	mov	r1, r3
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <printDateTime+0x4c>)
 8000f4a:	f004 f8b0 	bl	80050ae <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <printDateTime+0x4c>)
 8000f58:	f004 f98c 	bl	8005274 <HAL_RTC_GetDate>
	printf("%2.2u/%2.2u/%4.4u %2.2u:%2.2u:%2.2u",date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds);
 8000f5c:	7d7b      	ldrb	r3, [r7, #21]
 8000f5e:	461c      	mov	r4, r3
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	461d      	mov	r5, r3
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f6a:	783a      	ldrb	r2, [r7, #0]
 8000f6c:	7879      	ldrb	r1, [r7, #1]
 8000f6e:	78b8      	ldrb	r0, [r7, #2]
 8000f70:	9002      	str	r0, [sp, #8]
 8000f72:	9101      	str	r1, [sp, #4]
 8000f74:	9200      	str	r2, [sp, #0]
 8000f76:	462a      	mov	r2, r5
 8000f78:	4621      	mov	r1, r4
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <printDateTime+0x50>)
 8000f7c:	f006 fb1a 	bl	80075b4 <iprintf>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bdb0      	pop	{r4, r5, r7, pc}
 8000f88:	200001c4 	.word	0x200001c4
 8000f8c:	08008c64 	.word	0x08008c64

08000f90 <dateSet_command>:
int dateSet_command(char *args){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	//HAL_StatusTypeDef hal;
	int comma_count = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
	char* start_of_num = args;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
	int numbers[3];
	while(*args!='\0'){
 8000fa0:	e01f      	b.n	8000fe2 <dateSet_command+0x52>
	    if(*args==','){
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b2c      	cmp	r3, #44	; 0x2c
 8000fa8:	d113      	bne.n	8000fd2 <dateSet_command+0x42>
	    	*args = '\0';
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	        numbers[comma_count] = atoi(start_of_num);
 8000fb0:	69b8      	ldr	r0, [r7, #24]
 8000fb2:	f006 fab6 	bl	8007522 <atoi>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	f107 0120 	add.w	r1, r7, #32
 8000fc0:	440b      	add	r3, r1
 8000fc2:	f843 2c18 	str.w	r2, [r3, #-24]
	        comma_count += 1;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
	        start_of_num = args+1;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	61bb      	str	r3, [r7, #24]
	    }
	    if(comma_count>2){
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	dd01      	ble.n	8000fdc <dateSet_command+0x4c>
	    	//printf("\r\n error \n\r");
	    	return 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e038      	b.n	800104e <dateSet_command+0xbe>
	    }
	    args++;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1db      	bne.n	8000fa2 <dateSet_command+0x12>
	  }
	numbers[comma_count] = atoi(start_of_num);
 8000fea:	69b8      	ldr	r0, [r7, #24]
 8000fec:	f006 fa99 	bl	8007522 <atoi>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	f107 0120 	add.w	r1, r7, #32
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f843 2c18 	str.w	r2, [r3, #-24]
	if(numbers[0]>12 || numbers[0] < 1 || numbers[1] > 31 || numbers[1]<1 || numbers[2] > 100 || numbers[2]<0)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b0c      	cmp	r3, #12
 8001004:	dc0e      	bgt.n	8001024 <dateSet_command+0x94>
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dd0b      	ble.n	8001024 <dateSet_command+0x94>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b1f      	cmp	r3, #31
 8001010:	dc08      	bgt.n	8001024 <dateSet_command+0x94>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd05      	ble.n	8001024 <dateSet_command+0x94>
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	dc02      	bgt.n	8001024 <dateSet_command+0x94>
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b00      	cmp	r3, #0
 8001022:	da01      	bge.n	8001028 <dateSet_command+0x98>
		return 1;
 8001024:	2301      	movs	r3, #1
 8001026:	e012      	b.n	800104e <dateSet_command+0xbe>
	date.WeekDay = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	753b      	strb	r3, [r7, #20]
	date.Month = numbers[0];
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	757b      	strb	r3, [r7, #21]
	date.Date = numbers[1];
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	75bb      	strb	r3, [r7, #22]
	date.Year = numbers[2];
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	75fb      	strb	r3, [r7, #23]
	HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	4804      	ldr	r0, [pc, #16]	; (8001058 <dateSet_command+0xc8>)
 8001048:	f004 f88d 	bl	8005166 <HAL_RTC_SetDate>
	return 0;
 800104c:	2300      	movs	r3, #0
	//hal = HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
	//printf("\r\n%x\r\n",hal);
}
 800104e:	4618      	mov	r0, r3
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001c4 	.word	0x200001c4

0800105c <timeSet_command>:
int timeSet_command(char *args){
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	int comma_count = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* start_of_num = args;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
	int numbers[3];
	while(*args!='\0'){
 800106c:	e01f      	b.n	80010ae <timeSet_command+0x52>
		if(*args==','){
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b2c      	cmp	r3, #44	; 0x2c
 8001074:	d113      	bne.n	800109e <timeSet_command+0x42>
			*args = '\0';
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
		    numbers[comma_count] = atoi(start_of_num);
 800107c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800107e:	f006 fa50 	bl	8007522 <atoi>
 8001082:	4602      	mov	r2, r0
 8001084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800108c:	440b      	add	r3, r1
 800108e:	f843 2c28 	str.w	r2, [r3, #-40]
		    comma_count += 1;
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	3301      	adds	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
		    start_of_num = args+1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(comma_count>2){
 800109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	dd01      	ble.n	80010a8 <timeSet_command+0x4c>
			//printf("\r\n error \n\r");
		    return 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e036      	b.n	8001116 <timeSet_command+0xba>
		}
		args++;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1db      	bne.n	800106e <timeSet_command+0x12>
	}
	if(numbers[0]>24 || numbers[0] < 1 || numbers[1] > 60 || numbers[1]<1 || numbers[2] > 60 || numbers[2]< 1)
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2b18      	cmp	r3, #24
 80010ba:	dc0e      	bgt.n	80010da <timeSet_command+0x7e>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dd0b      	ble.n	80010da <timeSet_command+0x7e>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b3c      	cmp	r3, #60	; 0x3c
 80010c6:	dc08      	bgt.n	80010da <timeSet_command+0x7e>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	dd05      	ble.n	80010da <timeSet_command+0x7e>
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b3c      	cmp	r3, #60	; 0x3c
 80010d2:	dc02      	bgt.n	80010da <timeSet_command+0x7e>
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dc01      	bgt.n	80010de <timeSet_command+0x82>
		return 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	e01b      	b.n	8001116 <timeSet_command+0xba>
	numbers[comma_count] = atoi(start_of_num);
 80010de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010e0:	f006 fa1f 	bl	8007522 <atoi>
 80010e4:	4602      	mov	r2, r0
 80010e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80010ee:	440b      	add	r3, r1
 80010f0:	f843 2c28 	str.w	r2, [r3, #-40]
	time.Hours = numbers[0];
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	753b      	strb	r3, [r7, #20]
	time.Minutes = numbers[1];
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	757b      	strb	r3, [r7, #21]
	time.Seconds = numbers[2];
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	75bb      	strb	r3, [r7, #22]

	HAL_RTC_SetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <timeSet_command+0xc4>)
 8001110:	f003 ff30 	bl	8004f74 <HAL_RTC_SetTime>
	return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3730      	adds	r7, #48	; 0x30
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001c4 	.word	0x200001c4

08001124 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	toggle=1;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_RTC_AlarmAEventCallback+0x1c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000100 	.word	0x20000100

08001144 <tsl237_command>:
int tsl237_command(char* args){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	  //float clock_period;
	  //float sensor_period;
	  float sensor_frequency;

	  if (args) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <tsl237_command+0x12>
	    return 1;
 8001152:	2301      	movs	r3, #1
 8001154:	e03e      	b.n	80011d4 <tsl237_command+0x90>
	  }
	  else {
		timer_done = 0;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <tsl237_command+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
		HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	4820      	ldr	r0, [pc, #128]	; (80011e0 <tsl237_command+0x9c>)
 8001160:	f004 fca6 	bl	8005ab0 <HAL_TIM_IC_Start_IT>
		while(!timer_done);
 8001164:	bf00      	nop
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <tsl237_command+0x98>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0fb      	beq.n	8001166 <tsl237_command+0x22>


	    //clock_period = SystemCoreClock;
	    //clock_period = 1/clock_period;
	    //sensor_period = clock_period * (float) period;
	    sensor_frequency = (1.0/((float)period/(float)SystemCoreClock));
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <tsl237_command+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <tsl237_command+0xa4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800118a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800118e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001192:	edc7 7a03 	vstr	s15, [r7, #12]
	    printf("\r\n%d.%d hz\r\n", (int) sensor_frequency, ((int)(sensor_frequency*100)%100));
 8001196:	edd7 7a03 	vldr	s15, [r7, #12]
 800119a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800119e:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80011ec <tsl237_command+0xa8>
 80011a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ae:	ee17 2a90 	vmov	r2, s15
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <tsl237_command+0xac>)
 80011b4:	fb83 1302 	smull	r1, r3, r3, r2
 80011b8:	1159      	asrs	r1, r3, #5
 80011ba:	17d3      	asrs	r3, r2, #31
 80011bc:	1acb      	subs	r3, r1, r3
 80011be:	2164      	movs	r1, #100	; 0x64
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	ee16 1a90 	vmov	r1, s13
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <tsl237_command+0xb0>)
 80011ce:	f006 f9f1 	bl	80075b4 <iprintf>
	    return 0;
 80011d2:	2300      	movs	r3, #0
	  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000108 	.word	0x20000108
 80011e0:	200001f0 	.word	0x200001f0
 80011e4:	20000104 	.word	0x20000104
 80011e8:	20000054 	.word	0x20000054
 80011ec:	42c80000 	.word	0x42c80000
 80011f0:	51eb851f 	.word	0x51eb851f
 80011f4:	08008c88 	.word	0x08008c88

080011f8 <temp_command>:
int temp_command(char *args){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	  if (args) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <temp_command+0x12>
	    return 1;
 8001206:	2301      	movs	r3, #1
 8001208:	e00b      	b.n	8001222 <temp_command+0x2a>
	  }
	  else {
	    printf("\n\r%d\n\r",(int)read_temp());
 800120a:	f000 fb39 	bl	8001880 <read_temp>
 800120e:	eef0 7a40 	vmov.f32	s15, s0
 8001212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001216:	ee17 1a90 	vmov	r1, s15
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <temp_command+0x34>)
 800121c:	f006 f9ca 	bl	80075b4 <iprintf>
	    return 0;
 8001220:	2300      	movs	r3, #0
	  }
	  return 2;
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	08008c98 	.word	0x08008c98

08001230 <battery_command>:

int battery_command(char *args) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t battery_voltage;
  if (args) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <battery_command+0x12>
    return 1;
 800123e:	2301      	movs	r3, #1
 8001240:	e01a      	b.n	8001278 <battery_command+0x48>
  }
  else {
    battery_voltage = read_vrefint();
 8001242:	f7ff f9a1 	bl	8000588 <read_vrefint>
 8001246:	60f8      	str	r0, [r7, #12]
    printf("\r\n%d.%03d\r\n",(int)battery_voltage/1000,(int)battery_voltage%1000);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <battery_command+0x50>)
 800124c:	fb82 1203 	smull	r1, r2, r2, r3
 8001250:	1192      	asrs	r2, r2, #6
 8001252:	17db      	asrs	r3, r3, #31
 8001254:	1ad0      	subs	r0, r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <battery_command+0x50>)
 800125a:	fb82 1203 	smull	r1, r2, r2, r3
 800125e:	1191      	asrs	r1, r2, #6
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	1a8a      	subs	r2, r1, r2
 8001264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001268:	fb01 f202 	mul.w	r2, r1, r2
 800126c:	1a9a      	subs	r2, r3, r2
 800126e:	4601      	mov	r1, r0
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <battery_command+0x54>)
 8001272:	f006 f99f 	bl	80075b4 <iprintf>
    return 0;
 8001276:	2300      	movs	r3, #0
  }
  return 2;
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	10624dd3 	.word	0x10624dd3
 8001284:	08008ca0 	.word	0x08008ca0

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>

08001292 <enqueue>:
  buf->head=0;
  buf->tail=0;
  restore(mask);
}

int enqueue (queue_t *buf, uint8_t data) {
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 80012a2:	f7ff f9d5 	bl	8000650 <disable>
 80012a6:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	425a      	negs	r2, r3
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	f002 021f 	and.w	r2, r2, #31
 80012b8:	bf58      	it	pl
 80012ba:	4253      	negpl	r3, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6852      	ldr	r2, [r2, #4]
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d014      	beq.n	80012ee <enqueue+0x5c>
    buf->buffer[buf->head]=data;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	78fa      	ldrb	r2, [r7, #3]
 80012ce:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	425a      	negs	r2, r3
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	f002 021f 	and.w	r2, r2, #31
 80012e0:	bf58      	it	pl
 80012e2:	4253      	negpl	r3, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6013      	str	r3, [r2, #0]
    return_val=0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	e002      	b.n	80012f4 <enqueue+0x62>
  }
  else {
    return_val=-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f2:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f7ff f9be 	bl	8000676 <restore>
  return (return_val);
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  int return_val=0;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001310:	f7ff f99e 	bl	8000650 <disable>
 8001314:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d011      	beq.n	8001346 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	7a1b      	ldrb	r3, [r3, #8]
 800132c:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	3301      	adds	r3, #1
 8001334:	425a      	negs	r2, r3
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	f002 021f 	and.w	r2, r2, #31
 800133e:	bf58      	it	pl
 8001340:	4253      	negpl	r3, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f7ff f995 	bl	8000676 <restore>
  return(return_val);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	b2db      	uxtb	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <RetargetInit+0x28>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <RetargetInit+0x2c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6898      	ldr	r0, [r3, #8]
 800136c:	2300      	movs	r3, #0
 800136e:	2202      	movs	r2, #2
 8001370:	2100      	movs	r1, #0
 8001372:	f006 f9c3 	bl	80076fc <setvbuf>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002bc 	.word	0x200002bc
 8001384:	20000064 	.word	0x20000064

08001388 <_isatty>:

int _isatty(int fd) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db04      	blt.n	80013a0 <_isatty+0x18>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b02      	cmp	r3, #2
 800139a:	dc01      	bgt.n	80013a0 <_isatty+0x18>
    return 1;
 800139c:	2301      	movs	r3, #1
 800139e:	e005      	b.n	80013ac <_isatty+0x24>

  errno = EBADF;
 80013a0:	f006 f8c4 	bl	800752c <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2209      	movs	r2, #9
 80013a8:	601a      	str	r2, [r3, #0]
  return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_write>:

int _write(int fd, char* ptr, int len) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d002      	beq.n	80013cc <_write+0x18>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d111      	bne.n	80013f0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <_write+0x54>)
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	f005 f9f9 	bl	80067d0 <HAL_UART_Transmit>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <_write+0x38>
      return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	e008      	b.n	80013fe <_write+0x4a>
    else
      return EIO;
 80013ec:	2305      	movs	r3, #5
 80013ee:	e006      	b.n	80013fe <_write+0x4a>
  }
  errno = EBADF;
 80013f0:	f006 f89c 	bl	800752c <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2209      	movs	r2, #9
 80013f8:	601a      	str	r2, [r3, #0]
  return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002bc 	.word	0x200002bc

0800140c <_close>:

int _close(int fd) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db04      	blt.n	8001424 <_close+0x18>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b02      	cmp	r3, #2
 800141e:	dc01      	bgt.n	8001424 <_close+0x18>
    return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e006      	b.n	8001432 <_close+0x26>

  errno = EBADF;
 8001424:	f006 f882 	bl	800752c <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	2209      	movs	r2, #9
 800142c:	601a      	str	r2, [r3, #0]
  return -1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001446:	f006 f871 	bl	800752c <__errno>
 800144a:	4603      	mov	r3, r0
 800144c:	2209      	movs	r2, #9
 800144e:	601a      	str	r2, [r3, #0]
  return -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_read>:

int _read(int fd, char* ptr, int len) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d110      	bne.n	8001490 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <_read+0x4c>)
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001476:	2201      	movs	r2, #1
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	f005 fa3c 	bl	80068f6 <HAL_UART_Receive>
 800147e:	4603      	mov	r3, r0
 8001480:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <_read+0x30>
      return 1;
 8001488:	2301      	movs	r3, #1
 800148a:	e008      	b.n	800149e <_read+0x42>
    else
      return EIO;
 800148c:	2305      	movs	r3, #5
 800148e:	e006      	b.n	800149e <_read+0x42>
  }
  errno = EBADF;
 8001490:	f006 f84c 	bl	800752c <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	2209      	movs	r2, #9
 8001498:	601a      	str	r2, [r3, #0]
  return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200002bc 	.word	0x200002bc

080014ac <_fstat>:

int _fstat(int fd, struct stat* st) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db08      	blt.n	80014ce <_fstat+0x22>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	dc05      	bgt.n	80014ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c8:	605a      	str	r2, [r3, #4]
    return 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e005      	b.n	80014da <_fstat+0x2e>
  }

  errno = EBADF;
 80014ce:	f006 f82d 	bl	800752c <__errno>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2209      	movs	r2, #9
 80014d6:	601a      	str	r2, [r3, #0]
  return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_MspInit+0x44>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_MspInit+0x44>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6613      	str	r3, [r2, #96]	; 0x60
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_MspInit+0x44>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x44>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6593      	str	r3, [r2, #88]	; 0x58
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_ADC_MspInit+0x44>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d113      	bne.n	8001566 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_ADC_MspInit+0x48>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <HAL_ADC_MspInit+0x48>)
 8001544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_ADC_MspInit+0x48>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2012      	movs	r0, #18
 800155c:	f002 f9d0 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001560:	2012      	movs	r0, #18
 8001562:	f002 f9e9 	bl	8003938 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	50040000 	.word	0x50040000
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b090      	sub	sp, #64	; 0x40
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2234      	movs	r2, #52	; 0x34
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f006 f80b 	bl	80075a4 <memset>
  if(hrtc->Instance==RTC)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_RTC_MspInit+0x78>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d127      	bne.n	80015e8 <HAL_RTC_MspInit+0x70>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800159e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 facb 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80015b4:	f7ff fe68 	bl	8001288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_RTC_MspInit+0x7c>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HAL_RTC_MspInit+0x7c>)
 80015c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	2003      	movs	r0, #3
 80015ce:	f002 f997 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f002 f9b0 	bl	8003938 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2101      	movs	r1, #1
 80015dc:	2029      	movs	r0, #41	; 0x29
 80015de:	f002 f98f 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015e2:	2029      	movs	r0, #41	; 0x29
 80015e4:	f002 f9a8 	bl	8003938 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3740      	adds	r7, #64	; 0x40
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40002800 	.word	0x40002800
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d130      	bne.n	800167c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_TIM_IC_MspInit+0x8c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_TIM_IC_MspInit+0x8c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6593      	str	r3, [r2, #88]	; 0x58
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_TIM_IC_MspInit+0x8c>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_TIM_IC_MspInit+0x8c>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <HAL_TIM_IC_MspInit+0x8c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_TIM_IC_MspInit+0x8c>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800164a:	2320      	movs	r3, #32
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165a:	2301      	movs	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f002 f9b6 	bl	80039d8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	201c      	movs	r0, #28
 8001672:	f002 f945 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001676:	201c      	movs	r0, #28
 8001678:	f002 f95e 	bl	8003938 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b096      	sub	sp, #88	; 0x58
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	2234      	movs	r2, #52	; 0x34
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 ff7b 	bl	80075a4 <memset>
  if(huart->Instance==USART2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a2c      	ldr	r2, [pc, #176]	; (8001764 <HAL_UART_MspInit+0xdc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d150      	bne.n	800175a <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fa3d 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d0:	f7ff fdda 	bl	8001288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_UART_MspInit+0xe0>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	4a23      	ldr	r2, [pc, #140]	; (8001768 <HAL_UART_MspInit+0xe0>)
 80016da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016de:	6593      	str	r3, [r2, #88]	; 0x58
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_UART_MspInit+0xe0>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_UART_MspInit+0xe0>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_UART_MspInit+0xe0>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_UART_MspInit+0xe0>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001704:	2304      	movs	r3, #4
 8001706:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001714:	2307      	movs	r3, #7
 8001716:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f002 f959 	bl	80039d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800172a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001738:	2303      	movs	r3, #3
 800173a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f002 f947 	bl	80039d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2026      	movs	r0, #38	; 0x26
 8001750:	f002 f8d6 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001754:	2026      	movs	r0, #38	; 0x26
 8001756:	f002 f8ef 	bl	8003938 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3758      	adds	r7, #88	; 0x58
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40004400 	.word	0x40004400
 8001768:	40021000 	.word	0x40021000

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <NMI_Handler+0x4>

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b8:	f000 f916 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <RTC_WKUP_IRQHandler+0x10>)
 80017c6:	f004 f831 	bl	800582c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001c4 	.word	0x200001c4

080017d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <ADC1_2_IRQHandler+0x10>)
 80017da:	f000 febb 	bl	8002554 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000160 	.word	0x20000160

080017e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM2_IRQHandler+0x10>)
 80017ee:	f004 fb3d 	bl	8005e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001f0 	.word	0x200001f0

080017fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001802:	480f      	ldr	r0, [pc, #60]	; (8001840 <USART2_IRQHandler+0x44>)
 8001804:	f005 f944 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  uint8_t ch;
  ch = getchar();
 8001808:	f005 fe96 	bl	8007538 <getchar>
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  if (enqueue(&rx_queue,ch)) {
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4619      	mov	r1, r3
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <USART2_IRQHandler+0x48>)
 8001816:	f7ff fd3c 	bl	8001292 <enqueue>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <USART2_IRQHandler+0x34>
    dequeue(&rx_queue);
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <USART2_IRQHandler+0x48>)
 8001822:	f7ff fd6f 	bl	8001304 <dequeue>
    enqueue(&rx_queue,ch);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <USART2_IRQHandler+0x48>)
 800182c:	f7ff fd31 	bl	8001292 <enqueue>
  if(buf.head == (MAX_BUF-1)){
    buf.head = 0;
  }else{
    buf.head++;
    }*/
  HAL_UART_IRQHandler(&huart2);
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <USART2_IRQHandler+0x44>)
 8001832:	f005 f92d 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000023c 	.word	0x2000023c
 8001844:	20000138 	.word	0x20000138

08001848 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <RTC_Alarm_IRQHandler+0x10>)
 800184e:	f003 fe4f 	bl	80054f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200001c4 	.word	0x200001c4

0800185c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <SystemInit+0x20>)
 8001862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <SystemInit+0x20>)
 8001868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800186c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <read_temp>:
#include "battery.h"

extern ADC_HandleTypeDef hadc1;


float read_temp(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  uint32_t rawTemp;
  uint32_t vref;
  float temp;


  if (first_time_up) {
 8001886:	4b30      	ldr	r3, [pc, #192]	; (8001948 <read_temp+0xc8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d014      	beq.n	80018b8 <read_temp+0x38>
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <read_temp+0xcc>)
 8001890:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <read_temp+0xd0>)
 8001892:	601a      	str	r2, [r3, #0]
    sConfig.Rank = 1;
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <read_temp+0xcc>)
 8001896:	2201      	movs	r2, #1
 8001898:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <read_temp+0xcc>)
 800189c:	2207      	movs	r2, #7
 800189e:	609a      	str	r2, [r3, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <read_temp+0xcc>)
 80018a2:	227f      	movs	r2, #127	; 0x7f
 80018a4:	60da      	str	r2, [r3, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <read_temp+0xcc>)
 80018a8:	2204      	movs	r2, #4
 80018aa:	611a      	str	r2, [r3, #16]
    sConfig.Offset = 0;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <read_temp+0xcc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
    first_time_up = 0;
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <read_temp+0xc8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
  }
  sConfig.Rank = 1;
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <read_temp+0xcc>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018be:	4923      	ldr	r1, [pc, #140]	; (800194c <read_temp+0xcc>)
 80018c0:	4824      	ldr	r0, [pc, #144]	; (8001954 <read_temp+0xd4>)
 80018c2:	f001 f87f 	bl	80029c4 <HAL_ADC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <read_temp+0x50>
      Error_Handler();
 80018cc:	f7ff fcdc 	bl	8001288 <Error_Handler>
  }
  while (HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK);   // Calibrate the A2D
 80018d0:	bf00      	nop
 80018d2:	217f      	movs	r1, #127	; 0x7f
 80018d4:	481f      	ldr	r0, [pc, #124]	; (8001954 <read_temp+0xd4>)
 80018d6:	f001 fe28 	bl	800352a <HAL_ADCEx_Calibration_Start>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f8      	bne.n	80018d2 <read_temp+0x52>
  HAL_ADC_Start(&hadc1);
 80018e0:	481c      	ldr	r0, [pc, #112]	; (8001954 <read_temp+0xd4>)
 80018e2:	f000 fc6b 	bl	80021bc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80018e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018ea:	481a      	ldr	r0, [pc, #104]	; (8001954 <read_temp+0xd4>)
 80018ec:	f000 fd54 	bl	8002398 <HAL_ADC_PollForConversion>
  rawTemp = HAL_ADC_GetValue(&hadc1);
 80018f0:	4818      	ldr	r0, [pc, #96]	; (8001954 <read_temp+0xd4>)
 80018f2:	f000 fe21 	bl	8002538 <HAL_ADC_GetValue>
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop(&hadc1);
 80018f8:	4816      	ldr	r0, [pc, #88]	; (8001954 <read_temp+0xd4>)
 80018fa:	f000 fd19 	bl	8002330 <HAL_ADC_Stop>
  vref = read_vrefint();
 80018fe:	f7fe fe43 	bl	8000588 <read_vrefint>
 8001902:	6038      	str	r0, [r7, #0]
  return (__HAL_ADC_CALC_TEMPERATURE(vref,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <read_temp+0xd8>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	099b      	lsrs	r3, r3, #6
 8001914:	461a      	mov	r2, r3
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <read_temp+0xdc>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2264      	movs	r2, #100	; 0x64
 800191e:	fb02 f203 	mul.w	r2, r2, r3
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <read_temp+0xe0>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <read_temp+0xdc>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001932:	331e      	adds	r3, #30
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                       rawTemp,
                                       ADC_RESOLUTION_12B));
  return (temp);
}
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000058 	.word	0x20000058
 800194c:	20000114 	.word	0x20000114
 8001950:	c7520000 	.word	0xc7520000
 8001954:	20000160 	.word	0x20000160
 8001958:	057619f1 	.word	0x057619f1
 800195c:	1fff75a8 	.word	0x1fff75a8
 8001960:	1fff75ca 	.word	0x1fff75ca

08001964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001968:	f7ff ff78 	bl	800185c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	; (80019a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <LoopForever+0xe>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <LoopForever+0x16>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f005 fde3 	bl	800755c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001996:	f7fe feed 	bl	8000774 <main>

0800199a <LoopForever>:

LoopForever:
    b LoopForever
 800199a:	e7fe      	b.n	800199a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800199c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80019a8:	08008ea0 	.word	0x08008ea0
  ldr r2, =_sbss
 80019ac:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80019b0:	20000320 	.word	0x20000320

080019b4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <COMP_IRQHandler>

080019b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f001 ff92 	bl	80038ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c6:	2000      	movs	r0, #0
 80019c8:	f004 fe3c 	bl	8006644 <HAL_InitTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	e001      	b.n	80019dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d8:	f7ff fd84 	bl	80014e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019dc:	79fb      	ldrb	r3, [r7, #7]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000060 	.word	0x20000060
 8001a0c:	200002c0 	.word	0x200002c0

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200002c0 	.word	0x200002c0

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffde 	bl	8001a10 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000060 	.word	0x20000060

08001a70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	609a      	str	r2, [r3, #8]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3360      	adds	r3, #96	; 0x60
 8001aea:	461a      	mov	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <LL_ADC_SetOffset+0x44>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b10:	bf00      	nop
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	03fff000 	.word	0x03fff000

08001b20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3360      	adds	r3, #96	; 0x60
 8001b2e:	461a      	mov	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3360      	adds	r3, #96	; 0x60
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b76:	bf00      	nop
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	615a      	str	r2, [r3, #20]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b087      	sub	sp, #28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3330      	adds	r3, #48	; 0x30
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	211f      	movs	r1, #31
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	401a      	ands	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	f003 011f 	and.w	r1, r3, #31
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	431a      	orrs	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3314      	adds	r3, #20
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	0e5b      	lsrs	r3, r3, #25
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	4413      	add	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	0d1b      	lsrs	r3, r3, #20
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2107      	movs	r1, #7
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	401a      	ands	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0d1b      	lsrs	r3, r3, #20
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0318 	and.w	r3, r3, #24
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cc8:	40d9      	lsrs	r1, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	400b      	ands	r3, r1
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	0007ffff 	.word	0x0007ffff

08001cec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6093      	str	r3, [r2, #8]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dfc:	f043 0202 	orr.w	r2, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <LL_ADC_IsEnabled+0x18>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_ADC_IsEnabled+0x1a>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_IsDisableOngoing+0x18>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_IsDisableOngoing+0x1a>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e70:	f043 0204 	orr.w	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e98:	f043 0210 	orr.w	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d101      	bne.n	8001ec4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee6:	f043 0220 	orr.w	r2, r3, #32
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d101      	bne.n	8001f12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e12f      	b.n	800219a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff faef 	bl	800152c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fef1 	bl	8001d48 <LL_ADC_IsDeepPowerDownEnabled>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fed7 	bl	8001d24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff0c 	bl	8001d98 <LL_ADC_IsInternalRegulatorEnabled>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d113      	bne.n	8001fae <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fef0 	bl	8001d70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f90:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_ADC_Init+0x284>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	4a84      	ldr	r2, [pc, #528]	; (80021a8 <HAL_ADC_Init+0x288>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fef0 	bl	8001d98 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0210 	orr.w	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff64 	bl	8001eac <LL_ADC_REG_IsConversionOngoing>
 8001fe4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 80ca 	bne.w	8002188 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80c6 	bne.w	8002188 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002004:	f043 0202 	orr.w	r2, r3, #2
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fefd 	bl	8001e10 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d110      	bne.n	800203e <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201c:	4863      	ldr	r0, [pc, #396]	; (80021ac <HAL_ADC_Init+0x28c>)
 800201e:	f7ff fef7 	bl	8001e10 <LL_ADC_IsEnabled>
 8002022:	4604      	mov	r4, r0
 8002024:	4862      	ldr	r0, [pc, #392]	; (80021b0 <HAL_ADC_Init+0x290>)
 8002026:	f7ff fef3 	bl	8001e10 <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	4323      	orrs	r3, r4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4619      	mov	r1, r3
 8002038:	485e      	ldr	r0, [pc, #376]	; (80021b4 <HAL_ADC_Init+0x294>)
 800203a:	f7ff fd19 	bl	8001a70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7e5b      	ldrb	r3, [r3, #25]
 8002042:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002048:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800204e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002054:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	3b01      	subs	r3, #1
 8002072:	045b      	lsls	r3, r3, #17
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_ADC_Init+0x298>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	430b      	orrs	r3, r1
 80020a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fefc 	bl	8001eac <LL_ADC_REG_IsConversionOngoing>
 80020b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff1d 	bl	8001efa <LL_ADC_INJ_IsConversionOngoing>
 80020c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13d      	bne.n	8002144 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d13a      	bne.n	8002144 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020da:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ea:	f023 0302 	bic.w	r3, r3, #2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	69b9      	ldr	r1, [r7, #24]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d118      	bne.n	8002134 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002124:	430a      	orrs	r2, r1
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	611a      	str	r2, [r3, #16]
 8002132:	e007      	b.n	8002144 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d10c      	bne.n	8002166 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f023 010f 	bic.w	r1, r3, #15
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	1e5a      	subs	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
 8002164:	e007      	b.n	8002176 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 020f 	bic.w	r2, r2, #15
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
 8002186:	e007      	b.n	8002198 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	f043 0210 	orr.w	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002198:	7ffb      	ldrb	r3, [r7, #31]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000054 	.word	0x20000054
 80021a8:	053e2d63 	.word	0x053e2d63
 80021ac:	50040000 	.word	0x50040000
 80021b0:	50040100 	.word	0x50040100
 80021b4:	50040300 	.word	0x50040300
 80021b8:	fff0c007 	.word	0xfff0c007

080021bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c4:	4857      	ldr	r0, [pc, #348]	; (8002324 <HAL_ADC_Start+0x168>)
 80021c6:	f7ff fd91 	bl	8001cec <LL_ADC_GetMultimode>
 80021ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fe6b 	bl	8001eac <LL_ADC_REG_IsConversionOngoing>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 809c 	bne.w	8002316 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_Start+0x30>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e097      	b.n	800231c <HAL_ADC_Start+0x160>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f001 f893 	bl	8003320 <ADC_Enable>
 80021fa:	4603      	mov	r3, r0
 80021fc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 8083 	bne.w	800230c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a42      	ldr	r2, [pc, #264]	; (8002328 <HAL_ADC_Start+0x16c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d002      	beq.n	800222a <HAL_ADC_Start+0x6e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	e000      	b.n	800222c <HAL_ADC_Start+0x70>
 800222a:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_ADC_Start+0x170>)
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	4293      	cmp	r3, r2
 8002232:	d002      	beq.n	800223a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002252:	d106      	bne.n	8002262 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f023 0206 	bic.w	r2, r3, #6
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	659a      	str	r2, [r3, #88]	; 0x58
 8002260:	e002      	b.n	8002268 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	221c      	movs	r2, #28
 800226e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a2a      	ldr	r2, [pc, #168]	; (8002328 <HAL_ADC_Start+0x16c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d002      	beq.n	8002288 <HAL_ADC_Start+0xcc>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	e000      	b.n	800228a <HAL_ADC_Start+0xce>
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <HAL_ADC_Start+0x170>)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4293      	cmp	r3, r2
 8002290:	d008      	beq.n	80022a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d002      	beq.n	80022a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d114      	bne.n	80022ce <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fdc8 	bl	8001e5c <LL_ADC_REG_StartConversion>
 80022cc:	e025      	b.n	800231a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_ADC_Start+0x16c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d002      	beq.n	80022ea <HAL_ADC_Start+0x12e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	e000      	b.n	80022ec <HAL_ADC_Start+0x130>
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_ADC_Start+0x170>)
 80022ec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00f      	beq.n	800231a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002302:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
 800230a:	e006      	b.n	800231a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002314:	e001      	b.n	800231a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	50040300 	.word	0x50040300
 8002328:	50040100 	.word	0x50040100
 800232c:	50040000 	.word	0x50040000

08002330 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Stop+0x16>
 8002342:	2302      	movs	r3, #2
 8002344:	e023      	b.n	800238e <HAL_ADC_Stop+0x5e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800234e:	2103      	movs	r1, #3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 ff31 	bl	80031b8 <ADC_ConversionStop>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f001 f837 	bl	80033d4 <ADC_Disable>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a2:	4862      	ldr	r0, [pc, #392]	; (800252c <HAL_ADC_PollForConversion+0x194>)
 80023a4:	f7ff fca2 	bl	8001cec <LL_ADC_GetMultimode>
 80023a8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d102      	bne.n	80023b8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023b2:	2308      	movs	r3, #8
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e02a      	b.n	800240e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d002      	beq.n	80023ca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b09      	cmp	r3, #9
 80023c8:	d111      	bne.n	80023ee <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e09d      	b.n	8002524 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023e8:	2304      	movs	r3, #4
 80023ea:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023ec:	e00f      	b.n	800240e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023ee:	484f      	ldr	r0, [pc, #316]	; (800252c <HAL_ADC_PollForConversion+0x194>)
 80023f0:	f7ff fc8a 	bl	8001d08 <LL_ADC_GetMultiDMATransfer>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f043 0220 	orr.w	r2, r3, #32
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e08c      	b.n	8002524 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800240a:	2304      	movs	r3, #4
 800240c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800240e:	f7ff faff 	bl	8001a10 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002414:	e01a      	b.n	800244c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800241c:	d016      	beq.n	800244c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800241e:	f7ff faf7 	bl	8001a10 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d302      	bcc.n	8002434 <HAL_ADC_PollForConversion+0x9c>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10b      	bne.n	800244c <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	f043 0204 	orr.w	r2, r3, #4
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e06b      	b.n	8002524 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0dd      	beq.n	8002416 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fb9c 	bl	8001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01c      	beq.n	80024b0 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7e5b      	ldrb	r3, [r3, #25]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b08      	cmp	r3, #8
 800248a:	d111      	bne.n	80024b0 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_ADC_PollForConversion+0x198>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d002      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x128>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	e000      	b.n	80024c2 <HAL_ADC_PollForConversion+0x12a>
 80024c0:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_ADC_PollForConversion+0x19c>)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d008      	beq.n	80024dc <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d002      	beq.n	80024dc <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d104      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	e00c      	b.n	8002500 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a11      	ldr	r2, [pc, #68]	; (8002530 <HAL_ADC_PollForConversion+0x198>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d002      	beq.n	80024f6 <HAL_ADC_PollForConversion+0x15e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	e000      	b.n	80024f8 <HAL_ADC_PollForConversion+0x160>
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_ADC_PollForConversion+0x19c>)
 80024f8:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b08      	cmp	r3, #8
 8002504:	d104      	bne.n	8002510 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2208      	movs	r2, #8
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e008      	b.n	8002522 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	220c      	movs	r2, #12
 8002520:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	50040300 	.word	0x50040300
 8002530:	50040100 	.word	0x50040100
 8002534:	50040000 	.word	0x50040000

08002538 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002570:	4882      	ldr	r0, [pc, #520]	; (800277c <HAL_ADC_IRQHandler+0x228>)
 8002572:	f7ff fbbb 	bl	8001cec <LL_ADC_GetMultimode>
 8002576:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d017      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x5e>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f001 f848 	bl	800363a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2202      	movs	r2, #2
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x72>
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8083 	beq.w	80026d8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d07d      	beq.n	80026d8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fad5 	bl	8001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d062      	beq.n	80026ca <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <HAL_ADC_IRQHandler+0x22c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d002      	beq.n	8002614 <HAL_ADC_IRQHandler+0xc0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	e000      	b.n	8002616 <HAL_ADC_IRQHandler+0xc2>
 8002614:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <HAL_ADC_IRQHandler+0x230>)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	4293      	cmp	r3, r2
 800261c:	d008      	beq.n	8002630 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d002      	beq.n	8002630 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b09      	cmp	r3, #9
 800262e:	d104      	bne.n	800263a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	623b      	str	r3, [r7, #32]
 8002638:	e00c      	b.n	8002654 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a50      	ldr	r2, [pc, #320]	; (8002780 <HAL_ADC_IRQHandler+0x22c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d002      	beq.n	800264a <HAL_ADC_IRQHandler+0xf6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	e000      	b.n	800264c <HAL_ADC_IRQHandler+0xf8>
 800264a:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_ADC_IRQHandler+0x230>)
 800264c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d135      	bne.n	80026ca <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d12e      	bne.n	80026ca <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fc1b 	bl	8001eac <LL_ADC_REG_IsConversionOngoing>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11a      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 020c 	bic.w	r2, r2, #12
 800268a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d112      	bne.n	80026ca <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
 80026b0:	e00b      	b.n	80026ca <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f95c 	bl	8002988 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	220c      	movs	r2, #12
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <HAL_ADC_IRQHandler+0x198>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 809f 	beq.w	8002836 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8099 	beq.w	8002836 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fa80 	bl	8001c26 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002726:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fa3b 	bl	8001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002732:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a11      	ldr	r2, [pc, #68]	; (8002780 <HAL_ADC_IRQHandler+0x22c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d002      	beq.n	8002744 <HAL_ADC_IRQHandler+0x1f0>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	e000      	b.n	8002746 <HAL_ADC_IRQHandler+0x1f2>
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_ADC_IRQHandler+0x230>)
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	4293      	cmp	r3, r2
 800274c:	d008      	beq.n	8002760 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b06      	cmp	r3, #6
 8002758:	d002      	beq.n	8002760 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b07      	cmp	r3, #7
 800275e:	d104      	bne.n	800276a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	623b      	str	r3, [r7, #32]
 8002768:	e013      	b.n	8002792 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_ADC_IRQHandler+0x22c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d009      	beq.n	8002788 <HAL_ADC_IRQHandler+0x234>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	e007      	b.n	800278a <HAL_ADC_IRQHandler+0x236>
 800277a:	bf00      	nop
 800277c:	50040300 	.word	0x50040300
 8002780:	50040100 	.word	0x50040100
 8002784:	50040000 	.word	0x50040000
 8002788:	4b7d      	ldr	r3, [pc, #500]	; (8002980 <HAL_ADC_IRQHandler+0x42c>)
 800278a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10c      	bne.n	80027b2 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d142      	bne.n	8002828 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d03f      	beq.n	8002828 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d13a      	bne.n	8002828 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	2b40      	cmp	r3, #64	; 0x40
 80027be:	d133      	bne.n	8002828 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d12e      	bne.n	8002828 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fb93 	bl	8001efa <LL_ADC_INJ_IsConversionOngoing>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11a      	bne.n	8002810 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027e8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d112      	bne.n	8002828 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
 800280e:	e00b      	b.n	8002828 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	f043 0210 	orr.w	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fede 	bl	80035ea <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2260      	movs	r2, #96	; 0x60
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d011      	beq.n	8002864 <HAL_ADC_IRQHandler+0x310>
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8a0 	bl	800299c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <HAL_ADC_IRQHandler+0x340>
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fec4 	bl	8003612 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x370>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 feb6 	bl	8003626 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d036      	beq.n	800293c <HAL_ADC_IRQHandler+0x3e8>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d031      	beq.n	800293c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80028e0:	2301      	movs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
 80028e4:	e014      	b.n	8002910 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028ec:	4825      	ldr	r0, [pc, #148]	; (8002984 <HAL_ADC_IRQHandler+0x430>)
 80028ee:	f7ff fa0b 	bl	8001d08 <LL_ADC_GetMultiDMATransfer>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
 80028fc:	e008      	b.n	8002910 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10e      	bne.n	8002934 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f043 0202 	orr.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f83e 	bl	80029b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2210      	movs	r2, #16
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	2b00      	cmp	r3, #0
 8002944:	d018      	beq.n	8002978 <HAL_ADC_IRQHandler+0x424>
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	f043 0208 	orr.w	r2, r3, #8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002970:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fe43 	bl	80035fe <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002978:	bf00      	nop
 800297a:	3728      	adds	r7, #40	; 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	50040000 	.word	0x50040000
 8002984:	50040300 	.word	0x50040300

08002988 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b0b6      	sub	sp, #216	; 0xd8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x22>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e3d4      	b.n	8003190 <HAL_ADC_ConfigChannel+0x7cc>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fa5a 	bl	8001eac <LL_ADC_REG_IsConversionOngoing>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 83b9 	bne.w	8003172 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d824      	bhi.n	8002a52 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	3b02      	subs	r3, #2
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d81b      	bhi.n	8002a4a <HAL_ADC_ConfigChannel+0x86>
 8002a12:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <HAL_ADC_ConfigChannel+0x54>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a31 	.word	0x08002a31
 8002a20:	08002a39 	.word	0x08002a39
 8002a24:	08002a41 	.word	0x08002a41
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	605a      	str	r2, [r3, #4]
          break;
 8002a2e:	e011      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2212      	movs	r2, #18
 8002a34:	605a      	str	r2, [r3, #4]
          break;
 8002a36:	e00d      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2218      	movs	r2, #24
 8002a3c:	605a      	str	r2, [r3, #4]
          break;
 8002a3e:	e009      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a46:	605a      	str	r2, [r3, #4]
          break;
 8002a48:	e004      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2206      	movs	r2, #6
 8002a4e:	605a      	str	r2, [r3, #4]
          break;
 8002a50:	e000      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a52:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff f8b4 	bl	8001bce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fa1e 	bl	8001eac <LL_ADC_REG_IsConversionOngoing>
 8002a70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fa3e 	bl	8001efa <LL_ADC_INJ_IsConversionOngoing>
 8002a7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 81c1 	bne.w	8002e0e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 81bc 	bne.w	8002e0e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7ff f8ce 	bl	8001c4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff f862 	bl	8001b82 <LL_ADC_SetSamplingTimeCommonConfig>
 8002abe:	e00e      	b.n	8002ade <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f7ff f8bd 	bl	8001c4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f852 	bl	8001b82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	08db      	lsrs	r3, r3, #3
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d00a      	beq.n	8002b16 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6919      	ldr	r1, [r3, #16]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b10:	f7fe ffe2 	bl	8001ad8 <LL_ADC_SetOffset>
 8002b14:	e17b      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe ffff 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x17e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fff4 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	e01e      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x1bc>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe ffe9 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002b60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002b68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1b0>
    return 32U;
 8002b70:	2320      	movs	r3, #32
 8002b72:	e004      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1ba>
  return __builtin_clz(value);
 8002b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1d4>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	e018      	b.n	8002bca <HAL_ADC_ConfigChannel+0x206>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e004      	b.n	8002bca <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002bc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d106      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe ffb8 	bl	8001b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe ff9c 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x244>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe ff91 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	e01e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x282>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe ff86 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x29a>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	e018      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x2cc>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e004      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d106      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe ff55 	bl	8001b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe ff39 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x30a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe ff2e 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	e01e      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x348>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe ff23 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e004      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x360>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	e016      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x38e>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e004      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d106      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fef4 	bl	8001b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2103      	movs	r1, #3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fed8 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x3cc>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2103      	movs	r1, #3
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fecd 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	e017      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x3fc>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2103      	movs	r1, #3
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fec2 	bl	8001b20 <LL_ADC_GetOffsetChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002daa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x414>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	e011      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x438>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002de8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e003      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d106      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2103      	movs	r1, #3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fe9f 	bl	8001b4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fffc 	bl	8001e10 <LL_ADC_IsEnabled>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 8140 	bne.w	80030a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f7fe ff39 	bl	8001ca4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4a8f      	ldr	r2, [pc, #572]	; (8003074 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	f040 8131 	bne.w	80030a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10b      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x4a2>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0e9b      	lsrs	r3, r3, #26
 8002e54:	3301      	adds	r3, #1
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	bf94      	ite	ls
 8002e5e:	2301      	movls	r3, #1
 8002e60:	2300      	movhi	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e019      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x4d6>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e76:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002e7e:	2320      	movs	r3, #32
 8002e80:	e003      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d079      	beq.n	8002f92 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d107      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x4f6>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	069b      	lsls	r3, r3, #26
 8002eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb8:	e015      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x522>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e003      	b.n	8002ede <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	069b      	lsls	r3, r3, #26
 8002ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x542>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	0e9b      	lsrs	r3, r3, #26
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2101      	movs	r1, #1
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	e017      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x572>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e003      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2101      	movs	r1, #1
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	ea42 0103 	orr.w	r1, r2, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x598>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	0e9b      	lsrs	r3, r3, #26
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f003 021f 	and.w	r2, r3, #31
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	051b      	lsls	r3, r3, #20
 8002f5a:	e018      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x5ca>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002f74:	2320      	movs	r3, #32
 8002f76:	e003      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	f003 021f 	and.w	r2, r3, #31
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	e081      	b.n	8003096 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d107      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x5ea>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	069b      	lsls	r3, r3, #26
 8002fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fac:	e015      	b.n	8002fda <HAL_ADC_ConfigChannel+0x616>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e003      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	069b      	lsls	r3, r3, #26
 8002fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x636>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	3301      	adds	r3, #1
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	e017      	b.n	800302a <HAL_ADC_ConfigChannel+0x666>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	61fb      	str	r3, [r7, #28]
  return result;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e003      	b.n	800301e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	ea42 0103 	orr.w	r1, r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x692>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	3301      	adds	r3, #1
 8003042:	f003 021f 	and.w	r2, r3, #31
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	3b1e      	subs	r3, #30
 800304e:	051b      	lsls	r3, r3, #20
 8003050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003054:	e01e      	b.n	8003094 <HAL_ADC_ConfigChannel+0x6d0>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	613b      	str	r3, [r7, #16]
  return result;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d104      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800306e:	2320      	movs	r3, #32
 8003070:	e006      	b.n	8003080 <HAL_ADC_ConfigChannel+0x6bc>
 8003072:	bf00      	nop
 8003074:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	3b1e      	subs	r3, #30
 800308e:	051b      	lsls	r3, r3, #20
 8003090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003094:	430b      	orrs	r3, r1
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	6892      	ldr	r2, [r2, #8]
 800309a:	4619      	mov	r1, r3
 800309c:	f7fe fdd6 	bl	8001c4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_ADC_ConfigChannel+0x7d4>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d06b      	beq.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030ac:	483b      	ldr	r0, [pc, #236]	; (800319c <HAL_ADC_ConfigChannel+0x7d8>)
 80030ae:	f7fe fd05 	bl	8001abc <LL_ADC_GetCommonPathInternalCh>
 80030b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a39      	ldr	r2, [pc, #228]	; (80031a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d126      	bne.n	800310e <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d120      	bne.n	800310e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a34      	ldr	r2, [pc, #208]	; (80031a4 <HAL_ADC_ConfigChannel+0x7e0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d156      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030de:	4619      	mov	r1, r3
 80030e0:	482e      	ldr	r0, [pc, #184]	; (800319c <HAL_ADC_ConfigChannel+0x7d8>)
 80030e2:	f7fe fcd8 	bl	8001a96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_ADC_ConfigChannel+0x7e4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	4a2f      	ldr	r2, [pc, #188]	; (80031ac <HAL_ADC_ConfigChannel+0x7e8>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	099a      	lsrs	r2, r3, #6
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030fe:	e002      	b.n	8003106 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f9      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800310c:	e03a      	b.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a27      	ldr	r2, [pc, #156]	; (80031b0 <HAL_ADC_ConfigChannel+0x7ec>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d113      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x77c>
 8003118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800311c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d12a      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800312e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003136:	4619      	mov	r1, r3
 8003138:	4818      	ldr	r0, [pc, #96]	; (800319c <HAL_ADC_ConfigChannel+0x7d8>)
 800313a:	f7fe fcac 	bl	8001a96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800313e:	e021      	b.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d11c      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800314a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d116      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d111      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003168:	4619      	mov	r1, r3
 800316a:	480c      	ldr	r0, [pc, #48]	; (800319c <HAL_ADC_ConfigChannel+0x7d8>)
 800316c:	f7fe fc93 	bl	8001a96 <LL_ADC_SetCommonPathInternalCh>
 8003170:	e008      	b.n	8003184 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800318c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003190:	4618      	mov	r0, r3
 8003192:	37d8      	adds	r7, #216	; 0xd8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	80080000 	.word	0x80080000
 800319c:	50040300 	.word	0x50040300
 80031a0:	c7520000 	.word	0xc7520000
 80031a4:	50040000 	.word	0x50040000
 80031a8:	20000054 	.word	0x20000054
 80031ac:	053e2d63 	.word	0x053e2d63
 80031b0:	cb840000 	.word	0xcb840000
 80031b4:	80000001 	.word	0x80000001

080031b8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fe6c 	bl	8001eac <LL_ADC_REG_IsConversionOngoing>
 80031d4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fe8d 	bl	8001efa <LL_ADC_INJ_IsConversionOngoing>
 80031e0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8091 	beq.w	8003312 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d02a      	beq.n	8003254 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7e5b      	ldrb	r3, [r3, #25]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d126      	bne.n	8003254 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7e1b      	ldrb	r3, [r3, #24]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d122      	bne.n	8003254 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800320e:	2301      	movs	r3, #1
 8003210:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003212:	e014      	b.n	800323e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4a41      	ldr	r2, [pc, #260]	; (800331c <ADC_ConversionStop+0x164>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d90d      	bls.n	8003238 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e06d      	b.n	8003314 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3301      	adds	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d1e3      	bne.n	8003214 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2240      	movs	r2, #64	; 0x40
 8003252:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d014      	beq.n	8003284 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fe24 	bl	8001eac <LL_ADC_REG_IsConversionOngoing>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fde1 	bl	8001e36 <LL_ADC_IsDisableOngoing>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fe00 	bl	8001e84 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d014      	beq.n	80032b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fe33 	bl	8001efa <LL_ADC_INJ_IsConversionOngoing>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fdc9 	bl	8001e36 <LL_ADC_IsDisableOngoing>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fe0f 	bl	8001ed2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d005      	beq.n	80032c6 <ADC_ConversionStop+0x10e>
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d105      	bne.n	80032cc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80032c0:	230c      	movs	r3, #12
 80032c2:	617b      	str	r3, [r7, #20]
        break;
 80032c4:	e005      	b.n	80032d2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80032c6:	2308      	movs	r3, #8
 80032c8:	617b      	str	r3, [r7, #20]
        break;
 80032ca:	e002      	b.n	80032d2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80032cc:	2304      	movs	r3, #4
 80032ce:	617b      	str	r3, [r7, #20]
        break;
 80032d0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80032d2:	f7fe fb9d 	bl	8001a10 <HAL_GetTick>
 80032d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80032d8:	e014      	b.n	8003304 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80032da:	f7fe fb99 	bl	8001a10 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d90d      	bls.n	8003304 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f043 0210 	orr.w	r2, r3, #16
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f043 0201 	orr.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e3      	bne.n	80032da <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	a33fffff 	.word	0xa33fffff

08003320 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fd6f 	bl	8001e10 <LL_ADC_IsEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d146      	bne.n	80033c6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <ADC_Enable+0xb0>)
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	f043 0210 	orr.w	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e032      	b.n	80033c8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fd2a 	bl	8001dc0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800336c:	f7fe fb50 	bl	8001a10 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003372:	e021      	b.n	80033b8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe fd49 	bl	8001e10 <LL_ADC_IsEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe fd19 	bl	8001dc0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800338e:	f7fe fb3f 	bl	8001a10 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d90d      	bls.n	80033b8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f043 0210 	orr.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d1d6      	bne.n	8003374 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	8000003f 	.word	0x8000003f

080033d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe fd28 	bl	8001e36 <LL_ADC_IsDisableOngoing>
 80033e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fd0f 	bl	8001e10 <LL_ADC_IsEnabled>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d040      	beq.n	800347a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d13d      	bne.n	800347a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030d 	and.w	r3, r3, #13
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10c      	bne.n	8003426 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fce9 	bl	8001de8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2203      	movs	r2, #3
 800341c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800341e:	f7fe faf7 	bl	8001a10 <HAL_GetTick>
 8003422:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003424:	e022      	b.n	800346c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f043 0210 	orr.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e01c      	b.n	800347c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003442:	f7fe fae5 	bl	8001a10 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d90d      	bls.n	800346c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f043 0210 	orr.w	r2, r3, #16
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e007      	b.n	800347c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e3      	bne.n	8003442 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <LL_ADC_IsEnabled>:
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <LL_ADC_IsEnabled+0x18>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <LL_ADC_IsEnabled+0x1a>
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_ADC_StartCalibration>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80034bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_IsCalibrationOnGoing>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_REG_IsConversionOngoing>:
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d101      	bne.n	800351c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_ADCEx_Calibration_Start+0x1c>
 8003542:	2302      	movs	r3, #2
 8003544:	e04d      	b.n	80035e2 <HAL_ADCEx_Calibration_Start+0xb8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff40 	bl	80033d4 <ADC_Disable>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d136      	bne.n	80035cc <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003566:	f023 0302 	bic.w	r3, r3, #2
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff96 	bl	80034aa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800357e:	e014      	b.n	80035aa <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3301      	adds	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800358c:	d30d      	bcc.n	80035aa <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f023 0312 	bic.w	r3, r3, #18
 8003596:	f043 0210 	orr.w	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e01b      	b.n	80035e2 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ff94 	bl	80034dc <LL_ADC_IsCalibrationOnGoing>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e2      	bne.n	8003580 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
 80035ca:	e005      	b.n	80035d8 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f043 0210 	orr.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b09f      	sub	sp, #124	; 0x7c
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800366a:	2302      	movs	r3, #2
 800366c:	e085      	b.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a42      	ldr	r2, [pc, #264]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d102      	bne.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003680:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	e001      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e068      	b.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ff2a 	bl	8003504 <LL_ADC_REG_IsConversionOngoing>
 80036b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ff24 	bl	8003504 <LL_ADC_REG_IsConversionOngoing>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d14a      	bne.n	8003758 <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d147      	bne.n	8003758 <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036c8:	4b30      	ldr	r3, [pc, #192]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80036ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d027      	beq.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036e6:	035b      	lsls	r3, r3, #13
 80036e8:	430b      	orrs	r3, r1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036f0:	4824      	ldr	r0, [pc, #144]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80036f2:	f7ff fec7 	bl	8003484 <LL_ADC_IsEnabled>
 80036f6:	4604      	mov	r4, r0
 80036f8:	4823      	ldr	r0, [pc, #140]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80036fa:	f7ff fec3 	bl	8003484 <LL_ADC_IsEnabled>
 80036fe:	4603      	mov	r3, r0
 8003700:	4323      	orrs	r3, r4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d132      	bne.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800370e:	f023 030f 	bic.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	6811      	ldr	r1, [r2, #0]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	6892      	ldr	r2, [r2, #8]
 800371a:	430a      	orrs	r2, r1
 800371c:	431a      	orrs	r2, r3
 800371e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003720:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003722:	e023      	b.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003730:	4814      	ldr	r0, [pc, #80]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003732:	f7ff fea7 	bl	8003484 <LL_ADC_IsEnabled>
 8003736:	4604      	mov	r4, r0
 8003738:	4813      	ldr	r0, [pc, #76]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800373a:	f7ff fea3 	bl	8003484 <LL_ADC_IsEnabled>
 800373e:	4603      	mov	r3, r0
 8003740:	4323      	orrs	r3, r4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d112      	bne.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800374e:	f023 030f 	bic.w	r3, r3, #15
 8003752:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003754:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003756:	e009      	b.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800376a:	e000      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800376c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003776:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800377a:	4618      	mov	r0, r3
 800377c:	377c      	adds	r7, #124	; 0x7c
 800377e:	46bd      	mov	sp, r7
 8003780:	bd90      	pop	{r4, r7, pc}
 8003782:	bf00      	nop
 8003784:	50040000 	.word	0x50040000
 8003788:	50040100 	.word	0x50040100
 800378c:	50040300 	.word	0x50040300

08003790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037ac:	4013      	ands	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	60d3      	str	r3, [r2, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <__NVIC_GetPriorityGrouping+0x18>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	f003 0307 	and.w	r3, r3, #7
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	db0b      	blt.n	800381e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	4907      	ldr	r1, [pc, #28]	; (800382c <__NVIC_EnableIRQ+0x38>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2001      	movs	r0, #1
 8003816:	fa00 f202 	lsl.w	r2, r0, r2
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100

08003830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db0a      	blt.n	800385a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	490c      	ldr	r1, [pc, #48]	; (800387c <__NVIC_SetPriority+0x4c>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	440b      	add	r3, r1
 8003854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003858:	e00a      	b.n	8003870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4908      	ldr	r1, [pc, #32]	; (8003880 <__NVIC_SetPriority+0x50>)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3b04      	subs	r3, #4
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	440b      	add	r3, r1
 800386e:	761a      	strb	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf28      	it	cs
 80038a2:	2304      	movcs	r3, #4
 80038a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d902      	bls.n	80038b4 <NVIC_EncodePriority+0x30>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3b03      	subs	r3, #3
 80038b2:	e000      	b.n	80038b6 <NVIC_EncodePriority+0x32>
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	43d9      	mvns	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	4313      	orrs	r3, r2
         );
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ff4c 	bl	8003790 <__NVIC_SetPriorityGrouping>
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003912:	f7ff ff61 	bl	80037d8 <__NVIC_GetPriorityGrouping>
 8003916:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	f7ff ffb1 	bl	8003884 <NVIC_EncodePriority>
 8003922:	4602      	mov	r2, r0
 8003924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff80 	bl	8003830 <__NVIC_SetPriority>
}
 8003930:	bf00      	nop
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff54 	bl	80037f4 <__NVIC_EnableIRQ>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d005      	beq.n	8003978 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2204      	movs	r2, #4
 8003970:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	e029      	b.n	80039cc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 020e 	bic.w	r2, r2, #14
 8003986:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f003 021c 	and.w	r2, r3, #28
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2101      	movs	r1, #1
 80039a6:	fa01 f202 	lsl.w	r2, r1, r2
 80039aa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
    }
  }
  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e6:	e14e      	b.n	8003c86 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fa01 f303 	lsl.w	r3, r1, r3
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8140 	beq.w	8003c80 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d00b      	beq.n	8003a20 <HAL_GPIO_Init+0x48>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d007      	beq.n	8003a20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a14:	2b11      	cmp	r3, #17
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b12      	cmp	r3, #18
 8003a1e:	d130      	bne.n	8003a82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a56:	2201      	movs	r2, #1
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 0201 	and.w	r2, r3, #1
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0xea>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b12      	cmp	r3, #18
 8003ac0:	d123      	bne.n	8003b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	08da      	lsrs	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3208      	adds	r2, #8
 8003aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	220f      	movs	r2, #15
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	08da      	lsrs	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3208      	adds	r2, #8
 8003b04:	6939      	ldr	r1, [r7, #16]
 8003b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	2203      	movs	r2, #3
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 0203 	and.w	r2, r3, #3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 809a 	beq.w	8003c80 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4c:	4b55      	ldr	r3, [pc, #340]	; (8003ca4 <HAL_GPIO_Init+0x2cc>)
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	4a54      	ldr	r2, [pc, #336]	; (8003ca4 <HAL_GPIO_Init+0x2cc>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6613      	str	r3, [r2, #96]	; 0x60
 8003b58:	4b52      	ldr	r3, [pc, #328]	; (8003ca4 <HAL_GPIO_Init+0x2cc>)
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b64:	4a50      	ldr	r2, [pc, #320]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	220f      	movs	r2, #15
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b8e:	d013      	beq.n	8003bb8 <HAL_GPIO_Init+0x1e0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a46      	ldr	r2, [pc, #280]	; (8003cac <HAL_GPIO_Init+0x2d4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00d      	beq.n	8003bb4 <HAL_GPIO_Init+0x1dc>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a45      	ldr	r2, [pc, #276]	; (8003cb0 <HAL_GPIO_Init+0x2d8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <HAL_GPIO_Init+0x1d8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a44      	ldr	r2, [pc, #272]	; (8003cb4 <HAL_GPIO_Init+0x2dc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_GPIO_Init+0x1d4>
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e006      	b.n	8003bba <HAL_GPIO_Init+0x1e2>
 8003bac:	2307      	movs	r3, #7
 8003bae:	e004      	b.n	8003bba <HAL_GPIO_Init+0x1e2>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e002      	b.n	8003bba <HAL_GPIO_Init+0x1e2>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_GPIO_Init+0x1e2>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	f002 0203 	and.w	r2, r2, #3
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4093      	lsls	r3, r2
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bca:	4937      	ldr	r1, [pc, #220]	; (8003ca8 <HAL_GPIO_Init+0x2d0>)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bd8:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <HAL_GPIO_Init+0x2e0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	; (8003cb8 <HAL_GPIO_Init+0x2e0>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c02:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <HAL_GPIO_Init+0x2e0>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c26:	4a24      	ldr	r2, [pc, #144]	; (8003cb8 <HAL_GPIO_Init+0x2e0>)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c2c:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_GPIO_Init+0x2e0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_GPIO_Init+0x2e0>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_GPIO_Init+0x2e0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7a:	4a0f      	ldr	r2, [pc, #60]	; (8003cb8 <HAL_GPIO_Init+0x2e0>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f aea9 	bne.w	80039e8 <HAL_GPIO_Init+0x10>
  }
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	48000400 	.word	0x48000400
 8003cb0:	48000800 	.word	0x48000800
 8003cb4:	48000c00 	.word	0x48000c00
 8003cb8:	40010400 	.word	0x40010400

08003cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	807b      	strh	r3, [r7, #2]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ccc:	787b      	ldrb	r3, [r7, #1]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd8:	e002      	b.n	8003ce0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4013      	ands	r3, r2
 8003d04:	041a      	lsls	r2, r3, #16
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	43d9      	mvns	r1, r3
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	400b      	ands	r3, r1
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40007000 	.word	0x40007000

08003d40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40007000 	.word	0x40007000

08003d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6a:	d130      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d78:	d038      	beq.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d82:	4a1e      	ldr	r2, [pc, #120]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2232      	movs	r2, #50	; 0x32
 8003d90:	fb02 f303 	mul.w	r3, r2, r3
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da0:	e002      	b.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db4:	d102      	bne.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f2      	bne.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc8:	d110      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e00f      	b.n	8003dee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	d007      	beq.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de4:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	20000054 	.word	0x20000054
 8003e04:	431bde83 	.word	0x431bde83

08003e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f000 bc56 	b.w	80046c8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1c:	4ba1      	ldr	r3, [pc, #644]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e26:	4b9f      	ldr	r3, [pc, #636]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80e6 	beq.w	800400a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4c>
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	f040 808d 	bne.w	8003f66 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	f040 8089 	bne.w	8003f66 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e54:	4b93      	ldr	r3, [pc, #588]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d006      	beq.n	8003e6e <HAL_RCC_OscConfig+0x66>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f000 bc2d 	b.w	80046c8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e72:	4b8c      	ldr	r3, [pc, #560]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_RCC_OscConfig+0x80>
 8003e7e:	4b89      	ldr	r3, [pc, #548]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e86:	e005      	b.n	8003e94 <HAL_RCC_OscConfig+0x8c>
 8003e88:	4b86      	ldr	r3, [pc, #536]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d224      	bcs.n	8003ee2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fdf1 	bl	8004a84 <RCC_SetFlashLatencyFromMSIRange>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f000 bc0d 	b.w	80046c8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eae:	4b7d      	ldr	r3, [pc, #500]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7c      	ldr	r2, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003eb4:	f043 0308 	orr.w	r3, r3, #8
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b7a      	ldr	r3, [pc, #488]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	4977      	ldr	r1, [pc, #476]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ecc:	4b75      	ldr	r3, [pc, #468]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	4972      	ldr	r1, [pc, #456]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
 8003ee0:	e025      	b.n	8003f2e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ee2:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6f      	ldr	r2, [pc, #444]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003ee8:	f043 0308 	orr.w	r3, r3, #8
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b6d      	ldr	r3, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	496a      	ldr	r1, [pc, #424]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f00:	4b68      	ldr	r3, [pc, #416]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	4965      	ldr	r1, [pc, #404]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fdb0 	bl	8004a84 <RCC_SetFlashLatencyFromMSIRange>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e3cc      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f2e:	f000 fcb3 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 8003f32:	4602      	mov	r2, r0
 8003f34:	4b5b      	ldr	r3, [pc, #364]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	495a      	ldr	r1, [pc, #360]	; (80040a8 <HAL_RCC_OscConfig+0x2a0>)
 8003f40:	5ccb      	ldrb	r3, [r1, r3]
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	4a58      	ldr	r2, [pc, #352]	; (80040ac <HAL_RCC_OscConfig+0x2a4>)
 8003f4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f4e:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <HAL_RCC_OscConfig+0x2a8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f002 fb76 	bl	8006644 <HAL_InitTick>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d052      	beq.n	8004008 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	e3b0      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d032      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f6e:	4b4d      	ldr	r3, [pc, #308]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a4c      	ldr	r2, [pc, #304]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f7a:	f7fd fd49 	bl	8001a10 <HAL_GetTick>
 8003f7e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f82:	f7fd fd45 	bl	8001a10 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e399      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fa0:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003fa6:	f043 0308 	orr.w	r3, r3, #8
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	493a      	ldr	r1, [pc, #232]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	4935      	ldr	r1, [pc, #212]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
 8003fd2:	e01a      	b.n	800400a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a32      	ldr	r2, [pc, #200]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fd16 	bl	8001a10 <HAL_GetTick>
 8003fe4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fe8:	f7fd fd12 	bl	8001a10 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e366      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ffa:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x1e0>
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d073      	beq.n	80040fe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d005      	beq.n	8004028 <HAL_RCC_OscConfig+0x220>
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d10e      	bne.n	8004040 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d10b      	bne.n	8004040 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d063      	beq.n	80040fc <HAL_RCC_OscConfig+0x2f4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d15f      	bne.n	80040fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e343      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d106      	bne.n	8004058 <HAL_RCC_OscConfig+0x250>
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e01d      	b.n	8004094 <HAL_RCC_OscConfig+0x28c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x274>
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8004068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a0c      	ldr	r2, [pc, #48]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0x28c>
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <HAL_RCC_OscConfig+0x29c>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01b      	beq.n	80040d4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd fcb8 	bl	8001a10 <HAL_GetTick>
 80040a0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a2:	e010      	b.n	80040c6 <HAL_RCC_OscConfig+0x2be>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	08008cac 	.word	0x08008cac
 80040ac:	20000054 	.word	0x20000054
 80040b0:	2000005c 	.word	0x2000005c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fd fcac 	bl	8001a10 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e300      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c6:	4ba0      	ldr	r3, [pc, #640]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x2ac>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd fc9c 	bl	8001a10 <HAL_GetTick>
 80040d8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fd fc98 	bl	8001a10 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e2ec      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ee:	4b96      	ldr	r3, [pc, #600]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x2d4>
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d060      	beq.n	80041cc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d005      	beq.n	800411c <HAL_RCC_OscConfig+0x314>
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d119      	bne.n	800414a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d116      	bne.n	800414a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411c:	4b8a      	ldr	r3, [pc, #552]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCC_OscConfig+0x32c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e2c9      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004134:	4b84      	ldr	r3, [pc, #528]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	4981      	ldr	r1, [pc, #516]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004144:	4313      	orrs	r3, r2
 8004146:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004148:	e040      	b.n	80041cc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d023      	beq.n	800419a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004152:	4b7d      	ldr	r3, [pc, #500]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7c      	ldr	r2, [pc, #496]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415e:	f7fd fc57 	bl	8001a10 <HAL_GetTick>
 8004162:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004166:	f7fd fc53 	bl	8001a10 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e2a7      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004178:	4b73      	ldr	r3, [pc, #460]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004184:	4b70      	ldr	r3, [pc, #448]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	496d      	ldr	r1, [pc, #436]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
 8004198:	e018      	b.n	80041cc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419a:	4b6b      	ldr	r3, [pc, #428]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a6a      	ldr	r2, [pc, #424]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80041a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fd fc33 	bl	8001a10 <HAL_GetTick>
 80041aa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ae:	f7fd fc2f 	bl	8001a10 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e283      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c0:	4b61      	ldr	r3, [pc, #388]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d07f      	beq.n	80042d8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d05f      	beq.n	80042a0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80041e0:	4b59      	ldr	r3, [pc, #356]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80041e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d037      	beq.n	8004266 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d006      	beq.n	800420e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e25c      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01b      	beq.n	8004250 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	4a4a      	ldr	r2, [pc, #296]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004228:	f7fd fbf2 	bl	8001a10 <HAL_GetTick>
 800422c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004230:	f7fd fbee 	bl	8001a10 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b11      	cmp	r3, #17
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e242      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ef      	bne.n	8004230 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004250:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004256:	f023 0210 	bic.w	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	493a      	ldr	r1, [pc, #232]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426c:	4a36      	ldr	r2, [pc, #216]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fd fbcb 	bl	8001a10 <HAL_GetTick>
 800427a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427e:	f7fd fbc7 	bl	8001a10 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b11      	cmp	r3, #17
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e21b      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004290:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ef      	beq.n	800427e <HAL_RCC_OscConfig+0x476>
 800429e:	e01b      	b.n	80042d8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b29      	ldr	r3, [pc, #164]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	4a28      	ldr	r2, [pc, #160]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd fbae 	bl	8001a10 <HAL_GetTick>
 80042b4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b8:	f7fd fbaa 	bl	8001a10 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b11      	cmp	r3, #17
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e1fe      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ca:	4b1f      	ldr	r3, [pc, #124]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80042cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ef      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80c1 	beq.w	8004468 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042ec:	4b16      	ldr	r3, [pc, #88]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10e      	bne.n	8004316 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	4a12      	ldr	r2, [pc, #72]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 80042fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004302:	6593      	str	r3, [r2, #88]	; 0x58
 8004304:	4b10      	ldr	r3, [pc, #64]	; (8004348 <HAL_RCC_OscConfig+0x540>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <HAL_RCC_OscConfig+0x544>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d11c      	bne.n	800435c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_RCC_OscConfig+0x544>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a09      	ldr	r2, [pc, #36]	; (800434c <HAL_RCC_OscConfig+0x544>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fd fb6f 	bl	8001a10 <HAL_GetTick>
 8004332:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004334:	e00c      	b.n	8004350 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fd fb6b 	bl	8001a10 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d905      	bls.n	8004350 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e1bf      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
 8004348:	40021000 	.word	0x40021000
 800434c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004350:	4bb1      	ldr	r3, [pc, #708]	; (8004618 <HAL_RCC_OscConfig+0x810>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ec      	beq.n	8004336 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d02c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004368:	4bac      	ldr	r3, [pc, #688]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	49a8      	ldr	r1, [pc, #672]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800438e:	4ba3      	ldr	r3, [pc, #652]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	4aa1      	ldr	r2, [pc, #644]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800439e:	4b9f      	ldr	r3, [pc, #636]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	4a9d      	ldr	r2, [pc, #628]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ae:	e018      	b.n	80043e2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043b0:	4b9a      	ldr	r3, [pc, #616]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	4a99      	ldr	r2, [pc, #612]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c0:	e00f      	b.n	80043e2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043c2:	4b96      	ldr	r3, [pc, #600]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	4a94      	ldr	r2, [pc, #592]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043d2:	4b92      	ldr	r3, [pc, #584]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	4a90      	ldr	r2, [pc, #576]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80043da:	f023 0304 	bic.w	r3, r3, #4
 80043de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fd fb11 	bl	8001a10 <HAL_GetTick>
 80043ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f0:	e00a      	b.n	8004408 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fd fb0d 	bl	8001a10 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004400:	4293      	cmp	r3, r2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e15f      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004408:	4b84      	ldr	r3, [pc, #528]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0ed      	beq.n	80043f2 <HAL_RCC_OscConfig+0x5ea>
 8004416:	e01d      	b.n	8004454 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fd fafa 	bl	8001a10 <HAL_GetTick>
 800441c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fd faf6 	bl	8001a10 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e148      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004436:	4b79      	ldr	r3, [pc, #484]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1ed      	bne.n	8004420 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004444:	4b75      	ldr	r3, [pc, #468]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	4a74      	ldr	r2, [pc, #464]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800444c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445c:	4b6f      	ldr	r3, [pc, #444]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	4a6e      	ldr	r2, [pc, #440]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004466:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03c      	beq.n	80044ee <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01c      	beq.n	80044b6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800447c:	4b67      	ldr	r3, [pc, #412]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800447e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004482:	4a66      	ldr	r2, [pc, #408]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fd fac0 	bl	8001a10 <HAL_GetTick>
 8004490:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004494:	f7fd fabc 	bl	8001a10 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e110      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044a6:	4b5d      	ldr	r3, [pc, #372]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80044a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCC_OscConfig+0x68c>
 80044b4:	e01b      	b.n	80044ee <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044b6:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80044b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044bc:	4a57      	ldr	r2, [pc, #348]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fd faa3 	bl	8001a10 <HAL_GetTick>
 80044ca:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ce:	f7fd fa9f 	bl	8001a10 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0f3      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044e0:	4b4e      	ldr	r3, [pc, #312]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80044e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ef      	bne.n	80044ce <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80e7 	beq.w	80046c6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f040 80b7 	bne.w	8004670 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004502:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0203 	and.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	429a      	cmp	r2, r3
 8004514:	d124      	bne.n	8004560 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	3b01      	subs	r3, #1
 8004522:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d11b      	bne.n	8004560 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d113      	bne.n	8004560 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d109      	bne.n	8004560 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	3b01      	subs	r3, #1
 800455a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d061      	beq.n	8004624 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	2b0c      	cmp	r3, #12
 8004564:	d056      	beq.n	8004614 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004566:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800456c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004570:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004572:	f7fd fa4d 	bl	8001a10 <HAL_GetTick>
 8004576:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457a:	f7fd fa49 	bl	8001a10 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e09d      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004598:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_RCC_OscConfig+0x814>)
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCC_OscConfig+0x818>)
 800459e:	4013      	ands	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045a8:	3a01      	subs	r2, #1
 80045aa:	0112      	lsls	r2, r2, #4
 80045ac:	4311      	orrs	r1, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045b2:	0212      	lsls	r2, r2, #8
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	3a01      	subs	r2, #1
 80045be:	0552      	lsls	r2, r2, #21
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045c6:	0852      	lsrs	r2, r2, #1
 80045c8:	3a01      	subs	r2, #1
 80045ca:	0652      	lsls	r2, r2, #25
 80045cc:	430a      	orrs	r2, r1
 80045ce:	4913      	ldr	r1, [pc, #76]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045d4:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a10      	ldr	r2, [pc, #64]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80045da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <HAL_RCC_OscConfig+0x814>)
 80045e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045ec:	f7fd fa10 	bl	8001a10 <HAL_GetTick>
 80045f0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fd fa0c 	bl	8001a10 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e060      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_OscConfig+0x814>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004612:	e058      	b.n	80046c6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e057      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
 8004618:	40007000 	.word	0x40007000
 800461c:	40021000 	.word	0x40021000
 8004620:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d14a      	bne.n	80046c6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800463c:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004646:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004648:	f7fd f9e2 	bl	8001a10 <HAL_GetTick>
 800464c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fd f9de 	bl	8001a10 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e032      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004662:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x848>
 800466e:	e02a      	b.n	80046c6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d025      	beq.n	80046c2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b16      	ldr	r3, [pc, #88]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 800467c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004680:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004682:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004688:	f023 0303 	bic.w	r3, r3, #3
 800468c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	4a0f      	ldr	r2, [pc, #60]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 8004694:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004698:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd f9b9 	bl	8001a10 <HAL_GetTick>
 800469e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fd f9b5 	bl	8001a10 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e009      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_OscConfig+0x8c8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x89a>
 80046c0:	e001      	b.n	80046c6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3728      	adds	r7, #40	; 0x28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40021000 	.word	0x40021000

080046d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0c8      	b.n	800487a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b66      	ldr	r3, [pc, #408]	; (8004884 <HAL_RCC_ClockConfig+0x1b0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d910      	bls.n	8004718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b63      	ldr	r3, [pc, #396]	; (8004884 <HAL_RCC_ClockConfig+0x1b0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 0207 	bic.w	r2, r3, #7
 80046fe:	4961      	ldr	r1, [pc, #388]	; (8004884 <HAL_RCC_ClockConfig+0x1b0>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b5f      	ldr	r3, [pc, #380]	; (8004884 <HAL_RCC_ClockConfig+0x1b0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0b0      	b.n	800487a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d04c      	beq.n	80047be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d107      	bne.n	800473c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472c:	4b56      	ldr	r3, [pc, #344]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d121      	bne.n	800477c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e09e      	b.n	800487a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d107      	bne.n	8004754 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004744:	4b50      	ldr	r3, [pc, #320]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d115      	bne.n	800477c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e092      	b.n	800487a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800475c:	4b4a      	ldr	r3, [pc, #296]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e086      	b.n	800487a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476c:	4b46      	ldr	r3, [pc, #280]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e07e      	b.n	800487a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800477c:	4b42      	ldr	r3, [pc, #264]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f023 0203 	bic.w	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	493f      	ldr	r1, [pc, #252]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478e:	f7fd f93f 	bl	8001a10 <HAL_GetTick>
 8004792:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004794:	e00a      	b.n	80047ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004796:	f7fd f93b 	bl	8001a10 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e066      	b.n	800487a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ac:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 020c 	and.w	r2, r3, #12
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d1eb      	bne.n	8004796 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ca:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	492c      	ldr	r1, [pc, #176]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_RCC_ClockConfig+0x1b0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d210      	bcs.n	800480c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_RCC_ClockConfig+0x1b0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 0207 	bic.w	r2, r3, #7
 80047f2:	4924      	ldr	r1, [pc, #144]	; (8004884 <HAL_RCC_ClockConfig+0x1b0>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b22      	ldr	r3, [pc, #136]	; (8004884 <HAL_RCC_ClockConfig+0x1b0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e036      	b.n	800487a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4918      	ldr	r1, [pc, #96]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4910      	ldr	r1, [pc, #64]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800484a:	f000 f825 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 800484e:	4602      	mov	r2, r0
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_RCC_ClockConfig+0x1b4>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	490c      	ldr	r1, [pc, #48]	; (800488c <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	5ccb      	ldrb	r3, [r1, r3]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fee8 	bl	8006644 <HAL_InitTick>
 8004874:	4603      	mov	r3, r0
 8004876:	72fb      	strb	r3, [r7, #11]

  return status;
 8004878:	7afb      	ldrb	r3, [r7, #11]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40022000 	.word	0x40022000
 8004888:	40021000 	.word	0x40021000
 800488c:	08008cac 	.word	0x08008cac
 8004890:	20000054 	.word	0x20000054
 8004894:	2000005c 	.word	0x2000005c

08004898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	2300      	movs	r3, #0
 80048a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a6:	4b3e      	ldr	r3, [pc, #248]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b0:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x34>
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	d121      	bne.n	800490a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d11e      	bne.n	800490a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048cc:	4b34      	ldr	r3, [pc, #208]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048d8:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e005      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048e8:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048f4:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d102      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e004      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d101      	bne.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800491c:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_RCC_GetSysClockFreq+0x114>)
 800491e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b0c      	cmp	r3, #12
 8004924:	d134      	bne.n	8004990 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004926:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d003      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0xa6>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d003      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0xac>
 800493c:	e005      	b.n	800494a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800493e:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004940:	617b      	str	r3, [r7, #20]
      break;
 8004942:	e005      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004946:	617b      	str	r3, [r7, #20]
      break;
 8004948:	e002      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	617b      	str	r3, [r7, #20]
      break;
 800494e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004950:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	3301      	adds	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	fb02 f203 	mul.w	r2, r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	0e5b      	lsrs	r3, r3, #25
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	3301      	adds	r3, #1
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	fbb2 f3f3 	udiv	r3, r2, r3
 800498e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004990:	69bb      	ldr	r3, [r7, #24]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3724      	adds	r7, #36	; 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000
 80049a4:	08008cc4 	.word	0x08008cc4
 80049a8:	00f42400 	.word	0x00f42400
 80049ac:	007a1200 	.word	0x007a1200

080049b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000054 	.word	0x20000054

080049c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049cc:	f7ff fff0 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4904      	ldr	r1, [pc, #16]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	08008cbc 	.word	0x08008cbc

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049f8:	f7ff ffda 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0adb      	lsrs	r3, r3, #11
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4904      	ldr	r1, [pc, #16]	; (8004a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08008cbc 	.word	0x08008cbc

08004a20 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a30:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <HAL_RCC_GetClockConfig+0x5c>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0203 	and.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <HAL_RCC_GetClockConfig+0x5c>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <HAL_RCC_GetClockConfig+0x5c>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_GetClockConfig+0x5c>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	08db      	lsrs	r3, r3, #3
 8004a5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a62:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <HAL_RCC_GetClockConfig+0x60>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	601a      	str	r2, [r3, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40022000 	.word	0x40022000

08004a84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a90:	4b2a      	ldr	r3, [pc, #168]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a9c:	f7ff f950 	bl	8003d40 <HAL_PWREx_GetVoltageRange>
 8004aa0:	6178      	str	r0, [r7, #20]
 8004aa2:	e014      	b.n	8004ace <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	4a24      	ldr	r2, [pc, #144]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aae:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab0:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004abc:	f7ff f940 	bl	8003d40 <HAL_PWREx_GetVoltageRange>
 8004ac0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ac2:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004acc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad4:	d10b      	bne.n	8004aee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d919      	bls.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2ba0      	cmp	r3, #160	; 0xa0
 8004ae0:	d902      	bls.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e013      	b.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ae8:	2301      	movs	r3, #1
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	e010      	b.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d902      	bls.n	8004afa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004af4:	2303      	movs	r3, #3
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e00a      	b.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d102      	bne.n	8004b06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b00:	2302      	movs	r3, #2
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	e004      	b.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b70      	cmp	r3, #112	; 0x70
 8004b0a:	d101      	bne.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 0207 	bic.w	r2, r3, #7
 8004b18:	4909      	ldr	r1, [pc, #36]	; (8004b40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d001      	beq.n	8004b32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	40022000 	.word	0x40022000

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b50:	2300      	movs	r3, #0
 8004b52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 809e 	beq.w	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b66:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7c:	4b40      	ldr	r3, [pc, #256]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	4a3f      	ldr	r2, [pc, #252]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6593      	str	r3, [r2, #88]	; 0x58
 8004b88:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b94:	2301      	movs	r3, #1
 8004b96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b98:	4b3a      	ldr	r3, [pc, #232]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a39      	ldr	r2, [pc, #228]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ba4:	f7fc ff34 	bl	8001a10 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004baa:	e009      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bac:	f7fc ff30 	bl	8001a10 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d902      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	74fb      	strb	r3, [r7, #19]
        break;
 8004bbe:	e005      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bc0:	4b30      	ldr	r3, [pc, #192]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ef      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d15a      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bd2:	4b2b      	ldr	r3, [pc, #172]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01e      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d019      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bee:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bfa:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c1a:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d016      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fc fef0 	bl	8001a10 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c32:	e00b      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fc feec 	bl	8001a10 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d902      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	74fb      	strb	r3, [r7, #19]
            break;
 8004c4a:	e006      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ec      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4904      	ldr	r1, [pc, #16]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c76:	e009      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c78:	7cfb      	ldrb	r3, [r7, #19]
 8004c7a:	74bb      	strb	r3, [r7, #18]
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c8c:	7c7b      	ldrb	r3, [r7, #17]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d105      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c92:	4b6e      	ldr	r3, [pc, #440]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	4a6d      	ldr	r2, [pc, #436]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004caa:	4b68      	ldr	r3, [pc, #416]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f023 0203 	bic.w	r2, r3, #3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4964      	ldr	r1, [pc, #400]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ccc:	4b5f      	ldr	r3, [pc, #380]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f023 020c 	bic.w	r2, r3, #12
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	495c      	ldr	r1, [pc, #368]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cee:	4b57      	ldr	r3, [pc, #348]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4953      	ldr	r1, [pc, #332]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d10:	4b4e      	ldr	r3, [pc, #312]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	494b      	ldr	r1, [pc, #300]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d32:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	4942      	ldr	r1, [pc, #264]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d54:	4b3d      	ldr	r3, [pc, #244]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	493a      	ldr	r1, [pc, #232]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d76:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	4931      	ldr	r1, [pc, #196]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d98:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	4929      	ldr	r1, [pc, #164]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	4920      	ldr	r1, [pc, #128]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	4918      	ldr	r1, [pc, #96]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dfc:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e06:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d015      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e14:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	490a      	ldr	r1, [pc, #40]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e32:	d105      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e40:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000

08004e50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	6013      	str	r3, [r2, #0]
}
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000

08004e70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d073      	beq.n	8004f6a <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fc fb6e 	bl	8001578 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004ea2:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	22ca      	movs	r2, #202	; 0xca
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2253      	movs	r2, #83	; 0x53
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fb6b 	bl	8005598 <RTC_EnterInitMode>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d14e      	bne.n	8004f6a <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ede:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6999      	ldr	r1, [r3, #24]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6912      	ldr	r2, [r2, #16]
 8004f06:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6919      	ldr	r1, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	041a      	lsls	r2, r3, #16
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fb71 	bl	8005604 <RTC_ExitInitMode>
 8004f22:	4603      	mov	r3, r0
 8004f24:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11e      	bne.n	8004f6a <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8004f3a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	22ff      	movs	r2, #255	; 0xff
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_RTC_SetTime+0x1a>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e08b      	b.n	80050a6 <HAL_RTC_SetTime+0x132>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	22ca      	movs	r2, #202	; 0xca
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2253      	movs	r2, #83	; 0x53
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 faf2 	bl	8005598 <RTC_EnterInitMode>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d163      	bne.n	8005086 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d126      	bne.n	8005012 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fb4f 	bl	8005680 <RTC_ByteToBcd2>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fb48 	bl	8005680 <RTC_ByteToBcd2>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ff4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	789b      	ldrb	r3, [r3, #2]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fb40 	bl	8005680 <RTC_ByteToBcd2>
 8005000:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005002:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	78db      	ldrb	r3, [r3, #3]
 800500a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e018      	b.n	8005044 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005032:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005038:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800504e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005052:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005062:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6999      	ldr	r1, [r3, #24]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	431a      	orrs	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fac1 	bl	8005604 <RTC_ExitInitMode>
 8005082:	4603      	mov	r3, r0
 8005084:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	22ff      	movs	r2, #255	; 0xff
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd90      	pop	{r4, r7, pc}

080050ae <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80050dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	0a1b      	lsrs	r3, r3, #8
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510a:	b2da      	uxtb	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	0d9b      	lsrs	r3, r3, #22
 8005114:	b2db      	uxtb	r3, r3
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d11a      	bne.n	800515c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fac8 	bl	80056c0 <RTC_Bcd2ToByte>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fabf 	bl	80056c0 <RTC_Bcd2ToByte>
 8005142:	4603      	mov	r3, r0
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	789b      	ldrb	r3, [r3, #2]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fab6 	bl	80056c0 <RTC_Bcd2ToByte>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005166:	b590      	push	{r4, r7, lr}
 8005168:	b087      	sub	sp, #28
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_RTC_SetDate+0x1a>
 800517c:	2302      	movs	r3, #2
 800517e:	e075      	b.n	800526c <HAL_RTC_SetDate+0x106>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10e      	bne.n	80051b4 <HAL_RTC_SetDate+0x4e>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	f023 0310 	bic.w	r3, r3, #16
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	330a      	adds	r3, #10
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d11c      	bne.n	80051f4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	78db      	ldrb	r3, [r3, #3]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa5e 	bl	8005680 <RTC_ByteToBcd2>
 80051c4:	4603      	mov	r3, r0
 80051c6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fa57 	bl	8005680 <RTC_ByteToBcd2>
 80051d2:	4603      	mov	r3, r0
 80051d4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051d6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	789b      	ldrb	r3, [r3, #2]
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fa4f 	bl	8005680 <RTC_ByteToBcd2>
 80051e2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051e4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e00e      	b.n	8005212 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	78db      	ldrb	r3, [r3, #3]
 80051f8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005200:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005206:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	22ca      	movs	r2, #202	; 0xca
 8005218:	625a      	str	r2, [r3, #36]	; 0x24
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2253      	movs	r2, #83	; 0x53
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f9b8 	bl	8005598 <RTC_EnterInitMode>
 8005228:	4603      	mov	r3, r0
 800522a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800523c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005240:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f9de 	bl	8005604 <RTC_ExitInitMode>
 8005248:	4603      	mov	r3, r0
 800524a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	22ff      	movs	r2, #255	; 0xff
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 800526a:	7cfb      	ldrb	r3, [r7, #19]
}
 800526c:	4618      	mov	r0, r3
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd90      	pop	{r4, r7, pc}

08005274 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800528a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800528e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	0b5b      	lsrs	r3, r3, #13
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11a      	bne.n	8005304 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	78db      	ldrb	r3, [r3, #3]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f9f4 	bl	80056c0 <RTC_Bcd2ToByte>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f9eb 	bl	80056c0 <RTC_Bcd2ToByte>
 80052ea:	4603      	mov	r3, r0
 80052ec:	461a      	mov	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	789b      	ldrb	r3, [r3, #2]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f9e2 	bl	80056c0 <RTC_Bcd2ToByte>
 80052fc:	4603      	mov	r3, r0
 80052fe:	461a      	mov	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_RTC_SetAlarm_IT+0x1a>
 8005326:	2302      	movs	r3, #2
 8005328:	e0db      	b.n	80054e2 <HAL_RTC_SetAlarm_IT+0x1d2>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d137      	bne.n	80053b0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f991 	bl	8005680 <RTC_ByteToBcd2>
 800535e:	4603      	mov	r3, r0
 8005360:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f98a 	bl	8005680 <RTC_ByteToBcd2>
 800536c:	4603      	mov	r3, r0
 800536e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005370:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	789b      	ldrb	r3, [r3, #2]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f982 	bl	8005680 <RTC_ByteToBcd2>
 800537c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800537e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	78db      	ldrb	r3, [r3, #3]
 8005386:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005388:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f974 	bl	8005680 <RTC_ByteToBcd2>
 8005398:	4603      	mov	r3, r0
 800539a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800539c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e023      	b.n	80053f8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053d0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	78db      	ldrb	r3, [r3, #3]
 80053dc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	22ca      	movs	r2, #202	; 0xca
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2253      	movs	r2, #83	; 0x53
 8005412:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541c:	d124      	bne.n	8005468 <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800542c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005454:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699a      	ldr	r2, [r3, #24]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005464:	619a      	str	r2, [r3, #24]
 8005466:	e023      	b.n	80054b0 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005476:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2202      	movs	r2, #2
 800547e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ae:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80054b0:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <HAL_RTC_SetAlarm_IT+0x1dc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a0d      	ldr	r2, [pc, #52]	; (80054ec <HAL_RTC_SetAlarm_IT+0x1dc>)
 80054b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ba:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RTC_SetAlarm_IT+0x1dc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <HAL_RTC_SetAlarm_IT+0x1dc>)
 80054c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	22ff      	movs	r2, #255	; 0xff
 80054ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd90      	pop	{r4, r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40010400 	.word	0x40010400

080054f0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80054f8:	4b13      	ldr	r3, [pc, #76]	; (8005548 <HAL_RTC_AlarmIRQHandler+0x58>)
 80054fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80054fe:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d006      	beq.n	8005520 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2201      	movs	r2, #1
 8005518:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fb fe02 	bl	8001124 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2202      	movs	r2, #2
 8005530:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9a4 	bl	8005880 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40010400 	.word	0x40010400

0800554c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005562:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8005564:	f7fc fa54 	bl	8001a10 <HAL_GetTick>
 8005568:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800556a:	e009      	b.n	8005580 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800556c:	f7fc fa50 	bl	8001a10 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800557a:	d901      	bls.n	8005580 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e007      	b.n	8005590 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ee      	beq.n	800556c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d123      	bne.n	80055fa <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80055c2:	f7fc fa25 	bl	8001a10 <HAL_GetTick>
 80055c6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80055c8:	e00d      	b.n	80055e6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80055ca:	f7fc fa21 	bl	8001a10 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055d8:	d905      	bls.n	80055e6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2203      	movs	r2, #3
 80055e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d102      	bne.n	80055fa <RTC_EnterInitMode+0x62>
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d1e7      	bne.n	80055ca <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <RTC_ExitInitMode+0x78>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4a19      	ldr	r2, [pc, #100]	; (800567c <RTC_ExitInitMode+0x78>)
 8005616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <RTC_ExitInitMode+0x78>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10c      	bne.n	8005642 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff ff8f 	bl	800554c <HAL_RTC_WaitForSynchro>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01e      	beq.n	8005672 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2203      	movs	r2, #3
 8005638:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	73fb      	strb	r3, [r7, #15]
 8005640:	e017      	b.n	8005672 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005642:	4b0e      	ldr	r3, [pc, #56]	; (800567c <RTC_ExitInitMode+0x78>)
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	4a0d      	ldr	r2, [pc, #52]	; (800567c <RTC_ExitInitMode+0x78>)
 8005648:	f023 0320 	bic.w	r3, r3, #32
 800564c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ff7c 	bl	800554c <HAL_RTC_WaitForSynchro>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2203      	movs	r2, #3
 800565e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <RTC_ExitInitMode+0x78>)
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	4a04      	ldr	r2, [pc, #16]	; (800567c <RTC_ExitInitMode+0x78>)
 800566c:	f043 0320 	orr.w	r3, r3, #32
 8005670:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40002800 	.word	0x40002800

08005680 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005692:	e005      	b.n	80056a0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800569a:	7afb      	ldrb	r3, [r7, #11]
 800569c:	3b0a      	subs	r3, #10
 800569e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80056a0:	7afb      	ldrb	r3, [r7, #11]
 80056a2:	2b09      	cmp	r3, #9
 80056a4:	d8f6      	bhi.n	8005694 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	7afb      	ldrb	r3, [r7, #11]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	b2db      	uxtb	r3, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	0092      	lsls	r2, r2, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	4413      	add	r3, r2
 80056e6:	b2db      	uxtb	r3, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 800570c:	2302      	movs	r3, #2
 800570e:	e087      	b.n	8005820 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	22ca      	movs	r2, #202	; 0xca
 8005726:	625a      	str	r2, [r3, #36]	; 0x24
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2253      	movs	r2, #83	; 0x53
 800572e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573e:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2204      	movs	r2, #4
 8005746:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d120      	bne.n	8005798 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
#endif
  {
    tickstart = HAL_GetTick();
 8005756:	f7fc f95b 	bl	8001a10 <HAL_GetTick>
 800575a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800575c:	e015      	b.n	800578a <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800575e:	f7fc f957 	bl	8001a10 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800576c:	d90d      	bls.n	800578a <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	22ff      	movs	r2, #255	; 0xff
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2203      	movs	r2, #3
 800577a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e04a      	b.n	8005820 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0e2      	beq.n	800575e <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	0419      	lsls	r1, r3, #16
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	615a      	str	r2, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f023 0107 	bic.w	r1, r3, #7
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	619a      	str	r2, [r3, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d006      	beq.n	80057ce <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 80057c0:	4b19      	ldr	r3, [pc, #100]	; (8005828 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80057c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ca:	6053      	str	r3, [r2, #4]
 80057cc:	e005      	b.n	80057da <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80057ce:	4b16      	ldr	r3, [pc, #88]	; (8005828 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a15      	ldr	r2, [pc, #84]	; (8005828 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80057d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d8:	6013      	str	r3, [r2, #0]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	4a12      	ldr	r2, [pc, #72]	; (8005828 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80057e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e4:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057f4:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699a      	ldr	r2, [r3, #24]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005804:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	22ff      	movs	r2, #255	; 0xff
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40010400 	.word	0x40010400

0800582c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005834:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 8005836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800583a:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d006      	beq.n	8005858 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2204      	movs	r2, #4
 8005850:	65da      	str	r2, [r3, #92]	; 0x5c
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f80a 	bl	800586c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40010400 	.word	0x40010400

0800586c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e049      	b.n	800593a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f841 	bl	8005942 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f000 fc9c 	bl	8006210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d001      	beq.n	8005970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e03b      	b.n	80059e8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a19      	ldr	r2, [pc, #100]	; (80059f4 <HAL_TIM_Base_Start_IT+0x9c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_TIM_Base_Start_IT+0x4e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d004      	beq.n	80059a6 <HAL_TIM_Base_Start_IT+0x4e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d115      	bne.n	80059d2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	4b13      	ldr	r3, [pc, #76]	; (80059fc <HAL_TIM_Base_Start_IT+0xa4>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b06      	cmp	r3, #6
 80059b6:	d015      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x8c>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059be:	d011      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d0:	e008      	b.n	80059e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e000      	b.n	80059e6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40014000 	.word	0x40014000
 80059fc:	00010007 	.word	0x00010007

08005a00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e049      	b.n	8005aa6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fb fde6 	bl	80015f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 fbe6 	bl	8006210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_IC_Start_IT+0x1a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	e023      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x62>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_IC_Start_IT+0x2a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	e01b      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x62>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_IC_Start_IT+0x3a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e013      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x62>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_IC_Start_IT+0x4a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	e00b      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x62>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_IC_Start_IT+0x5a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e003      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x62>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <HAL_TIM_IC_Start_IT+0x74>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e013      	b.n	8005b4c <HAL_TIM_IC_Start_IT+0x9c>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d104      	bne.n	8005b34 <HAL_TIM_IC_Start_IT+0x84>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	e00b      	b.n	8005b4c <HAL_TIM_IC_Start_IT+0x9c>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d104      	bne.n	8005b44 <HAL_TIM_IC_Start_IT+0x94>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	e003      	b.n	8005b4c <HAL_TIM_IC_Start_IT+0x9c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d102      	bne.n	8005b5a <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d001      	beq.n	8005b5e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e0c4      	b.n	8005ce8 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_IC_Start_IT+0xbe>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b6c:	e023      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x106>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d104      	bne.n	8005b7e <HAL_TIM_IC_Start_IT+0xce>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b7c:	e01b      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x106>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d104      	bne.n	8005b8e <HAL_TIM_IC_Start_IT+0xde>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b8c:	e013      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x106>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_IC_Start_IT+0xee>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9c:	e00b      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x106>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_IC_Start_IT+0xfe>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bac:	e003      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x106>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <HAL_TIM_IC_Start_IT+0x116>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc4:	e013      	b.n	8005bee <HAL_TIM_IC_Start_IT+0x13e>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d104      	bne.n	8005bd6 <HAL_TIM_IC_Start_IT+0x126>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd4:	e00b      	b.n	8005bee <HAL_TIM_IC_Start_IT+0x13e>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d104      	bne.n	8005be6 <HAL_TIM_IC_Start_IT+0x136>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005be4:	e003      	b.n	8005bee <HAL_TIM_IC_Start_IT+0x13e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	d841      	bhi.n	8005c78 <HAL_TIM_IC_Start_IT+0x1c8>
 8005bf4:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <HAL_TIM_IC_Start_IT+0x14c>)
 8005bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005c31 	.word	0x08005c31
 8005c00:	08005c79 	.word	0x08005c79
 8005c04:	08005c79 	.word	0x08005c79
 8005c08:	08005c79 	.word	0x08005c79
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c79 	.word	0x08005c79
 8005c14:	08005c79 	.word	0x08005c79
 8005c18:	08005c79 	.word	0x08005c79
 8005c1c:	08005c55 	.word	0x08005c55
 8005c20:	08005c79 	.word	0x08005c79
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005c79 	.word	0x08005c79
 8005c2c:	08005c67 	.word	0x08005c67
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0202 	orr.w	r2, r2, #2
 8005c3e:	60da      	str	r2, [r3, #12]
      break;
 8005c40:	e01b      	b.n	8005c7a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f042 0204 	orr.w	r2, r2, #4
 8005c50:	60da      	str	r2, [r3, #12]
      break;
 8005c52:	e012      	b.n	8005c7a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0208 	orr.w	r2, r2, #8
 8005c62:	60da      	str	r2, [r3, #12]
      break;
 8005c64:	e009      	b.n	8005c7a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0210 	orr.w	r2, r2, #16
 8005c74:	60da      	str	r2, [r3, #12]
      break;
 8005c76:	e000      	b.n	8005c7a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8005c78:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fc34 	bl	80064f0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <HAL_TIM_IC_Start_IT+0x240>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <HAL_TIM_IC_Start_IT+0x244>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d115      	bne.n	8005cd2 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <HAL_TIM_IC_Start_IT+0x248>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b06      	cmp	r3, #6
 8005cb6:	d015      	beq.n	8005ce4 <HAL_TIM_IC_Start_IT+0x234>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cbe:	d011      	beq.n	8005ce4 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	e008      	b.n	8005ce4 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e000      	b.n	8005ce6 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	00010007 	.word	0x00010007

08005cfc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d841      	bhi.n	8005d90 <HAL_TIM_IC_Stop_IT+0x94>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_TIM_IC_Stop_IT+0x18>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d91 	.word	0x08005d91
 8005d20:	08005d91 	.word	0x08005d91
 8005d24:	08005d5b 	.word	0x08005d5b
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d7f 	.word	0x08005d7f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0202 	bic.w	r2, r2, #2
 8005d56:	60da      	str	r2, [r3, #12]
      break;
 8005d58:	e01b      	b.n	8005d92 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0204 	bic.w	r2, r2, #4
 8005d68:	60da      	str	r2, [r3, #12]
      break;
 8005d6a:	e012      	b.n	8005d92 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0208 	bic.w	r2, r2, #8
 8005d7a:	60da      	str	r2, [r3, #12]
      break;
 8005d7c:	e009      	b.n	8005d92 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0210 	bic.w	r2, r2, #16
 8005d8c:	60da      	str	r2, [r3, #12]
      break;
 8005d8e:	e000      	b.n	8005d92 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8005d90:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2200      	movs	r2, #0
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fba8 	bl	80064f0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10f      	bne.n	8005dd0 <HAL_TIM_IC_Stop_IT+0xd4>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6a1a      	ldr	r2, [r3, #32]
 8005db6:	f240 4344 	movw	r3, #1092	; 0x444
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d107      	bne.n	8005dd0 <HAL_TIM_IC_Stop_IT+0xd4>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0201 	bic.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <HAL_TIM_IC_Stop_IT+0xe4>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dde:	e023      	b.n	8005e28 <HAL_TIM_IC_Stop_IT+0x12c>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d104      	bne.n	8005df0 <HAL_TIM_IC_Stop_IT+0xf4>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dee:	e01b      	b.n	8005e28 <HAL_TIM_IC_Stop_IT+0x12c>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d104      	bne.n	8005e00 <HAL_TIM_IC_Stop_IT+0x104>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfe:	e013      	b.n	8005e28 <HAL_TIM_IC_Stop_IT+0x12c>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b0c      	cmp	r3, #12
 8005e04:	d104      	bne.n	8005e10 <HAL_TIM_IC_Stop_IT+0x114>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e0e:	e00b      	b.n	8005e28 <HAL_TIM_IC_Stop_IT+0x12c>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d104      	bne.n	8005e20 <HAL_TIM_IC_Stop_IT+0x124>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e1e:	e003      	b.n	8005e28 <HAL_TIM_IC_Stop_IT+0x12c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <HAL_TIM_IC_Stop_IT+0x13c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e36:	e013      	b.n	8005e60 <HAL_TIM_IC_Stop_IT+0x164>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d104      	bne.n	8005e48 <HAL_TIM_IC_Stop_IT+0x14c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e46:	e00b      	b.n	8005e60 <HAL_TIM_IC_Stop_IT+0x164>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d104      	bne.n	8005e58 <HAL_TIM_IC_Stop_IT+0x15c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e56:	e003      	b.n	8005e60 <HAL_TIM_IC_Stop_IT+0x164>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop

08005e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d122      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0202 	mvn.w	r2, #2
 8005e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fa fc12 	bl	80006d8 <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f98b 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f992 	bl	80061e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d122      	bne.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d11b      	bne.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0204 	mvn.w	r2, #4
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fa fbe8 	bl	80006d8 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f961 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f968 	bl	80061e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d122      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d11b      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0208 	mvn.w	r2, #8
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2204      	movs	r2, #4
 8005f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fa fbbe 	bl	80006d8 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f937 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f93e 	bl	80061e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d122      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0210 	mvn.w	r2, #16
 8005f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2208      	movs	r2, #8
 8005f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fa fb94 	bl	80006d8 <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f90d 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f914 	bl	80061e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d10e      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d107      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0201 	mvn.w	r2, #1
 8005fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fb8e 	bl	800670c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffa:	2b80      	cmp	r3, #128	; 0x80
 8005ffc:	d10e      	bne.n	800601c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b80      	cmp	r3, #128	; 0x80
 800600a:	d107      	bne.n	800601c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fb00 	bl	800661c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602a:	d10e      	bne.n	800604a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006036:	2b80      	cmp	r3, #128	; 0x80
 8006038:	d107      	bne.n	800604a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 faf3 	bl	8006630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d10e      	bne.n	8006076 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d107      	bne.n	8006076 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800606e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8c2 	bl	80061fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b20      	cmp	r3, #32
 8006082:	d10e      	bne.n	80060a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b20      	cmp	r3, #32
 8006090:	d107      	bne.n	80060a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0220 	mvn.w	r2, #32
 800609a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fab3 	bl	8006608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e082      	b.n	80061ca <HAL_TIM_IC_ConfigChannel+0x120>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d11b      	bne.n	800610a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	6819      	ldr	r1, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f000 f8f9 	bl	80062d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 020c 	bic.w	r2, r2, #12
 80060f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6999      	ldr	r1, [r3, #24]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	619a      	str	r2, [r3, #24]
 8006108:	e05a      	b.n	80061c0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b04      	cmp	r3, #4
 800610e:	d11c      	bne.n	800614a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6819      	ldr	r1, [r3, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f000 f930 	bl	8006384 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006132:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6999      	ldr	r1, [r3, #24]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	021a      	lsls	r2, r3, #8
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	619a      	str	r2, [r3, #24]
 8006148:	e03a      	b.n	80061c0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b08      	cmp	r3, #8
 800614e:	d11b      	bne.n	8006188 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6819      	ldr	r1, [r3, #0]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f000 f94d 	bl	80063fe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69da      	ldr	r2, [r3, #28]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 020c 	bic.w	r2, r2, #12
 8006172:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69d9      	ldr	r1, [r3, #28]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	61da      	str	r2, [r3, #28]
 8006186:	e01b      	b.n	80061c0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6819      	ldr	r1, [r3, #0]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f000 f96d 	bl	8006476 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69da      	ldr	r2, [r3, #28]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69d9      	ldr	r1, [r3, #28]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
	...

08006210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a2a      	ldr	r2, [pc, #168]	; (80062cc <TIM_Base_SetConfig+0xbc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_Base_SetConfig+0x20>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622e:	d108      	bne.n	8006242 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a21      	ldr	r2, [pc, #132]	; (80062cc <TIM_Base_SetConfig+0xbc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00b      	beq.n	8006262 <TIM_Base_SetConfig+0x52>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006250:	d007      	beq.n	8006262 <TIM_Base_SetConfig+0x52>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <TIM_Base_SetConfig+0xc0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_Base_SetConfig+0x52>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <TIM_Base_SetConfig+0xc4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a0c      	ldr	r2, [pc, #48]	; (80062cc <TIM_Base_SetConfig+0xbc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_Base_SetConfig+0xa0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a0b      	ldr	r2, [pc, #44]	; (80062d0 <TIM_Base_SetConfig+0xc0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_Base_SetConfig+0xa0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <TIM_Base_SetConfig+0xc4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d103      	bne.n	80062b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	615a      	str	r2, [r3, #20]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400

080062d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4a1e      	ldr	r2, [pc, #120]	; (800637c <TIM_TI1_SetConfig+0xa4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d007      	beq.n	8006316 <TIM_TI1_SetConfig+0x3e>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630c:	d003      	beq.n	8006316 <TIM_TI1_SetConfig+0x3e>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <TIM_TI1_SetConfig+0xa8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <TIM_TI1_SetConfig+0x42>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <TIM_TI1_SetConfig+0x44>
 800631a:	2300      	movs	r3, #0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e003      	b.n	800633a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	b2db      	uxtb	r3, r3
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f023 030a 	bic.w	r3, r3, #10
 8006354:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f003 030a 	and.w	r3, r3, #10
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014000 	.word	0x40014000

08006384 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f023 0210 	bic.w	r2, r3, #16
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	031b      	lsls	r3, r3, #12
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063fe:	b480      	push	{r7}
 8006400:	b087      	sub	sp, #28
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
 800640a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f023 0303 	bic.w	r3, r3, #3
 800642a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800643a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	b2db      	uxtb	r3, r3
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800644e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006476:	b480      	push	{r7}
 8006478:	b087      	sub	sp, #28
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	021b      	lsls	r3, r3, #8
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	031b      	lsls	r3, r3, #12
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	031b      	lsls	r3, r3, #12
 80064ce:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	621a      	str	r2, [r3, #32]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2201      	movs	r2, #1
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1a      	ldr	r2, [r3, #32]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1a      	ldr	r2, [r3, #32]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	fa01 f303 	lsl.w	r3, r1, r3
 8006528:	431a      	orrs	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006550:	2302      	movs	r3, #2
 8006552:	e04f      	b.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a21      	ldr	r2, [pc, #132]	; (8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006584:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a14      	ldr	r2, [pc, #80]	; (8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d004      	beq.n	80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a10      	ldr	r2, [pc, #64]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d10c      	bne.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40014000 	.word	0x40014000

08006608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	; 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006654:	2200      	movs	r2, #0
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	2036      	movs	r0, #54	; 0x36
 800665a:	f7fd f951 	bl	8003900 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800665e:	2036      	movs	r0, #54	; 0x36
 8006660:	f7fd f96a 	bl	8003938 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006664:	4b25      	ldr	r3, [pc, #148]	; (80066fc <HAL_InitTick+0xb8>)
 8006666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006668:	4a24      	ldr	r2, [pc, #144]	; (80066fc <HAL_InitTick+0xb8>)
 800666a:	f043 0310 	orr.w	r3, r3, #16
 800666e:	6593      	str	r3, [r2, #88]	; 0x58
 8006670:	4b22      	ldr	r3, [pc, #136]	; (80066fc <HAL_InitTick+0xb8>)
 8006672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800667c:	f107 020c 	add.w	r2, r7, #12
 8006680:	f107 0310 	add.w	r3, r7, #16
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe f9ca 	bl	8004a20 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006696:	f7fe f997 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 800669a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800669c:	e004      	b.n	80066a8 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800669e:	f7fe f993 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 80066a2:	4603      	mov	r3, r0
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	4a15      	ldr	r2, [pc, #84]	; (8006700 <HAL_InitTick+0xbc>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	0c9b      	lsrs	r3, r3, #18
 80066b2:	3b01      	subs	r3, #1
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80066b6:	4b13      	ldr	r3, [pc, #76]	; (8006704 <HAL_InitTick+0xc0>)
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <HAL_InitTick+0xc4>)
 80066ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80066bc:	4b11      	ldr	r3, [pc, #68]	; (8006704 <HAL_InitTick+0xc0>)
 80066be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80066c2:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80066c4:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <HAL_InitTick+0xc0>)
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 80066ca:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <HAL_InitTick+0xc0>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <HAL_InitTick+0xc0>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <HAL_InitTick+0xc0>)
 80066d8:	2200      	movs	r2, #0
 80066da:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80066dc:	4809      	ldr	r0, [pc, #36]	; (8006704 <HAL_InitTick+0xc0>)
 80066de:	f7ff f8d9 	bl	8005894 <HAL_TIM_Base_Init>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80066e8:	4806      	ldr	r0, [pc, #24]	; (8006704 <HAL_InitTick+0xc0>)
 80066ea:	f7ff f935 	bl	8005958 <HAL_TIM_Base_Start_IT>
 80066ee:	4603      	mov	r3, r0
 80066f0:	e000      	b.n	80066f4 <HAL_InitTick+0xb0>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3730      	adds	r7, #48	; 0x30
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40021000 	.word	0x40021000
 8006700:	431bde83 	.word	0x431bde83
 8006704:	200002c4 	.word	0x200002c4
 8006708:	40001000 	.word	0x40001000

0800670c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8006714:	f7fb f968 	bl	80019e8 <HAL_IncTick>
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <TIM6_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8006724:	4802      	ldr	r0, [pc, #8]	; (8006730 <TIM6_IRQHandler+0x10>)
 8006726:	f7ff fba1 	bl	8005e6c <HAL_TIM_IRQHandler>
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200002c4 	.word	0x200002c4

08006734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e040      	b.n	80067c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fa ff96 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2224      	movs	r2, #36	; 0x24
 8006760:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0201 	bic.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fae6 	bl	8006d44 <UART_SetConfig>
 8006778:	4603      	mov	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e022      	b.n	80067c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fd0e 	bl	80071ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800679e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fd95 	bl	80072f0 <UART_CheckIdleState>
 80067c6:	4603      	mov	r3, r0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	; 0x28
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	f040 8081 	bne.w	80068ec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_UART_Transmit+0x26>
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e079      	b.n	80068ee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_UART_Transmit+0x38>
 8006804:	2302      	movs	r3, #2
 8006806:	e072      	b.n	80068ee <HAL_UART_Transmit+0x11e>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2221      	movs	r2, #33	; 0x21
 800681a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800681c:	f7fb f8f8 	bl	8001a10 <HAL_GetTick>
 8006820:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	88fa      	ldrh	r2, [r7, #6]
 8006826:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	88fa      	ldrh	r2, [r7, #6]
 800682e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683a:	d108      	bne.n	800684e <HAL_UART_Transmit+0x7e>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006844:	2300      	movs	r3, #0
 8006846:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	e003      	b.n	8006856 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800685e:	e02d      	b.n	80068bc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	2180      	movs	r1, #128	; 0x80
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fd85 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e039      	b.n	80068ee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	881a      	ldrh	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800688c:	b292      	uxth	r2, r2
 800688e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	3302      	adds	r3, #2
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e008      	b.n	80068aa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	b292      	uxth	r2, r2
 80068a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	3301      	adds	r3, #1
 80068a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1cb      	bne.n	8006860 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2200      	movs	r2, #0
 80068d0:	2140      	movs	r1, #64	; 0x40
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fd51 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e005      	b.n	80068ee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e000      	b.n	80068ee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80068ec:	2302      	movs	r3, #2
  }
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3720      	adds	r7, #32
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b08a      	sub	sp, #40	; 0x28
 80068fa:	af02      	add	r7, sp, #8
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690a:	2b20      	cmp	r3, #32
 800690c:	f040 80bb 	bne.w	8006a86 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_UART_Receive+0x26>
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0b3      	b.n	8006a88 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_UART_Receive+0x38>
 800692a:	2302      	movs	r3, #2
 800692c:	e0ac      	b.n	8006a88 <HAL_UART_Receive+0x192>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2222      	movs	r2, #34	; 0x22
 8006940:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006942:	f7fb f865 	bl	8001a10 <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	88fa      	ldrh	r2, [r7, #6]
 8006954:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006960:	d10e      	bne.n	8006980 <HAL_UART_Receive+0x8a>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <HAL_UART_Receive+0x80>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006974:	e02d      	b.n	80069d2 <HAL_UART_Receive+0xdc>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	22ff      	movs	r2, #255	; 0xff
 800697a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800697e:	e028      	b.n	80069d2 <HAL_UART_Receive+0xdc>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10d      	bne.n	80069a4 <HAL_UART_Receive+0xae>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <HAL_UART_Receive+0xa4>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	22ff      	movs	r2, #255	; 0xff
 8006994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006998:	e01b      	b.n	80069d2 <HAL_UART_Receive+0xdc>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	227f      	movs	r2, #127	; 0x7f
 800699e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069a2:	e016      	b.n	80069d2 <HAL_UART_Receive+0xdc>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ac:	d10d      	bne.n	80069ca <HAL_UART_Receive+0xd4>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <HAL_UART_Receive+0xca>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	227f      	movs	r2, #127	; 0x7f
 80069ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069be:	e008      	b.n	80069d2 <HAL_UART_Receive+0xdc>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	223f      	movs	r2, #63	; 0x3f
 80069c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069c8:	e003      	b.n	80069d2 <HAL_UART_Receive+0xdc>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e2:	d108      	bne.n	80069f6 <HAL_UART_Receive+0x100>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e003      	b.n	80069fe <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a06:	e033      	b.n	8006a70 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2120      	movs	r1, #32
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fcb1 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e032      	b.n	8006a88 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10c      	bne.n	8006a42 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	8a7b      	ldrh	r3, [r7, #18]
 8006a32:	4013      	ands	r3, r2
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	61bb      	str	r3, [r7, #24]
 8006a40:	e00d      	b.n	8006a5e <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	8a7b      	ldrh	r3, [r7, #18]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	4013      	ands	r3, r2
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1c5      	bne.n	8006a08 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d113      	bne.n	8006ae8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00e      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d009      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8113 	beq.w	8006d04 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	4798      	blx	r3
      }
      return;
 8006ae6:	e10d      	b.n	8006d04 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 80d6 	beq.w	8006c9c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	4b85      	ldr	r3, [pc, #532]	; (8006d14 <HAL_UART_IRQHandler+0x284>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80cb 	beq.w	8006c9c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <HAL_UART_IRQHandler+0x9e>
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b26:	f043 0201 	orr.w	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <HAL_UART_IRQHandler+0xc6>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2202      	movs	r2, #2
 8006b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4e:	f043 0204 	orr.w	r2, r3, #4
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <HAL_UART_IRQHandler+0xee>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b76:	f043 0202 	orr.w	r2, r3, #2
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d013      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ba8:	f043 0208 	orr.w	r2, r3, #8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00f      	beq.n	8006bda <HAL_UART_IRQHandler+0x14a>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd2:	f043 0220 	orr.w	r2, r3, #32
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8092 	beq.w	8006d08 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c0c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b40      	cmp	r3, #64	; 0x40
 8006c1a:	d004      	beq.n	8006c26 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d031      	beq.n	8006c8a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fc22 	bl	8007470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d123      	bne.n	8006c82 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c48:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c56:	4a30      	ldr	r2, [pc, #192]	; (8006d18 <HAL_UART_IRQHandler+0x288>)
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fc fe78 	bl	8003954 <HAL_DMA_Abort_IT>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c78:	e00e      	b.n	8006c98 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f858 	bl	8006d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c80:	e00a      	b.n	8006c98 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f854 	bl	8006d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	e006      	b.n	8006c98 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f850 	bl	8006d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006c96:	e037      	b.n	8006d08 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	bf00      	nop
    return;
 8006c9a:	e035      	b.n	8006d08 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00d      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x232>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fc27 	bl	800750e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cc0:	e025      	b.n	8006d0e <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00d      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d016      	beq.n	8006d0c <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
    }
    return;
 8006ce6:	e011      	b.n	8006d0c <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <HAL_UART_IRQHandler+0x27e>
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fbed 	bl	80074dc <UART_EndTransmit_IT>
    return;
 8006d02:	e004      	b.n	8006d0e <HAL_UART_IRQHandler+0x27e>
      return;
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <HAL_UART_IRQHandler+0x27e>
    return;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <HAL_UART_IRQHandler+0x27e>
    return;
 8006d0c:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	04000120 	.word	0x04000120
 8006d18:	080074b1 	.word	0x080074b1

08006d1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d44:	b5b0      	push	{r4, r5, r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4baa      	ldr	r3, [pc, #680]	; (8007018 <UART_SetConfig+0x2d4>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	69f9      	ldr	r1, [r7, #28]
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a9f      	ldr	r2, [pc, #636]	; (800701c <UART_SetConfig+0x2d8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a96      	ldr	r2, [pc, #600]	; (8007020 <UART_SetConfig+0x2dc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d121      	bne.n	8006e0e <UART_SetConfig+0xca>
 8006dca:	4b96      	ldr	r3, [pc, #600]	; (8007024 <UART_SetConfig+0x2e0>)
 8006dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d817      	bhi.n	8006e08 <UART_SetConfig+0xc4>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <UART_SetConfig+0x9c>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006df1 	.word	0x08006df1
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006df7 	.word	0x08006df7
 8006dec:	08006e03 	.word	0x08006e03
 8006df0:	2301      	movs	r3, #1
 8006df2:	76fb      	strb	r3, [r7, #27]
 8006df4:	e096      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006df6:	2302      	movs	r3, #2
 8006df8:	76fb      	strb	r3, [r7, #27]
 8006dfa:	e093      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	76fb      	strb	r3, [r7, #27]
 8006e00:	e090      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006e02:	2308      	movs	r3, #8
 8006e04:	76fb      	strb	r3, [r7, #27]
 8006e06:	e08d      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006e08:	2310      	movs	r3, #16
 8006e0a:	76fb      	strb	r3, [r7, #27]
 8006e0c:	e08a      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a85      	ldr	r2, [pc, #532]	; (8007028 <UART_SetConfig+0x2e4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d132      	bne.n	8006e7e <UART_SetConfig+0x13a>
 8006e18:	4b82      	ldr	r3, [pc, #520]	; (8007024 <UART_SetConfig+0x2e0>)
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b0c      	cmp	r3, #12
 8006e24:	d828      	bhi.n	8006e78 <UART_SetConfig+0x134>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <UART_SetConfig+0xe8>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e61 	.word	0x08006e61
 8006e30:	08006e79 	.word	0x08006e79
 8006e34:	08006e79 	.word	0x08006e79
 8006e38:	08006e79 	.word	0x08006e79
 8006e3c:	08006e6d 	.word	0x08006e6d
 8006e40:	08006e79 	.word	0x08006e79
 8006e44:	08006e79 	.word	0x08006e79
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006e67 	.word	0x08006e67
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006e79 	.word	0x08006e79
 8006e5c:	08006e73 	.word	0x08006e73
 8006e60:	2300      	movs	r3, #0
 8006e62:	76fb      	strb	r3, [r7, #27]
 8006e64:	e05e      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006e66:	2302      	movs	r3, #2
 8006e68:	76fb      	strb	r3, [r7, #27]
 8006e6a:	e05b      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	76fb      	strb	r3, [r7, #27]
 8006e70:	e058      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006e72:	2308      	movs	r3, #8
 8006e74:	76fb      	strb	r3, [r7, #27]
 8006e76:	e055      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	76fb      	strb	r3, [r7, #27]
 8006e7c:	e052      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a6a      	ldr	r2, [pc, #424]	; (800702c <UART_SetConfig+0x2e8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d120      	bne.n	8006eca <UART_SetConfig+0x186>
 8006e88:	4b66      	ldr	r3, [pc, #408]	; (8007024 <UART_SetConfig+0x2e0>)
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e92:	2b30      	cmp	r3, #48	; 0x30
 8006e94:	d013      	beq.n	8006ebe <UART_SetConfig+0x17a>
 8006e96:	2b30      	cmp	r3, #48	; 0x30
 8006e98:	d814      	bhi.n	8006ec4 <UART_SetConfig+0x180>
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d009      	beq.n	8006eb2 <UART_SetConfig+0x16e>
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d810      	bhi.n	8006ec4 <UART_SetConfig+0x180>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <UART_SetConfig+0x168>
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d006      	beq.n	8006eb8 <UART_SetConfig+0x174>
 8006eaa:	e00b      	b.n	8006ec4 <UART_SetConfig+0x180>
 8006eac:	2300      	movs	r3, #0
 8006eae:	76fb      	strb	r3, [r7, #27]
 8006eb0:	e038      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	76fb      	strb	r3, [r7, #27]
 8006eb6:	e035      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006eb8:	2304      	movs	r3, #4
 8006eba:	76fb      	strb	r3, [r7, #27]
 8006ebc:	e032      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006ebe:	2308      	movs	r3, #8
 8006ec0:	76fb      	strb	r3, [r7, #27]
 8006ec2:	e02f      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	76fb      	strb	r3, [r7, #27]
 8006ec8:	e02c      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a53      	ldr	r2, [pc, #332]	; (800701c <UART_SetConfig+0x2d8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d125      	bne.n	8006f20 <UART_SetConfig+0x1dc>
 8006ed4:	4b53      	ldr	r3, [pc, #332]	; (8007024 <UART_SetConfig+0x2e0>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ee2:	d017      	beq.n	8006f14 <UART_SetConfig+0x1d0>
 8006ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ee8:	d817      	bhi.n	8006f1a <UART_SetConfig+0x1d6>
 8006eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eee:	d00b      	beq.n	8006f08 <UART_SetConfig+0x1c4>
 8006ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef4:	d811      	bhi.n	8006f1a <UART_SetConfig+0x1d6>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <UART_SetConfig+0x1be>
 8006efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efe:	d006      	beq.n	8006f0e <UART_SetConfig+0x1ca>
 8006f00:	e00b      	b.n	8006f1a <UART_SetConfig+0x1d6>
 8006f02:	2300      	movs	r3, #0
 8006f04:	76fb      	strb	r3, [r7, #27]
 8006f06:	e00d      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	76fb      	strb	r3, [r7, #27]
 8006f0c:	e00a      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006f0e:	2304      	movs	r3, #4
 8006f10:	76fb      	strb	r3, [r7, #27]
 8006f12:	e007      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006f14:	2308      	movs	r3, #8
 8006f16:	76fb      	strb	r3, [r7, #27]
 8006f18:	e004      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006f1a:	2310      	movs	r3, #16
 8006f1c:	76fb      	strb	r3, [r7, #27]
 8006f1e:	e001      	b.n	8006f24 <UART_SetConfig+0x1e0>
 8006f20:	2310      	movs	r3, #16
 8006f22:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a3c      	ldr	r2, [pc, #240]	; (800701c <UART_SetConfig+0x2d8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	f040 8082 	bne.w	8007034 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f30:	7efb      	ldrb	r3, [r7, #27]
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d823      	bhi.n	8006f7e <UART_SetConfig+0x23a>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <UART_SetConfig+0x1f8>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f7f 	.word	0x08006f7f
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f7f 	.word	0x08006f7f
 8006f4c:	08006f6f 	.word	0x08006f6f
 8006f50:	08006f7f 	.word	0x08006f7f
 8006f54:	08006f7f 	.word	0x08006f7f
 8006f58:	08006f7f 	.word	0x08006f7f
 8006f5c:	08006f77 	.word	0x08006f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f60:	f7fd fd32 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8006f64:	6178      	str	r0, [r7, #20]
        break;
 8006f66:	e00f      	b.n	8006f88 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f68:	4b31      	ldr	r3, [pc, #196]	; (8007030 <UART_SetConfig+0x2ec>)
 8006f6a:	617b      	str	r3, [r7, #20]
        break;
 8006f6c:	e00c      	b.n	8006f88 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6e:	f7fd fc93 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 8006f72:	6178      	str	r0, [r7, #20]
        break;
 8006f74:	e008      	b.n	8006f88 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7a:	617b      	str	r3, [r7, #20]
        break;
 8006f7c:	e004      	b.n	8006f88 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	76bb      	strb	r3, [r7, #26]
        break;
 8006f86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8100 	beq.w	8007190 <UART_SetConfig+0x44c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	4613      	mov	r3, r2
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	4413      	add	r3, r2
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d305      	bcc.n	8006fac <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d902      	bls.n	8006fb2 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	76bb      	strb	r3, [r7, #26]
 8006fb0:	e0ee      	b.n	8007190 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	020b      	lsls	r3, r1, #8
 8006fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fc8:	0202      	lsls	r2, r0, #8
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	6849      	ldr	r1, [r1, #4]
 8006fce:	0849      	lsrs	r1, r1, #1
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	f04f 0100 	mov.w	r1, #0
 8006fd6:	1814      	adds	r4, r2, r0
 8006fd8:	eb43 0501 	adc.w	r5, r3, r1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f7f9 f951 	bl	8000290 <__aeabi_uldivmod>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ffc:	d308      	bcc.n	8007010 <UART_SetConfig+0x2cc>
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007004:	d204      	bcs.n	8007010 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	60da      	str	r2, [r3, #12]
 800700e:	e0bf      	b.n	8007190 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	76bb      	strb	r3, [r7, #26]
 8007014:	e0bc      	b.n	8007190 <UART_SetConfig+0x44c>
 8007016:	bf00      	nop
 8007018:	efff69f3 	.word	0xefff69f3
 800701c:	40008000 	.word	0x40008000
 8007020:	40013800 	.word	0x40013800
 8007024:	40021000 	.word	0x40021000
 8007028:	40004400 	.word	0x40004400
 800702c:	40004800 	.word	0x40004800
 8007030:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703c:	d15c      	bne.n	80070f8 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 800703e:	7efb      	ldrb	r3, [r7, #27]
 8007040:	2b08      	cmp	r3, #8
 8007042:	d828      	bhi.n	8007096 <UART_SetConfig+0x352>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x308>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	08007097 	.word	0x08007097
 800705c:	08007087 	.word	0x08007087
 8007060:	08007097 	.word	0x08007097
 8007064:	08007097 	.word	0x08007097
 8007068:	08007097 	.word	0x08007097
 800706c:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fd fcaa 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8007074:	6178      	str	r0, [r7, #20]
        break;
 8007076:	e013      	b.n	80070a0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fd fcbc 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 800707c:	6178      	str	r0, [r7, #20]
        break;
 800707e:	e00f      	b.n	80070a0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b49      	ldr	r3, [pc, #292]	; (80071a8 <UART_SetConfig+0x464>)
 8007082:	617b      	str	r3, [r7, #20]
        break;
 8007084:	e00c      	b.n	80070a0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fd fc07 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 800708a:	6178      	str	r0, [r7, #20]
        break;
 800708c:	e008      	b.n	80070a0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	617b      	str	r3, [r7, #20]
        break;
 8007094:	e004      	b.n	80070a0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	76bb      	strb	r3, [r7, #26]
        break;
 800709e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d074      	beq.n	8007190 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	005a      	lsls	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	441a      	add	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b0f      	cmp	r3, #15
 80070c2:	d916      	bls.n	80070f2 <UART_SetConfig+0x3ae>
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ca:	d212      	bcs.n	80070f2 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f023 030f 	bic.w	r3, r3, #15
 80070d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	89fb      	ldrh	r3, [r7, #14]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	89fa      	ldrh	r2, [r7, #14]
 80070ee:	60da      	str	r2, [r3, #12]
 80070f0:	e04e      	b.n	8007190 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	76bb      	strb	r3, [r7, #26]
 80070f6:	e04b      	b.n	8007190 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070f8:	7efb      	ldrb	r3, [r7, #27]
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d827      	bhi.n	800714e <UART_SetConfig+0x40a>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <UART_SetConfig+0x3c0>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007129 	.word	0x08007129
 8007108:	08007131 	.word	0x08007131
 800710c:	08007139 	.word	0x08007139
 8007110:	0800714f 	.word	0x0800714f
 8007114:	0800713f 	.word	0x0800713f
 8007118:	0800714f 	.word	0x0800714f
 800711c:	0800714f 	.word	0x0800714f
 8007120:	0800714f 	.word	0x0800714f
 8007124:	08007147 	.word	0x08007147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007128:	f7fd fc4e 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 800712c:	6178      	str	r0, [r7, #20]
        break;
 800712e:	e013      	b.n	8007158 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007130:	f7fd fc60 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8007134:	6178      	str	r0, [r7, #20]
        break;
 8007136:	e00f      	b.n	8007158 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007138:	4b1b      	ldr	r3, [pc, #108]	; (80071a8 <UART_SetConfig+0x464>)
 800713a:	617b      	str	r3, [r7, #20]
        break;
 800713c:	e00c      	b.n	8007158 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713e:	f7fd fbab 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 8007142:	6178      	str	r0, [r7, #20]
        break;
 8007144:	e008      	b.n	8007158 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800714a:	617b      	str	r3, [r7, #20]
        break;
 800714c:	e004      	b.n	8007158 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	76bb      	strb	r3, [r7, #26]
        break;
 8007156:	bf00      	nop
    }

    if (pclk != 0U)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d018      	beq.n	8007190 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	085a      	lsrs	r2, r3, #1
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	441a      	add	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	b29b      	uxth	r3, r3
 8007172:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b0f      	cmp	r3, #15
 8007178:	d908      	bls.n	800718c <UART_SetConfig+0x448>
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007180:	d204      	bcs.n	800718c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	e001      	b.n	8007190 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800719c:	7ebb      	ldrb	r3, [r7, #26]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bdb0      	pop	{r4, r5, r7, pc}
 80071a6:	bf00      	nop
 80071a8:	00f42400 	.word	0x00f42400

080071ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072aa:	d10a      	bne.n	80072c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80072fe:	f7fa fb87 	bl	8001a10 <HAL_GetTick>
 8007302:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b08      	cmp	r3, #8
 8007310:	d10e      	bne.n	8007330 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007312:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f82a 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e020      	b.n	8007372 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	2b04      	cmp	r3, #4
 800733c:	d10e      	bne.n	800735c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f814 	bl	800737a <UART_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e00a      	b.n	8007372 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738a:	e05d      	b.n	8007448 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007392:	d059      	beq.n	8007448 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007394:	f7fa fb3c 	bl	8001a10 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <UART_WaitOnFlagUntilTimeout+0x30>
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d11b      	bne.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e042      	b.n	8007468 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d02b      	beq.n	8007448 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fe:	d123      	bne.n	8007448 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007408:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007418:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0201 	bic.w	r2, r2, #1
 8007428:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e00f      	b.n	8007468 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69da      	ldr	r2, [r3, #28]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4013      	ands	r3, r2
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	429a      	cmp	r2, r3
 8007456:	bf0c      	ite	eq
 8007458:	2301      	moveq	r3, #1
 800745a:	2300      	movne	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	429a      	cmp	r2, r3
 8007464:	d092      	beq.n	800738c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007486:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff fc2e 	bl	8006d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff fc0b 	bl	8006d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <atoi>:
 8007522:	220a      	movs	r2, #10
 8007524:	2100      	movs	r1, #0
 8007526:	f000 ba33 	b.w	8007990 <strtol>
	...

0800752c <__errno>:
 800752c:	4b01      	ldr	r3, [pc, #4]	; (8007534 <__errno+0x8>)
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000064 	.word	0x20000064

08007538 <getchar>:
 8007538:	4b07      	ldr	r3, [pc, #28]	; (8007558 <getchar+0x20>)
 800753a:	b510      	push	{r4, lr}
 800753c:	681c      	ldr	r4, [r3, #0]
 800753e:	b124      	cbz	r4, 800754a <getchar+0x12>
 8007540:	69a3      	ldr	r3, [r4, #24]
 8007542:	b913      	cbnz	r3, 800754a <getchar+0x12>
 8007544:	4620      	mov	r0, r4
 8007546:	f000 fc19 	bl	8007d7c <__sinit>
 800754a:	6861      	ldr	r1, [r4, #4]
 800754c:	4620      	mov	r0, r4
 800754e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007552:	f000 bccd 	b.w	8007ef0 <_getc_r>
 8007556:	bf00      	nop
 8007558:	20000064 	.word	0x20000064

0800755c <__libc_init_array>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	4d0d      	ldr	r5, [pc, #52]	; (8007594 <__libc_init_array+0x38>)
 8007560:	4c0d      	ldr	r4, [pc, #52]	; (8007598 <__libc_init_array+0x3c>)
 8007562:	1b64      	subs	r4, r4, r5
 8007564:	10a4      	asrs	r4, r4, #2
 8007566:	2600      	movs	r6, #0
 8007568:	42a6      	cmp	r6, r4
 800756a:	d109      	bne.n	8007580 <__libc_init_array+0x24>
 800756c:	4d0b      	ldr	r5, [pc, #44]	; (800759c <__libc_init_array+0x40>)
 800756e:	4c0c      	ldr	r4, [pc, #48]	; (80075a0 <__libc_init_array+0x44>)
 8007570:	f001 fae4 	bl	8008b3c <_init>
 8007574:	1b64      	subs	r4, r4, r5
 8007576:	10a4      	asrs	r4, r4, #2
 8007578:	2600      	movs	r6, #0
 800757a:	42a6      	cmp	r6, r4
 800757c:	d105      	bne.n	800758a <__libc_init_array+0x2e>
 800757e:	bd70      	pop	{r4, r5, r6, pc}
 8007580:	f855 3b04 	ldr.w	r3, [r5], #4
 8007584:	4798      	blx	r3
 8007586:	3601      	adds	r6, #1
 8007588:	e7ee      	b.n	8007568 <__libc_init_array+0xc>
 800758a:	f855 3b04 	ldr.w	r3, [r5], #4
 800758e:	4798      	blx	r3
 8007590:	3601      	adds	r6, #1
 8007592:	e7f2      	b.n	800757a <__libc_init_array+0x1e>
 8007594:	08008e98 	.word	0x08008e98
 8007598:	08008e98 	.word	0x08008e98
 800759c:	08008e98 	.word	0x08008e98
 80075a0:	08008e9c 	.word	0x08008e9c

080075a4 <memset>:
 80075a4:	4402      	add	r2, r0
 80075a6:	4603      	mov	r3, r0
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d100      	bne.n	80075ae <memset+0xa>
 80075ac:	4770      	bx	lr
 80075ae:	f803 1b01 	strb.w	r1, [r3], #1
 80075b2:	e7f9      	b.n	80075a8 <memset+0x4>

080075b4 <iprintf>:
 80075b4:	b40f      	push	{r0, r1, r2, r3}
 80075b6:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <iprintf+0x2c>)
 80075b8:	b513      	push	{r0, r1, r4, lr}
 80075ba:	681c      	ldr	r4, [r3, #0]
 80075bc:	b124      	cbz	r4, 80075c8 <iprintf+0x14>
 80075be:	69a3      	ldr	r3, [r4, #24]
 80075c0:	b913      	cbnz	r3, 80075c8 <iprintf+0x14>
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fbda 	bl	8007d7c <__sinit>
 80075c8:	ab05      	add	r3, sp, #20
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	68a1      	ldr	r1, [r4, #8]
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fe11 	bl	80081f8 <_vfiprintf_r>
 80075d6:	b002      	add	sp, #8
 80075d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075dc:	b004      	add	sp, #16
 80075de:	4770      	bx	lr
 80075e0:	20000064 	.word	0x20000064

080075e4 <putchar>:
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <putchar+0x28>)
 80075e6:	b513      	push	{r0, r1, r4, lr}
 80075e8:	681c      	ldr	r4, [r3, #0]
 80075ea:	4601      	mov	r1, r0
 80075ec:	b134      	cbz	r4, 80075fc <putchar+0x18>
 80075ee:	69a3      	ldr	r3, [r4, #24]
 80075f0:	b923      	cbnz	r3, 80075fc <putchar+0x18>
 80075f2:	9001      	str	r0, [sp, #4]
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fbc1 	bl	8007d7c <__sinit>
 80075fa:	9901      	ldr	r1, [sp, #4]
 80075fc:	68a2      	ldr	r2, [r4, #8]
 80075fe:	4620      	mov	r0, r4
 8007600:	b002      	add	sp, #8
 8007602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007606:	f001 b8bb 	b.w	8008780 <_putc_r>
 800760a:	bf00      	nop
 800760c:	20000064 	.word	0x20000064

08007610 <_puts_r>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	460e      	mov	r6, r1
 8007614:	4605      	mov	r5, r0
 8007616:	b118      	cbz	r0, 8007620 <_puts_r+0x10>
 8007618:	6983      	ldr	r3, [r0, #24]
 800761a:	b90b      	cbnz	r3, 8007620 <_puts_r+0x10>
 800761c:	f000 fbae 	bl	8007d7c <__sinit>
 8007620:	69ab      	ldr	r3, [r5, #24]
 8007622:	68ac      	ldr	r4, [r5, #8]
 8007624:	b913      	cbnz	r3, 800762c <_puts_r+0x1c>
 8007626:	4628      	mov	r0, r5
 8007628:	f000 fba8 	bl	8007d7c <__sinit>
 800762c:	4b2c      	ldr	r3, [pc, #176]	; (80076e0 <_puts_r+0xd0>)
 800762e:	429c      	cmp	r4, r3
 8007630:	d120      	bne.n	8007674 <_puts_r+0x64>
 8007632:	686c      	ldr	r4, [r5, #4]
 8007634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007636:	07db      	lsls	r3, r3, #31
 8007638:	d405      	bmi.n	8007646 <_puts_r+0x36>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	0598      	lsls	r0, r3, #22
 800763e:	d402      	bmi.n	8007646 <_puts_r+0x36>
 8007640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007642:	f000 fc96 	bl	8007f72 <__retarget_lock_acquire_recursive>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	0719      	lsls	r1, r3, #28
 800764a:	d51d      	bpl.n	8007688 <_puts_r+0x78>
 800764c:	6923      	ldr	r3, [r4, #16]
 800764e:	b1db      	cbz	r3, 8007688 <_puts_r+0x78>
 8007650:	3e01      	subs	r6, #1
 8007652:	68a3      	ldr	r3, [r4, #8]
 8007654:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007658:	3b01      	subs	r3, #1
 800765a:	60a3      	str	r3, [r4, #8]
 800765c:	bb39      	cbnz	r1, 80076ae <_puts_r+0x9e>
 800765e:	2b00      	cmp	r3, #0
 8007660:	da38      	bge.n	80076d4 <_puts_r+0xc4>
 8007662:	4622      	mov	r2, r4
 8007664:	210a      	movs	r1, #10
 8007666:	4628      	mov	r0, r5
 8007668:	f000 f99c 	bl	80079a4 <__swbuf_r>
 800766c:	3001      	adds	r0, #1
 800766e:	d011      	beq.n	8007694 <_puts_r+0x84>
 8007670:	250a      	movs	r5, #10
 8007672:	e011      	b.n	8007698 <_puts_r+0x88>
 8007674:	4b1b      	ldr	r3, [pc, #108]	; (80076e4 <_puts_r+0xd4>)
 8007676:	429c      	cmp	r4, r3
 8007678:	d101      	bne.n	800767e <_puts_r+0x6e>
 800767a:	68ac      	ldr	r4, [r5, #8]
 800767c:	e7da      	b.n	8007634 <_puts_r+0x24>
 800767e:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <_puts_r+0xd8>)
 8007680:	429c      	cmp	r4, r3
 8007682:	bf08      	it	eq
 8007684:	68ec      	ldreq	r4, [r5, #12]
 8007686:	e7d5      	b.n	8007634 <_puts_r+0x24>
 8007688:	4621      	mov	r1, r4
 800768a:	4628      	mov	r0, r5
 800768c:	f000 f9dc 	bl	8007a48 <__swsetup_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	d0dd      	beq.n	8007650 <_puts_r+0x40>
 8007694:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800769a:	07da      	lsls	r2, r3, #31
 800769c:	d405      	bmi.n	80076aa <_puts_r+0x9a>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	059b      	lsls	r3, r3, #22
 80076a2:	d402      	bmi.n	80076aa <_puts_r+0x9a>
 80076a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076a6:	f000 fc65 	bl	8007f74 <__retarget_lock_release_recursive>
 80076aa:	4628      	mov	r0, r5
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	da04      	bge.n	80076bc <_puts_r+0xac>
 80076b2:	69a2      	ldr	r2, [r4, #24]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	dc06      	bgt.n	80076c6 <_puts_r+0xb6>
 80076b8:	290a      	cmp	r1, #10
 80076ba:	d004      	beq.n	80076c6 <_puts_r+0xb6>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	7019      	strb	r1, [r3, #0]
 80076c4:	e7c5      	b.n	8007652 <_puts_r+0x42>
 80076c6:	4622      	mov	r2, r4
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 f96b 	bl	80079a4 <__swbuf_r>
 80076ce:	3001      	adds	r0, #1
 80076d0:	d1bf      	bne.n	8007652 <_puts_r+0x42>
 80076d2:	e7df      	b.n	8007694 <_puts_r+0x84>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	250a      	movs	r5, #10
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	6022      	str	r2, [r4, #0]
 80076dc:	701d      	strb	r5, [r3, #0]
 80076de:	e7db      	b.n	8007698 <_puts_r+0x88>
 80076e0:	08008e1c 	.word	0x08008e1c
 80076e4:	08008e3c 	.word	0x08008e3c
 80076e8:	08008dfc 	.word	0x08008dfc

080076ec <puts>:
 80076ec:	4b02      	ldr	r3, [pc, #8]	; (80076f8 <puts+0xc>)
 80076ee:	4601      	mov	r1, r0
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	f7ff bf8d 	b.w	8007610 <_puts_r>
 80076f6:	bf00      	nop
 80076f8:	20000064 	.word	0x20000064

080076fc <setvbuf>:
 80076fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007700:	461d      	mov	r5, r3
 8007702:	4b5d      	ldr	r3, [pc, #372]	; (8007878 <setvbuf+0x17c>)
 8007704:	681f      	ldr	r7, [r3, #0]
 8007706:	4604      	mov	r4, r0
 8007708:	460e      	mov	r6, r1
 800770a:	4690      	mov	r8, r2
 800770c:	b127      	cbz	r7, 8007718 <setvbuf+0x1c>
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	b913      	cbnz	r3, 8007718 <setvbuf+0x1c>
 8007712:	4638      	mov	r0, r7
 8007714:	f000 fb32 	bl	8007d7c <__sinit>
 8007718:	4b58      	ldr	r3, [pc, #352]	; (800787c <setvbuf+0x180>)
 800771a:	429c      	cmp	r4, r3
 800771c:	d167      	bne.n	80077ee <setvbuf+0xf2>
 800771e:	687c      	ldr	r4, [r7, #4]
 8007720:	f1b8 0f02 	cmp.w	r8, #2
 8007724:	d006      	beq.n	8007734 <setvbuf+0x38>
 8007726:	f1b8 0f01 	cmp.w	r8, #1
 800772a:	f200 809f 	bhi.w	800786c <setvbuf+0x170>
 800772e:	2d00      	cmp	r5, #0
 8007730:	f2c0 809c 	blt.w	800786c <setvbuf+0x170>
 8007734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007736:	07db      	lsls	r3, r3, #31
 8007738:	d405      	bmi.n	8007746 <setvbuf+0x4a>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	0598      	lsls	r0, r3, #22
 800773e:	d402      	bmi.n	8007746 <setvbuf+0x4a>
 8007740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007742:	f000 fc16 	bl	8007f72 <__retarget_lock_acquire_recursive>
 8007746:	4621      	mov	r1, r4
 8007748:	4638      	mov	r0, r7
 800774a:	f000 fa71 	bl	8007c30 <_fflush_r>
 800774e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007750:	b141      	cbz	r1, 8007764 <setvbuf+0x68>
 8007752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007756:	4299      	cmp	r1, r3
 8007758:	d002      	beq.n	8007760 <setvbuf+0x64>
 800775a:	4638      	mov	r0, r7
 800775c:	f000 fc78 	bl	8008050 <_free_r>
 8007760:	2300      	movs	r3, #0
 8007762:	6363      	str	r3, [r4, #52]	; 0x34
 8007764:	2300      	movs	r3, #0
 8007766:	61a3      	str	r3, [r4, #24]
 8007768:	6063      	str	r3, [r4, #4]
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	0619      	lsls	r1, r3, #24
 800776e:	d503      	bpl.n	8007778 <setvbuf+0x7c>
 8007770:	6921      	ldr	r1, [r4, #16]
 8007772:	4638      	mov	r0, r7
 8007774:	f000 fc6c 	bl	8008050 <_free_r>
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	f1b8 0f02 	cmp.w	r8, #2
 8007786:	81a3      	strh	r3, [r4, #12]
 8007788:	d06c      	beq.n	8007864 <setvbuf+0x168>
 800778a:	ab01      	add	r3, sp, #4
 800778c:	466a      	mov	r2, sp
 800778e:	4621      	mov	r1, r4
 8007790:	4638      	mov	r0, r7
 8007792:	f000 fbf0 	bl	8007f76 <__swhatbuf_r>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	4318      	orrs	r0, r3
 800779a:	81a0      	strh	r0, [r4, #12]
 800779c:	2d00      	cmp	r5, #0
 800779e:	d130      	bne.n	8007802 <setvbuf+0x106>
 80077a0:	9d00      	ldr	r5, [sp, #0]
 80077a2:	4628      	mov	r0, r5
 80077a4:	f000 fc4c 	bl	8008040 <malloc>
 80077a8:	4606      	mov	r6, r0
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d155      	bne.n	800785a <setvbuf+0x15e>
 80077ae:	f8dd 9000 	ldr.w	r9, [sp]
 80077b2:	45a9      	cmp	r9, r5
 80077b4:	d14a      	bne.n	800784c <setvbuf+0x150>
 80077b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80077ba:	2200      	movs	r2, #0
 80077bc:	60a2      	str	r2, [r4, #8]
 80077be:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80077c2:	6022      	str	r2, [r4, #0]
 80077c4:	6122      	str	r2, [r4, #16]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077cc:	6162      	str	r2, [r4, #20]
 80077ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	07d2      	lsls	r2, r2, #31
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	d405      	bmi.n	80077e6 <setvbuf+0xea>
 80077da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80077de:	d102      	bne.n	80077e6 <setvbuf+0xea>
 80077e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077e2:	f000 fbc7 	bl	8007f74 <__retarget_lock_release_recursive>
 80077e6:	4628      	mov	r0, r5
 80077e8:	b003      	add	sp, #12
 80077ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ee:	4b24      	ldr	r3, [pc, #144]	; (8007880 <setvbuf+0x184>)
 80077f0:	429c      	cmp	r4, r3
 80077f2:	d101      	bne.n	80077f8 <setvbuf+0xfc>
 80077f4:	68bc      	ldr	r4, [r7, #8]
 80077f6:	e793      	b.n	8007720 <setvbuf+0x24>
 80077f8:	4b22      	ldr	r3, [pc, #136]	; (8007884 <setvbuf+0x188>)
 80077fa:	429c      	cmp	r4, r3
 80077fc:	bf08      	it	eq
 80077fe:	68fc      	ldreq	r4, [r7, #12]
 8007800:	e78e      	b.n	8007720 <setvbuf+0x24>
 8007802:	2e00      	cmp	r6, #0
 8007804:	d0cd      	beq.n	80077a2 <setvbuf+0xa6>
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	b913      	cbnz	r3, 8007810 <setvbuf+0x114>
 800780a:	4638      	mov	r0, r7
 800780c:	f000 fab6 	bl	8007d7c <__sinit>
 8007810:	f1b8 0f01 	cmp.w	r8, #1
 8007814:	bf08      	it	eq
 8007816:	89a3      	ldrheq	r3, [r4, #12]
 8007818:	6026      	str	r6, [r4, #0]
 800781a:	bf04      	itt	eq
 800781c:	f043 0301 	orreq.w	r3, r3, #1
 8007820:	81a3      	strheq	r3, [r4, #12]
 8007822:	89a2      	ldrh	r2, [r4, #12]
 8007824:	f012 0308 	ands.w	r3, r2, #8
 8007828:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800782c:	d01c      	beq.n	8007868 <setvbuf+0x16c>
 800782e:	07d3      	lsls	r3, r2, #31
 8007830:	bf41      	itttt	mi
 8007832:	2300      	movmi	r3, #0
 8007834:	426d      	negmi	r5, r5
 8007836:	60a3      	strmi	r3, [r4, #8]
 8007838:	61a5      	strmi	r5, [r4, #24]
 800783a:	bf58      	it	pl
 800783c:	60a5      	strpl	r5, [r4, #8]
 800783e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007840:	f015 0501 	ands.w	r5, r5, #1
 8007844:	d115      	bne.n	8007872 <setvbuf+0x176>
 8007846:	f412 7f00 	tst.w	r2, #512	; 0x200
 800784a:	e7c8      	b.n	80077de <setvbuf+0xe2>
 800784c:	4648      	mov	r0, r9
 800784e:	f000 fbf7 	bl	8008040 <malloc>
 8007852:	4606      	mov	r6, r0
 8007854:	2800      	cmp	r0, #0
 8007856:	d0ae      	beq.n	80077b6 <setvbuf+0xba>
 8007858:	464d      	mov	r5, r9
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	e7d0      	b.n	8007806 <setvbuf+0x10a>
 8007864:	2500      	movs	r5, #0
 8007866:	e7a8      	b.n	80077ba <setvbuf+0xbe>
 8007868:	60a3      	str	r3, [r4, #8]
 800786a:	e7e8      	b.n	800783e <setvbuf+0x142>
 800786c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007870:	e7b9      	b.n	80077e6 <setvbuf+0xea>
 8007872:	2500      	movs	r5, #0
 8007874:	e7b7      	b.n	80077e6 <setvbuf+0xea>
 8007876:	bf00      	nop
 8007878:	20000064 	.word	0x20000064
 800787c:	08008e1c 	.word	0x08008e1c
 8007880:	08008e3c 	.word	0x08008e3c
 8007884:	08008dfc 	.word	0x08008dfc

08007888 <_strtol_l.isra.0>:
 8007888:	2b01      	cmp	r3, #1
 800788a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800788e:	d001      	beq.n	8007894 <_strtol_l.isra.0+0xc>
 8007890:	2b24      	cmp	r3, #36	; 0x24
 8007892:	d906      	bls.n	80078a2 <_strtol_l.isra.0+0x1a>
 8007894:	f7ff fe4a 	bl	800752c <__errno>
 8007898:	2316      	movs	r3, #22
 800789a:	6003      	str	r3, [r0, #0]
 800789c:	2000      	movs	r0, #0
 800789e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a2:	4f3a      	ldr	r7, [pc, #232]	; (800798c <_strtol_l.isra.0+0x104>)
 80078a4:	468e      	mov	lr, r1
 80078a6:	4676      	mov	r6, lr
 80078a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80078ac:	5de5      	ldrb	r5, [r4, r7]
 80078ae:	f015 0508 	ands.w	r5, r5, #8
 80078b2:	d1f8      	bne.n	80078a6 <_strtol_l.isra.0+0x1e>
 80078b4:	2c2d      	cmp	r4, #45	; 0x2d
 80078b6:	d134      	bne.n	8007922 <_strtol_l.isra.0+0x9a>
 80078b8:	f89e 4000 	ldrb.w	r4, [lr]
 80078bc:	f04f 0801 	mov.w	r8, #1
 80078c0:	f106 0e02 	add.w	lr, r6, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d05c      	beq.n	8007982 <_strtol_l.isra.0+0xfa>
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d10c      	bne.n	80078e6 <_strtol_l.isra.0+0x5e>
 80078cc:	2c30      	cmp	r4, #48	; 0x30
 80078ce:	d10a      	bne.n	80078e6 <_strtol_l.isra.0+0x5e>
 80078d0:	f89e 4000 	ldrb.w	r4, [lr]
 80078d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80078d8:	2c58      	cmp	r4, #88	; 0x58
 80078da:	d14d      	bne.n	8007978 <_strtol_l.isra.0+0xf0>
 80078dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80078e0:	2310      	movs	r3, #16
 80078e2:	f10e 0e02 	add.w	lr, lr, #2
 80078e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80078ea:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80078ee:	2600      	movs	r6, #0
 80078f0:	fbbc f9f3 	udiv	r9, ip, r3
 80078f4:	4635      	mov	r5, r6
 80078f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80078fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80078fe:	2f09      	cmp	r7, #9
 8007900:	d818      	bhi.n	8007934 <_strtol_l.isra.0+0xac>
 8007902:	463c      	mov	r4, r7
 8007904:	42a3      	cmp	r3, r4
 8007906:	dd24      	ble.n	8007952 <_strtol_l.isra.0+0xca>
 8007908:	2e00      	cmp	r6, #0
 800790a:	db1f      	blt.n	800794c <_strtol_l.isra.0+0xc4>
 800790c:	45a9      	cmp	r9, r5
 800790e:	d31d      	bcc.n	800794c <_strtol_l.isra.0+0xc4>
 8007910:	d101      	bne.n	8007916 <_strtol_l.isra.0+0x8e>
 8007912:	45a2      	cmp	sl, r4
 8007914:	db1a      	blt.n	800794c <_strtol_l.isra.0+0xc4>
 8007916:	fb05 4503 	mla	r5, r5, r3, r4
 800791a:	2601      	movs	r6, #1
 800791c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007920:	e7eb      	b.n	80078fa <_strtol_l.isra.0+0x72>
 8007922:	2c2b      	cmp	r4, #43	; 0x2b
 8007924:	bf08      	it	eq
 8007926:	f89e 4000 	ldrbeq.w	r4, [lr]
 800792a:	46a8      	mov	r8, r5
 800792c:	bf08      	it	eq
 800792e:	f106 0e02 	addeq.w	lr, r6, #2
 8007932:	e7c7      	b.n	80078c4 <_strtol_l.isra.0+0x3c>
 8007934:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007938:	2f19      	cmp	r7, #25
 800793a:	d801      	bhi.n	8007940 <_strtol_l.isra.0+0xb8>
 800793c:	3c37      	subs	r4, #55	; 0x37
 800793e:	e7e1      	b.n	8007904 <_strtol_l.isra.0+0x7c>
 8007940:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007944:	2f19      	cmp	r7, #25
 8007946:	d804      	bhi.n	8007952 <_strtol_l.isra.0+0xca>
 8007948:	3c57      	subs	r4, #87	; 0x57
 800794a:	e7db      	b.n	8007904 <_strtol_l.isra.0+0x7c>
 800794c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007950:	e7e4      	b.n	800791c <_strtol_l.isra.0+0x94>
 8007952:	2e00      	cmp	r6, #0
 8007954:	da05      	bge.n	8007962 <_strtol_l.isra.0+0xda>
 8007956:	2322      	movs	r3, #34	; 0x22
 8007958:	6003      	str	r3, [r0, #0]
 800795a:	4665      	mov	r5, ip
 800795c:	b942      	cbnz	r2, 8007970 <_strtol_l.isra.0+0xe8>
 800795e:	4628      	mov	r0, r5
 8007960:	e79d      	b.n	800789e <_strtol_l.isra.0+0x16>
 8007962:	f1b8 0f00 	cmp.w	r8, #0
 8007966:	d000      	beq.n	800796a <_strtol_l.isra.0+0xe2>
 8007968:	426d      	negs	r5, r5
 800796a:	2a00      	cmp	r2, #0
 800796c:	d0f7      	beq.n	800795e <_strtol_l.isra.0+0xd6>
 800796e:	b10e      	cbz	r6, 8007974 <_strtol_l.isra.0+0xec>
 8007970:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	e7f2      	b.n	800795e <_strtol_l.isra.0+0xd6>
 8007978:	2430      	movs	r4, #48	; 0x30
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1b3      	bne.n	80078e6 <_strtol_l.isra.0+0x5e>
 800797e:	2308      	movs	r3, #8
 8007980:	e7b1      	b.n	80078e6 <_strtol_l.isra.0+0x5e>
 8007982:	2c30      	cmp	r4, #48	; 0x30
 8007984:	d0a4      	beq.n	80078d0 <_strtol_l.isra.0+0x48>
 8007986:	230a      	movs	r3, #10
 8007988:	e7ad      	b.n	80078e6 <_strtol_l.isra.0+0x5e>
 800798a:	bf00      	nop
 800798c:	08008cf9 	.word	0x08008cf9

08007990 <strtol>:
 8007990:	4613      	mov	r3, r2
 8007992:	460a      	mov	r2, r1
 8007994:	4601      	mov	r1, r0
 8007996:	4802      	ldr	r0, [pc, #8]	; (80079a0 <strtol+0x10>)
 8007998:	6800      	ldr	r0, [r0, #0]
 800799a:	f7ff bf75 	b.w	8007888 <_strtol_l.isra.0>
 800799e:	bf00      	nop
 80079a0:	20000064 	.word	0x20000064

080079a4 <__swbuf_r>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	460e      	mov	r6, r1
 80079a8:	4614      	mov	r4, r2
 80079aa:	4605      	mov	r5, r0
 80079ac:	b118      	cbz	r0, 80079b6 <__swbuf_r+0x12>
 80079ae:	6983      	ldr	r3, [r0, #24]
 80079b0:	b90b      	cbnz	r3, 80079b6 <__swbuf_r+0x12>
 80079b2:	f000 f9e3 	bl	8007d7c <__sinit>
 80079b6:	4b21      	ldr	r3, [pc, #132]	; (8007a3c <__swbuf_r+0x98>)
 80079b8:	429c      	cmp	r4, r3
 80079ba:	d12b      	bne.n	8007a14 <__swbuf_r+0x70>
 80079bc:	686c      	ldr	r4, [r5, #4]
 80079be:	69a3      	ldr	r3, [r4, #24]
 80079c0:	60a3      	str	r3, [r4, #8]
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	071a      	lsls	r2, r3, #28
 80079c6:	d52f      	bpl.n	8007a28 <__swbuf_r+0x84>
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	b36b      	cbz	r3, 8007a28 <__swbuf_r+0x84>
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	6820      	ldr	r0, [r4, #0]
 80079d0:	1ac0      	subs	r0, r0, r3
 80079d2:	6963      	ldr	r3, [r4, #20]
 80079d4:	b2f6      	uxtb	r6, r6
 80079d6:	4283      	cmp	r3, r0
 80079d8:	4637      	mov	r7, r6
 80079da:	dc04      	bgt.n	80079e6 <__swbuf_r+0x42>
 80079dc:	4621      	mov	r1, r4
 80079de:	4628      	mov	r0, r5
 80079e0:	f000 f926 	bl	8007c30 <_fflush_r>
 80079e4:	bb30      	cbnz	r0, 8007a34 <__swbuf_r+0x90>
 80079e6:	68a3      	ldr	r3, [r4, #8]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	60a3      	str	r3, [r4, #8]
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	6022      	str	r2, [r4, #0]
 80079f2:	701e      	strb	r6, [r3, #0]
 80079f4:	6963      	ldr	r3, [r4, #20]
 80079f6:	3001      	adds	r0, #1
 80079f8:	4283      	cmp	r3, r0
 80079fa:	d004      	beq.n	8007a06 <__swbuf_r+0x62>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	07db      	lsls	r3, r3, #31
 8007a00:	d506      	bpl.n	8007a10 <__swbuf_r+0x6c>
 8007a02:	2e0a      	cmp	r6, #10
 8007a04:	d104      	bne.n	8007a10 <__swbuf_r+0x6c>
 8007a06:	4621      	mov	r1, r4
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 f911 	bl	8007c30 <_fflush_r>
 8007a0e:	b988      	cbnz	r0, 8007a34 <__swbuf_r+0x90>
 8007a10:	4638      	mov	r0, r7
 8007a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a14:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <__swbuf_r+0x9c>)
 8007a16:	429c      	cmp	r4, r3
 8007a18:	d101      	bne.n	8007a1e <__swbuf_r+0x7a>
 8007a1a:	68ac      	ldr	r4, [r5, #8]
 8007a1c:	e7cf      	b.n	80079be <__swbuf_r+0x1a>
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <__swbuf_r+0xa0>)
 8007a20:	429c      	cmp	r4, r3
 8007a22:	bf08      	it	eq
 8007a24:	68ec      	ldreq	r4, [r5, #12]
 8007a26:	e7ca      	b.n	80079be <__swbuf_r+0x1a>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 f80c 	bl	8007a48 <__swsetup_r>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d0cb      	beq.n	80079cc <__swbuf_r+0x28>
 8007a34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a38:	e7ea      	b.n	8007a10 <__swbuf_r+0x6c>
 8007a3a:	bf00      	nop
 8007a3c:	08008e1c 	.word	0x08008e1c
 8007a40:	08008e3c 	.word	0x08008e3c
 8007a44:	08008dfc 	.word	0x08008dfc

08007a48 <__swsetup_r>:
 8007a48:	4b32      	ldr	r3, [pc, #200]	; (8007b14 <__swsetup_r+0xcc>)
 8007a4a:	b570      	push	{r4, r5, r6, lr}
 8007a4c:	681d      	ldr	r5, [r3, #0]
 8007a4e:	4606      	mov	r6, r0
 8007a50:	460c      	mov	r4, r1
 8007a52:	b125      	cbz	r5, 8007a5e <__swsetup_r+0x16>
 8007a54:	69ab      	ldr	r3, [r5, #24]
 8007a56:	b913      	cbnz	r3, 8007a5e <__swsetup_r+0x16>
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 f98f 	bl	8007d7c <__sinit>
 8007a5e:	4b2e      	ldr	r3, [pc, #184]	; (8007b18 <__swsetup_r+0xd0>)
 8007a60:	429c      	cmp	r4, r3
 8007a62:	d10f      	bne.n	8007a84 <__swsetup_r+0x3c>
 8007a64:	686c      	ldr	r4, [r5, #4]
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a6c:	0719      	lsls	r1, r3, #28
 8007a6e:	d42c      	bmi.n	8007aca <__swsetup_r+0x82>
 8007a70:	06dd      	lsls	r5, r3, #27
 8007a72:	d411      	bmi.n	8007a98 <__swsetup_r+0x50>
 8007a74:	2309      	movs	r3, #9
 8007a76:	6033      	str	r3, [r6, #0]
 8007a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a82:	e03e      	b.n	8007b02 <__swsetup_r+0xba>
 8007a84:	4b25      	ldr	r3, [pc, #148]	; (8007b1c <__swsetup_r+0xd4>)
 8007a86:	429c      	cmp	r4, r3
 8007a88:	d101      	bne.n	8007a8e <__swsetup_r+0x46>
 8007a8a:	68ac      	ldr	r4, [r5, #8]
 8007a8c:	e7eb      	b.n	8007a66 <__swsetup_r+0x1e>
 8007a8e:	4b24      	ldr	r3, [pc, #144]	; (8007b20 <__swsetup_r+0xd8>)
 8007a90:	429c      	cmp	r4, r3
 8007a92:	bf08      	it	eq
 8007a94:	68ec      	ldreq	r4, [r5, #12]
 8007a96:	e7e6      	b.n	8007a66 <__swsetup_r+0x1e>
 8007a98:	0758      	lsls	r0, r3, #29
 8007a9a:	d512      	bpl.n	8007ac2 <__swsetup_r+0x7a>
 8007a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a9e:	b141      	cbz	r1, 8007ab2 <__swsetup_r+0x6a>
 8007aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	d002      	beq.n	8007aae <__swsetup_r+0x66>
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f000 fad1 	bl	8008050 <_free_r>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	2300      	movs	r3, #0
 8007abc:	6063      	str	r3, [r4, #4]
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f043 0308 	orr.w	r3, r3, #8
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	b94b      	cbnz	r3, 8007ae2 <__swsetup_r+0x9a>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad8:	d003      	beq.n	8007ae2 <__swsetup_r+0x9a>
 8007ada:	4621      	mov	r1, r4
 8007adc:	4630      	mov	r0, r6
 8007ade:	f000 fa6f 	bl	8007fc0 <__smakebuf_r>
 8007ae2:	89a0      	ldrh	r0, [r4, #12]
 8007ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ae8:	f010 0301 	ands.w	r3, r0, #1
 8007aec:	d00a      	beq.n	8007b04 <__swsetup_r+0xbc>
 8007aee:	2300      	movs	r3, #0
 8007af0:	60a3      	str	r3, [r4, #8]
 8007af2:	6963      	ldr	r3, [r4, #20]
 8007af4:	425b      	negs	r3, r3
 8007af6:	61a3      	str	r3, [r4, #24]
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	b943      	cbnz	r3, 8007b0e <__swsetup_r+0xc6>
 8007afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b00:	d1ba      	bne.n	8007a78 <__swsetup_r+0x30>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	0781      	lsls	r1, r0, #30
 8007b06:	bf58      	it	pl
 8007b08:	6963      	ldrpl	r3, [r4, #20]
 8007b0a:	60a3      	str	r3, [r4, #8]
 8007b0c:	e7f4      	b.n	8007af8 <__swsetup_r+0xb0>
 8007b0e:	2000      	movs	r0, #0
 8007b10:	e7f7      	b.n	8007b02 <__swsetup_r+0xba>
 8007b12:	bf00      	nop
 8007b14:	20000064 	.word	0x20000064
 8007b18:	08008e1c 	.word	0x08008e1c
 8007b1c:	08008e3c 	.word	0x08008e3c
 8007b20:	08008dfc 	.word	0x08008dfc

08007b24 <__sflush_r>:
 8007b24:	898a      	ldrh	r2, [r1, #12]
 8007b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	0710      	lsls	r0, r2, #28
 8007b2e:	460c      	mov	r4, r1
 8007b30:	d458      	bmi.n	8007be4 <__sflush_r+0xc0>
 8007b32:	684b      	ldr	r3, [r1, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dc05      	bgt.n	8007b44 <__sflush_r+0x20>
 8007b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dc02      	bgt.n	8007b44 <__sflush_r+0x20>
 8007b3e:	2000      	movs	r0, #0
 8007b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b46:	2e00      	cmp	r6, #0
 8007b48:	d0f9      	beq.n	8007b3e <__sflush_r+0x1a>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b50:	682f      	ldr	r7, [r5, #0]
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	d032      	beq.n	8007bbc <__sflush_r+0x98>
 8007b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	075a      	lsls	r2, r3, #29
 8007b5c:	d505      	bpl.n	8007b6a <__sflush_r+0x46>
 8007b5e:	6863      	ldr	r3, [r4, #4]
 8007b60:	1ac0      	subs	r0, r0, r3
 8007b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b64:	b10b      	cbz	r3, 8007b6a <__sflush_r+0x46>
 8007b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b68:	1ac0      	subs	r0, r0, r3
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b70:	6a21      	ldr	r1, [r4, #32]
 8007b72:	4628      	mov	r0, r5
 8007b74:	47b0      	blx	r6
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	d106      	bne.n	8007b8a <__sflush_r+0x66>
 8007b7c:	6829      	ldr	r1, [r5, #0]
 8007b7e:	291d      	cmp	r1, #29
 8007b80:	d82c      	bhi.n	8007bdc <__sflush_r+0xb8>
 8007b82:	4a2a      	ldr	r2, [pc, #168]	; (8007c2c <__sflush_r+0x108>)
 8007b84:	40ca      	lsrs	r2, r1
 8007b86:	07d6      	lsls	r6, r2, #31
 8007b88:	d528      	bpl.n	8007bdc <__sflush_r+0xb8>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	6062      	str	r2, [r4, #4]
 8007b8e:	04d9      	lsls	r1, r3, #19
 8007b90:	6922      	ldr	r2, [r4, #16]
 8007b92:	6022      	str	r2, [r4, #0]
 8007b94:	d504      	bpl.n	8007ba0 <__sflush_r+0x7c>
 8007b96:	1c42      	adds	r2, r0, #1
 8007b98:	d101      	bne.n	8007b9e <__sflush_r+0x7a>
 8007b9a:	682b      	ldr	r3, [r5, #0]
 8007b9c:	b903      	cbnz	r3, 8007ba0 <__sflush_r+0x7c>
 8007b9e:	6560      	str	r0, [r4, #84]	; 0x54
 8007ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ba2:	602f      	str	r7, [r5, #0]
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	d0ca      	beq.n	8007b3e <__sflush_r+0x1a>
 8007ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bac:	4299      	cmp	r1, r3
 8007bae:	d002      	beq.n	8007bb6 <__sflush_r+0x92>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 fa4d 	bl	8008050 <_free_r>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8007bba:	e7c1      	b.n	8007b40 <__sflush_r+0x1c>
 8007bbc:	6a21      	ldr	r1, [r4, #32]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b0      	blx	r6
 8007bc4:	1c41      	adds	r1, r0, #1
 8007bc6:	d1c7      	bne.n	8007b58 <__sflush_r+0x34>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0c4      	beq.n	8007b58 <__sflush_r+0x34>
 8007bce:	2b1d      	cmp	r3, #29
 8007bd0:	d001      	beq.n	8007bd6 <__sflush_r+0xb2>
 8007bd2:	2b16      	cmp	r3, #22
 8007bd4:	d101      	bne.n	8007bda <__sflush_r+0xb6>
 8007bd6:	602f      	str	r7, [r5, #0]
 8007bd8:	e7b1      	b.n	8007b3e <__sflush_r+0x1a>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be0:	81a3      	strh	r3, [r4, #12]
 8007be2:	e7ad      	b.n	8007b40 <__sflush_r+0x1c>
 8007be4:	690f      	ldr	r7, [r1, #16]
 8007be6:	2f00      	cmp	r7, #0
 8007be8:	d0a9      	beq.n	8007b3e <__sflush_r+0x1a>
 8007bea:	0793      	lsls	r3, r2, #30
 8007bec:	680e      	ldr	r6, [r1, #0]
 8007bee:	bf08      	it	eq
 8007bf0:	694b      	ldreq	r3, [r1, #20]
 8007bf2:	600f      	str	r7, [r1, #0]
 8007bf4:	bf18      	it	ne
 8007bf6:	2300      	movne	r3, #0
 8007bf8:	eba6 0807 	sub.w	r8, r6, r7
 8007bfc:	608b      	str	r3, [r1, #8]
 8007bfe:	f1b8 0f00 	cmp.w	r8, #0
 8007c02:	dd9c      	ble.n	8007b3e <__sflush_r+0x1a>
 8007c04:	6a21      	ldr	r1, [r4, #32]
 8007c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c08:	4643      	mov	r3, r8
 8007c0a:	463a      	mov	r2, r7
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b0      	blx	r6
 8007c10:	2800      	cmp	r0, #0
 8007c12:	dc06      	bgt.n	8007c22 <__sflush_r+0xfe>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c20:	e78e      	b.n	8007b40 <__sflush_r+0x1c>
 8007c22:	4407      	add	r7, r0
 8007c24:	eba8 0800 	sub.w	r8, r8, r0
 8007c28:	e7e9      	b.n	8007bfe <__sflush_r+0xda>
 8007c2a:	bf00      	nop
 8007c2c:	20400001 	.word	0x20400001

08007c30 <_fflush_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	690b      	ldr	r3, [r1, #16]
 8007c34:	4605      	mov	r5, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	b913      	cbnz	r3, 8007c40 <_fflush_r+0x10>
 8007c3a:	2500      	movs	r5, #0
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	b118      	cbz	r0, 8007c4a <_fflush_r+0x1a>
 8007c42:	6983      	ldr	r3, [r0, #24]
 8007c44:	b90b      	cbnz	r3, 8007c4a <_fflush_r+0x1a>
 8007c46:	f000 f899 	bl	8007d7c <__sinit>
 8007c4a:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <_fflush_r+0x6c>)
 8007c4c:	429c      	cmp	r4, r3
 8007c4e:	d11b      	bne.n	8007c88 <_fflush_r+0x58>
 8007c50:	686c      	ldr	r4, [r5, #4]
 8007c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0ef      	beq.n	8007c3a <_fflush_r+0xa>
 8007c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c5c:	07d0      	lsls	r0, r2, #31
 8007c5e:	d404      	bmi.n	8007c6a <_fflush_r+0x3a>
 8007c60:	0599      	lsls	r1, r3, #22
 8007c62:	d402      	bmi.n	8007c6a <_fflush_r+0x3a>
 8007c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c66:	f000 f984 	bl	8007f72 <__retarget_lock_acquire_recursive>
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f7ff ff59 	bl	8007b24 <__sflush_r>
 8007c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c74:	07da      	lsls	r2, r3, #31
 8007c76:	4605      	mov	r5, r0
 8007c78:	d4e0      	bmi.n	8007c3c <_fflush_r+0xc>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	059b      	lsls	r3, r3, #22
 8007c7e:	d4dd      	bmi.n	8007c3c <_fflush_r+0xc>
 8007c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c82:	f000 f977 	bl	8007f74 <__retarget_lock_release_recursive>
 8007c86:	e7d9      	b.n	8007c3c <_fflush_r+0xc>
 8007c88:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <_fflush_r+0x70>)
 8007c8a:	429c      	cmp	r4, r3
 8007c8c:	d101      	bne.n	8007c92 <_fflush_r+0x62>
 8007c8e:	68ac      	ldr	r4, [r5, #8]
 8007c90:	e7df      	b.n	8007c52 <_fflush_r+0x22>
 8007c92:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <_fflush_r+0x74>)
 8007c94:	429c      	cmp	r4, r3
 8007c96:	bf08      	it	eq
 8007c98:	68ec      	ldreq	r4, [r5, #12]
 8007c9a:	e7da      	b.n	8007c52 <_fflush_r+0x22>
 8007c9c:	08008e1c 	.word	0x08008e1c
 8007ca0:	08008e3c 	.word	0x08008e3c
 8007ca4:	08008dfc 	.word	0x08008dfc

08007ca8 <fflush>:
 8007ca8:	4601      	mov	r1, r0
 8007caa:	b920      	cbnz	r0, 8007cb6 <fflush+0xe>
 8007cac:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <fflush+0x18>)
 8007cae:	4905      	ldr	r1, [pc, #20]	; (8007cc4 <fflush+0x1c>)
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	f000 b8fe 	b.w	8007eb2 <_fwalk_reent>
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <fflush+0x20>)
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	f7ff bfb9 	b.w	8007c30 <_fflush_r>
 8007cbe:	bf00      	nop
 8007cc0:	08008cf4 	.word	0x08008cf4
 8007cc4:	08007c31 	.word	0x08007c31
 8007cc8:	20000064 	.word	0x20000064

08007ccc <std>:
 8007ccc:	2300      	movs	r3, #0
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cda:	6083      	str	r3, [r0, #8]
 8007cdc:	8181      	strh	r1, [r0, #12]
 8007cde:	6643      	str	r3, [r0, #100]	; 0x64
 8007ce0:	81c2      	strh	r2, [r0, #14]
 8007ce2:	6183      	str	r3, [r0, #24]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	2208      	movs	r2, #8
 8007ce8:	305c      	adds	r0, #92	; 0x5c
 8007cea:	f7ff fc5b 	bl	80075a4 <memset>
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <std+0x38>)
 8007cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <std+0x3c>)
 8007cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <std+0x40>)
 8007cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <std+0x44>)
 8007cfc:	6224      	str	r4, [r4, #32]
 8007cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	bf00      	nop
 8007d04:	08008889 	.word	0x08008889
 8007d08:	080088ab 	.word	0x080088ab
 8007d0c:	080088e3 	.word	0x080088e3
 8007d10:	08008907 	.word	0x08008907

08007d14 <_cleanup_r>:
 8007d14:	4901      	ldr	r1, [pc, #4]	; (8007d1c <_cleanup_r+0x8>)
 8007d16:	f000 b8cc 	b.w	8007eb2 <_fwalk_reent>
 8007d1a:	bf00      	nop
 8007d1c:	08007c31 	.word	0x08007c31

08007d20 <__sfmoreglue>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	1e4a      	subs	r2, r1, #1
 8007d24:	2568      	movs	r5, #104	; 0x68
 8007d26:	4355      	muls	r5, r2
 8007d28:	460e      	mov	r6, r1
 8007d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d2e:	f000 f9df 	bl	80080f0 <_malloc_r>
 8007d32:	4604      	mov	r4, r0
 8007d34:	b140      	cbz	r0, 8007d48 <__sfmoreglue+0x28>
 8007d36:	2100      	movs	r1, #0
 8007d38:	e9c0 1600 	strd	r1, r6, [r0]
 8007d3c:	300c      	adds	r0, #12
 8007d3e:	60a0      	str	r0, [r4, #8]
 8007d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d44:	f7ff fc2e 	bl	80075a4 <memset>
 8007d48:	4620      	mov	r0, r4
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}

08007d4c <__sfp_lock_acquire>:
 8007d4c:	4801      	ldr	r0, [pc, #4]	; (8007d54 <__sfp_lock_acquire+0x8>)
 8007d4e:	f000 b910 	b.w	8007f72 <__retarget_lock_acquire_recursive>
 8007d52:	bf00      	nop
 8007d54:	20000318 	.word	0x20000318

08007d58 <__sfp_lock_release>:
 8007d58:	4801      	ldr	r0, [pc, #4]	; (8007d60 <__sfp_lock_release+0x8>)
 8007d5a:	f000 b90b 	b.w	8007f74 <__retarget_lock_release_recursive>
 8007d5e:	bf00      	nop
 8007d60:	20000318 	.word	0x20000318

08007d64 <__sinit_lock_acquire>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__sinit_lock_acquire+0x8>)
 8007d66:	f000 b904 	b.w	8007f72 <__retarget_lock_acquire_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	20000313 	.word	0x20000313

08007d70 <__sinit_lock_release>:
 8007d70:	4801      	ldr	r0, [pc, #4]	; (8007d78 <__sinit_lock_release+0x8>)
 8007d72:	f000 b8ff 	b.w	8007f74 <__retarget_lock_release_recursive>
 8007d76:	bf00      	nop
 8007d78:	20000313 	.word	0x20000313

08007d7c <__sinit>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	4604      	mov	r4, r0
 8007d80:	f7ff fff0 	bl	8007d64 <__sinit_lock_acquire>
 8007d84:	69a3      	ldr	r3, [r4, #24]
 8007d86:	b11b      	cbz	r3, 8007d90 <__sinit+0x14>
 8007d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d8c:	f7ff bff0 	b.w	8007d70 <__sinit_lock_release>
 8007d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d94:	6523      	str	r3, [r4, #80]	; 0x50
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <__sinit+0x68>)
 8007d98:	4a13      	ldr	r2, [pc, #76]	; (8007de8 <__sinit+0x6c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d9e:	42a3      	cmp	r3, r4
 8007da0:	bf04      	itt	eq
 8007da2:	2301      	moveq	r3, #1
 8007da4:	61a3      	streq	r3, [r4, #24]
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 f820 	bl	8007dec <__sfp>
 8007dac:	6060      	str	r0, [r4, #4]
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 f81c 	bl	8007dec <__sfp>
 8007db4:	60a0      	str	r0, [r4, #8]
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 f818 	bl	8007dec <__sfp>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	60e0      	str	r0, [r4, #12]
 8007dc0:	2104      	movs	r1, #4
 8007dc2:	6860      	ldr	r0, [r4, #4]
 8007dc4:	f7ff ff82 	bl	8007ccc <std>
 8007dc8:	68a0      	ldr	r0, [r4, #8]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	2109      	movs	r1, #9
 8007dce:	f7ff ff7d 	bl	8007ccc <std>
 8007dd2:	68e0      	ldr	r0, [r4, #12]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	2112      	movs	r1, #18
 8007dd8:	f7ff ff78 	bl	8007ccc <std>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	61a3      	str	r3, [r4, #24]
 8007de0:	e7d2      	b.n	8007d88 <__sinit+0xc>
 8007de2:	bf00      	nop
 8007de4:	08008cf4 	.word	0x08008cf4
 8007de8:	08007d15 	.word	0x08007d15

08007dec <__sfp>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	4607      	mov	r7, r0
 8007df0:	f7ff ffac 	bl	8007d4c <__sfp_lock_acquire>
 8007df4:	4b1e      	ldr	r3, [pc, #120]	; (8007e70 <__sfp+0x84>)
 8007df6:	681e      	ldr	r6, [r3, #0]
 8007df8:	69b3      	ldr	r3, [r6, #24]
 8007dfa:	b913      	cbnz	r3, 8007e02 <__sfp+0x16>
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f7ff ffbd 	bl	8007d7c <__sinit>
 8007e02:	3648      	adds	r6, #72	; 0x48
 8007e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	d503      	bpl.n	8007e14 <__sfp+0x28>
 8007e0c:	6833      	ldr	r3, [r6, #0]
 8007e0e:	b30b      	cbz	r3, 8007e54 <__sfp+0x68>
 8007e10:	6836      	ldr	r6, [r6, #0]
 8007e12:	e7f7      	b.n	8007e04 <__sfp+0x18>
 8007e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e18:	b9d5      	cbnz	r5, 8007e50 <__sfp+0x64>
 8007e1a:	4b16      	ldr	r3, [pc, #88]	; (8007e74 <__sfp+0x88>)
 8007e1c:	60e3      	str	r3, [r4, #12]
 8007e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e22:	6665      	str	r5, [r4, #100]	; 0x64
 8007e24:	f000 f8a4 	bl	8007f70 <__retarget_lock_init_recursive>
 8007e28:	f7ff ff96 	bl	8007d58 <__sfp_lock_release>
 8007e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e34:	6025      	str	r5, [r4, #0]
 8007e36:	61a5      	str	r5, [r4, #24]
 8007e38:	2208      	movs	r2, #8
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e40:	f7ff fbb0 	bl	80075a4 <memset>
 8007e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e50:	3468      	adds	r4, #104	; 0x68
 8007e52:	e7d9      	b.n	8007e08 <__sfp+0x1c>
 8007e54:	2104      	movs	r1, #4
 8007e56:	4638      	mov	r0, r7
 8007e58:	f7ff ff62 	bl	8007d20 <__sfmoreglue>
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	6030      	str	r0, [r6, #0]
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d1d5      	bne.n	8007e10 <__sfp+0x24>
 8007e64:	f7ff ff78 	bl	8007d58 <__sfp_lock_release>
 8007e68:	230c      	movs	r3, #12
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	e7ee      	b.n	8007e4c <__sfp+0x60>
 8007e6e:	bf00      	nop
 8007e70:	08008cf4 	.word	0x08008cf4
 8007e74:	ffff0001 	.word	0xffff0001

08007e78 <_fwalk>:
 8007e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e82:	2600      	movs	r6, #0
 8007e84:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8007e88:	f1b8 0801 	subs.w	r8, r8, #1
 8007e8c:	d505      	bpl.n	8007e9a <_fwalk+0x22>
 8007e8e:	6824      	ldr	r4, [r4, #0]
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	d1f7      	bne.n	8007e84 <_fwalk+0xc>
 8007e94:	4630      	mov	r0, r6
 8007e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9a:	89ab      	ldrh	r3, [r5, #12]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d906      	bls.n	8007eae <_fwalk+0x36>
 8007ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	d002      	beq.n	8007eae <_fwalk+0x36>
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	47b8      	blx	r7
 8007eac:	4306      	orrs	r6, r0
 8007eae:	3568      	adds	r5, #104	; 0x68
 8007eb0:	e7ea      	b.n	8007e88 <_fwalk+0x10>

08007eb2 <_fwalk_reent>:
 8007eb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	4688      	mov	r8, r1
 8007eba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ebe:	2700      	movs	r7, #0
 8007ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ec8:	d505      	bpl.n	8007ed6 <_fwalk_reent+0x24>
 8007eca:	6824      	ldr	r4, [r4, #0]
 8007ecc:	2c00      	cmp	r4, #0
 8007ece:	d1f7      	bne.n	8007ec0 <_fwalk_reent+0xe>
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d907      	bls.n	8007eec <_fwalk_reent+0x3a>
 8007edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	d003      	beq.n	8007eec <_fwalk_reent+0x3a>
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	47c0      	blx	r8
 8007eea:	4307      	orrs	r7, r0
 8007eec:	3568      	adds	r5, #104	; 0x68
 8007eee:	e7e9      	b.n	8007ec4 <_fwalk_reent+0x12>

08007ef0 <_getc_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	b118      	cbz	r0, 8007f00 <_getc_r+0x10>
 8007ef8:	6983      	ldr	r3, [r0, #24]
 8007efa:	b90b      	cbnz	r3, 8007f00 <_getc_r+0x10>
 8007efc:	f7ff ff3e 	bl	8007d7c <__sinit>
 8007f00:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <_getc_r+0x74>)
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d11e      	bne.n	8007f44 <_getc_r+0x54>
 8007f06:	686c      	ldr	r4, [r5, #4]
 8007f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f0a:	07d8      	lsls	r0, r3, #31
 8007f0c:	d405      	bmi.n	8007f1a <_getc_r+0x2a>
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	0599      	lsls	r1, r3, #22
 8007f12:	d402      	bmi.n	8007f1a <_getc_r+0x2a>
 8007f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f16:	f000 f82c 	bl	8007f72 <__retarget_lock_acquire_recursive>
 8007f1a:	6863      	ldr	r3, [r4, #4]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	6063      	str	r3, [r4, #4]
 8007f22:	da19      	bge.n	8007f58 <_getc_r+0x68>
 8007f24:	4628      	mov	r0, r5
 8007f26:	4621      	mov	r1, r4
 8007f28:	f000 fc72 	bl	8008810 <__srget_r>
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f30:	07da      	lsls	r2, r3, #31
 8007f32:	d405      	bmi.n	8007f40 <_getc_r+0x50>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	059b      	lsls	r3, r3, #22
 8007f38:	d402      	bmi.n	8007f40 <_getc_r+0x50>
 8007f3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f3c:	f000 f81a 	bl	8007f74 <__retarget_lock_release_recursive>
 8007f40:	4628      	mov	r0, r5
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <_getc_r+0x78>)
 8007f46:	429c      	cmp	r4, r3
 8007f48:	d101      	bne.n	8007f4e <_getc_r+0x5e>
 8007f4a:	68ac      	ldr	r4, [r5, #8]
 8007f4c:	e7dc      	b.n	8007f08 <_getc_r+0x18>
 8007f4e:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <_getc_r+0x7c>)
 8007f50:	429c      	cmp	r4, r3
 8007f52:	bf08      	it	eq
 8007f54:	68ec      	ldreq	r4, [r5, #12]
 8007f56:	e7d7      	b.n	8007f08 <_getc_r+0x18>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	6022      	str	r2, [r4, #0]
 8007f5e:	781d      	ldrb	r5, [r3, #0]
 8007f60:	e7e5      	b.n	8007f2e <_getc_r+0x3e>
 8007f62:	bf00      	nop
 8007f64:	08008e1c 	.word	0x08008e1c
 8007f68:	08008e3c 	.word	0x08008e3c
 8007f6c:	08008dfc 	.word	0x08008dfc

08007f70 <__retarget_lock_init_recursive>:
 8007f70:	4770      	bx	lr

08007f72 <__retarget_lock_acquire_recursive>:
 8007f72:	4770      	bx	lr

08007f74 <__retarget_lock_release_recursive>:
 8007f74:	4770      	bx	lr

08007f76 <__swhatbuf_r>:
 8007f76:	b570      	push	{r4, r5, r6, lr}
 8007f78:	460e      	mov	r6, r1
 8007f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7e:	2900      	cmp	r1, #0
 8007f80:	b096      	sub	sp, #88	; 0x58
 8007f82:	4614      	mov	r4, r2
 8007f84:	461d      	mov	r5, r3
 8007f86:	da07      	bge.n	8007f98 <__swhatbuf_r+0x22>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	89b3      	ldrh	r3, [r6, #12]
 8007f8e:	061a      	lsls	r2, r3, #24
 8007f90:	d410      	bmi.n	8007fb4 <__swhatbuf_r+0x3e>
 8007f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f96:	e00e      	b.n	8007fb6 <__swhatbuf_r+0x40>
 8007f98:	466a      	mov	r2, sp
 8007f9a:	f000 fcdb 	bl	8008954 <_fstat_r>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	dbf2      	blt.n	8007f88 <__swhatbuf_r+0x12>
 8007fa2:	9a01      	ldr	r2, [sp, #4]
 8007fa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fac:	425a      	negs	r2, r3
 8007fae:	415a      	adcs	r2, r3
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	e7ee      	b.n	8007f92 <__swhatbuf_r+0x1c>
 8007fb4:	2340      	movs	r3, #64	; 0x40
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	b016      	add	sp, #88	; 0x58
 8007fbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fc0 <__smakebuf_r>:
 8007fc0:	898b      	ldrh	r3, [r1, #12]
 8007fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fc4:	079d      	lsls	r5, r3, #30
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	d507      	bpl.n	8007fdc <__smakebuf_r+0x1c>
 8007fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	6123      	str	r3, [r4, #16]
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	6163      	str	r3, [r4, #20]
 8007fd8:	b002      	add	sp, #8
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	ab01      	add	r3, sp, #4
 8007fde:	466a      	mov	r2, sp
 8007fe0:	f7ff ffc9 	bl	8007f76 <__swhatbuf_r>
 8007fe4:	9900      	ldr	r1, [sp, #0]
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f000 f881 	bl	80080f0 <_malloc_r>
 8007fee:	b948      	cbnz	r0, 8008004 <__smakebuf_r+0x44>
 8007ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff4:	059a      	lsls	r2, r3, #22
 8007ff6:	d4ef      	bmi.n	8007fd8 <__smakebuf_r+0x18>
 8007ff8:	f023 0303 	bic.w	r3, r3, #3
 8007ffc:	f043 0302 	orr.w	r3, r3, #2
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	e7e3      	b.n	8007fcc <__smakebuf_r+0xc>
 8008004:	4b0d      	ldr	r3, [pc, #52]	; (800803c <__smakebuf_r+0x7c>)
 8008006:	62b3      	str	r3, [r6, #40]	; 0x28
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	6020      	str	r0, [r4, #0]
 800800c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	9b00      	ldr	r3, [sp, #0]
 8008014:	6163      	str	r3, [r4, #20]
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	6120      	str	r0, [r4, #16]
 800801a:	b15b      	cbz	r3, 8008034 <__smakebuf_r+0x74>
 800801c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008020:	4630      	mov	r0, r6
 8008022:	f000 fca9 	bl	8008978 <_isatty_r>
 8008026:	b128      	cbz	r0, 8008034 <__smakebuf_r+0x74>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f023 0303 	bic.w	r3, r3, #3
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	89a0      	ldrh	r0, [r4, #12]
 8008036:	4305      	orrs	r5, r0
 8008038:	81a5      	strh	r5, [r4, #12]
 800803a:	e7cd      	b.n	8007fd8 <__smakebuf_r+0x18>
 800803c:	08007d15 	.word	0x08007d15

08008040 <malloc>:
 8008040:	4b02      	ldr	r3, [pc, #8]	; (800804c <malloc+0xc>)
 8008042:	4601      	mov	r1, r0
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	f000 b853 	b.w	80080f0 <_malloc_r>
 800804a:	bf00      	nop
 800804c:	20000064 	.word	0x20000064

08008050 <_free_r>:
 8008050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008052:	2900      	cmp	r1, #0
 8008054:	d048      	beq.n	80080e8 <_free_r+0x98>
 8008056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805a:	9001      	str	r0, [sp, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f1a1 0404 	sub.w	r4, r1, #4
 8008062:	bfb8      	it	lt
 8008064:	18e4      	addlt	r4, r4, r3
 8008066:	f000 fca9 	bl	80089bc <__malloc_lock>
 800806a:	4a20      	ldr	r2, [pc, #128]	; (80080ec <_free_r+0x9c>)
 800806c:	9801      	ldr	r0, [sp, #4]
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	4615      	mov	r5, r2
 8008072:	b933      	cbnz	r3, 8008082 <_free_r+0x32>
 8008074:	6063      	str	r3, [r4, #4]
 8008076:	6014      	str	r4, [r2, #0]
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800807e:	f000 bca3 	b.w	80089c8 <__malloc_unlock>
 8008082:	42a3      	cmp	r3, r4
 8008084:	d90b      	bls.n	800809e <_free_r+0x4e>
 8008086:	6821      	ldr	r1, [r4, #0]
 8008088:	1862      	adds	r2, r4, r1
 800808a:	4293      	cmp	r3, r2
 800808c:	bf04      	itt	eq
 800808e:	681a      	ldreq	r2, [r3, #0]
 8008090:	685b      	ldreq	r3, [r3, #4]
 8008092:	6063      	str	r3, [r4, #4]
 8008094:	bf04      	itt	eq
 8008096:	1852      	addeq	r2, r2, r1
 8008098:	6022      	streq	r2, [r4, #0]
 800809a:	602c      	str	r4, [r5, #0]
 800809c:	e7ec      	b.n	8008078 <_free_r+0x28>
 800809e:	461a      	mov	r2, r3
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	b10b      	cbz	r3, 80080a8 <_free_r+0x58>
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	d9fa      	bls.n	800809e <_free_r+0x4e>
 80080a8:	6811      	ldr	r1, [r2, #0]
 80080aa:	1855      	adds	r5, r2, r1
 80080ac:	42a5      	cmp	r5, r4
 80080ae:	d10b      	bne.n	80080c8 <_free_r+0x78>
 80080b0:	6824      	ldr	r4, [r4, #0]
 80080b2:	4421      	add	r1, r4
 80080b4:	1854      	adds	r4, r2, r1
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	6011      	str	r1, [r2, #0]
 80080ba:	d1dd      	bne.n	8008078 <_free_r+0x28>
 80080bc:	681c      	ldr	r4, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	6053      	str	r3, [r2, #4]
 80080c2:	4421      	add	r1, r4
 80080c4:	6011      	str	r1, [r2, #0]
 80080c6:	e7d7      	b.n	8008078 <_free_r+0x28>
 80080c8:	d902      	bls.n	80080d0 <_free_r+0x80>
 80080ca:	230c      	movs	r3, #12
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	e7d3      	b.n	8008078 <_free_r+0x28>
 80080d0:	6825      	ldr	r5, [r4, #0]
 80080d2:	1961      	adds	r1, r4, r5
 80080d4:	428b      	cmp	r3, r1
 80080d6:	bf04      	itt	eq
 80080d8:	6819      	ldreq	r1, [r3, #0]
 80080da:	685b      	ldreq	r3, [r3, #4]
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	bf04      	itt	eq
 80080e0:	1949      	addeq	r1, r1, r5
 80080e2:	6021      	streq	r1, [r4, #0]
 80080e4:	6054      	str	r4, [r2, #4]
 80080e6:	e7c7      	b.n	8008078 <_free_r+0x28>
 80080e8:	b003      	add	sp, #12
 80080ea:	bd30      	pop	{r4, r5, pc}
 80080ec:	2000012c 	.word	0x2000012c

080080f0 <_malloc_r>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	1ccd      	adds	r5, r1, #3
 80080f4:	f025 0503 	bic.w	r5, r5, #3
 80080f8:	3508      	adds	r5, #8
 80080fa:	2d0c      	cmp	r5, #12
 80080fc:	bf38      	it	cc
 80080fe:	250c      	movcc	r5, #12
 8008100:	2d00      	cmp	r5, #0
 8008102:	4606      	mov	r6, r0
 8008104:	db01      	blt.n	800810a <_malloc_r+0x1a>
 8008106:	42a9      	cmp	r1, r5
 8008108:	d903      	bls.n	8008112 <_malloc_r+0x22>
 800810a:	230c      	movs	r3, #12
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	2000      	movs	r0, #0
 8008110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008112:	f000 fc53 	bl	80089bc <__malloc_lock>
 8008116:	4921      	ldr	r1, [pc, #132]	; (800819c <_malloc_r+0xac>)
 8008118:	680a      	ldr	r2, [r1, #0]
 800811a:	4614      	mov	r4, r2
 800811c:	b99c      	cbnz	r4, 8008146 <_malloc_r+0x56>
 800811e:	4f20      	ldr	r7, [pc, #128]	; (80081a0 <_malloc_r+0xb0>)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	b923      	cbnz	r3, 800812e <_malloc_r+0x3e>
 8008124:	4621      	mov	r1, r4
 8008126:	4630      	mov	r0, r6
 8008128:	f000 fb9e 	bl	8008868 <_sbrk_r>
 800812c:	6038      	str	r0, [r7, #0]
 800812e:	4629      	mov	r1, r5
 8008130:	4630      	mov	r0, r6
 8008132:	f000 fb99 	bl	8008868 <_sbrk_r>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	d123      	bne.n	8008182 <_malloc_r+0x92>
 800813a:	230c      	movs	r3, #12
 800813c:	6033      	str	r3, [r6, #0]
 800813e:	4630      	mov	r0, r6
 8008140:	f000 fc42 	bl	80089c8 <__malloc_unlock>
 8008144:	e7e3      	b.n	800810e <_malloc_r+0x1e>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	1b5b      	subs	r3, r3, r5
 800814a:	d417      	bmi.n	800817c <_malloc_r+0x8c>
 800814c:	2b0b      	cmp	r3, #11
 800814e:	d903      	bls.n	8008158 <_malloc_r+0x68>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	441c      	add	r4, r3
 8008154:	6025      	str	r5, [r4, #0]
 8008156:	e004      	b.n	8008162 <_malloc_r+0x72>
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	42a2      	cmp	r2, r4
 800815c:	bf0c      	ite	eq
 800815e:	600b      	streq	r3, [r1, #0]
 8008160:	6053      	strne	r3, [r2, #4]
 8008162:	4630      	mov	r0, r6
 8008164:	f000 fc30 	bl	80089c8 <__malloc_unlock>
 8008168:	f104 000b 	add.w	r0, r4, #11
 800816c:	1d23      	adds	r3, r4, #4
 800816e:	f020 0007 	bic.w	r0, r0, #7
 8008172:	1ac2      	subs	r2, r0, r3
 8008174:	d0cc      	beq.n	8008110 <_malloc_r+0x20>
 8008176:	1a1b      	subs	r3, r3, r0
 8008178:	50a3      	str	r3, [r4, r2]
 800817a:	e7c9      	b.n	8008110 <_malloc_r+0x20>
 800817c:	4622      	mov	r2, r4
 800817e:	6864      	ldr	r4, [r4, #4]
 8008180:	e7cc      	b.n	800811c <_malloc_r+0x2c>
 8008182:	1cc4      	adds	r4, r0, #3
 8008184:	f024 0403 	bic.w	r4, r4, #3
 8008188:	42a0      	cmp	r0, r4
 800818a:	d0e3      	beq.n	8008154 <_malloc_r+0x64>
 800818c:	1a21      	subs	r1, r4, r0
 800818e:	4630      	mov	r0, r6
 8008190:	f000 fb6a 	bl	8008868 <_sbrk_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d1dd      	bne.n	8008154 <_malloc_r+0x64>
 8008198:	e7cf      	b.n	800813a <_malloc_r+0x4a>
 800819a:	bf00      	nop
 800819c:	2000012c 	.word	0x2000012c
 80081a0:	20000130 	.word	0x20000130

080081a4 <__sfputc_r>:
 80081a4:	6893      	ldr	r3, [r2, #8]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	b410      	push	{r4}
 80081ac:	6093      	str	r3, [r2, #8]
 80081ae:	da08      	bge.n	80081c2 <__sfputc_r+0x1e>
 80081b0:	6994      	ldr	r4, [r2, #24]
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	db01      	blt.n	80081ba <__sfputc_r+0x16>
 80081b6:	290a      	cmp	r1, #10
 80081b8:	d103      	bne.n	80081c2 <__sfputc_r+0x1e>
 80081ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081be:	f7ff bbf1 	b.w	80079a4 <__swbuf_r>
 80081c2:	6813      	ldr	r3, [r2, #0]
 80081c4:	1c58      	adds	r0, r3, #1
 80081c6:	6010      	str	r0, [r2, #0]
 80081c8:	7019      	strb	r1, [r3, #0]
 80081ca:	4608      	mov	r0, r1
 80081cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <__sfputs_r>:
 80081d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	18d5      	adds	r5, r2, r3
 80081dc:	42ac      	cmp	r4, r5
 80081de:	d101      	bne.n	80081e4 <__sfputs_r+0x12>
 80081e0:	2000      	movs	r0, #0
 80081e2:	e007      	b.n	80081f4 <__sfputs_r+0x22>
 80081e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e8:	463a      	mov	r2, r7
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff ffda 	bl	80081a4 <__sfputc_r>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d1f3      	bne.n	80081dc <__sfputs_r+0xa>
 80081f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081f8 <_vfiprintf_r>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	460d      	mov	r5, r1
 80081fe:	b09d      	sub	sp, #116	; 0x74
 8008200:	4614      	mov	r4, r2
 8008202:	4698      	mov	r8, r3
 8008204:	4606      	mov	r6, r0
 8008206:	b118      	cbz	r0, 8008210 <_vfiprintf_r+0x18>
 8008208:	6983      	ldr	r3, [r0, #24]
 800820a:	b90b      	cbnz	r3, 8008210 <_vfiprintf_r+0x18>
 800820c:	f7ff fdb6 	bl	8007d7c <__sinit>
 8008210:	4b89      	ldr	r3, [pc, #548]	; (8008438 <_vfiprintf_r+0x240>)
 8008212:	429d      	cmp	r5, r3
 8008214:	d11b      	bne.n	800824e <_vfiprintf_r+0x56>
 8008216:	6875      	ldr	r5, [r6, #4]
 8008218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800821a:	07d9      	lsls	r1, r3, #31
 800821c:	d405      	bmi.n	800822a <_vfiprintf_r+0x32>
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	059a      	lsls	r2, r3, #22
 8008222:	d402      	bmi.n	800822a <_vfiprintf_r+0x32>
 8008224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008226:	f7ff fea4 	bl	8007f72 <__retarget_lock_acquire_recursive>
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	071b      	lsls	r3, r3, #28
 800822e:	d501      	bpl.n	8008234 <_vfiprintf_r+0x3c>
 8008230:	692b      	ldr	r3, [r5, #16]
 8008232:	b9eb      	cbnz	r3, 8008270 <_vfiprintf_r+0x78>
 8008234:	4629      	mov	r1, r5
 8008236:	4630      	mov	r0, r6
 8008238:	f7ff fc06 	bl	8007a48 <__swsetup_r>
 800823c:	b1c0      	cbz	r0, 8008270 <_vfiprintf_r+0x78>
 800823e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008240:	07dc      	lsls	r4, r3, #31
 8008242:	d50e      	bpl.n	8008262 <_vfiprintf_r+0x6a>
 8008244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008248:	b01d      	add	sp, #116	; 0x74
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	4b7b      	ldr	r3, [pc, #492]	; (800843c <_vfiprintf_r+0x244>)
 8008250:	429d      	cmp	r5, r3
 8008252:	d101      	bne.n	8008258 <_vfiprintf_r+0x60>
 8008254:	68b5      	ldr	r5, [r6, #8]
 8008256:	e7df      	b.n	8008218 <_vfiprintf_r+0x20>
 8008258:	4b79      	ldr	r3, [pc, #484]	; (8008440 <_vfiprintf_r+0x248>)
 800825a:	429d      	cmp	r5, r3
 800825c:	bf08      	it	eq
 800825e:	68f5      	ldreq	r5, [r6, #12]
 8008260:	e7da      	b.n	8008218 <_vfiprintf_r+0x20>
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	0598      	lsls	r0, r3, #22
 8008266:	d4ed      	bmi.n	8008244 <_vfiprintf_r+0x4c>
 8008268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800826a:	f7ff fe83 	bl	8007f74 <__retarget_lock_release_recursive>
 800826e:	e7e9      	b.n	8008244 <_vfiprintf_r+0x4c>
 8008270:	2300      	movs	r3, #0
 8008272:	9309      	str	r3, [sp, #36]	; 0x24
 8008274:	2320      	movs	r3, #32
 8008276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800827a:	f8cd 800c 	str.w	r8, [sp, #12]
 800827e:	2330      	movs	r3, #48	; 0x30
 8008280:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008444 <_vfiprintf_r+0x24c>
 8008284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008288:	f04f 0901 	mov.w	r9, #1
 800828c:	4623      	mov	r3, r4
 800828e:	469a      	mov	sl, r3
 8008290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008294:	b10a      	cbz	r2, 800829a <_vfiprintf_r+0xa2>
 8008296:	2a25      	cmp	r2, #37	; 0x25
 8008298:	d1f9      	bne.n	800828e <_vfiprintf_r+0x96>
 800829a:	ebba 0b04 	subs.w	fp, sl, r4
 800829e:	d00b      	beq.n	80082b8 <_vfiprintf_r+0xc0>
 80082a0:	465b      	mov	r3, fp
 80082a2:	4622      	mov	r2, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ff93 	bl	80081d2 <__sfputs_r>
 80082ac:	3001      	adds	r0, #1
 80082ae:	f000 80aa 	beq.w	8008406 <_vfiprintf_r+0x20e>
 80082b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082b4:	445a      	add	r2, fp
 80082b6:	9209      	str	r2, [sp, #36]	; 0x24
 80082b8:	f89a 3000 	ldrb.w	r3, [sl]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 80a2 	beq.w	8008406 <_vfiprintf_r+0x20e>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082cc:	f10a 0a01 	add.w	sl, sl, #1
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	9307      	str	r3, [sp, #28]
 80082d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082d8:	931a      	str	r3, [sp, #104]	; 0x68
 80082da:	4654      	mov	r4, sl
 80082dc:	2205      	movs	r2, #5
 80082de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e2:	4858      	ldr	r0, [pc, #352]	; (8008444 <_vfiprintf_r+0x24c>)
 80082e4:	f7f7 ff84 	bl	80001f0 <memchr>
 80082e8:	9a04      	ldr	r2, [sp, #16]
 80082ea:	b9d8      	cbnz	r0, 8008324 <_vfiprintf_r+0x12c>
 80082ec:	06d1      	lsls	r1, r2, #27
 80082ee:	bf44      	itt	mi
 80082f0:	2320      	movmi	r3, #32
 80082f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082f6:	0713      	lsls	r3, r2, #28
 80082f8:	bf44      	itt	mi
 80082fa:	232b      	movmi	r3, #43	; 0x2b
 80082fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008300:	f89a 3000 	ldrb.w	r3, [sl]
 8008304:	2b2a      	cmp	r3, #42	; 0x2a
 8008306:	d015      	beq.n	8008334 <_vfiprintf_r+0x13c>
 8008308:	9a07      	ldr	r2, [sp, #28]
 800830a:	4654      	mov	r4, sl
 800830c:	2000      	movs	r0, #0
 800830e:	f04f 0c0a 	mov.w	ip, #10
 8008312:	4621      	mov	r1, r4
 8008314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008318:	3b30      	subs	r3, #48	; 0x30
 800831a:	2b09      	cmp	r3, #9
 800831c:	d94e      	bls.n	80083bc <_vfiprintf_r+0x1c4>
 800831e:	b1b0      	cbz	r0, 800834e <_vfiprintf_r+0x156>
 8008320:	9207      	str	r2, [sp, #28]
 8008322:	e014      	b.n	800834e <_vfiprintf_r+0x156>
 8008324:	eba0 0308 	sub.w	r3, r0, r8
 8008328:	fa09 f303 	lsl.w	r3, r9, r3
 800832c:	4313      	orrs	r3, r2
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	46a2      	mov	sl, r4
 8008332:	e7d2      	b.n	80082da <_vfiprintf_r+0xe2>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	1d19      	adds	r1, r3, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	9103      	str	r1, [sp, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfbb      	ittet	lt
 8008340:	425b      	neglt	r3, r3
 8008342:	f042 0202 	orrlt.w	r2, r2, #2
 8008346:	9307      	strge	r3, [sp, #28]
 8008348:	9307      	strlt	r3, [sp, #28]
 800834a:	bfb8      	it	lt
 800834c:	9204      	strlt	r2, [sp, #16]
 800834e:	7823      	ldrb	r3, [r4, #0]
 8008350:	2b2e      	cmp	r3, #46	; 0x2e
 8008352:	d10c      	bne.n	800836e <_vfiprintf_r+0x176>
 8008354:	7863      	ldrb	r3, [r4, #1]
 8008356:	2b2a      	cmp	r3, #42	; 0x2a
 8008358:	d135      	bne.n	80083c6 <_vfiprintf_r+0x1ce>
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	1d1a      	adds	r2, r3, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	9203      	str	r2, [sp, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	bfb8      	it	lt
 8008366:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800836a:	3402      	adds	r4, #2
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008454 <_vfiprintf_r+0x25c>
 8008372:	7821      	ldrb	r1, [r4, #0]
 8008374:	2203      	movs	r2, #3
 8008376:	4650      	mov	r0, sl
 8008378:	f7f7 ff3a 	bl	80001f0 <memchr>
 800837c:	b140      	cbz	r0, 8008390 <_vfiprintf_r+0x198>
 800837e:	2340      	movs	r3, #64	; 0x40
 8008380:	eba0 000a 	sub.w	r0, r0, sl
 8008384:	fa03 f000 	lsl.w	r0, r3, r0
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	4303      	orrs	r3, r0
 800838c:	3401      	adds	r4, #1
 800838e:	9304      	str	r3, [sp, #16]
 8008390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008394:	482c      	ldr	r0, [pc, #176]	; (8008448 <_vfiprintf_r+0x250>)
 8008396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800839a:	2206      	movs	r2, #6
 800839c:	f7f7 ff28 	bl	80001f0 <memchr>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d03f      	beq.n	8008424 <_vfiprintf_r+0x22c>
 80083a4:	4b29      	ldr	r3, [pc, #164]	; (800844c <_vfiprintf_r+0x254>)
 80083a6:	bb1b      	cbnz	r3, 80083f0 <_vfiprintf_r+0x1f8>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	3307      	adds	r3, #7
 80083ac:	f023 0307 	bic.w	r3, r3, #7
 80083b0:	3308      	adds	r3, #8
 80083b2:	9303      	str	r3, [sp, #12]
 80083b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b6:	443b      	add	r3, r7
 80083b8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ba:	e767      	b.n	800828c <_vfiprintf_r+0x94>
 80083bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c0:	460c      	mov	r4, r1
 80083c2:	2001      	movs	r0, #1
 80083c4:	e7a5      	b.n	8008312 <_vfiprintf_r+0x11a>
 80083c6:	2300      	movs	r3, #0
 80083c8:	3401      	adds	r4, #1
 80083ca:	9305      	str	r3, [sp, #20]
 80083cc:	4619      	mov	r1, r3
 80083ce:	f04f 0c0a 	mov.w	ip, #10
 80083d2:	4620      	mov	r0, r4
 80083d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083d8:	3a30      	subs	r2, #48	; 0x30
 80083da:	2a09      	cmp	r2, #9
 80083dc:	d903      	bls.n	80083e6 <_vfiprintf_r+0x1ee>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0c5      	beq.n	800836e <_vfiprintf_r+0x176>
 80083e2:	9105      	str	r1, [sp, #20]
 80083e4:	e7c3      	b.n	800836e <_vfiprintf_r+0x176>
 80083e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ea:	4604      	mov	r4, r0
 80083ec:	2301      	movs	r3, #1
 80083ee:	e7f0      	b.n	80083d2 <_vfiprintf_r+0x1da>
 80083f0:	ab03      	add	r3, sp, #12
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	462a      	mov	r2, r5
 80083f6:	4b16      	ldr	r3, [pc, #88]	; (8008450 <_vfiprintf_r+0x258>)
 80083f8:	a904      	add	r1, sp, #16
 80083fa:	4630      	mov	r0, r6
 80083fc:	f3af 8000 	nop.w
 8008400:	4607      	mov	r7, r0
 8008402:	1c78      	adds	r0, r7, #1
 8008404:	d1d6      	bne.n	80083b4 <_vfiprintf_r+0x1bc>
 8008406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008408:	07d9      	lsls	r1, r3, #31
 800840a:	d405      	bmi.n	8008418 <_vfiprintf_r+0x220>
 800840c:	89ab      	ldrh	r3, [r5, #12]
 800840e:	059a      	lsls	r2, r3, #22
 8008410:	d402      	bmi.n	8008418 <_vfiprintf_r+0x220>
 8008412:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008414:	f7ff fdae 	bl	8007f74 <__retarget_lock_release_recursive>
 8008418:	89ab      	ldrh	r3, [r5, #12]
 800841a:	065b      	lsls	r3, r3, #25
 800841c:	f53f af12 	bmi.w	8008244 <_vfiprintf_r+0x4c>
 8008420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008422:	e711      	b.n	8008248 <_vfiprintf_r+0x50>
 8008424:	ab03      	add	r3, sp, #12
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	462a      	mov	r2, r5
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <_vfiprintf_r+0x258>)
 800842c:	a904      	add	r1, sp, #16
 800842e:	4630      	mov	r0, r6
 8008430:	f000 f880 	bl	8008534 <_printf_i>
 8008434:	e7e4      	b.n	8008400 <_vfiprintf_r+0x208>
 8008436:	bf00      	nop
 8008438:	08008e1c 	.word	0x08008e1c
 800843c:	08008e3c 	.word	0x08008e3c
 8008440:	08008dfc 	.word	0x08008dfc
 8008444:	08008e5c 	.word	0x08008e5c
 8008448:	08008e66 	.word	0x08008e66
 800844c:	00000000 	.word	0x00000000
 8008450:	080081d3 	.word	0x080081d3
 8008454:	08008e62 	.word	0x08008e62

08008458 <_printf_common>:
 8008458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800845c:	4616      	mov	r6, r2
 800845e:	4699      	mov	r9, r3
 8008460:	688a      	ldr	r2, [r1, #8]
 8008462:	690b      	ldr	r3, [r1, #16]
 8008464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008468:	4293      	cmp	r3, r2
 800846a:	bfb8      	it	lt
 800846c:	4613      	movlt	r3, r2
 800846e:	6033      	str	r3, [r6, #0]
 8008470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008474:	4607      	mov	r7, r0
 8008476:	460c      	mov	r4, r1
 8008478:	b10a      	cbz	r2, 800847e <_printf_common+0x26>
 800847a:	3301      	adds	r3, #1
 800847c:	6033      	str	r3, [r6, #0]
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	0699      	lsls	r1, r3, #26
 8008482:	bf42      	ittt	mi
 8008484:	6833      	ldrmi	r3, [r6, #0]
 8008486:	3302      	addmi	r3, #2
 8008488:	6033      	strmi	r3, [r6, #0]
 800848a:	6825      	ldr	r5, [r4, #0]
 800848c:	f015 0506 	ands.w	r5, r5, #6
 8008490:	d106      	bne.n	80084a0 <_printf_common+0x48>
 8008492:	f104 0a19 	add.w	sl, r4, #25
 8008496:	68e3      	ldr	r3, [r4, #12]
 8008498:	6832      	ldr	r2, [r6, #0]
 800849a:	1a9b      	subs	r3, r3, r2
 800849c:	42ab      	cmp	r3, r5
 800849e:	dc26      	bgt.n	80084ee <_printf_common+0x96>
 80084a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084a4:	1e13      	subs	r3, r2, #0
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	bf18      	it	ne
 80084aa:	2301      	movne	r3, #1
 80084ac:	0692      	lsls	r2, r2, #26
 80084ae:	d42b      	bmi.n	8008508 <_printf_common+0xb0>
 80084b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084b4:	4649      	mov	r1, r9
 80084b6:	4638      	mov	r0, r7
 80084b8:	47c0      	blx	r8
 80084ba:	3001      	adds	r0, #1
 80084bc:	d01e      	beq.n	80084fc <_printf_common+0xa4>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	68e5      	ldr	r5, [r4, #12]
 80084c2:	6832      	ldr	r2, [r6, #0]
 80084c4:	f003 0306 	and.w	r3, r3, #6
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	bf08      	it	eq
 80084cc:	1aad      	subeq	r5, r5, r2
 80084ce:	68a3      	ldr	r3, [r4, #8]
 80084d0:	6922      	ldr	r2, [r4, #16]
 80084d2:	bf0c      	ite	eq
 80084d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084d8:	2500      	movne	r5, #0
 80084da:	4293      	cmp	r3, r2
 80084dc:	bfc4      	itt	gt
 80084de:	1a9b      	subgt	r3, r3, r2
 80084e0:	18ed      	addgt	r5, r5, r3
 80084e2:	2600      	movs	r6, #0
 80084e4:	341a      	adds	r4, #26
 80084e6:	42b5      	cmp	r5, r6
 80084e8:	d11a      	bne.n	8008520 <_printf_common+0xc8>
 80084ea:	2000      	movs	r0, #0
 80084ec:	e008      	b.n	8008500 <_printf_common+0xa8>
 80084ee:	2301      	movs	r3, #1
 80084f0:	4652      	mov	r2, sl
 80084f2:	4649      	mov	r1, r9
 80084f4:	4638      	mov	r0, r7
 80084f6:	47c0      	blx	r8
 80084f8:	3001      	adds	r0, #1
 80084fa:	d103      	bne.n	8008504 <_printf_common+0xac>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008504:	3501      	adds	r5, #1
 8008506:	e7c6      	b.n	8008496 <_printf_common+0x3e>
 8008508:	18e1      	adds	r1, r4, r3
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	2030      	movs	r0, #48	; 0x30
 800850e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008512:	4422      	add	r2, r4
 8008514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800851c:	3302      	adds	r3, #2
 800851e:	e7c7      	b.n	80084b0 <_printf_common+0x58>
 8008520:	2301      	movs	r3, #1
 8008522:	4622      	mov	r2, r4
 8008524:	4649      	mov	r1, r9
 8008526:	4638      	mov	r0, r7
 8008528:	47c0      	blx	r8
 800852a:	3001      	adds	r0, #1
 800852c:	d0e6      	beq.n	80084fc <_printf_common+0xa4>
 800852e:	3601      	adds	r6, #1
 8008530:	e7d9      	b.n	80084e6 <_printf_common+0x8e>
	...

08008534 <_printf_i>:
 8008534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	460c      	mov	r4, r1
 800853a:	4691      	mov	r9, r2
 800853c:	7e27      	ldrb	r7, [r4, #24]
 800853e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008540:	2f78      	cmp	r7, #120	; 0x78
 8008542:	4680      	mov	r8, r0
 8008544:	469a      	mov	sl, r3
 8008546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800854a:	d807      	bhi.n	800855c <_printf_i+0x28>
 800854c:	2f62      	cmp	r7, #98	; 0x62
 800854e:	d80a      	bhi.n	8008566 <_printf_i+0x32>
 8008550:	2f00      	cmp	r7, #0
 8008552:	f000 80d8 	beq.w	8008706 <_printf_i+0x1d2>
 8008556:	2f58      	cmp	r7, #88	; 0x58
 8008558:	f000 80a3 	beq.w	80086a2 <_printf_i+0x16e>
 800855c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008564:	e03a      	b.n	80085dc <_printf_i+0xa8>
 8008566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800856a:	2b15      	cmp	r3, #21
 800856c:	d8f6      	bhi.n	800855c <_printf_i+0x28>
 800856e:	a001      	add	r0, pc, #4	; (adr r0, 8008574 <_printf_i+0x40>)
 8008570:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008574:	080085cd 	.word	0x080085cd
 8008578:	080085e1 	.word	0x080085e1
 800857c:	0800855d 	.word	0x0800855d
 8008580:	0800855d 	.word	0x0800855d
 8008584:	0800855d 	.word	0x0800855d
 8008588:	0800855d 	.word	0x0800855d
 800858c:	080085e1 	.word	0x080085e1
 8008590:	0800855d 	.word	0x0800855d
 8008594:	0800855d 	.word	0x0800855d
 8008598:	0800855d 	.word	0x0800855d
 800859c:	0800855d 	.word	0x0800855d
 80085a0:	080086ed 	.word	0x080086ed
 80085a4:	08008611 	.word	0x08008611
 80085a8:	080086cf 	.word	0x080086cf
 80085ac:	0800855d 	.word	0x0800855d
 80085b0:	0800855d 	.word	0x0800855d
 80085b4:	0800870f 	.word	0x0800870f
 80085b8:	0800855d 	.word	0x0800855d
 80085bc:	08008611 	.word	0x08008611
 80085c0:	0800855d 	.word	0x0800855d
 80085c4:	0800855d 	.word	0x0800855d
 80085c8:	080086d7 	.word	0x080086d7
 80085cc:	680b      	ldr	r3, [r1, #0]
 80085ce:	1d1a      	adds	r2, r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	600a      	str	r2, [r1, #0]
 80085d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085dc:	2301      	movs	r3, #1
 80085de:	e0a3      	b.n	8008728 <_printf_i+0x1f4>
 80085e0:	6825      	ldr	r5, [r4, #0]
 80085e2:	6808      	ldr	r0, [r1, #0]
 80085e4:	062e      	lsls	r6, r5, #24
 80085e6:	f100 0304 	add.w	r3, r0, #4
 80085ea:	d50a      	bpl.n	8008602 <_printf_i+0xce>
 80085ec:	6805      	ldr	r5, [r0, #0]
 80085ee:	600b      	str	r3, [r1, #0]
 80085f0:	2d00      	cmp	r5, #0
 80085f2:	da03      	bge.n	80085fc <_printf_i+0xc8>
 80085f4:	232d      	movs	r3, #45	; 0x2d
 80085f6:	426d      	negs	r5, r5
 80085f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085fc:	485e      	ldr	r0, [pc, #376]	; (8008778 <_printf_i+0x244>)
 80085fe:	230a      	movs	r3, #10
 8008600:	e019      	b.n	8008636 <_printf_i+0x102>
 8008602:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008606:	6805      	ldr	r5, [r0, #0]
 8008608:	600b      	str	r3, [r1, #0]
 800860a:	bf18      	it	ne
 800860c:	b22d      	sxthne	r5, r5
 800860e:	e7ef      	b.n	80085f0 <_printf_i+0xbc>
 8008610:	680b      	ldr	r3, [r1, #0]
 8008612:	6825      	ldr	r5, [r4, #0]
 8008614:	1d18      	adds	r0, r3, #4
 8008616:	6008      	str	r0, [r1, #0]
 8008618:	0628      	lsls	r0, r5, #24
 800861a:	d501      	bpl.n	8008620 <_printf_i+0xec>
 800861c:	681d      	ldr	r5, [r3, #0]
 800861e:	e002      	b.n	8008626 <_printf_i+0xf2>
 8008620:	0669      	lsls	r1, r5, #25
 8008622:	d5fb      	bpl.n	800861c <_printf_i+0xe8>
 8008624:	881d      	ldrh	r5, [r3, #0]
 8008626:	4854      	ldr	r0, [pc, #336]	; (8008778 <_printf_i+0x244>)
 8008628:	2f6f      	cmp	r7, #111	; 0x6f
 800862a:	bf0c      	ite	eq
 800862c:	2308      	moveq	r3, #8
 800862e:	230a      	movne	r3, #10
 8008630:	2100      	movs	r1, #0
 8008632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008636:	6866      	ldr	r6, [r4, #4]
 8008638:	60a6      	str	r6, [r4, #8]
 800863a:	2e00      	cmp	r6, #0
 800863c:	bfa2      	ittt	ge
 800863e:	6821      	ldrge	r1, [r4, #0]
 8008640:	f021 0104 	bicge.w	r1, r1, #4
 8008644:	6021      	strge	r1, [r4, #0]
 8008646:	b90d      	cbnz	r5, 800864c <_printf_i+0x118>
 8008648:	2e00      	cmp	r6, #0
 800864a:	d04d      	beq.n	80086e8 <_printf_i+0x1b4>
 800864c:	4616      	mov	r6, r2
 800864e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008652:	fb03 5711 	mls	r7, r3, r1, r5
 8008656:	5dc7      	ldrb	r7, [r0, r7]
 8008658:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800865c:	462f      	mov	r7, r5
 800865e:	42bb      	cmp	r3, r7
 8008660:	460d      	mov	r5, r1
 8008662:	d9f4      	bls.n	800864e <_printf_i+0x11a>
 8008664:	2b08      	cmp	r3, #8
 8008666:	d10b      	bne.n	8008680 <_printf_i+0x14c>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	07df      	lsls	r7, r3, #31
 800866c:	d508      	bpl.n	8008680 <_printf_i+0x14c>
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	6861      	ldr	r1, [r4, #4]
 8008672:	4299      	cmp	r1, r3
 8008674:	bfde      	ittt	le
 8008676:	2330      	movle	r3, #48	; 0x30
 8008678:	f806 3c01 	strble.w	r3, [r6, #-1]
 800867c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008680:	1b92      	subs	r2, r2, r6
 8008682:	6122      	str	r2, [r4, #16]
 8008684:	f8cd a000 	str.w	sl, [sp]
 8008688:	464b      	mov	r3, r9
 800868a:	aa03      	add	r2, sp, #12
 800868c:	4621      	mov	r1, r4
 800868e:	4640      	mov	r0, r8
 8008690:	f7ff fee2 	bl	8008458 <_printf_common>
 8008694:	3001      	adds	r0, #1
 8008696:	d14c      	bne.n	8008732 <_printf_i+0x1fe>
 8008698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800869c:	b004      	add	sp, #16
 800869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a2:	4835      	ldr	r0, [pc, #212]	; (8008778 <_printf_i+0x244>)
 80086a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	680e      	ldr	r6, [r1, #0]
 80086ac:	061f      	lsls	r7, r3, #24
 80086ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80086b2:	600e      	str	r6, [r1, #0]
 80086b4:	d514      	bpl.n	80086e0 <_printf_i+0x1ac>
 80086b6:	07d9      	lsls	r1, r3, #31
 80086b8:	bf44      	itt	mi
 80086ba:	f043 0320 	orrmi.w	r3, r3, #32
 80086be:	6023      	strmi	r3, [r4, #0]
 80086c0:	b91d      	cbnz	r5, 80086ca <_printf_i+0x196>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	f023 0320 	bic.w	r3, r3, #32
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	2310      	movs	r3, #16
 80086cc:	e7b0      	b.n	8008630 <_printf_i+0xfc>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	f043 0320 	orr.w	r3, r3, #32
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	2378      	movs	r3, #120	; 0x78
 80086d8:	4828      	ldr	r0, [pc, #160]	; (800877c <_printf_i+0x248>)
 80086da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086de:	e7e3      	b.n	80086a8 <_printf_i+0x174>
 80086e0:	065e      	lsls	r6, r3, #25
 80086e2:	bf48      	it	mi
 80086e4:	b2ad      	uxthmi	r5, r5
 80086e6:	e7e6      	b.n	80086b6 <_printf_i+0x182>
 80086e8:	4616      	mov	r6, r2
 80086ea:	e7bb      	b.n	8008664 <_printf_i+0x130>
 80086ec:	680b      	ldr	r3, [r1, #0]
 80086ee:	6826      	ldr	r6, [r4, #0]
 80086f0:	6960      	ldr	r0, [r4, #20]
 80086f2:	1d1d      	adds	r5, r3, #4
 80086f4:	600d      	str	r5, [r1, #0]
 80086f6:	0635      	lsls	r5, r6, #24
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	d501      	bpl.n	8008700 <_printf_i+0x1cc>
 80086fc:	6018      	str	r0, [r3, #0]
 80086fe:	e002      	b.n	8008706 <_printf_i+0x1d2>
 8008700:	0671      	lsls	r1, r6, #25
 8008702:	d5fb      	bpl.n	80086fc <_printf_i+0x1c8>
 8008704:	8018      	strh	r0, [r3, #0]
 8008706:	2300      	movs	r3, #0
 8008708:	6123      	str	r3, [r4, #16]
 800870a:	4616      	mov	r6, r2
 800870c:	e7ba      	b.n	8008684 <_printf_i+0x150>
 800870e:	680b      	ldr	r3, [r1, #0]
 8008710:	1d1a      	adds	r2, r3, #4
 8008712:	600a      	str	r2, [r1, #0]
 8008714:	681e      	ldr	r6, [r3, #0]
 8008716:	6862      	ldr	r2, [r4, #4]
 8008718:	2100      	movs	r1, #0
 800871a:	4630      	mov	r0, r6
 800871c:	f7f7 fd68 	bl	80001f0 <memchr>
 8008720:	b108      	cbz	r0, 8008726 <_printf_i+0x1f2>
 8008722:	1b80      	subs	r0, r0, r6
 8008724:	6060      	str	r0, [r4, #4]
 8008726:	6863      	ldr	r3, [r4, #4]
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	2300      	movs	r3, #0
 800872c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008730:	e7a8      	b.n	8008684 <_printf_i+0x150>
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	4632      	mov	r2, r6
 8008736:	4649      	mov	r1, r9
 8008738:	4640      	mov	r0, r8
 800873a:	47d0      	blx	sl
 800873c:	3001      	adds	r0, #1
 800873e:	d0ab      	beq.n	8008698 <_printf_i+0x164>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	079b      	lsls	r3, r3, #30
 8008744:	d413      	bmi.n	800876e <_printf_i+0x23a>
 8008746:	68e0      	ldr	r0, [r4, #12]
 8008748:	9b03      	ldr	r3, [sp, #12]
 800874a:	4298      	cmp	r0, r3
 800874c:	bfb8      	it	lt
 800874e:	4618      	movlt	r0, r3
 8008750:	e7a4      	b.n	800869c <_printf_i+0x168>
 8008752:	2301      	movs	r3, #1
 8008754:	4632      	mov	r2, r6
 8008756:	4649      	mov	r1, r9
 8008758:	4640      	mov	r0, r8
 800875a:	47d0      	blx	sl
 800875c:	3001      	adds	r0, #1
 800875e:	d09b      	beq.n	8008698 <_printf_i+0x164>
 8008760:	3501      	adds	r5, #1
 8008762:	68e3      	ldr	r3, [r4, #12]
 8008764:	9903      	ldr	r1, [sp, #12]
 8008766:	1a5b      	subs	r3, r3, r1
 8008768:	42ab      	cmp	r3, r5
 800876a:	dcf2      	bgt.n	8008752 <_printf_i+0x21e>
 800876c:	e7eb      	b.n	8008746 <_printf_i+0x212>
 800876e:	2500      	movs	r5, #0
 8008770:	f104 0619 	add.w	r6, r4, #25
 8008774:	e7f5      	b.n	8008762 <_printf_i+0x22e>
 8008776:	bf00      	nop
 8008778:	08008e6d 	.word	0x08008e6d
 800877c:	08008e7e 	.word	0x08008e7e

08008780 <_putc_r>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	460d      	mov	r5, r1
 8008784:	4614      	mov	r4, r2
 8008786:	4606      	mov	r6, r0
 8008788:	b118      	cbz	r0, 8008792 <_putc_r+0x12>
 800878a:	6983      	ldr	r3, [r0, #24]
 800878c:	b90b      	cbnz	r3, 8008792 <_putc_r+0x12>
 800878e:	f7ff faf5 	bl	8007d7c <__sinit>
 8008792:	4b1c      	ldr	r3, [pc, #112]	; (8008804 <_putc_r+0x84>)
 8008794:	429c      	cmp	r4, r3
 8008796:	d124      	bne.n	80087e2 <_putc_r+0x62>
 8008798:	6874      	ldr	r4, [r6, #4]
 800879a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800879c:	07d8      	lsls	r0, r3, #31
 800879e:	d405      	bmi.n	80087ac <_putc_r+0x2c>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	0599      	lsls	r1, r3, #22
 80087a4:	d402      	bmi.n	80087ac <_putc_r+0x2c>
 80087a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087a8:	f7ff fbe3 	bl	8007f72 <__retarget_lock_acquire_recursive>
 80087ac:	68a3      	ldr	r3, [r4, #8]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	60a3      	str	r3, [r4, #8]
 80087b4:	da05      	bge.n	80087c2 <_putc_r+0x42>
 80087b6:	69a2      	ldr	r2, [r4, #24]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	db1c      	blt.n	80087f6 <_putc_r+0x76>
 80087bc:	b2eb      	uxtb	r3, r5
 80087be:	2b0a      	cmp	r3, #10
 80087c0:	d019      	beq.n	80087f6 <_putc_r+0x76>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	6022      	str	r2, [r4, #0]
 80087c8:	701d      	strb	r5, [r3, #0]
 80087ca:	b2ed      	uxtb	r5, r5
 80087cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087ce:	07da      	lsls	r2, r3, #31
 80087d0:	d405      	bmi.n	80087de <_putc_r+0x5e>
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	059b      	lsls	r3, r3, #22
 80087d6:	d402      	bmi.n	80087de <_putc_r+0x5e>
 80087d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087da:	f7ff fbcb 	bl	8007f74 <__retarget_lock_release_recursive>
 80087de:	4628      	mov	r0, r5
 80087e0:	bd70      	pop	{r4, r5, r6, pc}
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <_putc_r+0x88>)
 80087e4:	429c      	cmp	r4, r3
 80087e6:	d101      	bne.n	80087ec <_putc_r+0x6c>
 80087e8:	68b4      	ldr	r4, [r6, #8]
 80087ea:	e7d6      	b.n	800879a <_putc_r+0x1a>
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <_putc_r+0x8c>)
 80087ee:	429c      	cmp	r4, r3
 80087f0:	bf08      	it	eq
 80087f2:	68f4      	ldreq	r4, [r6, #12]
 80087f4:	e7d1      	b.n	800879a <_putc_r+0x1a>
 80087f6:	4629      	mov	r1, r5
 80087f8:	4622      	mov	r2, r4
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff f8d2 	bl	80079a4 <__swbuf_r>
 8008800:	4605      	mov	r5, r0
 8008802:	e7e3      	b.n	80087cc <_putc_r+0x4c>
 8008804:	08008e1c 	.word	0x08008e1c
 8008808:	08008e3c 	.word	0x08008e3c
 800880c:	08008dfc 	.word	0x08008dfc

08008810 <__srget_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	460c      	mov	r4, r1
 8008814:	4605      	mov	r5, r0
 8008816:	b118      	cbz	r0, 8008820 <__srget_r+0x10>
 8008818:	6983      	ldr	r3, [r0, #24]
 800881a:	b90b      	cbnz	r3, 8008820 <__srget_r+0x10>
 800881c:	f7ff faae 	bl	8007d7c <__sinit>
 8008820:	4b0e      	ldr	r3, [pc, #56]	; (800885c <__srget_r+0x4c>)
 8008822:	429c      	cmp	r4, r3
 8008824:	d10d      	bne.n	8008842 <__srget_r+0x32>
 8008826:	686c      	ldr	r4, [r5, #4]
 8008828:	4621      	mov	r1, r4
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f8ee 	bl	8008a0c <__srefill_r>
 8008830:	b988      	cbnz	r0, 8008856 <__srget_r+0x46>
 8008832:	6863      	ldr	r3, [r4, #4]
 8008834:	3b01      	subs	r3, #1
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	6022      	str	r2, [r4, #0]
 800883e:	7818      	ldrb	r0, [r3, #0]
 8008840:	bd38      	pop	{r3, r4, r5, pc}
 8008842:	4b07      	ldr	r3, [pc, #28]	; (8008860 <__srget_r+0x50>)
 8008844:	429c      	cmp	r4, r3
 8008846:	d101      	bne.n	800884c <__srget_r+0x3c>
 8008848:	68ac      	ldr	r4, [r5, #8]
 800884a:	e7ed      	b.n	8008828 <__srget_r+0x18>
 800884c:	4b05      	ldr	r3, [pc, #20]	; (8008864 <__srget_r+0x54>)
 800884e:	429c      	cmp	r4, r3
 8008850:	bf08      	it	eq
 8008852:	68ec      	ldreq	r4, [r5, #12]
 8008854:	e7e8      	b.n	8008828 <__srget_r+0x18>
 8008856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800885a:	e7f1      	b.n	8008840 <__srget_r+0x30>
 800885c:	08008e1c 	.word	0x08008e1c
 8008860:	08008e3c 	.word	0x08008e3c
 8008864:	08008dfc 	.word	0x08008dfc

08008868 <_sbrk_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d06      	ldr	r5, [pc, #24]	; (8008884 <_sbrk_r+0x1c>)
 800886c:	2300      	movs	r3, #0
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	f000 f954 	bl	8008b20 <_sbrk>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_sbrk_r+0x1a>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_sbrk_r+0x1a>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	2000031c 	.word	0x2000031c

08008888 <__sread>:
 8008888:	b510      	push	{r4, lr}
 800888a:	460c      	mov	r4, r1
 800888c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008890:	f000 f8a0 	bl	80089d4 <_read_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	bfab      	itete	ge
 8008898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800889a:	89a3      	ldrhlt	r3, [r4, #12]
 800889c:	181b      	addge	r3, r3, r0
 800889e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088a2:	bfac      	ite	ge
 80088a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80088a6:	81a3      	strhlt	r3, [r4, #12]
 80088a8:	bd10      	pop	{r4, pc}

080088aa <__swrite>:
 80088aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ae:	461f      	mov	r7, r3
 80088b0:	898b      	ldrh	r3, [r1, #12]
 80088b2:	05db      	lsls	r3, r3, #23
 80088b4:	4605      	mov	r5, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	4616      	mov	r6, r2
 80088ba:	d505      	bpl.n	80088c8 <__swrite+0x1e>
 80088bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c0:	2302      	movs	r3, #2
 80088c2:	2200      	movs	r2, #0
 80088c4:	f000 f868 	bl	8008998 <_lseek_r>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	4628      	mov	r0, r5
 80088da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088de:	f000 b817 	b.w	8008910 <_write_r>

080088e2 <__sseek>:
 80088e2:	b510      	push	{r4, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ea:	f000 f855 	bl	8008998 <_lseek_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	bf15      	itete	ne
 80088f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088fe:	81a3      	strheq	r3, [r4, #12]
 8008900:	bf18      	it	ne
 8008902:	81a3      	strhne	r3, [r4, #12]
 8008904:	bd10      	pop	{r4, pc}

08008906 <__sclose>:
 8008906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890a:	f000 b813 	b.w	8008934 <_close_r>
	...

08008910 <_write_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d07      	ldr	r5, [pc, #28]	; (8008930 <_write_r+0x20>)
 8008914:	4604      	mov	r4, r0
 8008916:	4608      	mov	r0, r1
 8008918:	4611      	mov	r1, r2
 800891a:	2200      	movs	r2, #0
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7f8 fd48 	bl	80013b4 <_write>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_write_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_write_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	2000031c 	.word	0x2000031c

08008934 <_close_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d06      	ldr	r5, [pc, #24]	; (8008950 <_close_r+0x1c>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7f8 fd64 	bl	800140c <_close>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_close_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_close_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	2000031c 	.word	0x2000031c

08008954 <_fstat_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_fstat_r+0x20>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	f7f8 fda3 	bl	80014ac <_fstat>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d102      	bne.n	8008970 <_fstat_r+0x1c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b103      	cbz	r3, 8008970 <_fstat_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	bf00      	nop
 8008974:	2000031c 	.word	0x2000031c

08008978 <_isatty_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d06      	ldr	r5, [pc, #24]	; (8008994 <_isatty_r+0x1c>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7f8 fd00 	bl	8001388 <_isatty>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_isatty_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_isatty_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	2000031c 	.word	0x2000031c

08008998 <_lseek_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d07      	ldr	r5, [pc, #28]	; (80089b8 <_lseek_r+0x20>)
 800899c:	4604      	mov	r4, r0
 800899e:	4608      	mov	r0, r1
 80089a0:	4611      	mov	r1, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7f8 fd47 	bl	800143a <_lseek>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_lseek_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_lseek_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	2000031c 	.word	0x2000031c

080089bc <__malloc_lock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__malloc_lock+0x8>)
 80089be:	f7ff bad8 	b.w	8007f72 <__retarget_lock_acquire_recursive>
 80089c2:	bf00      	nop
 80089c4:	20000314 	.word	0x20000314

080089c8 <__malloc_unlock>:
 80089c8:	4801      	ldr	r0, [pc, #4]	; (80089d0 <__malloc_unlock+0x8>)
 80089ca:	f7ff bad3 	b.w	8007f74 <__retarget_lock_release_recursive>
 80089ce:	bf00      	nop
 80089d0:	20000314 	.word	0x20000314

080089d4 <_read_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d07      	ldr	r5, [pc, #28]	; (80089f4 <_read_r+0x20>)
 80089d8:	4604      	mov	r4, r0
 80089da:	4608      	mov	r0, r1
 80089dc:	4611      	mov	r1, r2
 80089de:	2200      	movs	r2, #0
 80089e0:	602a      	str	r2, [r5, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	f7f8 fd3a 	bl	800145c <_read>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_read_r+0x1e>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_read_r+0x1e>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	2000031c 	.word	0x2000031c

080089f8 <lflush>:
 80089f8:	8983      	ldrh	r3, [r0, #12]
 80089fa:	f003 0309 	and.w	r3, r3, #9
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d101      	bne.n	8008a06 <lflush+0xe>
 8008a02:	f7ff b951 	b.w	8007ca8 <fflush>
 8008a06:	2000      	movs	r0, #0
 8008a08:	4770      	bx	lr
	...

08008a0c <__srefill_r>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	460c      	mov	r4, r1
 8008a10:	4605      	mov	r5, r0
 8008a12:	b118      	cbz	r0, 8008a1c <__srefill_r+0x10>
 8008a14:	6983      	ldr	r3, [r0, #24]
 8008a16:	b90b      	cbnz	r3, 8008a1c <__srefill_r+0x10>
 8008a18:	f7ff f9b0 	bl	8007d7c <__sinit>
 8008a1c:	4b3b      	ldr	r3, [pc, #236]	; (8008b0c <__srefill_r+0x100>)
 8008a1e:	429c      	cmp	r4, r3
 8008a20:	d10a      	bne.n	8008a38 <__srefill_r+0x2c>
 8008a22:	686c      	ldr	r4, [r5, #4]
 8008a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	6063      	str	r3, [r4, #4]
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	069e      	lsls	r6, r3, #26
 8008a30:	d50c      	bpl.n	8008a4c <__srefill_r+0x40>
 8008a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a36:	e066      	b.n	8008b06 <__srefill_r+0xfa>
 8008a38:	4b35      	ldr	r3, [pc, #212]	; (8008b10 <__srefill_r+0x104>)
 8008a3a:	429c      	cmp	r4, r3
 8008a3c:	d101      	bne.n	8008a42 <__srefill_r+0x36>
 8008a3e:	68ac      	ldr	r4, [r5, #8]
 8008a40:	e7f0      	b.n	8008a24 <__srefill_r+0x18>
 8008a42:	4b34      	ldr	r3, [pc, #208]	; (8008b14 <__srefill_r+0x108>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	bf08      	it	eq
 8008a48:	68ec      	ldreq	r4, [r5, #12]
 8008a4a:	e7eb      	b.n	8008a24 <__srefill_r+0x18>
 8008a4c:	0758      	lsls	r0, r3, #29
 8008a4e:	d448      	bmi.n	8008ae2 <__srefill_r+0xd6>
 8008a50:	06d9      	lsls	r1, r3, #27
 8008a52:	d405      	bmi.n	8008a60 <__srefill_r+0x54>
 8008a54:	2309      	movs	r3, #9
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	e7e8      	b.n	8008a32 <__srefill_r+0x26>
 8008a60:	071a      	lsls	r2, r3, #28
 8008a62:	d50b      	bpl.n	8008a7c <__srefill_r+0x70>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4628      	mov	r0, r5
 8008a68:	f7ff f8e2 	bl	8007c30 <_fflush_r>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d1e0      	bne.n	8008a32 <__srefill_r+0x26>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	60a0      	str	r0, [r4, #8]
 8008a74:	f023 0308 	bic.w	r3, r3, #8
 8008a78:	81a3      	strh	r3, [r4, #12]
 8008a7a:	61a0      	str	r0, [r4, #24]
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	f043 0304 	orr.w	r3, r3, #4
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	b91b      	cbnz	r3, 8008a90 <__srefill_r+0x84>
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7ff fa98 	bl	8007fc0 <__smakebuf_r>
 8008a90:	89a6      	ldrh	r6, [r4, #12]
 8008a92:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008a96:	07b3      	lsls	r3, r6, #30
 8008a98:	d00f      	beq.n	8008aba <__srefill_r+0xae>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	81a3      	strh	r3, [r4, #12]
 8008a9e:	4b1e      	ldr	r3, [pc, #120]	; (8008b18 <__srefill_r+0x10c>)
 8008aa0:	491e      	ldr	r1, [pc, #120]	; (8008b1c <__srefill_r+0x110>)
 8008aa2:	6818      	ldr	r0, [r3, #0]
 8008aa4:	f006 0609 	and.w	r6, r6, #9
 8008aa8:	f7ff f9e6 	bl	8007e78 <_fwalk>
 8008aac:	2e09      	cmp	r6, #9
 8008aae:	81a7      	strh	r7, [r4, #12]
 8008ab0:	d103      	bne.n	8008aba <__srefill_r+0xae>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f7ff f835 	bl	8007b24 <__sflush_r>
 8008aba:	6922      	ldr	r2, [r4, #16]
 8008abc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008abe:	6963      	ldr	r3, [r4, #20]
 8008ac0:	6a21      	ldr	r1, [r4, #32]
 8008ac2:	6022      	str	r2, [r4, #0]
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b0      	blx	r6
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	6060      	str	r0, [r4, #4]
 8008acc:	dc1c      	bgt.n	8008b08 <__srefill_r+0xfc>
 8008ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad2:	bf17      	itett	ne
 8008ad4:	2200      	movne	r2, #0
 8008ad6:	f043 0320 	orreq.w	r3, r3, #32
 8008ada:	6062      	strne	r2, [r4, #4]
 8008adc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008ae0:	e7bc      	b.n	8008a5c <__srefill_r+0x50>
 8008ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	d0cd      	beq.n	8008a84 <__srefill_r+0x78>
 8008ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aec:	4299      	cmp	r1, r3
 8008aee:	d002      	beq.n	8008af6 <__srefill_r+0xea>
 8008af0:	4628      	mov	r0, r5
 8008af2:	f7ff faad 	bl	8008050 <_free_r>
 8008af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	2000      	movs	r0, #0
 8008afc:	6360      	str	r0, [r4, #52]	; 0x34
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0c0      	beq.n	8008a84 <__srefill_r+0x78>
 8008b02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7fc      	b.n	8008b06 <__srefill_r+0xfa>
 8008b0c:	08008e1c 	.word	0x08008e1c
 8008b10:	08008e3c 	.word	0x08008e3c
 8008b14:	08008dfc 	.word	0x08008dfc
 8008b18:	08008cf4 	.word	0x08008cf4
 8008b1c:	080089f9 	.word	0x080089f9

08008b20 <_sbrk>:
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <_sbrk+0x14>)
 8008b22:	6819      	ldr	r1, [r3, #0]
 8008b24:	4602      	mov	r2, r0
 8008b26:	b909      	cbnz	r1, 8008b2c <_sbrk+0xc>
 8008b28:	4903      	ldr	r1, [pc, #12]	; (8008b38 <_sbrk+0x18>)
 8008b2a:	6019      	str	r1, [r3, #0]
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	4402      	add	r2, r0
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	4770      	bx	lr
 8008b34:	20000134 	.word	0x20000134
 8008b38:	20000320 	.word	0x20000320

08008b3c <_init>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr

08008b48 <_fini>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr
