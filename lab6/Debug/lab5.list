
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009940  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f54  08009f54  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08009f54  08009f54  00019f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f5c  08009f5c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f60  08009f60  00019f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08009f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000110  0800a074  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  0800a074  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b76  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041d7  00000000  00000000  00043cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00047e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  00049798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ce2  00000000  00000000  0004aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e51d  00000000  00000000  0006bbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8089  00000000  00000000  0008a0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152180  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  001521d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ab8 	.word	0x08009ab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08009ab8 	.word	0x08009ab8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <read_vrefint>:
#include <stdio.h>
#include "battery.h"

extern ADC_HandleTypeDef hadc1;

uint32_t read_vrefint(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  static uint32_t first_time_up = 1;
  static ADC_ChannelConfTypeDef sConfig = {0};
  uint32_t rawVintref;

  if (first_time_up) {
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <read_vrefint+0xb4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d014      	beq.n	80005c0 <read_vrefint+0x38>
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <read_vrefint+0xb8>)
 8000598:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <read_vrefint+0xbc>)
 800059a:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <read_vrefint+0xb8>)
 800059e:	2206      	movs	r2, #6
 80005a0:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <read_vrefint+0xb8>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	609a      	str	r2, [r3, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <read_vrefint+0xb8>)
 80005aa:	227f      	movs	r2, #127	; 0x7f
 80005ac:	60da      	str	r2, [r3, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <read_vrefint+0xb8>)
 80005b0:	2204      	movs	r2, #4
 80005b2:	611a      	str	r2, [r3, #16]
    sConfig.Offset = 0;
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <read_vrefint+0xb8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
    first_time_up = 0;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <read_vrefint+0xb4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
  }
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <read_vrefint+0xb8>)
 80005c2:	2206      	movs	r2, #6
 80005c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80005c6:	491e      	ldr	r1, [pc, #120]	; (8000640 <read_vrefint+0xb8>)
 80005c8:	481f      	ldr	r0, [pc, #124]	; (8000648 <read_vrefint+0xc0>)
 80005ca:	f002 fd59 	bl	8003080 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <read_vrefint+0x50>
      Error_Handler();
 80005d4:	f000 ffb0 	bl	8001538 <Error_Handler>
  }
  while (HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK);   // Calibrate the A2D
 80005d8:	bf00      	nop
 80005da:	217f      	movs	r1, #127	; 0x7f
 80005dc:	481a      	ldr	r0, [pc, #104]	; (8000648 <read_vrefint+0xc0>)
 80005de:	f003 fb1b 	bl	8003c18 <HAL_ADCEx_Calibration_Start>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f8      	bne.n	80005da <read_vrefint+0x52>
  HAL_ADC_Start(&hadc1);
 80005e8:	4817      	ldr	r0, [pc, #92]	; (8000648 <read_vrefint+0xc0>)
 80005ea:	f002 f93d 	bl	8002868 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ee:	f04f 31ff 	mov.w	r1, #4294967295
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <read_vrefint+0xc0>)
 80005f4:	f002 fa26 	bl	8002a44 <HAL_ADC_PollForConversion>
  rawVintref = HAL_ADC_GetValue(&hadc1);
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <read_vrefint+0xc0>)
 80005fa:	f002 fafb 	bl	8002bf4 <HAL_ADC_GetValue>
 80005fe:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop(&hadc1);
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <read_vrefint+0xc0>)
 8000602:	f002 f9eb 	bl	80029dc <HAL_ADC_Stop>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <read_vrefint+0xb8>)
 8000608:	220c      	movs	r2, #12
 800060a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <read_vrefint+0xb8>)
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <read_vrefint+0xc0>)
 8000610:	f002 fd36 	bl	8003080 <HAL_ADC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <read_vrefint+0x96>
      Error_Handler();
 800061a:	f000 ff8d 	bl	8001538 <Error_Handler>
  }
  return(__HAL_ADC_CALC_VREFANALOG_VOLTAGE(rawVintref, ADC_RESOLUTION_12B));
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <read_vrefint+0xc4>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000628:	fb03 f202 	mul.w	r2, r3, r2
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000
 8000640:	2000012c 	.word	0x2000012c
 8000644:	80000001 	.word	0x80000001
 8000648:	200001b8 	.word	0x200001b8
 800064c:	1fff75aa 	.word	0x1fff75aa

08000650 <ef_command>:
extern flash_status_t flash_status;

static uint32_t GetPage(uint32_t);
static uint32_t GetBank(uint32_t);

int ef_command(char *args) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if (!args) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d101      	bne.n	8000662 <ef_command+0x12>
    return 1;
 800065e:	2301      	movs	r3, #1
 8000660:	e00b      	b.n	800067a <ef_command+0x2a>
  }
  else {
    if (!strcmp("all",args)) {
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <ef_command+0x34>)
 8000666:	f7ff fdb3 	bl	80001d0 <strcmp>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d103      	bne.n	8000678 <ef_command+0x28>
      flash_erase();
 8000670:	f000 f8da 	bl	8000828 <flash_erase>
      return 0;
 8000674:	2300      	movs	r3, #0
 8000676:	e000      	b.n	800067a <ef_command+0x2a>
    }
    else {
      return 1;
 8000678:	2301      	movs	r3, #1
    }
  }
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	08009ad0 	.word	0x08009ad0

08000688 <flash_write_init>:
  printf("Total Records Possible: %d\n\r",((int)flash_status.data_start-(int)flash_status.data_end)/16);
  printf("Total Empty Records: %d\n\r",((int)flash_status.next_address-(int)flash_status.data_end)/16);
  printf("OK\n\r");
}

int flash_write_init(flash_status_t * fs) {
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  sensordata_t *p;
  uint32_t program_end = ((uint32_t )&__fini_array_end
                  + (uint32_t)&_edata
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <flash_write_init+0x68>)
  uint32_t program_end = ((uint32_t )&__fini_array_end
 8000692:	4918      	ldr	r1, [pc, #96]	; (80006f4 <flash_write_init+0x6c>)
                  - (uint32_t)&_sdata);
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <flash_write_init+0x70>)
 8000696:	1acb      	subs	r3, r1, r3
  uint32_t program_end = ((uint32_t )&__fini_array_end
 8000698:	4413      	add	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
  uint32_t bottom  = (((uint32_t)program_end & ~0x7FF) + 0x800);
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80006a2:	f023 0307 	bic.w	r3, r3, #7
 80006a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80006aa:	60fb      	str	r3, [r7, #12]
  fs->data_end = (raw_t *) bottom;
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	605a      	str	r2, [r3, #4]
  fs->data_start = (raw_t *) 0x0801FFF0;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a11      	ldr	r2, [pc, #68]	; (80006fc <flash_write_init+0x74>)
 80006b6:	601a      	str	r2, [r3, #0]
  p = (sensordata_t *) fs->data_start;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	617b      	str	r3, [r7, #20]
  while (p->watermark!=0xff) {
 80006be:	e009      	b.n	80006d4 <flash_write_init+0x4c>
    p--;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	3b10      	subs	r3, #16
 80006c4:	617b      	str	r3, [r7, #20]
    if (p<=((sensordata_t *)bottom)) return (-1);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d802      	bhi.n	80006d4 <flash_write_init+0x4c>
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	e007      	b.n	80006e4 <flash_write_init+0x5c>
  while (p->watermark!=0xff) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2bff      	cmp	r3, #255	; 0xff
 80006da:	d1f1      	bne.n	80006c0 <flash_write_init+0x38>
  }
  fs->next_address = (raw_t *) p;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	609a      	str	r2, [r3, #8]
  return(0);
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	371c      	adds	r7, #28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	20000110 	.word	0x20000110
 80006f4:	08009f64 	.word	0x08009f64
 80006f8:	20000000 	.word	0x20000000
 80006fc:	0801fff0 	.word	0x0801fff0

08000700 <write_raw>:

int write_raw(flash_status_t *fs, raw_t *data) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]
  uint32_t addr;

  if ((!data) || (!fs)) {
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <write_raw+0x1a>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <write_raw+0x20>
    return(-1);
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e032      	b.n	8000786 <write_raw+0x86>
  }
  HAL_FLASH_Unlock();
 8000720:	f003 fdac 	bl	800427c <HAL_FLASH_Unlock>
  addr = (uint32_t) fs->next_address;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	60bb      	str	r3, [r7, #8]
  if ((status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,addr, data->data0))) {
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	2000      	movs	r0, #0
 8000734:	f003 fd36 	bl	80041a4 <HAL_FLASH_Program>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d004      	beq.n	800074c <write_raw+0x4c>
    HAL_FLASH_Lock();
 8000742:	f003 fdbd 	bl	80042c0 <HAL_FLASH_Lock>
    return(-4);
 8000746:	f06f 0303 	mvn.w	r3, #3
 800074a:	e01c      	b.n	8000786 <write_raw+0x86>
  }
  addr += 8;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	3308      	adds	r3, #8
 8000750:	60bb      	str	r3, [r7, #8]
  if ((status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,addr, data->data1))) {
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	2000      	movs	r0, #0
 800075c:	f003 fd22 	bl	80041a4 <HAL_FLASH_Program>
 8000760:	4603      	mov	r3, r0
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d004      	beq.n	8000774 <write_raw+0x74>
    HAL_FLASH_Lock();
 800076a:	f003 fda9 	bl	80042c0 <HAL_FLASH_Lock>
    return(-4);
 800076e:	f06f 0303 	mvn.w	r3, #3
 8000772:	e008      	b.n	8000786 <write_raw+0x86>
  }
  HAL_FLASH_Lock();
 8000774:	f003 fda4 	bl	80042c0 <HAL_FLASH_Lock>
  fs->next_address--;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f1a3 0210 	sub.w	r2, r3, #16
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	609a      	str	r2, [r3, #8]
  return(0);
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <GetPage>:
  }
  HAL_FLASH_Lock();
  return(0);
}

static uint32_t GetPage(uint32_t Addr) {
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <GetPage+0x74>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d007      	beq.n	80007ba <GetPage+0x2a>
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <GetPage+0x74>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	029a      	lsls	r2, r3, #10
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <GetPage+0x78>)
 80007b2:	4013      	ands	r3, r2
 80007b4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80007b8:	e000      	b.n	80007bc <GetPage+0x2c>
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <GetPage+0x7c>)
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4293      	cmp	r3, r2
 80007c0:	d905      	bls.n	80007ce <GetPage+0x3e>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80007c8:	0adb      	lsrs	r3, r3, #11
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e013      	b.n	80007f6 <GetPage+0x66>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <GetPage+0x74>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d8:	4293      	cmp	r3, r2
 80007da:	d007      	beq.n	80007ec <GetPage+0x5c>
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <GetPage+0x74>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	029a      	lsls	r2, r3, #10
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <GetPage+0x78>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80007ea:	e000      	b.n	80007ee <GetPage+0x5e>
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <GetPage+0x7c>)
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	0adb      	lsrs	r3, r3, #11
 80007f4:	60fb      	str	r3, [r7, #12]
  }

  return page;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	1fff75e0 	.word	0x1fff75e0
 8000808:	03fffc00 	.word	0x03fffc00
 800080c:	08020000 	.word	0x08020000

08000810 <GetBank>:

static uint32_t GetBank(uint32_t Addr) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  return FLASH_BANK_1;
 8000818:	2301      	movs	r3, #1
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <flash_erase>:

int flash_erase(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
  uint32_t FirstPage = 0, NbOfPages = 0, BankNumber = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  uint32_t PAGEError = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  /* __IO uint32_t data32 = 0 , MemoryProgramStatus = 0; */

  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t program_end = ((uint32_t )&__fini_array_end
                  + (uint32_t)&_edata
 800083e:	4a24      	ldr	r2, [pc, #144]	; (80008d0 <flash_erase+0xa8>)
  uint32_t program_end = ((uint32_t )&__fini_array_end
 8000840:	4924      	ldr	r1, [pc, #144]	; (80008d4 <flash_erase+0xac>)
                  - (uint32_t)&_sdata);
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <flash_erase+0xb0>)
 8000844:	1acb      	subs	r3, r1, r3
  uint32_t program_end = ((uint32_t )&__fini_array_end
 8000846:	4413      	add	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
  uint32_t bottom  = (((uint32_t)program_end & ~0x7FF) + 0x800);
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000850:	f023 0307 	bic.w	r3, r3, #7
 8000854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000858:	60fb      	str	r3, [r7, #12]
  uint32_t top = FLASH_END;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <flash_erase+0xb4>)
 800085c:	60bb      	str	r3, [r7, #8]

  HAL_FLASH_Unlock();
 800085e:	f003 fd0d 	bl	800427c <HAL_FLASH_Unlock>
  /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <flash_erase+0xb8>)
 8000864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000868:	611a      	str	r2, [r3, #16]
  /* Get the 1st page to erase */
  FirstPage = GetPage(bottom);
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f7ff ff90 	bl	8000790 <GetPage>
 8000870:	61f8      	str	r0, [r7, #28]
  /* Get the number of pages to erase from 1st page */
  NbOfPages = GetPage(top) - FirstPage + 1;
 8000872:	68b8      	ldr	r0, [r7, #8]
 8000874:	f7ff ff8c 	bl	8000790 <GetPage>
 8000878:	4602      	mov	r2, r0
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	3301      	adds	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  /* Get the bank */
  BankNumber = GetBank(bottom);
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ffc4 	bl	8000810 <GetBank>
 8000888:	6178      	str	r0, [r7, #20]
  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <flash_erase+0xbc>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
  EraseInitStruct.Banks       = BankNumber;
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <flash_erase+0xbc>)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	6053      	str	r3, [r2, #4]
  EraseInitStruct.Page        = FirstPage;
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <flash_erase+0xbc>)
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbPages     = NbOfPages;
 800089c:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <flash_erase+0xbc>)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	60d3      	str	r3, [r2, #12]

  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <flash_erase+0xbc>)
 80008a8:	f003 fdce 	bl	8004448 <HAL_FLASHEx_Erase>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d004      	beq.n	80008bc <flash_erase+0x94>
    HAL_FLASH_Lock();
 80008b2:	f003 fd05 	bl	80042c0 <HAL_FLASH_Lock>
    return (-1);
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e005      	b.n	80008c8 <flash_erase+0xa0>
  }
  HAL_FLASH_Lock();
 80008bc:	f003 fd00 	bl	80042c0 <HAL_FLASH_Lock>
  flash_write_init(&flash_status);
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <flash_erase+0xc0>)
 80008c2:	f7ff fee1 	bl	8000688 <flash_write_init>
  return(0);
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000110 	.word	0x20000110
 80008d4:	08009f64 	.word	0x08009f64
 80008d8:	20000000 	.word	0x20000000
 80008dc:	0801ffff 	.word	0x0801ffff
 80008e0:	40022000 	.word	0x40022000
 80008e4:	20000144 	.word	0x20000144
 80008e8:	2000021c 	.word	0x2000021c

080008ec <disable>:
 */

#include "main.h"
#include "interrupt.h"

uint32_t disable(void) {
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80008f6:	f3ef 8310 	mrs	r3, PRIMASK
 80008fa:	603b      	str	r3, [r7, #0]
  return(result);
 80008fc:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 80008fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <restore>:

void restore(uint32_t priority_mask) {
 8000912:	b480      	push	{r7}
 8000914:	b085      	sub	sp, #20
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f383 8810 	msr	PRIMASK, r3
}
 8000924:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000932:	b480      	push	{r7}
 8000934:	b089      	sub	sp, #36	; 0x24
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	e853 3f00 	ldrex	r3, [r3]
 8000944:	60bb      	str	r3, [r7, #8]
   return(result);
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f043 0320 	orr.w	r3, r3, #32
 800094c:	61fb      	str	r3, [r7, #28]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69fa      	ldr	r2, [r7, #28]
 8000952:	61ba      	str	r2, [r7, #24]
 8000954:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000956:	6979      	ldr	r1, [r7, #20]
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	e841 2300 	strex	r3, r2, [r1]
 800095e:	613b      	str	r3, [r7, #16]
   return(result);
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1e9      	bne.n	800093a <LL_USART_EnableIT_RXNE+0x8>
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	3724      	adds	r7, #36	; 0x24
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <HAL_TIM_IC_CaptureCallback>:
  {"log", log_command},
  {"l", l_command},
  {0,0}
};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  enum {EDGE1,EDGE2};
  static uint32_t last = 0;
  static uint32_t state = EDGE1;
  uint32_t next;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7f1b      	ldrb	r3, [r3, #28]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d136      	bne.n	80009f2 <HAL_TIM_IC_CaptureCallback+0x7e>
	  next = htim->Instance->CCR1;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098a:	60fb      	str	r3, [r7, #12]
	  switch(state){
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x88>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <HAL_TIM_IC_CaptureCallback+0x26>
 8000994:	2b01      	cmp	r3, #1
 8000996:	d007      	beq.n	80009a8 <HAL_TIM_IC_CaptureCallback+0x34>
 8000998:	e027      	b.n	80009ea <HAL_TIM_IC_CaptureCallback+0x76>
	  case EDGE1:
		  last = next;
 800099a:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6013      	str	r3, [r2, #0]
		  state = EDGE2;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x88>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
		  break;
 80009a6:	e025      	b.n	80009f4 <HAL_TIM_IC_CaptureCallback+0x80>
	  case EDGE2:
		  if(next>last){
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d906      	bls.n	80009c0 <HAL_TIM_IC_CaptureCallback+0x4c>
			  period = next-last;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x90>)
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e009      	b.n	80009d4 <HAL_TIM_IC_CaptureCallback+0x60>
		  }
		  else{
			  period = htim->Instance->ARR - last + next;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	1ad2      	subs	r2, r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x90>)
 80009d2:	6013      	str	r3, [r2, #0]
		  }
		  state = EDGE1;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x88>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
		  HAL_TIM_IC_Stop_IT(&htim2,TIM_CHANNEL_1);
 80009da:	2100      	movs	r1, #0
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x94>)
 80009de:	f005 ff5d 	bl	800689c <HAL_TIM_IC_Stop_IT>
		  timer_done = 1;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_TIM_IC_CaptureCallback+0x98>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
		  break;
 80009e8:	e004      	b.n	80009f4 <HAL_TIM_IC_CaptureCallback+0x80>
	  default:
		  state = EDGE1;
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x88>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
		  break;
 80009f0:	e000      	b.n	80009f4 <HAL_TIM_IC_CaptureCallback+0x80>
	  }
  }
 80009f2:	bf00      	nop
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000164 	.word	0x20000164
 8000a00:	20000168 	.word	0x20000168
 8000a04:	2000015c 	.word	0x2000015c
 8000a08:	20000254 	.word	0x20000254
 8000a0c:	20000160 	.word	0x20000160

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f001 fae6 	bl	8001fe6 <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t command_line[QUEUE_SIZE];
  uint8_t ch;
  //RTC_DateTypeDef date;
  //RTC_TimeTypeDef time;
  int n = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1e:	f000 f88f 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a22:	f000 fa87 	bl	8000f34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a26:	f000 fa55 	bl	8000ed4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000a2a:	f000 f959 	bl	8000ce0 <MX_RTC_Init>
  MX_ADC1_Init();
 8000a2e:	f000 f8df 	bl	8000bf0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a32:	f000 f9f5 	bl	8000e20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Init(&hadc1); // Initialize the A2D
 8000a36:	4835      	ldr	r0, [pc, #212]	; (8000b0c <main+0xfc>)
 8000a38:	f001 fdc6 	bl	80025c8 <HAL_ADC_Init>
  while (HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK);   // Calibrate the A2D
 8000a3c:	bf00      	nop
 8000a3e:	217f      	movs	r1, #127	; 0x7f
 8000a40:	4832      	ldr	r0, [pc, #200]	; (8000b0c <main+0xfc>)
 8000a42:	f003 f8e9 	bl	8003c18 <HAL_ADCEx_Calibration_Start>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f8      	bne.n	8000a3e <main+0x2e>
  RetargetInit(&huart2);
 8000a4c:	4830      	ldr	r0, [pc, #192]	; (8000b10 <main+0x100>)
 8000a4e:	f000 fddb 	bl	8001608 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);
 8000a52:	4830      	ldr	r0, [pc, #192]	; (8000b14 <main+0x104>)
 8000a54:	f7ff ff6d 	bl	8000932 <LL_USART_EnableIT_RXNE>
  printf("\r\nSystem Running\n\r");
 8000a58:	482f      	ldr	r0, [pc, #188]	; (8000b18 <main+0x108>)
 8000a5a:	f007 fd69 	bl	8008530 <iprintf>
  printf("\r\n IULS>");
 8000a5e:	482f      	ldr	r0, [pc, #188]	; (8000b1c <main+0x10c>)
 8000a60:	f007 fd66 	bl	8008530 <iprintf>
  //HAL_RTC_SetTime(&hrtc,&time,RTC_FORMAT_BIN);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  flash_write_init(&flash_status);
 8000a64:	482e      	ldr	r0, [pc, #184]	; (8000b20 <main+0x110>)
 8000a66:	f7ff fe0f 	bl	8000688 <flash_write_init>
  while (1)
  {
	if(toggle){
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <main+0x114>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00d      	beq.n	8000a8e <main+0x7e>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a72:	2108      	movs	r1, #8
 8000a74:	482c      	ldr	r0, [pc, #176]	; (8000b28 <main+0x118>)
 8000a76:	f003 ff95 	bl	80049a4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a7a:	2064      	movs	r0, #100	; 0x64
 8000a7c:	f001 fb28 	bl	80020d0 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a80:	2108      	movs	r1, #8
 8000a82:	4829      	ldr	r0, [pc, #164]	; (8000b28 <main+0x118>)
 8000a84:	f003 ff8e 	bl	80049a4 <HAL_GPIO_TogglePin>
		toggle = 0;
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <main+0x114>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
	}
    if ((ch = dequeue(&rx_queue))) {
 8000a8e:	4827      	ldr	r0, [pc, #156]	; (8000b2c <main+0x11c>)
 8000a90:	f000 fd90 	bl	80015b4 <dequeue>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0e3      	beq.n	8000a6a <main+0x5a>
      putchar(ch);
 8000aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fd5a 	bl	8008560 <putchar>
      command_line[n] = ch;
 8000aac:	463a      	mov	r2, r7
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	4413      	add	r3, r2
 8000ab2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ab6:	701a      	strb	r2, [r3, #0]
      if(ch == '\r' || ch == '\n'){
 8000ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000abc:	2b0d      	cmp	r3, #13
 8000abe:	d003      	beq.n	8000ac8 <main+0xb8>
 8000ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d11d      	bne.n	8000b04 <main+0xf4>
    	  command_line[n] = '\0'; //end of string
 8000ac8:	463a      	mov	r2, r7
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	4413      	add	r3, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
    	  if(!execute_command(command_line)){
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa77 	bl	8000fc8 <execute_command>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d103      	bne.n	8000ae8 <main+0xd8>
    		  printf("\r\nOK");
 8000ae0:	4813      	ldr	r0, [pc, #76]	; (8000b30 <main+0x120>)
 8000ae2:	f007 fd25 	bl	8008530 <iprintf>
 8000ae6:	e002      	b.n	8000aee <main+0xde>
    	  }else{
    		  printf("\r\nNOK");
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <main+0x124>)
 8000aea:	f007 fd21 	bl	8008530 <iprintf>
    	  }
    	  n = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    	  printf("\r\n");
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <main+0x128>)
 8000af4:	f007 fdb8 	bl	8008668 <puts>
    	  printDateTime();
 8000af8:	f000 fb78 	bl	80011ec <printDateTime>
    	  printf(" IULS>");
 8000afc:	480f      	ldr	r0, [pc, #60]	; (8000b3c <main+0x12c>)
 8000afe:	f007 fd17 	bl	8008530 <iprintf>
 8000b02:	e002      	b.n	8000b0a <main+0xfa>
      }else{
    	  n++;
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	3301      	adds	r3, #1
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
	if(toggle){
 8000b0a:	e7ae      	b.n	8000a6a <main+0x5a>
 8000b0c:	200001b8 	.word	0x200001b8
 8000b10:	200002a0 	.word	0x200002a0
 8000b14:	40004400 	.word	0x40004400
 8000b18:	08009bb4 	.word	0x08009bb4
 8000b1c:	08009bc8 	.word	0x08009bc8
 8000b20:	2000021c 	.word	0x2000021c
 8000b24:	20000158 	.word	0x20000158
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	20000190 	.word	0x20000190
 8000b30:	08009bd4 	.word	0x08009bd4
 8000b34:	08009bdc 	.word	0x08009bdc
 8000b38:	08009be4 	.word	0x08009be4
 8000b3c:	08009be8 	.word	0x08009be8

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b096      	sub	sp, #88	; 0x58
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2244      	movs	r2, #68	; 0x44
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f007 fce6 	bl	8008520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b66:	f003 ff55 	bl	8004a14 <HAL_PWREx_ControlVoltageScaling>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b70:	f000 fce2 	bl	8001538 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b74:	f003 ff30 	bl	80049d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <SystemClock_Config+0xac>)
 8000b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <SystemClock_Config+0xac>)
 8000b80:	f023 0318 	bic.w	r3, r3, #24
 8000b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000b88:	231c      	movs	r3, #28
 8000b8a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000b9c:	23a0      	movs	r3, #160	; 0xa0
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 ff89 	bl	8004ac0 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000bb4:	f000 fcc0 	bl	8001538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 fbdb 	bl	800538c <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000bdc:	f000 fcac 	bl	8001538 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000be0:	f004 ff60 	bl	8005aa4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000be4:	bf00      	nop
 8000be6:	3758      	adds	r7, #88	; 0x58
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000

08000bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c12:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c14:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <MX_ADC1_Init+0xe8>)
 8000c16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c1a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8000c1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c34:	2204      	movs	r2, #4
 8000c36:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c76:	f001 fca7 	bl	80025c8 <HAL_ADC_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c80:	f000 fc5a 	bl	8001538 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c90:	f003 f854 	bl	8003d3c <HAL_ADCEx_MultiModeConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c9a:	f000 fc4d 	bl	8001538 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_ADC1_Init+0xec>)
 8000ca0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca2:	2306      	movs	r3, #6
 8000ca4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000caa:	237f      	movs	r3, #127	; 0x7f
 8000cac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000cbc:	f002 f9e0 	bl	8003080 <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000cc6:	f000 fc37 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001b8 	.word	0x200001b8
 8000cd8:	50040000 	.word	0x50040000
 8000cdc:	c7520000 	.word	0xc7520000

08000ce0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b092      	sub	sp, #72	; 0x48
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ce6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	222c      	movs	r2, #44	; 0x2c
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f007 fc0d 	bl	8008520 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d06:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d08:	4a43      	ldr	r2, [pc, #268]	; (8000e18 <MX_RTC_Init+0x138>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d0c:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d12:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d14:	227f      	movs	r2, #127	; 0x7f
 8000d16:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d18:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d1a:	22ff      	movs	r2, #255	; 0xff
 8000d1c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d30:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d3e:	4835      	ldr	r0, [pc, #212]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d40:	f004 fec0 	bl	8005ac4 <HAL_RTC_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 fbf5 	bl	8001538 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4828      	ldr	r0, [pc, #160]	; (8000e14 <MX_RTC_Init+0x134>)
 8000d72:	f004 ff29 	bl	8005bc8 <HAL_RTC_SetTime>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000d7c:	f000 fbdc 	bl	8001538 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481c      	ldr	r0, [pc, #112]	; (8000e14 <MX_RTC_Init+0x134>)
 8000da2:	f005 f80a 	bl	8005dba <HAL_RTC_SetDate>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000dac:	f000 fbc4 	bl	8001538 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_RTC_Init+0x13c>)
 8000dca:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2201      	movs	r2, #1
 8000de4:	4619      	mov	r1, r3
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <MX_RTC_Init+0x134>)
 8000de8:	f005 f8bc 	bl	8005f64 <HAL_RTC_SetAlarm_IT>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_RTC_Init+0x116>
  {
    Error_Handler();
 8000df2:	f000 fba1 	bl	8001538 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000df6:	2300      	movs	r3, #0
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_RTC_Init+0x134>)
 8000dfe:	f005 faa3 	bl	8006348 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8000e08:	f000 fb96 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3748      	adds	r7, #72	; 0x48
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000228 	.word	0x20000228
 8000e18:	40002800 	.word	0x40002800
 8000e1c:	80808000 	.word	0x80808000

08000e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e66:	481a      	ldr	r0, [pc, #104]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e68:	f005 fb92 	bl	8006590 <HAL_TIM_IC_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e72:	f000 fb61 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000e86:	f006 f941 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e90:	f000 fb52 	bl	8001538 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000eac:	f005 fed3 	bl	8006c56 <HAL_TIM_IC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000eb6:	f000 fb3f 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);   // Turn on the IRQ in the timer
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000ebc:	f005 fb14 	bl	80064e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1); // Turn on the IRQ for CH1 input capture
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <MX_TIM2_Init+0xb0>)
 8000ec4:	f005 fbbc 	bl	8006640 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000254 	.word	0x20000254

08000ed4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <MX_USART2_UART_Init+0x5c>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ee0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f18:	f006 f97c 	bl	8007214 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f22:	f000 fb09 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200002a0 	.word	0x200002a0
 8000f30:	40004400 	.word	0x40004400

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_GPIO_Init+0x8c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2108      	movs	r1, #8
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <MX_GPIO_Init+0x90>)
 8000f98:	f003 fcec 	bl	8004974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_GPIO_Init+0x90>)
 8000fb4:	f003 fb6c 	bl	8004690 <HAL_GPIO_Init>

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <execute_command>:

/* USER CODE BEGIN 4 */
int execute_command(uint8_t * line) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <execute_command+0x94>)
 8000fd2:	617b      	str	r3, [r7, #20]
  int success = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <execute_command+0x1c>
    return (-1); // Passed a bad pointer
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e037      	b.n	8001054 <execute_command+0x8c>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000fe4:	f107 0208 	add.w	r2, r7, #8
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f838 	bl	8001064 <parse_command>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffa:	d120      	bne.n	800103e <execute_command+0x76>
    printf("Error with parse command\n\r");
 8000ffc:	4818      	ldr	r0, [pc, #96]	; (8001060 <execute_command+0x98>)
 8000ffe:	f007 fa97 	bl	8008530 <iprintf>
    return (-1);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e025      	b.n	8001054 <execute_command+0x8c>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10d      	bne.n	8001038 <execute_command+0x70>
      if (!p->cmd_function) {
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <execute_command+0x62>
        return (-1);
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	e014      	b.n	8001054 <execute_command+0x8c>
      }
      success = (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	4610      	mov	r0, r2
 8001032:	4798      	blx	r3
 8001034:	6138      	str	r0, [r7, #16]
      //success = 1;
      break;
 8001036:	e006      	b.n	8001046 <execute_command+0x7e>
    }
    p++;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3308      	adds	r3, #8
 800103c:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1e0      	bne.n	8001008 <execute_command+0x40>
  }
  if (success == 0) {
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <execute_command+0x88>
    return (0);
 800104c:	2300      	movs	r3, #0
 800104e:	e001      	b.n	8001054 <execute_command+0x8c>
  }
  else {
    return (-1);
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
  }
  }
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004
 8001060:	08009bf0 	.word	0x08009bf0

08001064 <parse_command>:
int parse_command (uint8_t *line, uint8_t **command, uint8_t **args){
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]

  uint8_t *line_temp;
  if((!line) || (!command) || (!args)){ //check for bad pointer
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <parse_command+0x1e>
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <parse_command+0x1e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <parse_command+0x24>
    return(-1);
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e01d      	b.n	80010c4 <parse_command+0x60>
  }
  line_temp= line;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	617b      	str	r3, [r7, #20]
  *command = line;
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
  //strcpy(line_left, line);
  while(*line_temp != ','){ //increment through input to find end of command
 8001092:	e00b      	b.n	80010ac <parse_command+0x48>
    if(!*line_temp){
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d104      	bne.n	80010a6 <parse_command+0x42>
      *args = '\0'; //no arguments
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
      return(0);
 80010a2:	2300      	movs	r3, #0
 80010a4:	e00e      	b.n	80010c4 <parse_command+0x60>
    }
    line_temp++;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
  while(*line_temp != ','){ //increment through input to find end of command
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b2c      	cmp	r3, #44	; 0x2c
 80010b2:	d1ef      	bne.n	8001094 <parse_command+0x30>
  }

  *line_temp = '\0'; //replace comma with null for end of command string
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
  *args = line_temp +1; //one char past null is beginning of arguments
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
  return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <help_command>:
int help_command(char *args){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  printf("\r\nAvailable Commands:\n\r");
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <help_command+0x38>)
 80010da:	f007 fa29 	bl	8008530 <iprintf>
  printf("lon\n\r");
 80010de:	480b      	ldr	r0, [pc, #44]	; (800110c <help_command+0x3c>)
 80010e0:	f007 fa26 	bl	8008530 <iprintf>
  printf("lof\n\r");
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <help_command+0x40>)
 80010e6:	f007 fa23 	bl	8008530 <iprintf>
  printf("test\n\r");
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <help_command+0x44>)
 80010ec:	f007 fa20 	bl	8008530 <iprintf>
  printf("ds\n\r");
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <help_command+0x48>)
 80010f2:	f007 fa1d 	bl	8008530 <iprintf>
  printf("ts\n\r");
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <help_command+0x4c>)
 80010f8:	f007 fa1a 	bl	8008530 <iprintf>
  return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	08009c0c 	.word	0x08009c0c
 800110c:	08009c24 	.word	0x08009c24
 8001110:	08009c2c 	.word	0x08009c2c
 8001114:	08009c34 	.word	0x08009c34
 8001118:	08009c3c 	.word	0x08009c3c
 800111c:	08009c44 	.word	0x08009c44

08001120 <lon_command>:
int lon_command(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  if(led_on == 0){
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <lon_command+0x30>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <lon_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800112c:	2108      	movs	r1, #8
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <lon_command+0x34>)
 8001130:	f003 fc38 	bl	80049a4 <HAL_GPIO_TogglePin>
    led_on = 1;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <lon_command+0x30>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
    printf("\r\nLED ON\n\r");
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <lon_command+0x38>)
 800113c:	f007 f9f8 	bl	8008530 <iprintf>
 8001140:	e002      	b.n	8001148 <lon_command+0x28>
  }else{
    printf("\r\nLED ALREADY ON\n\r");
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <lon_command+0x3c>)
 8001144:	f007 f9f4 	bl	8008530 <iprintf>
  }
  return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000154 	.word	0x20000154
 8001154:	48000400 	.word	0x48000400
 8001158:	08009c4c 	.word	0x08009c4c
 800115c:	08009c58 	.word	0x08009c58

08001160 <lof_command>:
int lof_command(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  if(led_on == 1){
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <lof_command+0x30>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10a      	bne.n	8001182 <lof_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800116c:	2108      	movs	r1, #8
 800116e:	4809      	ldr	r0, [pc, #36]	; (8001194 <lof_command+0x34>)
 8001170:	f003 fc18 	bl	80049a4 <HAL_GPIO_TogglePin>
    led_on = 0;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <lof_command+0x30>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
    printf("\r\nLED OFF\n\r");
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <lof_command+0x38>)
 800117c:	f007 f9d8 	bl	8008530 <iprintf>
 8001180:	e002      	b.n	8001188 <lof_command+0x28>
  }else{
    printf("\r\nLED ALREADY OFF\n\r");
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <lof_command+0x3c>)
 8001184:	f007 f9d4 	bl	8008530 <iprintf>
  }
  return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000154 	.word	0x20000154
 8001194:	48000400 	.word	0x48000400
 8001198:	08009c6c 	.word	0x08009c6c
 800119c:	08009c78 	.word	0x08009c78

080011a0 <test_command>:
int test_command(char *args){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  printf("\r\ntest\n\r");
 80011a8:	480e      	ldr	r0, [pc, #56]	; (80011e4 <test_command+0x44>)
 80011aa:	f007 f9c1 	bl	8008530 <iprintf>
  while(*args!='\0'){
 80011ae:	e00f      	b.n	80011d0 <test_command+0x30>
    if(*args!=','){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b2c      	cmp	r3, #44	; 0x2c
 80011b6:	d005      	beq.n	80011c4 <test_command+0x24>
      putchar(*args);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 f9cf 	bl	8008560 <putchar>
 80011c2:	e002      	b.n	80011ca <test_command+0x2a>
    }else{
      printf("\r\n");
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <test_command+0x48>)
 80011c6:	f007 fa4f 	bl	8008668 <puts>
    }
    args++;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3301      	adds	r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
  while(*args!='\0'){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1eb      	bne.n	80011b0 <test_command+0x10>
  }
  return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	08009c8c 	.word	0x08009c8c
 80011e8:	08009be4 	.word	0x08009be4

080011ec <printDateTime>:
void printDateTime(){
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af04      	add	r7, sp, #16
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 80011f2:	463b      	mov	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	480f      	ldr	r0, [pc, #60]	; (8001238 <printDateTime+0x4c>)
 80011fa:	f004 fd82 	bl	8005d02 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <printDateTime+0x4c>)
 8001208:	f004 fe5e 	bl	8005ec8 <HAL_RTC_GetDate>
	printf("%2.2u/%2.2u/%4.4u %2.2u:%2.2u:%2.2u",date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds);
 800120c:	7d7b      	ldrb	r3, [r7, #21]
 800120e:	461c      	mov	r4, r3
 8001210:	7dbb      	ldrb	r3, [r7, #22]
 8001212:	461d      	mov	r5, r3
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800121a:	783a      	ldrb	r2, [r7, #0]
 800121c:	7879      	ldrb	r1, [r7, #1]
 800121e:	78b8      	ldrb	r0, [r7, #2]
 8001220:	9002      	str	r0, [sp, #8]
 8001222:	9101      	str	r1, [sp, #4]
 8001224:	9200      	str	r2, [sp, #0]
 8001226:	462a      	mov	r2, r5
 8001228:	4621      	mov	r1, r4
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <printDateTime+0x50>)
 800122c:	f007 f980 	bl	8008530 <iprintf>
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}
 8001238:	20000228 	.word	0x20000228
 800123c:	08009c98 	.word	0x08009c98

08001240 <dateSet_command>:
int dateSet_command(char *args){
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	//HAL_StatusTypeDef hal;
	int comma_count = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
	char* start_of_num = args;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	61bb      	str	r3, [r7, #24]
	int numbers[3];
	while(*args!='\0'){
 8001250:	e01f      	b.n	8001292 <dateSet_command+0x52>
	    if(*args==','){
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b2c      	cmp	r3, #44	; 0x2c
 8001258:	d113      	bne.n	8001282 <dateSet_command+0x42>
	    	*args = '\0';
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
	        numbers[comma_count] = atoi(start_of_num);
 8001260:	69b8      	ldr	r0, [r7, #24]
 8001262:	f007 f91d 	bl	80084a0 <atoi>
 8001266:	4602      	mov	r2, r0
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	f107 0120 	add.w	r1, r7, #32
 8001270:	440b      	add	r3, r1
 8001272:	f843 2c18 	str.w	r2, [r3, #-24]
	        comma_count += 1;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
	        start_of_num = args+1;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3301      	adds	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
	    }
	    if(comma_count>2){
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2b02      	cmp	r3, #2
 8001286:	dd01      	ble.n	800128c <dateSet_command+0x4c>
	    	//printf("\r\n error \n\r");
	    	return 1;
 8001288:	2301      	movs	r3, #1
 800128a:	e038      	b.n	80012fe <dateSet_command+0xbe>
	    }
	    args++;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3301      	adds	r3, #1
 8001290:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1db      	bne.n	8001252 <dateSet_command+0x12>
	  }
	numbers[comma_count] = atoi(start_of_num);
 800129a:	69b8      	ldr	r0, [r7, #24]
 800129c:	f007 f900 	bl	80084a0 <atoi>
 80012a0:	4602      	mov	r2, r0
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	f107 0120 	add.w	r1, r7, #32
 80012aa:	440b      	add	r3, r1
 80012ac:	f843 2c18 	str.w	r2, [r3, #-24]
	if(numbers[0]>12 || numbers[0] < 1 || numbers[1] > 31 || numbers[1]<1 || numbers[2] > 100 || numbers[2]<0)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	dc0e      	bgt.n	80012d4 <dateSet_command+0x94>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dd0b      	ble.n	80012d4 <dateSet_command+0x94>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b1f      	cmp	r3, #31
 80012c0:	dc08      	bgt.n	80012d4 <dateSet_command+0x94>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dd05      	ble.n	80012d4 <dateSet_command+0x94>
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	dc02      	bgt.n	80012d4 <dateSet_command+0x94>
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da01      	bge.n	80012d8 <dateSet_command+0x98>
		return 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e012      	b.n	80012fe <dateSet_command+0xbe>
	date.WeekDay = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	753b      	strb	r3, [r7, #20]
	date.Month = numbers[0];
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	757b      	strb	r3, [r7, #21]
	date.Date = numbers[1];
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	75bb      	strb	r3, [r7, #22]
	date.Year = numbers[2];
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	75fb      	strb	r3, [r7, #23]
	HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <dateSet_command+0xc8>)
 80012f8:	f004 fd5f 	bl	8005dba <HAL_RTC_SetDate>
	return 0;
 80012fc:	2300      	movs	r3, #0
	//hal = HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
	//printf("\r\n%x\r\n",hal);
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000228 	.word	0x20000228

0800130c <timeSet_command>:
int timeSet_command(char *args){
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	int comma_count = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* start_of_num = args;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
	int numbers[3];
	while(*args!='\0'){
 800131c:	e01f      	b.n	800135e <timeSet_command+0x52>
		if(*args==','){
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b2c      	cmp	r3, #44	; 0x2c
 8001324:	d113      	bne.n	800134e <timeSet_command+0x42>
			*args = '\0';
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
		    numbers[comma_count] = atoi(start_of_num);
 800132c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800132e:	f007 f8b7 	bl	80084a0 <atoi>
 8001332:	4602      	mov	r2, r0
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800133c:	440b      	add	r3, r1
 800133e:	f843 2c28 	str.w	r2, [r3, #-40]
		    comma_count += 1;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3301      	adds	r3, #1
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
		    start_of_num = args+1;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(comma_count>2){
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	2b02      	cmp	r3, #2
 8001352:	dd01      	ble.n	8001358 <timeSet_command+0x4c>
			//printf("\r\n error \n\r");
		    return 1;
 8001354:	2301      	movs	r3, #1
 8001356:	e036      	b.n	80013c6 <timeSet_command+0xba>
		}
		args++;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1db      	bne.n	800131e <timeSet_command+0x12>
	}
	if(numbers[0]>24 || numbers[0] < 1 || numbers[1] > 60 || numbers[1]<1 || numbers[2] > 60 || numbers[2]< 1)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b18      	cmp	r3, #24
 800136a:	dc0e      	bgt.n	800138a <timeSet_command+0x7e>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	dd0b      	ble.n	800138a <timeSet_command+0x7e>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b3c      	cmp	r3, #60	; 0x3c
 8001376:	dc08      	bgt.n	800138a <timeSet_command+0x7e>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	dd05      	ble.n	800138a <timeSet_command+0x7e>
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b3c      	cmp	r3, #60	; 0x3c
 8001382:	dc02      	bgt.n	800138a <timeSet_command+0x7e>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	dc01      	bgt.n	800138e <timeSet_command+0x82>
		return 1;
 800138a:	2301      	movs	r3, #1
 800138c:	e01b      	b.n	80013c6 <timeSet_command+0xba>
	numbers[comma_count] = atoi(start_of_num);
 800138e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001390:	f007 f886 	bl	80084a0 <atoi>
 8001394:	4602      	mov	r2, r0
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800139e:	440b      	add	r3, r1
 80013a0:	f843 2c28 	str.w	r2, [r3, #-40]
	time.Hours = numbers[0];
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	753b      	strb	r3, [r7, #20]
	time.Minutes = numbers[1];
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	757b      	strb	r3, [r7, #21]
	time.Seconds = numbers[2];
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	75bb      	strb	r3, [r7, #22]

	HAL_RTC_SetTime(&hrtc,&time,RTC_FORMAT_BIN);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <timeSet_command+0xc4>)
 80013c0:	f004 fc02 	bl	8005bc8 <HAL_RTC_SetTime>
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3730      	adds	r7, #48	; 0x30
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000228 	.word	0x20000228

080013d4 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	toggle=1;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000158 	.word	0x20000158

080013f4 <tsl237_command>:
int tsl237_command(char *args){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	  //float clock_period;
	  //float sensor_period;
	  float sensor_frequency;

	  if (args) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <tsl237_command+0x12>
	    return 1;
 8001402:	2301      	movs	r3, #1
 8001404:	e03e      	b.n	8001484 <tsl237_command+0x90>
	  }
	  else {
		timer_done = 0;
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <tsl237_command+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
		HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800140c:	2100      	movs	r1, #0
 800140e:	4820      	ldr	r0, [pc, #128]	; (8001490 <tsl237_command+0x9c>)
 8001410:	f005 f916 	bl	8006640 <HAL_TIM_IC_Start_IT>
		while(!timer_done);
 8001414:	bf00      	nop
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <tsl237_command+0x98>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0fb      	beq.n	8001416 <tsl237_command+0x22>


	    //clock_period = SystemCoreClock;
	    //clock_period = 1/clock_period;
	    //sensor_period = clock_period * (float) period;
	    sensor_frequency = (1.0/((float)period/(float)SystemCoreClock));
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <tsl237_command+0xa0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <tsl237_command+0xa4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800143a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800143e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001442:	edc7 7a03 	vstr	s15, [r7, #12]
	    printf("\r\n%d.%d hz\r\n", (int) sensor_frequency, ((int)(sensor_frequency*100)%100));
 8001446:	edd7 7a03 	vldr	s15, [r7, #12]
 800144a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800144e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001452:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800149c <tsl237_command+0xa8>
 8001456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145e:	ee17 2a90 	vmov	r2, s15
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <tsl237_command+0xac>)
 8001464:	fb83 1302 	smull	r1, r3, r3, r2
 8001468:	1159      	asrs	r1, r3, #5
 800146a:	17d3      	asrs	r3, r2, #31
 800146c:	1acb      	subs	r3, r1, r3
 800146e:	2164      	movs	r1, #100	; 0x64
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	461a      	mov	r2, r3
 8001478:	ee16 1a90 	vmov	r1, s13
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <tsl237_command+0xb0>)
 800147e:	f007 f857 	bl	8008530 <iprintf>
	    return 0;
 8001482:	2300      	movs	r3, #0
	  }
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000160 	.word	0x20000160
 8001490:	20000254 	.word	0x20000254
 8001494:	2000015c 	.word	0x2000015c
 8001498:	2000007c 	.word	0x2000007c
 800149c:	42c80000 	.word	0x42c80000
 80014a0:	51eb851f 	.word	0x51eb851f
 80014a4:	08009cbc 	.word	0x08009cbc

080014a8 <temp_command>:

int temp_command(char *arguments){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	  if (arguments) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <temp_command+0x12>
	    return 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00b      	b.n	80014d2 <temp_command+0x2a>
	  }
	  else {
	    printf("\r\n%d C\n\r",(int)read_temp());
 80014ba:	f000 fcf9 	bl	8001eb0 <read_temp>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c6:	ee17 1a90 	vmov	r1, s15
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <temp_command+0x34>)
 80014cc:	f007 f830 	bl	8008530 <iprintf>
	    return 0;
 80014d0:	2300      	movs	r3, #0
	  }

}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08009ccc 	.word	0x08009ccc

080014e0 <battery_command>:
int battery_command(char *arguments){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	  uint32_t battery_voltage;
	  if (arguments) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <battery_command+0x12>
	    return 1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e01a      	b.n	8001528 <battery_command+0x48>
	  }
	  else {
	    battery_voltage = read_vrefint();
 80014f2:	f7ff f849 	bl	8000588 <read_vrefint>
 80014f6:	60f8      	str	r0, [r7, #12]
	    printf("\r\n%d.%03d V\n\r",(int)battery_voltage/1000,(int)battery_voltage%1000);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <battery_command+0x50>)
 80014fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001500:	1192      	asrs	r2, r2, #6
 8001502:	17db      	asrs	r3, r3, #31
 8001504:	1ad0      	subs	r0, r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4a09      	ldr	r2, [pc, #36]	; (8001530 <battery_command+0x50>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1191      	asrs	r1, r2, #6
 8001510:	17da      	asrs	r2, r3, #31
 8001512:	1a8a      	subs	r2, r1, r2
 8001514:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001518:	fb01 f202 	mul.w	r2, r1, r2
 800151c:	1a9a      	subs	r2, r3, r2
 800151e:	4601      	mov	r1, r0
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <battery_command+0x54>)
 8001522:	f007 f805 	bl	8008530 <iprintf>
	    return 0;
 8001526:	2300      	movs	r3, #0
	  }
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	10624dd3 	.word	0x10624dd3
 8001534:	08009cd8 	.word	0x08009cd8

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>

08001542 <enqueue>:
  buf->head=0;
  buf->tail=0;
  restore(mask);
}

int enqueue (queue_t *buf, uint8_t data) {
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001552:	f7ff f9cb 	bl	80008ec <disable>
 8001556:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	425a      	negs	r2, r3
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	f002 021f 	and.w	r2, r2, #31
 8001568:	bf58      	it	pl
 800156a:	4253      	negpl	r3, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6852      	ldr	r2, [r2, #4]
 8001570:	4293      	cmp	r3, r2
 8001572:	d014      	beq.n	800159e <enqueue+0x5c>
    buf->buffer[buf->head]=data;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	78fa      	ldrb	r2, [r7, #3]
 800157e:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	425a      	negs	r2, r3
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	f002 021f 	and.w	r2, r2, #31
 8001590:	bf58      	it	pl
 8001592:	4253      	negpl	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6013      	str	r3, [r2, #0]
    return_val=0;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e002      	b.n	80015a4 <enqueue+0x62>
  }
  else {
    return_val=-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f7ff f9b4 	bl	8000912 <restore>
  return (return_val);
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  int return_val=0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 80015c0:	f7ff f994 	bl	80008ec <disable>
 80015c4:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d011      	beq.n	80015f6 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	7a1b      	ldrb	r3, [r3, #8]
 80015dc:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	3301      	adds	r3, #1
 80015e4:	425a      	negs	r2, r3
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	bf58      	it	pl
 80015f0:	4253      	negpl	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 80015f6:	68b8      	ldr	r0, [r7, #8]
 80015f8:	f7ff f98b 	bl	8000912 <restore>
  return(return_val);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	b2db      	uxtb	r3, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <RetargetInit+0x28>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <RetargetInit+0x2c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6898      	ldr	r0, [r3, #8]
 800161c:	2300      	movs	r3, #0
 800161e:	2202      	movs	r2, #2
 8001620:	2100      	movs	r1, #0
 8001622:	f007 f829 	bl	8008678 <setvbuf>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000324 	.word	0x20000324
 8001634:	200000ac 	.word	0x200000ac

08001638 <_isatty>:

int _isatty(int fd) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db04      	blt.n	8001650 <_isatty+0x18>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	dc01      	bgt.n	8001650 <_isatty+0x18>
    return 1;
 800164c:	2301      	movs	r3, #1
 800164e:	e005      	b.n	800165c <_isatty+0x24>

  errno = EBADF;
 8001650:	f006 ff2a 	bl	80084a8 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	2209      	movs	r2, #9
 8001658:	601a      	str	r2, [r3, #0]
  return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_write>:

int _write(int fd, char* ptr, int len) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d002      	beq.n	800167c <_write+0x18>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d111      	bne.n	80016a0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <_write+0x54>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	b29a      	uxth	r2, r3
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	f005 fe11 	bl	80072b0 <HAL_UART_Transmit>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <_write+0x38>
      return len;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	e008      	b.n	80016ae <_write+0x4a>
    else
      return EIO;
 800169c:	2305      	movs	r3, #5
 800169e:	e006      	b.n	80016ae <_write+0x4a>
  }
  errno = EBADF;
 80016a0:	f006 ff02 	bl	80084a8 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2209      	movs	r2, #9
 80016a8:	601a      	str	r2, [r3, #0]
  return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000324 	.word	0x20000324

080016bc <_close>:

int _close(int fd) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db04      	blt.n	80016d4 <_close+0x18>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	dc01      	bgt.n	80016d4 <_close+0x18>
    return 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e006      	b.n	80016e2 <_close+0x26>

  errno = EBADF;
 80016d4:	f006 fee8 	bl	80084a8 <__errno>
 80016d8:	4603      	mov	r3, r0
 80016da:	2209      	movs	r2, #9
 80016dc:	601a      	str	r2, [r3, #0]
  return -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80016f6:	f006 fed7 	bl	80084a8 <__errno>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2209      	movs	r2, #9
 80016fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_read>:

int _read(int fd, char* ptr, int len) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d110      	bne.n	8001740 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <_read+0x4c>)
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	2201      	movs	r2, #1
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	f005 fe55 	bl	80073d8 <HAL_UART_Receive>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <_read+0x30>
      return 1;
 8001738:	2301      	movs	r3, #1
 800173a:	e008      	b.n	800174e <_read+0x42>
    else
      return EIO;
 800173c:	2305      	movs	r3, #5
 800173e:	e006      	b.n	800174e <_read+0x42>
  }
  errno = EBADF;
 8001740:	f006 feb2 	bl	80084a8 <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	2209      	movs	r2, #9
 8001748:	601a      	str	r2, [r3, #0]
  return -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000324 	.word	0x20000324

0800175c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db08      	blt.n	800177e <_fstat+0x22>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	dc05      	bgt.n	800177e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001778:	605a      	str	r2, [r3, #4]
    return 0;
 800177a:	2300      	movs	r3, #0
 800177c:	e005      	b.n	800178a <_fstat+0x2e>
  }

  errno = EBADF;
 800177e:	f006 fe93 	bl	80084a8 <__errno>
 8001782:	4603      	mov	r3, r0
 8001784:	2209      	movs	r2, #9
 8001786:	601a      	str	r2, [r3, #0]
  return 0;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <sample_command>:
uint32_t time_encode(void);
void log_mem(char m[8]);
void time_decode(RTC_DateTypeDef *date, RTC_TimeTypeDef *time, uint32_t ts);
int read_log_records(flash_status_t *fs);

int sample_command(char *args) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if (args) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <sample_command+0x12>
    return 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e005      	b.n	80017b2 <sample_command+0x1e>
  }
  else {
    printf("Sample Sensors\n\r");
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <sample_command+0x28>)
 80017a8:	f006 fec2 	bl	8008530 <iprintf>
    sample();
 80017ac:	f000 f852 	bl	8001854 <sample>
  }
  return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08009ce8 	.word	0x08009ce8

080017c0 <data_command>:

int data_command(char *args) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if (args) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <data_command+0x12>
    return 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e003      	b.n	80017da <data_command+0x1a>
  }
  else {
    read_data_records(&flash_status);
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <data_command+0x24>)
 80017d4:	f000 f8f2 	bl	80019bc <read_data_records>
  }
  return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000021c 	.word	0x2000021c

080017e8 <log_command>:

int log_command(char *args){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	  if (args) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <log_command+0x12>
	    return 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e003      	b.n	8001802 <log_command+0x1a>
	  }
	  else {
	    read_log_records(&flash_status);
 80017fa:	4804      	ldr	r0, [pc, #16]	; (800180c <log_command+0x24>)
 80017fc:	f000 f946 	bl	8001a8c <read_log_records>
	  }
	  return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000021c 	.word	0x2000021c

08001810 <l_command>:

int l_command(char *args){
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	char msg[8];
	if(args){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <l_command+0x1c>
		memcpy(msg, args, 8);
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	6810      	ldr	r0, [r2, #0]
 8001826:	6851      	ldr	r1, [r2, #4]
 8001828:	c303      	stmia	r3!, {r0, r1}
 800182a:	e006      	b.n	800183a <l_command+0x2a>
	}else{
		strcpy(msg, "command");
 800182c:	4a08      	ldr	r2, [pc, #32]	; (8001850 <l_command+0x40>)
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001836:	e883 0003 	stmia.w	r3, {r0, r1}
	}
	log_mem(msg);
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f836 	bl	80018b0 <log_mem>
	return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	08009cfc 	.word	0x08009cfc

08001854 <sample>:


int sample(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
  sensordata_t sd;

  sd.watermark = 1;
 800185a:	2301      	movs	r3, #1
 800185c:	703b      	strb	r3, [r7, #0]
  sd.status=1;
 800185e:	2301      	movs	r3, #1
 8001860:	707b      	strb	r3, [r7, #1]
  sd.battery_voltage = (uint16_t) read_vrefint();
 8001862:	f7fe fe91 	bl	8000588 <read_vrefint>
 8001866:	4603      	mov	r3, r0
 8001868:	b29b      	uxth	r3, r3
 800186a:	813b      	strh	r3, [r7, #8]
  sd.temperature = (uint16_t) read_temp();
 800186c:	f000 fb20 	bl	8001eb0 <read_temp>
 8001870:	eef0 7a40 	vmov.f32	s15, s0
 8001874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001878:	ee17 3a90 	vmov	r3, s15
 800187c:	b29b      	uxth	r3, r3
 800187e:	b21b      	sxth	r3, r3
 8001880:	817b      	strh	r3, [r7, #10]
  sd.sensor_period = period;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <sample+0x54>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]
  sd.timestamp = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sd.timestamp = time_encode();
 800188c:	f000 f830 	bl	80018f0 <time_encode>
 8001890:	4603      	mov	r3, r0
 8001892:	607b      	str	r3, [r7, #4]
  write_raw(&flash_status,(raw_t *) &sd);
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <sample+0x58>)
 800189a:	f7fe ff31 	bl	8000700 <write_raw>
  return(0);
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000015c 	.word	0x2000015c
 80018ac:	2000021c 	.word	0x2000021c

080018b0 <log_mem>:

void log_mem(char m[8]){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	logdata_t d;
	d.watermark = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	723b      	strb	r3, [r7, #8]
	d.status = 2;
 80018bc:	2302      	movs	r3, #2
 80018be:	727b      	strb	r3, [r7, #9]
	d.timestamp = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
	d.timestamp = time_encode();
 80018c4:	f000 f814 	bl	80018f0 <time_encode>
 80018c8:	4603      	mov	r3, r0
 80018ca:	60fb      	str	r3, [r7, #12]
	memcpy(d.msg, m, 8);
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	6810      	ldr	r0, [r2, #0]
 80018d4:	6851      	ldr	r1, [r2, #4]
 80018d6:	c303      	stmia	r3!, {r0, r1}
	write_raw(&flash_status,(raw_t *) &d);
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4619      	mov	r1, r3
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <log_mem+0x3c>)
 80018e0:	f7fe ff0e 	bl	8000700 <write_raw>
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000021c 	.word	0x2000021c

080018f0 <time_encode>:



uint32_t time_encode(void){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	4810      	ldr	r0, [pc, #64]	; (8001940 <time_encode+0x50>)
 80018fe:	f004 fa00 	bl	8005d02 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	2200      	movs	r2, #0
 8001908:	4619      	mov	r1, r3
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <time_encode+0x50>)
 800190c:	f004 fadc 	bl	8005ec8 <HAL_RTC_GetDate>
	uint32_t ts = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
	ts = ((uint32_t)date.Month<<28) | ((uint32_t)date.Date<<23) | ((uint32_t)date.Year<<17) |((uint32_t)time.Hours<<12) | ((uint32_t)time.Minutes<<6) | ((uint32_t)time.Seconds);
 8001914:	7e7b      	ldrb	r3, [r7, #25]
 8001916:	071a      	lsls	r2, r3, #28
 8001918:	7ebb      	ldrb	r3, [r7, #26]
 800191a:	05db      	lsls	r3, r3, #23
 800191c:	431a      	orrs	r2, r3
 800191e:	7efb      	ldrb	r3, [r7, #27]
 8001920:	045b      	lsls	r3, r3, #17
 8001922:	431a      	orrs	r2, r3
 8001924:	793b      	ldrb	r3, [r7, #4]
 8001926:	031b      	lsls	r3, r3, #12
 8001928:	431a      	orrs	r2, r3
 800192a:	797b      	ldrb	r3, [r7, #5]
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	4313      	orrs	r3, r2
 8001930:	79ba      	ldrb	r2, [r7, #6]
 8001932:	4313      	orrs	r3, r2
 8001934:	61fb      	str	r3, [r7, #28]
	//printf("%lx", ts);
	return ts;
 8001936:	69fb      	ldr	r3, [r7, #28]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000228 	.word	0x20000228

08001944 <time_decode>:

void time_decode(RTC_DateTypeDef *date, RTC_TimeTypeDef *time, uint32_t ts){
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	time->Seconds = (uint8_t) (ts&0x3f);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001958:	b2da      	uxtb	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	709a      	strb	r2, [r3, #2]
	time->Minutes =  (uint8_t) ((ts>>6)&0x3f);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001968:	b2da      	uxtb	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	705a      	strb	r2, [r3, #1]
	time->Hours = (uint8_t) ((ts>>12)&0x1f);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0b1b      	lsrs	r3, r3, #12
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	b2da      	uxtb	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	701a      	strb	r2, [r3, #0]
	date->Year = (uint8_t) ((ts>>17)&0x3f);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0c5b      	lsrs	r3, r3, #17
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	70da      	strb	r2, [r3, #3]
	date->Date = (uint8_t) ((ts>>23)&0x1f);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0ddb      	lsrs	r3, r3, #23
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	709a      	strb	r2, [r3, #2]
	date->Month = (uint8_t) ((ts>>28)&0xf);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0f1b      	lsrs	r3, r3, #28
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	705a      	strb	r2, [r3, #1]
	//printf("\r\n%2.2u/%2.2u/%4.4u %2.2u:%2.2u:%2.2u\r\n",date->Month,date->Date,date->Year+2000,time->Hours,time->Minutes,time->Seconds);
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <read_data_records>:
int read_data_records(flash_status_t *fs) {
 80019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019be:	b093      	sub	sp, #76	; 0x4c
 80019c0:	af08      	add	r7, sp, #32
 80019c2:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  sensordata_t * p;
  int count = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  p = (sensordata_t *) fs->data_start;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  printf("\r\n");
 80019ce:	482c      	ldr	r0, [pc, #176]	; (8001a80 <read_data_records+0xc4>)
 80019d0:	f006 fe4a 	bl	8008668 <puts>
  while (p>((sensordata_t *)fs->next_address)) {
 80019d4:	e049      	b.n	8001a6a <read_data_records+0xae>
    if (p->status==1) {
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d142      	bne.n	8001a64 <read_data_records+0xa8>
      time_decode(&date, &time, p->timestamp);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	f107 0108 	add.w	r1, r7, #8
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ffaa 	bl	8001944 <time_decode>
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
             count,
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 80019f0:	7f7b      	ldrb	r3, [r7, #29]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 80019f2:	469c      	mov	ip, r3
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 80019f4:	7fbb      	ldrb	r3, [r7, #30]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 80019f6:	469e      	mov	lr, r3
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 80019f8:	7ffb      	ldrb	r3, [r7, #31]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 80019fa:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 80019fe:	7a3b      	ldrb	r3, [r7, #8]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 8001a00:	461c      	mov	r4, r3
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 8001a02:	7a7b      	ldrb	r3, [r7, #9]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 8001a04:	461d      	mov	r5, r3
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 8001a06:	7abb      	ldrb	r3, [r7, #10]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 8001a08:	461e      	mov	r6, r3
             p->battery_voltage/1000,
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	891b      	ldrh	r3, [r3, #8]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 8001a0e:	491d      	ldr	r1, [pc, #116]	; (8001a84 <read_data_records+0xc8>)
 8001a10:	fba1 1303 	umull	r1, r3, r1, r3
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	603b      	str	r3, [r7, #0]
             p->battery_voltage%1000,
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	891b      	ldrh	r3, [r3, #8]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 8001a1e:	4919      	ldr	r1, [pc, #100]	; (8001a84 <read_data_records+0xc8>)
 8001a20:	fba1 0103 	umull	r0, r1, r1, r3
 8001a24:	0989      	lsrs	r1, r1, #6
 8001a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a2a:	fb00 f101 	mul.w	r1, r0, r1
 8001a2e:	1a5b      	subs	r3, r3, r1
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4619      	mov	r1, r3
             p->temperature,
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 8001a3a:	4618      	mov	r0, r3
             (int) p->sensor_period);
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	68db      	ldr	r3, [r3, #12]
      printf("D,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%d.%d,%d,%d\n\r",
 8001a40:	9307      	str	r3, [sp, #28]
 8001a42:	9006      	str	r0, [sp, #24]
 8001a44:	9105      	str	r1, [sp, #20]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	9304      	str	r3, [sp, #16]
 8001a4a:	9603      	str	r6, [sp, #12]
 8001a4c:	9502      	str	r5, [sp, #8]
 8001a4e:	9401      	str	r4, [sp, #4]
 8001a50:	9200      	str	r2, [sp, #0]
 8001a52:	4673      	mov	r3, lr
 8001a54:	4662      	mov	r2, ip
 8001a56:	6a39      	ldr	r1, [r7, #32]
 8001a58:	480b      	ldr	r0, [pc, #44]	; (8001a88 <read_data_records+0xcc>)
 8001a5a:	f006 fd69 	bl	8008530 <iprintf>
      count++;
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	623b      	str	r3, [r7, #32]
    }
    p--;
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	3b10      	subs	r3, #16
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  while (p>((sensordata_t *)fs->next_address)) {
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8b0      	bhi.n	80019d6 <read_data_records+0x1a>
  }
  return(0);
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	372c      	adds	r7, #44	; 0x2c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08009d04 	.word	0x08009d04
 8001a84:	10624dd3 	.word	0x10624dd3
 8001a88:	08009d08 	.word	0x08009d08

08001a8c <read_log_records>:

int read_log_records(flash_status_t *fs) {
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	b091      	sub	sp, #68	; 0x44
 8001a90:	af06      	add	r7, sp, #24
 8001a92:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  logdata_t * p;
  int count = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  p = (logdata_t *) fs->data_start;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24

  while (p>((logdata_t *)fs->next_address)) {
 8001a9e:	e02c      	b.n	8001afa <read_log_records+0x6e>
    if (p->status==2) {
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d125      	bne.n	8001af4 <read_log_records+0x68>
      time_decode(&date, &time, p->timestamp);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	f107 0108 	add.w	r1, r7, #8
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff45 	bl	8001944 <time_decode>
      printf("\r\nL,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%s\n\r",
             count,
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 8001aba:	7f7b      	ldrb	r3, [r7, #29]
      printf("\r\nL,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%s\n\r",
 8001abc:	461d      	mov	r5, r3
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 8001abe:	7fbb      	ldrb	r3, [r7, #30]
      printf("\r\nL,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%s\n\r",
 8001ac0:	461e      	mov	r6, r3
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
      printf("\r\nL,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%s\n\r",
 8001ac4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 8001ac8:	7a3a      	ldrb	r2, [r7, #8]
      printf("\r\nL,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%s\n\r",
 8001aca:	4611      	mov	r1, r2
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 8001acc:	7a7a      	ldrb	r2, [r7, #9]
      printf("\r\nL,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%s\n\r",
 8001ace:	4610      	mov	r0, r2
			 date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds,
 8001ad0:	7aba      	ldrb	r2, [r7, #10]
      printf("\r\nL,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%s\n\r",
 8001ad2:	4614      	mov	r4, r2
      	  	  p->msg);
 8001ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad6:	3208      	adds	r2, #8
      printf("\r\nL,%d,%2.2u/%2.2u/%4.4u,%2.2u:%2.2u:%2.2u,%s\n\r",
 8001ad8:	9204      	str	r2, [sp, #16]
 8001ada:	9403      	str	r4, [sp, #12]
 8001adc:	9002      	str	r0, [sp, #8]
 8001ade:	9101      	str	r1, [sp, #4]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4633      	mov	r3, r6
 8001ae4:	462a      	mov	r2, r5
 8001ae6:	6a39      	ldr	r1, [r7, #32]
 8001ae8:	4809      	ldr	r0, [pc, #36]	; (8001b10 <read_log_records+0x84>)
 8001aea:	f006 fd21 	bl	8008530 <iprintf>
      count++;
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	3301      	adds	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
    }
    p--;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	3b10      	subs	r3, #16
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  while (p>((logdata_t *)fs->next_address)) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8cd      	bhi.n	8001aa0 <read_log_records+0x14>
  }
  return(0);
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	372c      	adds	r7, #44	; 0x2c
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	08009d40 	.word	0x08009d40

08001b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_MspInit+0x44>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_MspInit+0x44>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6613      	str	r3, [r2, #96]	; 0x60
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_MspInit+0x44>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_MspInit+0x44>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_MspInit+0x44>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_MspInit+0x44>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_ADC_MspInit+0x44>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d113      	bne.n	8001b96 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_ADC_MspInit+0x48>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <HAL_ADC_MspInit+0x48>)
 8001b74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_ADC_MspInit+0x48>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2012      	movs	r0, #18
 8001b8c:	f002 fa55 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b90:	2012      	movs	r0, #18
 8001b92:	f002 fa6e 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	50040000 	.word	0x50040000
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b090      	sub	sp, #64	; 0x40
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	2234      	movs	r2, #52	; 0x34
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f006 fcb1 	bl	8008520 <memset>
  if(hrtc->Instance==RTC)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_RTC_MspInit+0x78>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d127      	bne.n	8001c18 <HAL_RTC_MspInit+0x70>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bcc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fddd 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001be4:	f7ff fca8 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_RTC_MspInit+0x7c>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_RTC_MspInit+0x7c>)
 8001bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f002 fa1c 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001c02:	2003      	movs	r0, #3
 8001c04:	f002 fa35 	bl	8004072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	2029      	movs	r0, #41	; 0x29
 8001c0e:	f002 fa14 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c12:	2029      	movs	r0, #41	; 0x29
 8001c14:	f002 fa2d 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3740      	adds	r7, #64	; 0x40
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40002800 	.word	0x40002800
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c48:	d130      	bne.n	8001cac <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_TIM_IC_MspInit+0x8c>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_TIM_IC_MspInit+0x8c>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_TIM_IC_MspInit+0x8c>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_TIM_IC_MspInit+0x8c>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_TIM_IC_MspInit+0x8c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_TIM_IC_MspInit+0x8c>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c98:	f002 fcfa 	bl	8004690 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	201c      	movs	r0, #28
 8001ca2:	f002 f9ca 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca6:	201c      	movs	r0, #28
 8001ca8:	f002 f9e3 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	; 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b096      	sub	sp, #88	; 0x58
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2234      	movs	r2, #52	; 0x34
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f006 fc21 	bl	8008520 <memset>
  if(huart->Instance==USART2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2c      	ldr	r2, [pc, #176]	; (8001d94 <HAL_UART_MspInit+0xdc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d150      	bne.n	8001d8a <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fd4f 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d00:	f7ff fc1a 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_UART_MspInit+0xe0>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <HAL_UART_MspInit+0xe0>)
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HAL_UART_MspInit+0xe0>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_UART_MspInit+0xe0>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_UART_MspInit+0xe0>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_UART_MspInit+0xe0>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d34:	2304      	movs	r3, #4
 8001d36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d44:	2307      	movs	r3, #7
 8001d46:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d52:	f002 fc9d 	bl	8004690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d70:	4619      	mov	r1, r3
 8001d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d76:	f002 fc8b 	bl	8004690 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2026      	movs	r0, #38	; 0x26
 8001d80:	f002 f95b 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d84:	2026      	movs	r0, #38	; 0x26
 8001d86:	f002 f974 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3758      	adds	r7, #88	; 0x58
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40004400 	.word	0x40004400
 8001d98:	40021000 	.word	0x40021000

08001d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <NMI_Handler+0x4>

08001da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <HardFault_Handler+0x4>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <MemManage_Handler+0x4>

08001dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de8:	f000 f952 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <RTC_WKUP_IRQHandler+0x10>)
 8001df6:	f004 fb43 	bl	8006480 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000228 	.word	0x20000228

08001e04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <ADC1_2_IRQHandler+0x10>)
 8001e0a:	f000 ff01 	bl	8002c10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200001b8 	.word	0x200001b8

08001e18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM2_IRQHandler+0x10>)
 8001e1e:	f004 fdfb 	bl	8006a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000254 	.word	0x20000254

08001e2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e32:	480f      	ldr	r0, [pc, #60]	; (8001e70 <USART2_IRQHandler+0x44>)
 8001e34:	f005 fba2 	bl	800757c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  uint8_t ch;
  ch = getchar();
 8001e38:	f006 fb3c 	bl	80084b4 <getchar>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if (enqueue(&rx_queue,ch)) {
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4619      	mov	r1, r3
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <USART2_IRQHandler+0x48>)
 8001e46:	f7ff fb7c 	bl	8001542 <enqueue>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <USART2_IRQHandler+0x34>
    dequeue(&rx_queue);
 8001e50:	4808      	ldr	r0, [pc, #32]	; (8001e74 <USART2_IRQHandler+0x48>)
 8001e52:	f7ff fbaf 	bl	80015b4 <dequeue>
    enqueue(&rx_queue,ch);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	; (8001e74 <USART2_IRQHandler+0x48>)
 8001e5c:	f7ff fb71 	bl	8001542 <enqueue>
  if(buf.head == (MAX_BUF-1)){
    buf.head = 0;
  }else{
    buf.head++;
    }*/
  HAL_UART_IRQHandler(&huart2);
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <USART2_IRQHandler+0x44>)
 8001e62:	f005 fb8b 	bl	800757c <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200002a0 	.word	0x200002a0
 8001e74:	20000190 	.word	0x20000190

08001e78 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <RTC_Alarm_IRQHandler+0x10>)
 8001e7e:	f004 f961 	bl	8006144 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000228 	.word	0x20000228

08001e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <SystemInit+0x20>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <SystemInit+0x20>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <read_temp>:
#include "battery.h"

extern ADC_HandleTypeDef hadc1;


float read_temp(void) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
  uint32_t rawTemp;
  uint32_t vref;
  float temp;


  if (first_time_up) {
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <read_temp+0xc8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d014      	beq.n	8001ee8 <read_temp+0x38>
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <read_temp+0xcc>)
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <read_temp+0xd0>)
 8001ec2:	601a      	str	r2, [r3, #0]
    sConfig.Rank = 1;
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <read_temp+0xcc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <read_temp+0xcc>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	609a      	str	r2, [r3, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <read_temp+0xcc>)
 8001ed2:	227f      	movs	r2, #127	; 0x7f
 8001ed4:	60da      	str	r2, [r3, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <read_temp+0xcc>)
 8001ed8:	2204      	movs	r2, #4
 8001eda:	611a      	str	r2, [r3, #16]
    sConfig.Offset = 0;
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <read_temp+0xcc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
    first_time_up = 0;
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <read_temp+0xc8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
  }
  sConfig.Rank = 1;
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <read_temp+0xcc>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001eee:	4923      	ldr	r1, [pc, #140]	; (8001f7c <read_temp+0xcc>)
 8001ef0:	4824      	ldr	r0, [pc, #144]	; (8001f84 <read_temp+0xd4>)
 8001ef2:	f001 f8c5 	bl	8003080 <HAL_ADC_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <read_temp+0x50>
      Error_Handler();
 8001efc:	f7ff fb1c 	bl	8001538 <Error_Handler>
  }
  while (HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK);   // Calibrate the A2D
 8001f00:	bf00      	nop
 8001f02:	217f      	movs	r1, #127	; 0x7f
 8001f04:	481f      	ldr	r0, [pc, #124]	; (8001f84 <read_temp+0xd4>)
 8001f06:	f001 fe87 	bl	8003c18 <HAL_ADCEx_Calibration_Start>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f8      	bne.n	8001f02 <read_temp+0x52>
  HAL_ADC_Start(&hadc1);
 8001f10:	481c      	ldr	r0, [pc, #112]	; (8001f84 <read_temp+0xd4>)
 8001f12:	f000 fca9 	bl	8002868 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001f16:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1a:	481a      	ldr	r0, [pc, #104]	; (8001f84 <read_temp+0xd4>)
 8001f1c:	f000 fd92 	bl	8002a44 <HAL_ADC_PollForConversion>
  rawTemp = HAL_ADC_GetValue(&hadc1);
 8001f20:	4818      	ldr	r0, [pc, #96]	; (8001f84 <read_temp+0xd4>)
 8001f22:	f000 fe67 	bl	8002bf4 <HAL_ADC_GetValue>
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop(&hadc1);
 8001f28:	4816      	ldr	r0, [pc, #88]	; (8001f84 <read_temp+0xd4>)
 8001f2a:	f000 fd57 	bl	80029dc <HAL_ADC_Stop>
  vref = read_vrefint();
 8001f2e:	f7fe fb2b 	bl	8000588 <read_vrefint>
 8001f32:	6038      	str	r0, [r7, #0]
  return (__HAL_ADC_CALC_TEMPERATURE(vref,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <read_temp+0xd8>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <read_temp+0xdc>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2264      	movs	r2, #100	; 0x64
 8001f4e:	fb02 f203 	mul.w	r2, r2, r3
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <read_temp+0xe0>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <read_temp+0xdc>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	1acb      	subs	r3, r1, r3
 8001f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f62:	331e      	adds	r3, #30
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                       rawTemp,
                                       ADC_RESOLUTION_12B));
  return (temp);
}
 8001f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000080 	.word	0x20000080
 8001f7c:	2000016c 	.word	0x2000016c
 8001f80:	c7520000 	.word	0xc7520000
 8001f84:	200001b8 	.word	0x200001b8
 8001f88:	057619f1 	.word	0x057619f1
 8001f8c:	1fff75a8 	.word	0x1fff75a8
 8001f90:	1fff75ca 	.word	0x1fff75ca

08001f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f98:	f7ff ff78 	bl	8001e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f006 fa89 	bl	80084d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc6:	f7fe fd23 	bl	8000a10 <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fcc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001fd8:	08009f64 	.word	0x08009f64
  ldr r2, =_sbss
 8001fdc:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001fe0:	2000033c 	.word	0x2000033c

08001fe4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <COMP_IRQHandler>

08001fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f002 f817 	bl	8004024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f80e 	bl	8002018 <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	e001      	b.n	800200c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002008:	f7ff fd84 	bl	8001b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200c:	79fb      	ldrb	r3, [r7, #7]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_InitTick+0x6c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d023      	beq.n	8002074 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_InitTick+0x70>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_InitTick+0x6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f002 f823 	bl	800408e <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d809      	bhi.n	8002068 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f001 ffed 	bl	800403a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_InitTick+0x74>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e007      	b.n	8002078 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e004      	b.n	8002078 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e001      	b.n	8002078 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000088 	.word	0x20000088
 8002088:	2000007c 	.word	0x2000007c
 800208c:	20000084 	.word	0x20000084

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000088 	.word	0x20000088
 80020b4:	20000328 	.word	0x20000328

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000328 	.word	0x20000328

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000088 	.word	0x20000088

08002118 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3360      	adds	r3, #96	; 0x60
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <LL_ADC_SetOffset+0x44>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	03fff000 	.word	0x03fff000

080021c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3360      	adds	r3, #96	; 0x60
 80021d6:	461a      	mov	r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3360      	adds	r3, #96	; 0x60
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	431a      	orrs	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	615a      	str	r2, [r3, #20]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002276:	b480      	push	{r7}
 8002278:	b087      	sub	sp, #28
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3330      	adds	r3, #48	; 0x30
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	4413      	add	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	211f      	movs	r1, #31
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	f003 011f 	and.w	r1, r3, #31
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	431a      	orrs	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3314      	adds	r3, #20
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	0e5b      	lsrs	r3, r3, #25
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0d1b      	lsrs	r3, r3, #20
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	2107      	movs	r1, #7
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	401a      	ands	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	0d1b      	lsrs	r3, r3, #20
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	431a      	orrs	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800233e:	bf00      	nop
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	43db      	mvns	r3, r3
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0318 	and.w	r3, r3, #24
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002370:	40d9      	lsrs	r1, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	400b      	ands	r3, r1
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	0007ffff 	.word	0x0007ffff

08002394 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 031f 	and.w	r3, r3, #31
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6093      	str	r3, [r2, #8]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002404:	d101      	bne.n	800240a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800242c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002454:	d101      	bne.n	800245a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a4:	f043 0202 	orr.w	r2, r3, #2
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <LL_ADC_IsEnabled+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_ADC_IsEnabled+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d101      	bne.n	80024f6 <LL_ADC_IsDisableOngoing+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_ADC_IsDisableOngoing+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800253c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002540:	f043 0210 	orr.w	r2, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b04      	cmp	r3, #4
 8002566:	d101      	bne.n	800256c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800258a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d101      	bne.n	80025ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e131      	b.n	8002846 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fab3 	bl	8001b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fef1 	bl	80023f0 <LL_ADC_IsDeepPowerDownEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fed7 	bl	80023cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff0c 	bl	8002440 <LL_ADC_IsInternalRegulatorEnabled>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d115      	bne.n	800265a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fef0 	bl	8002418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002638:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_ADC_Init+0x288>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	4a85      	ldr	r2, [pc, #532]	; (8002854 <HAL_ADC_Init+0x28c>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	3301      	adds	r3, #1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800264c:	e002      	b.n	8002654 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3b01      	subs	r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff feee 	bl	8002440 <LL_ADC_IsInternalRegulatorEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff62 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8002690:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 80ca 	bne.w	8002834 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80c6 	bne.w	8002834 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026b0:	f043 0202 	orr.w	r2, r3, #2
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fefb 	bl	80024b8 <LL_ADC_IsEnabled>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d110      	bne.n	80026ea <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c8:	4863      	ldr	r0, [pc, #396]	; (8002858 <HAL_ADC_Init+0x290>)
 80026ca:	f7ff fef5 	bl	80024b8 <LL_ADC_IsEnabled>
 80026ce:	4604      	mov	r4, r0
 80026d0:	4862      	ldr	r0, [pc, #392]	; (800285c <HAL_ADC_Init+0x294>)
 80026d2:	f7ff fef1 	bl	80024b8 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4323      	orrs	r3, r4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4619      	mov	r1, r3
 80026e4:	485e      	ldr	r0, [pc, #376]	; (8002860 <HAL_ADC_Init+0x298>)
 80026e6:	f7ff fd17 	bl	8002118 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7e5b      	ldrb	r3, [r3, #25]
 80026ee:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026fa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002700:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002708:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	3b01      	subs	r3, #1
 800271e:	045b      	lsls	r3, r3, #17
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_ADC_Init+0x29c>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	69b9      	ldr	r1, [r7, #24]
 8002752:	430b      	orrs	r3, r1
 8002754:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fefa 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8002760:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff1b 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 800276c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d13d      	bne.n	80027f0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d13a      	bne.n	80027f0 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800277e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002786:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002796:	f023 0302 	bic.w	r3, r3, #2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d118      	bne.n	80027e0 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027d0:	430a      	orrs	r2, r1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	611a      	str	r2, [r3, #16]
 80027de:	e007      	b.n	80027f0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10c      	bne.n	8002812 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f023 010f 	bic.w	r1, r3, #15
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	1e5a      	subs	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
 8002810:	e007      	b.n	8002822 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 020f 	bic.w	r2, r2, #15
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f023 0303 	bic.w	r3, r3, #3
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
 8002832:	e007      	b.n	8002844 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	f043 0210 	orr.w	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002844:	7ffb      	ldrb	r3, [r7, #31]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	bf00      	nop
 8002850:	2000007c 	.word	0x2000007c
 8002854:	053e2d63 	.word	0x053e2d63
 8002858:	50040000 	.word	0x50040000
 800285c:	50040100 	.word	0x50040100
 8002860:	50040300 	.word	0x50040300
 8002864:	fff0c007 	.word	0xfff0c007

08002868 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002870:	4857      	ldr	r0, [pc, #348]	; (80029d0 <HAL_ADC_Start+0x168>)
 8002872:	f7ff fd8f 	bl	8002394 <LL_ADC_GetMultimode>
 8002876:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fe69 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 809c 	bne.w	80029c2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_ADC_Start+0x30>
 8002894:	2302      	movs	r3, #2
 8002896:	e097      	b.n	80029c8 <HAL_ADC_Start+0x160>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f001 f8a5 	bl	80039f0 <ADC_Enable>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 8083 	bne.w	80029b8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a42      	ldr	r2, [pc, #264]	; (80029d4 <HAL_ADC_Start+0x16c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d002      	beq.n	80028d6 <HAL_ADC_Start+0x6e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	e000      	b.n	80028d8 <HAL_ADC_Start+0x70>
 80028d6:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <HAL_ADC_Start+0x170>)
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4293      	cmp	r3, r2
 80028de:	d002      	beq.n	80028e6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fe:	d106      	bne.n	800290e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f023 0206 	bic.w	r2, r3, #6
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	; 0x58
 800290c:	e002      	b.n	8002914 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	221c      	movs	r2, #28
 800291a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <HAL_ADC_Start+0x16c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d002      	beq.n	8002934 <HAL_ADC_Start+0xcc>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e000      	b.n	8002936 <HAL_ADC_Start+0xce>
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_ADC_Start+0x170>)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4293      	cmp	r3, r2
 800293c:	d008      	beq.n	8002950 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d002      	beq.n	8002950 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b09      	cmp	r3, #9
 800294e:	d114      	bne.n	800297a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fdc6 	bl	8002504 <LL_ADC_REG_StartConversion>
 8002978:	e025      	b.n	80029c6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_ADC_Start+0x16c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d002      	beq.n	8002996 <HAL_ADC_Start+0x12e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e000      	b.n	8002998 <HAL_ADC_Start+0x130>
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_ADC_Start+0x170>)
 8002998:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00f      	beq.n	80029c6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
 80029b6:	e006      	b.n	80029c6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80029c0:	e001      	b.n	80029c6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
 80029c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	50040300 	.word	0x50040300
 80029d4:	50040100 	.word	0x50040100
 80029d8:	50040000 	.word	0x50040000

080029dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_Stop+0x16>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e023      	b.n	8002a3a <HAL_ADC_Stop+0x5e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80029fa:	2103      	movs	r1, #3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 ff3b 	bl	8003878 <ADC_ConversionStop>
 8002a02:	4603      	mov	r3, r0
 8002a04:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f001 f851 	bl	8003ab4 <ADC_Disable>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a4e:	4866      	ldr	r0, [pc, #408]	; (8002be8 <HAL_ADC_PollForConversion+0x1a4>)
 8002a50:	f7ff fca0 	bl	8002394 <LL_ADC_GetMultimode>
 8002a54:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d102      	bne.n	8002a64 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a5e:	2308      	movs	r3, #8
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	e02a      	b.n	8002aba <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d002      	beq.n	8002a76 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d111      	bne.n	8002a9a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0a4      	b.n	8002bde <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a94:	2304      	movs	r3, #4
 8002a96:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a98:	e00f      	b.n	8002aba <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a9a:	4853      	ldr	r0, [pc, #332]	; (8002be8 <HAL_ADC_PollForConversion+0x1a4>)
 8002a9c:	f7ff fc88 	bl	80023b0 <LL_ADC_GetMultiDMATransfer>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e093      	b.n	8002bde <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002aba:	f7ff fafd 	bl	80020b8 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ac0:	e021      	b.n	8002b06 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d01d      	beq.n	8002b06 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002aca:	f7ff faf5 	bl	80020b8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <HAL_ADC_PollForConversion+0x9c>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d112      	bne.n	8002b06 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f043 0204 	orr.w	r2, r3, #4
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e06b      	b.n	8002bde <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0d6      	beq.n	8002ac2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fb93 	bl	8002250 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01c      	beq.n	8002b6a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e5b      	ldrb	r3, [r3, #25]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d118      	bne.n	8002b6a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d111      	bne.n	8002b6a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_ADC_PollForConversion+0x1a8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d002      	beq.n	8002b7a <HAL_ADC_PollForConversion+0x136>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e000      	b.n	8002b7c <HAL_ADC_PollForConversion+0x138>
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_ADC_PollForConversion+0x1ac>)
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d008      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d002      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	d104      	bne.n	8002ba0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e00c      	b.n	8002bba <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a11      	ldr	r2, [pc, #68]	; (8002bec <HAL_ADC_PollForConversion+0x1a8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d002      	beq.n	8002bb0 <HAL_ADC_PollForConversion+0x16c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	e000      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x16e>
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_ADC_PollForConversion+0x1ac>)
 8002bb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d104      	bne.n	8002bca <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e008      	b.n	8002bdc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	220c      	movs	r2, #12
 8002bda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	50040300 	.word	0x50040300
 8002bec:	50040100 	.word	0x50040100
 8002bf0:	50040000 	.word	0x50040000

08002bf4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c2c:	4882      	ldr	r0, [pc, #520]	; (8002e38 <HAL_ADC_IRQHandler+0x228>)
 8002c2e:	f7ff fbb1 	bl	8002394 <LL_ADC_GetMultimode>
 8002c32:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d017      	beq.n	8002c6e <HAL_ADC_IRQHandler+0x5e>
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d012      	beq.n	8002c6e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f001 f861 	bl	8003d28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x72>
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8083 	beq.w	8002d94 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d07d      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff facb 	bl	8002250 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d062      	beq.n	8002d86 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5d      	ldr	r2, [pc, #372]	; (8002e3c <HAL_ADC_IRQHandler+0x22c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d002      	beq.n	8002cd0 <HAL_ADC_IRQHandler+0xc0>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e000      	b.n	8002cd2 <HAL_ADC_IRQHandler+0xc2>
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_ADC_IRQHandler+0x230>)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d008      	beq.n	8002cec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d002      	beq.n	8002cec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d104      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	e00c      	b.n	8002d10 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a50      	ldr	r2, [pc, #320]	; (8002e3c <HAL_ADC_IRQHandler+0x22c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d002      	beq.n	8002d06 <HAL_ADC_IRQHandler+0xf6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	e000      	b.n	8002d08 <HAL_ADC_IRQHandler+0xf8>
 8002d06:	4b4e      	ldr	r3, [pc, #312]	; (8002e40 <HAL_ADC_IRQHandler+0x230>)
 8002d08:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d135      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d12e      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fc11 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11a      	bne.n	8002d6e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020c 	bic.w	r2, r2, #12
 8002d46:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d112      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
 8002d6c:	e00b      	b.n	8002d86 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f043 0210 	orr.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f95c 	bl	8003044 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	220c      	movs	r2, #12
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x198>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 809f 	beq.w	8002ef2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8099 	beq.w	8002ef2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fa76 	bl	80022ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002de2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fa31 	bl	8002250 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dee:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <HAL_ADC_IRQHandler+0x22c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d002      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x1f0>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e000      	b.n	8002e02 <HAL_ADC_IRQHandler+0x1f2>
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_ADC_IRQHandler+0x230>)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d008      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d002      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b07      	cmp	r3, #7
 8002e1a:	d104      	bne.n	8002e26 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	e013      	b.n	8002e4e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_ADC_IRQHandler+0x22c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_ADC_IRQHandler+0x234>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	e007      	b.n	8002e46 <HAL_ADC_IRQHandler+0x236>
 8002e36:	bf00      	nop
 8002e38:	50040300 	.word	0x50040300
 8002e3c:	50040100 	.word	0x50040100
 8002e40:	50040000 	.word	0x50040000
 8002e44:	4b7d      	ldr	r3, [pc, #500]	; (800303c <HAL_ADC_IRQHandler+0x42c>)
 8002e46:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d047      	beq.n	8002ee4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x25e>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d03f      	beq.n	8002ee4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d13a      	bne.n	8002ee4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d133      	bne.n	8002ee4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d12e      	bne.n	8002ee4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fb89 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11a      	bne.n	8002ecc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ea4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d112      	bne.n	8002ee4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
 8002eca:	e00b      	b.n	8002ee4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fef7 	bl	8003cd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2260      	movs	r2, #96	; 0x60
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d011      	beq.n	8002f20 <HAL_ADC_IRQHandler+0x310>
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8a0 	bl	8003058 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x340>
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00d      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fedd 	bl	8003d00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <HAL_ADC_IRQHandler+0x370>
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fecf 	bl	8003d14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d036      	beq.n	8002ff8 <HAL_ADC_IRQHandler+0x3e8>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d031      	beq.n	8002ff8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa0:	e014      	b.n	8002fcc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fa8:	4825      	ldr	r0, [pc, #148]	; (8003040 <HAL_ADC_IRQHandler+0x430>)
 8002faa:	f7ff fa01 	bl	80023b0 <LL_ADC_GetMultiDMATransfer>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	e008      	b.n	8002fcc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f83e 	bl	800306c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <HAL_ADC_IRQHandler+0x424>
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f043 0208 	orr.w	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800302c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fe5c 	bl	8003cec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003034:	bf00      	nop
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	50040000 	.word	0x50040000
 8003040:	50040300 	.word	0x50040300

08003044 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b0b6      	sub	sp, #216	; 0xd8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x22>
 800309e:	2302      	movs	r3, #2
 80030a0:	e3d5      	b.n	800384e <HAL_ADC_ConfigChannel+0x7ce>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fa50 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 83ba 	bne.w	8003830 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d824      	bhi.n	800310e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	3b02      	subs	r3, #2
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d81b      	bhi.n	8003106 <HAL_ADC_ConfigChannel+0x86>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <HAL_ADC_ConfigChannel+0x54>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030ed 	.word	0x080030ed
 80030dc:	080030f5 	.word	0x080030f5
 80030e0:	080030fd 	.word	0x080030fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	220c      	movs	r2, #12
 80030e8:	605a      	str	r2, [r3, #4]
          break;
 80030ea:	e011      	b.n	8003110 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2212      	movs	r2, #18
 80030f0:	605a      	str	r2, [r3, #4]
          break;
 80030f2:	e00d      	b.n	8003110 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2218      	movs	r2, #24
 80030f8:	605a      	str	r2, [r3, #4]
          break;
 80030fa:	e009      	b.n	8003110 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003102:	605a      	str	r2, [r3, #4]
          break;
 8003104:	e004      	b.n	8003110 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2206      	movs	r2, #6
 800310a:	605a      	str	r2, [r3, #4]
          break;
 800310c:	e000      	b.n	8003110 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800310e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	f7ff f8aa 	bl	8002276 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fa14 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 800312c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fa34 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 800313a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800313e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 81c1 	bne.w	80034ca <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 81bc 	bne.w	80034ca <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800315a:	d10f      	bne.n	800317c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	4619      	mov	r1, r3
 8003168:	f7ff f8c4 	bl	80022f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff f858 	bl	800222a <LL_ADC_SetSamplingTimeCommonConfig>
 800317a:	e00e      	b.n	800319a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	461a      	mov	r2, r3
 800318a:	f7ff f8b3 	bl	80022f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f848 	bl	800222a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d00a      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6919      	ldr	r1, [r3, #16]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031cc:	f7fe ffd8 	bl	8002180 <LL_ADC_SetOffset>
 80031d0:	e17b      	b.n	80034ca <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fff5 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x17e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe ffea 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	0e9b      	lsrs	r3, r3, #26
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	e01e      	b.n	800323c <HAL_ADC_ConfigChannel+0x1bc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe ffdf 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800321c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x1b0>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e004      	b.n	800323a <HAL_ADC_ConfigChannel+0x1ba>
  return __builtin_clz(value);
 8003230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003244:	2b00      	cmp	r3, #0
 8003246:	d105      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1d4>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	e018      	b.n	8003286 <HAL_ADC_ConfigChannel+0x206>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800326c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003270:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e004      	b.n	8003286 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800327c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003286:	429a      	cmp	r2, r3
 8003288:	d106      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe ffae 	bl	80021f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ff92 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x244>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe ff87 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	0e9b      	lsrs	r3, r3, #26
 80032be:	f003 021f 	and.w	r2, r3, #31
 80032c2:	e01e      	b.n	8003302 <HAL_ADC_ConfigChannel+0x282>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe ff7c 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80032f2:	2320      	movs	r3, #32
 80032f4:	e004      	b.n	8003300 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80032f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_ADC_ConfigChannel+0x29a>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	e018      	b.n	800334c <HAL_ADC_ConfigChannel+0x2cc>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800332e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003336:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800333e:	2320      	movs	r3, #32
 8003340:	e004      	b.n	800334c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800334c:	429a      	cmp	r2, r3
 800334e:	d106      	bne.n	800335e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2200      	movs	r2, #0
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe ff4b 	bl	80021f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ff2f 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <HAL_ADC_ConfigChannel+0x30a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe ff24 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	e01e      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x348>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe ff19 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e004      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80033bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x360>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	e016      	b.n	800340e <HAL_ADC_ConfigChannel+0x38e>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e004      	b.n	800340e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800340e:	429a      	cmp	r2, r3
 8003410:	d106      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe feea 	bl	80021f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2103      	movs	r1, #3
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fece 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_ADC_ConfigChannel+0x3cc>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2103      	movs	r1, #3
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe fec3 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 8003442:	4603      	mov	r3, r0
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	f003 021f 	and.w	r2, r3, #31
 800344a:	e017      	b.n	800347c <HAL_ADC_ConfigChannel+0x3fc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2103      	movs	r1, #3
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe feb8 	bl	80021c8 <LL_ADC_GetOffsetChannel>
 8003458:	4603      	mov	r3, r0
 800345a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003464:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003466:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800346e:	2320      	movs	r3, #32
 8003470:	e003      	b.n	800347a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x414>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	e011      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x438>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80034ac:	2320      	movs	r3, #32
 80034ae:	e003      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80034b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d106      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2103      	movs	r1, #3
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fe95 	bl	80021f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fff2 	bl	80024b8 <LL_ADC_IsEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 8140 	bne.w	800375c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	461a      	mov	r2, r3
 80034ea:	f7fe ff2f 	bl	800234c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4a8f      	ldr	r2, [pc, #572]	; (8003730 <HAL_ADC_ConfigChannel+0x6b0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	f040 8131 	bne.w	800375c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x4a2>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	3301      	adds	r3, #1
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2b09      	cmp	r3, #9
 8003518:	bf94      	ite	ls
 800351a:	2301      	movls	r3, #1
 800351c:	2300      	movhi	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e019      	b.n	8003556 <HAL_ADC_ConfigChannel+0x4d6>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003532:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e003      	b.n	8003546 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800353e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2b09      	cmp	r3, #9
 800354e:	bf94      	ite	ls
 8003550:	2301      	movls	r3, #1
 8003552:	2300      	movhi	r3, #0
 8003554:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003556:	2b00      	cmp	r3, #0
 8003558:	d079      	beq.n	800364e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003562:	2b00      	cmp	r3, #0
 8003564:	d107      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x4f6>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0e9b      	lsrs	r3, r3, #26
 800356c:	3301      	adds	r3, #1
 800356e:	069b      	lsls	r3, r3, #26
 8003570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003574:	e015      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x522>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003586:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800358e:	2320      	movs	r3, #32
 8003590:	e003      	b.n	800359a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	3301      	adds	r3, #1
 800359c:	069b      	lsls	r3, r3, #26
 800359e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x542>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	0e9b      	lsrs	r3, r3, #26
 80035b4:	3301      	adds	r3, #1
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	e017      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x572>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80035da:	2320      	movs	r3, #32
 80035dc:	e003      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80035de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	ea42 0103 	orr.w	r1, r2, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x598>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	3301      	adds	r3, #1
 800360a:	f003 021f 	and.w	r2, r3, #31
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	051b      	lsls	r3, r3, #20
 8003616:	e018      	b.n	800364a <HAL_ADC_ConfigChannel+0x5ca>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003628:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800362a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e003      	b.n	800363c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3301      	adds	r3, #1
 800363e:	f003 021f 	and.w	r2, r3, #31
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364a:	430b      	orrs	r3, r1
 800364c:	e081      	b.n	8003752 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_ADC_ConfigChannel+0x5ea>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	3301      	adds	r3, #1
 8003662:	069b      	lsls	r3, r3, #26
 8003664:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003668:	e015      	b.n	8003696 <HAL_ADC_ConfigChannel+0x616>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003682:	2320      	movs	r3, #32
 8003684:	e003      	b.n	800368e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	3301      	adds	r3, #1
 8003690:	069b      	lsls	r3, r3, #26
 8003692:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x636>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0e9b      	lsrs	r3, r3, #26
 80036a8:	3301      	adds	r3, #1
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	e017      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x666>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	61fb      	str	r3, [r7, #28]
  return result;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e003      	b.n	80036da <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	ea42 0103 	orr.w	r1, r2, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10d      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x692>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	0e9b      	lsrs	r3, r3, #26
 80036fc:	3301      	adds	r3, #1
 80036fe:	f003 021f 	and.w	r2, r3, #31
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	3b1e      	subs	r3, #30
 800370a:	051b      	lsls	r3, r3, #20
 800370c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003710:	e01e      	b.n	8003750 <HAL_ADC_ConfigChannel+0x6d0>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	613b      	str	r3, [r7, #16]
  return result;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e006      	b.n	800373c <HAL_ADC_ConfigChannel+0x6bc>
 800372e:	bf00      	nop
 8003730:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3301      	adds	r3, #1
 800373e:	f003 021f 	and.w	r2, r3, #31
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	3b1e      	subs	r3, #30
 800374a:	051b      	lsls	r3, r3, #20
 800374c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003750:	430b      	orrs	r3, r1
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	6892      	ldr	r2, [r2, #8]
 8003756:	4619      	mov	r1, r3
 8003758:	f7fe fdcc 	bl	80022f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_ADC_ConfigChannel+0x7d8>)
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d06c      	beq.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003768:	483c      	ldr	r0, [pc, #240]	; (800385c <HAL_ADC_ConfigChannel+0x7dc>)
 800376a:	f7fe fcfb 	bl	8002164 <LL_ADC_GetCommonPathInternalCh>
 800376e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a3a      	ldr	r2, [pc, #232]	; (8003860 <HAL_ADC_ConfigChannel+0x7e0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d127      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800377c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d121      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a35      	ldr	r2, [pc, #212]	; (8003864 <HAL_ADC_ConfigChannel+0x7e4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d157      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800379a:	4619      	mov	r1, r3
 800379c:	482f      	ldr	r0, [pc, #188]	; (800385c <HAL_ADC_ConfigChannel+0x7dc>)
 800379e:	f7fe fcce 	bl	800213e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_ADC_ConfigChannel+0x7e8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	4a30      	ldr	r2, [pc, #192]	; (800386c <HAL_ADC_ConfigChannel+0x7ec>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	4613      	mov	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037bc:	e002      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f9      	bne.n	80037be <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037ca:	e03a      	b.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a27      	ldr	r2, [pc, #156]	; (8003870 <HAL_ADC_ConfigChannel+0x7f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x77e>
 80037d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10d      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_ADC_ConfigChannel+0x7e4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d12a      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f4:	4619      	mov	r1, r3
 80037f6:	4819      	ldr	r0, [pc, #100]	; (800385c <HAL_ADC_ConfigChannel+0x7dc>)
 80037f8:	f7fe fca1 	bl	800213e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037fc:	e021      	b.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_ADC_ConfigChannel+0x7f4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d11c      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800380c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d116      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <HAL_ADC_ConfigChannel+0x7e4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d111      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800381e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003826:	4619      	mov	r1, r3
 8003828:	480c      	ldr	r0, [pc, #48]	; (800385c <HAL_ADC_ConfigChannel+0x7dc>)
 800382a:	f7fe fc88 	bl	800213e <LL_ADC_SetCommonPathInternalCh>
 800382e:	e008      	b.n	8003842 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800384a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800384e:	4618      	mov	r0, r3
 8003850:	37d8      	adds	r7, #216	; 0xd8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	80080000 	.word	0x80080000
 800385c:	50040300 	.word	0x50040300
 8003860:	c7520000 	.word	0xc7520000
 8003864:	50040000 	.word	0x50040000
 8003868:	2000007c 	.word	0x2000007c
 800386c:	053e2d63 	.word	0x053e2d63
 8003870:	cb840000 	.word	0xcb840000
 8003874:	80000001 	.word	0x80000001

08003878 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fe60 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8003894:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fe81 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 80038a0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d103      	bne.n	80038b0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8098 	beq.w	80039e0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d02a      	beq.n	8003914 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7e5b      	ldrb	r3, [r3, #25]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d126      	bne.n	8003914 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7e1b      	ldrb	r3, [r3, #24]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d122      	bne.n	8003914 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038d2:	e014      	b.n	80038fe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4a45      	ldr	r2, [pc, #276]	; (80039ec <ADC_ConversionStop+0x174>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d90d      	bls.n	80038f8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f043 0210 	orr.w	r2, r3, #16
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e074      	b.n	80039e2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	3301      	adds	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d1e3      	bne.n	80038d4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2240      	movs	r2, #64	; 0x40
 8003912:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d014      	beq.n	8003944 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fe18 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fdd5 	bl	80024de <LL_ADC_IsDisableOngoing>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fdf4 	bl	800252c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d014      	beq.n	8003974 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fe27 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fdbd 	bl	80024de <LL_ADC_IsDisableOngoing>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fe03 	bl	800257a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d005      	beq.n	8003986 <ADC_ConversionStop+0x10e>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d105      	bne.n	800398c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003980:	230c      	movs	r3, #12
 8003982:	617b      	str	r3, [r7, #20]
        break;
 8003984:	e005      	b.n	8003992 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003986:	2308      	movs	r3, #8
 8003988:	617b      	str	r3, [r7, #20]
        break;
 800398a:	e002      	b.n	8003992 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800398c:	2304      	movs	r3, #4
 800398e:	617b      	str	r3, [r7, #20]
        break;
 8003990:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003992:	f7fe fb91 	bl	80020b8 <HAL_GetTick>
 8003996:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003998:	e01b      	b.n	80039d2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800399a:	f7fe fb8d 	bl	80020b8 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d914      	bls.n	80039d2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00d      	beq.n	80039d2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f043 0210 	orr.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e007      	b.n	80039e2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1dc      	bne.n	800399a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	a33fffff 	.word	0xa33fffff

080039f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fd5b 	bl	80024b8 <LL_ADC_IsEnabled>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d14d      	bne.n	8003aa4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <ADC_Enable+0xc0>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	f043 0210 	orr.w	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e039      	b.n	8003aa6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fd16 	bl	8002468 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a3c:	f7fe fb3c 	bl	80020b8 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a42:	e028      	b.n	8003a96 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fd35 	bl	80024b8 <LL_ADC_IsEnabled>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fd05 	bl	8002468 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a5e:	f7fe fb2b 	bl	80020b8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d914      	bls.n	8003a96 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d00d      	beq.n	8003a96 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f043 0210 	orr.w	r2, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e007      	b.n	8003aa6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d1cf      	bne.n	8003a44 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	8000003f 	.word	0x8000003f

08003ab4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fd0c 	bl	80024de <LL_ADC_IsDisableOngoing>
 8003ac6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fcf3 	bl	80024b8 <LL_ADC_IsEnabled>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d047      	beq.n	8003b68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d144      	bne.n	8003b68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030d 	and.w	r3, r3, #13
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10c      	bne.n	8003b06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fccd 	bl	8002490 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2203      	movs	r2, #3
 8003afc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003afe:	f7fe fadb 	bl	80020b8 <HAL_GetTick>
 8003b02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b04:	e029      	b.n	8003b5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	f043 0210 	orr.w	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e023      	b.n	8003b6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b22:	f7fe fac9 	bl	80020b8 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d914      	bls.n	8003b5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f043 0210 	orr.w	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	f043 0201 	orr.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e007      	b.n	8003b6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1dc      	bne.n	8003b22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <LL_ADC_IsEnabled>:
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <LL_ADC_IsEnabled+0x18>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <LL_ADC_IsEnabled+0x1a>
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_StartCalibration>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003baa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_ADC_IsCalibrationOnGoing>:
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bde:	d101      	bne.n	8003be4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d101      	bne.n	8003c0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e04d      	b.n	8003cd0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff39 	bl	8003ab4 <ADC_Disable>
 8003c42:	4603      	mov	r3, r0
 8003c44:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d136      	bne.n	8003cba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c54:	f023 0302 	bic.w	r3, r3, #2
 8003c58:	f043 0202 	orr.w	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ff96 	bl	8003b98 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c6c:	e014      	b.n	8003c98 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3301      	adds	r3, #1
 8003c72:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003c7a:	d30d      	bcc.n	8003c98 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	f023 0312 	bic.w	r3, r3, #18
 8003c84:	f043 0210 	orr.w	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e01b      	b.n	8003cd0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff94 	bl	8003bca <LL_ADC_IsCalibrationOnGoing>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e2      	bne.n	8003c6e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	f023 0303 	bic.w	r3, r3, #3
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
 8003cb8:	e005      	b.n	8003cc6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b09f      	sub	sp, #124	; 0x7c
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e089      	b.n	8003e6e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003d62:	2300      	movs	r3, #0
 8003d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003d66:	2300      	movs	r3, #0
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a42      	ldr	r2, [pc, #264]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d102      	bne.n	8003d7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d74:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	e001      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e068      	b.n	8003e6e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff27 	bl	8003bf2 <LL_ADC_REG_IsConversionOngoing>
 8003da4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff21 	bl	8003bf2 <LL_ADC_REG_IsConversionOngoing>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d14a      	bne.n	8003e4c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d147      	bne.n	8003e4c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dbc:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003dbe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d027      	beq.n	8003e18 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dda:	035b      	lsls	r3, r3, #13
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	431a      	orrs	r2, r3
 8003de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de4:	4824      	ldr	r0, [pc, #144]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003de6:	f7ff fec4 	bl	8003b72 <LL_ADC_IsEnabled>
 8003dea:	4604      	mov	r4, r0
 8003dec:	4823      	ldr	r0, [pc, #140]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003dee:	f7ff fec0 	bl	8003b72 <LL_ADC_IsEnabled>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4323      	orrs	r3, r4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d132      	bne.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e02:	f023 030f 	bic.w	r3, r3, #15
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	6811      	ldr	r1, [r2, #0]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e14:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e16:	e023      	b.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e22:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e24:	4814      	ldr	r0, [pc, #80]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003e26:	f7ff fea4 	bl	8003b72 <LL_ADC_IsEnabled>
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4813      	ldr	r0, [pc, #76]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003e2e:	f7ff fea0 	bl	8003b72 <LL_ADC_IsEnabled>
 8003e32:	4603      	mov	r3, r0
 8003e34:	4323      	orrs	r3, r4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d112      	bne.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e42:	f023 030f 	bic.w	r3, r3, #15
 8003e46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e48:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e4a:	e009      	b.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e5e:	e000      	b.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	377c      	adds	r7, #124	; 0x7c
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd90      	pop	{r4, r7, pc}
 8003e76:	bf00      	nop
 8003e78:	50040000 	.word	0x50040000
 8003e7c:	50040100 	.word	0x50040100
 8003e80:	50040300 	.word	0x50040300

08003e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb6:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	60d3      	str	r3, [r2, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 0307 	and.w	r3, r3, #7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	db0b      	blt.n	8003f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	4907      	ldr	r1, [pc, #28]	; (8003f20 <__NVIC_EnableIRQ+0x38>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2001      	movs	r0, #1
 8003f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e100 	.word	0xe000e100

08003f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db0a      	blt.n	8003f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	490c      	ldr	r1, [pc, #48]	; (8003f70 <__NVIC_SetPriority+0x4c>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	440b      	add	r3, r1
 8003f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f4c:	e00a      	b.n	8003f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4908      	ldr	r1, [pc, #32]	; (8003f74 <__NVIC_SetPriority+0x50>)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	0112      	lsls	r2, r2, #4
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	440b      	add	r3, r1
 8003f62:	761a      	strb	r2, [r3, #24]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000e100 	.word	0xe000e100
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f1c3 0307 	rsb	r3, r3, #7
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	bf28      	it	cs
 8003f96:	2304      	movcs	r3, #4
 8003f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d902      	bls.n	8003fa8 <NVIC_EncodePriority+0x30>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3b03      	subs	r3, #3
 8003fa6:	e000      	b.n	8003faa <NVIC_EncodePriority+0x32>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	401a      	ands	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43d9      	mvns	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	4313      	orrs	r3, r2
         );
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3724      	adds	r7, #36	; 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff0:	d301      	bcc.n	8003ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00f      	b.n	8004016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <SysTick_Config+0x40>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffe:	210f      	movs	r1, #15
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	f7ff ff8e 	bl	8003f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <SysTick_Config+0x40>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <SysTick_Config+0x40>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000e010 	.word	0xe000e010

08004024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff29 	bl	8003e84 <__NVIC_SetPriorityGrouping>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	4603      	mov	r3, r0
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800404c:	f7ff ff3e 	bl	8003ecc <__NVIC_GetPriorityGrouping>
 8004050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f7ff ff8e 	bl	8003f78 <NVIC_EncodePriority>
 800405c:	4602      	mov	r2, r0
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff5d 	bl	8003f24 <__NVIC_SetPriority>
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff31 	bl	8003ee8 <__NVIC_EnableIRQ>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffa2 	bl	8003fe0 <SysTick_Config>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d008      	beq.n	80040d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2204      	movs	r2, #4
 80040c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e022      	b.n	8004116 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 020e 	bic.w	r2, r2, #14
 80040de:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f4:	f003 021c 	and.w	r2, r3, #28
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004102:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d005      	beq.n	8004146 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2204      	movs	r2, #4
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e029      	b.n	800419a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 020e 	bic.w	r2, r2, #14
 8004154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f003 021c 	and.w	r2, r3, #28
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f202 	lsl.w	r2, r1, r2
 8004178:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
    }
  }
  return status;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <HAL_FLASH_Program+0xd0>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_FLASH_Program+0x1e>
 80041be:	2302      	movs	r3, #2
 80041c0:	e053      	b.n	800426a <HAL_FLASH_Program+0xc6>
 80041c2:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <HAL_FLASH_Program+0xd0>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041cc:	f000 f888 	bl	80042e0 <FLASH_WaitForLastOperation>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d143      	bne.n	8004262 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041da:	4b26      	ldr	r3, [pc, #152]	; (8004274 <HAL_FLASH_Program+0xd0>)
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_FLASH_Program+0xd4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80041ec:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_FLASH_Program+0xd4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <HAL_FLASH_Program+0xd4>)
 80041f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80041f8:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <HAL_FLASH_Program+0xd0>)
 80041fa:	2202      	movs	r2, #2
 80041fc:	771a      	strb	r2, [r3, #28]
 80041fe:	e002      	b.n	8004206 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <HAL_FLASH_Program+0xd0>)
 8004202:	2200      	movs	r2, #0
 8004204:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d107      	bne.n	800421c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800420c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004210:	68b8      	ldr	r0, [r7, #8]
 8004212:	f000 f8bd 	bl	8004390 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004216:	2301      	movs	r3, #1
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e010      	b.n	800423e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d002      	beq.n	8004228 <HAL_FLASH_Program+0x84>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d10a      	bne.n	800423e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4619      	mov	r1, r3
 800422c:	68b8      	ldr	r0, [r7, #8]
 800422e:	f000 f8d5 	bl	80043dc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d102      	bne.n	800423e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004238:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800423c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800423e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004242:	f000 f84d 	bl	80042e0 <FLASH_WaitForLastOperation>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_FLASH_Program+0xd4>)
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	43db      	mvns	r3, r3
 8004258:	4907      	ldr	r1, [pc, #28]	; (8004278 <HAL_FLASH_Program+0xd4>)
 800425a:	4013      	ands	r3, r2
 800425c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800425e:	f000 f9cd 	bl	80045fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <HAL_FLASH_Program+0xd0>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]

  return status;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	2000008c 	.word	0x2000008c
 8004278:	40022000 	.word	0x40022000

0800427c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_FLASH_Unlock+0x38>)
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	da0b      	bge.n	80042a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_FLASH_Unlock+0x38>)
 8004290:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <HAL_FLASH_Unlock+0x3c>)
 8004292:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_FLASH_Unlock+0x38>)
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <HAL_FLASH_Unlock+0x40>)
 8004298:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_FLASH_Unlock+0x38>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da01      	bge.n	80042a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80042a6:	79fb      	ldrb	r3, [r7, #7]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40022000 	.word	0x40022000
 80042b8:	45670123 	.word	0x45670123
 80042bc:	cdef89ab 	.word	0xcdef89ab

080042c0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_FLASH_Lock+0x1c>)
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <HAL_FLASH_Lock+0x1c>)
 80042ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042ce:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40022000 	.word	0x40022000

080042e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80042e8:	f7fd fee6 	bl	80020b8 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80042ee:	e00d      	b.n	800430c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f6:	d009      	beq.n	800430c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80042f8:	f7fd fede 	bl	80020b8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d801      	bhi.n	800430c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e036      	b.n	800437a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800430c:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <FLASH_WaitForLastOperation+0xa4>)
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1eb      	bne.n	80042f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <FLASH_WaitForLastOperation+0xa4>)
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <FLASH_WaitForLastOperation+0xa8>)
 800431e:	4013      	ands	r3, r2
 8004320:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01e      	beq.n	8004366 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <FLASH_WaitForLastOperation+0xac>)
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	4a16      	ldr	r2, [pc, #88]	; (800438c <FLASH_WaitForLastOperation+0xac>)
 8004332:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <FLASH_WaitForLastOperation+0x6e>
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <FLASH_WaitForLastOperation+0xa4>)
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004348:	490e      	ldr	r1, [pc, #56]	; (8004384 <FLASH_WaitForLastOperation+0xa4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	618b      	str	r3, [r1, #24]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <FLASH_WaitForLastOperation+0x82>
 8004358:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <FLASH_WaitForLastOperation+0xa4>)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004360:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e009      	b.n	800437a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <FLASH_WaitForLastOperation+0xa4>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004372:	4b04      	ldr	r3, [pc, #16]	; (8004384 <FLASH_WaitForLastOperation+0xa4>)
 8004374:	2201      	movs	r2, #1
 8004376:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40022000 	.word	0x40022000
 8004388:	0002c3fa 	.word	0x0002c3fa
 800438c:	2000008c 	.word	0x2000008c

08004390 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800439c:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <FLASH_Program_DoubleWord+0x48>)
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <FLASH_Program_DoubleWord+0x48>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80043ae:	f3bf 8f6f 	isb	sy
}
 80043b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80043b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	000a      	movs	r2, r1
 80043c2:	2300      	movs	r3, #0
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	3104      	adds	r1, #4
 80043c8:	4613      	mov	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40022000 	.word	0x40022000

080043dc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80043e6:	2340      	movs	r3, #64	; 0x40
 80043e8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80043f2:	4b14      	ldr	r3, [pc, #80]	; (8004444 <FLASH_Program_Fast+0x68>)
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <FLASH_Program_Fast+0x68>)
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004402:	60fb      	str	r3, [r7, #12]
  return(result);
 8004404:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004406:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004408:	b672      	cpsid	i
}
 800440a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	3304      	adds	r3, #4
 8004418:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3304      	adds	r3, #4
 800441e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004420:	7ffb      	ldrb	r3, [r7, #31]
 8004422:	3b01      	subs	r3, #1
 8004424:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004426:	7ffb      	ldrb	r3, [r7, #31]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ef      	bne.n	800440c <FLASH_Program_Fast+0x30>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004438:	bf00      	nop
 800443a:	3724      	adds	r7, #36	; 0x24
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	40022000 	.word	0x40022000

08004448 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_FLASHEx_Erase+0x128>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_FLASHEx_Erase+0x16>
 800445a:	2302      	movs	r3, #2
 800445c:	e083      	b.n	8004566 <HAL_FLASHEx_Erase+0x11e>
 800445e:	4b44      	ldr	r3, [pc, #272]	; (8004570 <HAL_FLASHEx_Erase+0x128>)
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004464:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004468:	f7ff ff3a 	bl	80042e0 <FLASH_WaitForLastOperation>
 800446c:	4603      	mov	r3, r0
 800446e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d173      	bne.n	800455e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004476:	4b3e      	ldr	r3, [pc, #248]	; (8004570 <HAL_FLASHEx_Erase+0x128>)
 8004478:	2200      	movs	r2, #0
 800447a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800447c:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004494:	4b37      	ldr	r3, [pc, #220]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a36      	ldr	r2, [pc, #216]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 800449a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800449e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80044a0:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_FLASHEx_Erase+0x128>)
 80044a2:	2203      	movs	r2, #3
 80044a4:	771a      	strb	r2, [r3, #28]
 80044a6:	e016      	b.n	80044d6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80044a8:	4b31      	ldr	r3, [pc, #196]	; (8004570 <HAL_FLASHEx_Erase+0x128>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	771a      	strb	r2, [r3, #28]
 80044ae:	e012      	b.n	80044d6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80044b0:	4b30      	ldr	r3, [pc, #192]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80044bc:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 80044c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80044c8:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_FLASHEx_Erase+0x128>)
 80044ca:	2202      	movs	r2, #2
 80044cc:	771a      	strb	r2, [r3, #28]
 80044ce:	e002      	b.n	80044d6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_FLASHEx_Erase+0x128>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d111      	bne.n	8004502 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f848 	bl	8004578 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044ec:	f7ff fef8 	bl	80042e0 <FLASH_WaitForLastOperation>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80044f4:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 80044fa:	f023 0304 	bic.w	r3, r3, #4
 80044fe:	6153      	str	r3, [r2, #20]
 8004500:	e02b      	b.n	800455a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e01b      	b.n	800454a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4619      	mov	r1, r3
 8004518:	68b8      	ldr	r0, [r7, #8]
 800451a:	f000 f84b 	bl	80045b4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800451e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004522:	f7ff fedd 	bl	80042e0 <FLASH_WaitForLastOperation>
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4a11      	ldr	r2, [pc, #68]	; (8004574 <HAL_FLASHEx_Erase+0x12c>)
 8004530:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8004534:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	601a      	str	r2, [r3, #0]
          break;
 8004542:	e00a      	b.n	800455a <HAL_FLASHEx_Erase+0x112>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	3301      	adds	r3, #1
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4413      	add	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	d3db      	bcc.n	8004512 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800455a:	f000 f84f 	bl	80045fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <HAL_FLASHEx_Erase+0x128>)
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]

  return status;
 8004564:	7bfb      	ldrb	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	2000008c 	.word	0x2000008c
 8004574:	40022000 	.word	0x40022000

08004578 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <FLASH_MassErase+0x38>)
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <FLASH_MassErase+0x38>)
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <FLASH_MassErase+0x38>)
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <FLASH_MassErase+0x38>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a0:	6153      	str	r3, [r2, #20]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40022000 	.word	0x40022000

080045b4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80045be:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <FLASH_PageErase+0x44>)
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80045ce:	490a      	ldr	r1, [pc, #40]	; (80045f8 <FLASH_PageErase+0x44>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80045d4:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <FLASH_PageErase+0x44>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	4a07      	ldr	r2, [pc, #28]	; (80045f8 <FLASH_PageErase+0x44>)
 80045da:	f043 0302 	orr.w	r3, r3, #2
 80045de:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <FLASH_PageErase+0x44>)
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <FLASH_PageErase+0x44>)
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ea:	6153      	str	r3, [r2, #20]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40022000 	.word	0x40022000

080045fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004602:	4b21      	ldr	r3, [pc, #132]	; (8004688 <FLASH_FlushCaches+0x8c>)
 8004604:	7f1b      	ldrb	r3, [r3, #28]
 8004606:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d002      	beq.n	8004614 <FLASH_FlushCaches+0x18>
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d117      	bne.n	8004644 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <FLASH_FlushCaches+0x90>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1c      	ldr	r2, [pc, #112]	; (800468c <FLASH_FlushCaches+0x90>)
 800461a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800461e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <FLASH_FlushCaches+0x90>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a19      	ldr	r2, [pc, #100]	; (800468c <FLASH_FlushCaches+0x90>)
 8004626:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	4b17      	ldr	r3, [pc, #92]	; (800468c <FLASH_FlushCaches+0x90>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a16      	ldr	r2, [pc, #88]	; (800468c <FLASH_FlushCaches+0x90>)
 8004632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004636:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004638:	4b14      	ldr	r3, [pc, #80]	; (800468c <FLASH_FlushCaches+0x90>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a13      	ldr	r2, [pc, #76]	; (800468c <FLASH_FlushCaches+0x90>)
 800463e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004642:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d002      	beq.n	8004650 <FLASH_FlushCaches+0x54>
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d111      	bne.n	8004674 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <FLASH_FlushCaches+0x90>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <FLASH_FlushCaches+0x90>)
 8004656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <FLASH_FlushCaches+0x90>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <FLASH_FlushCaches+0x90>)
 8004662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004666:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004668:	4b08      	ldr	r3, [pc, #32]	; (800468c <FLASH_FlushCaches+0x90>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <FLASH_FlushCaches+0x90>)
 800466e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004672:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <FLASH_FlushCaches+0x8c>)
 8004676:	2200      	movs	r2, #0
 8004678:	771a      	strb	r2, [r3, #28]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	2000008c 	.word	0x2000008c
 800468c:	40022000 	.word	0x40022000

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800469e:	e14e      	b.n	800493e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8140 	beq.w	8004938 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d005      	beq.n	80046d0 <HAL_GPIO_Init+0x40>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d130      	bne.n	8004732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004706:	2201      	movs	r2, #1
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 0201 	and.w	r2, r3, #1
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b03      	cmp	r3, #3
 800473c:	d017      	beq.n	800476e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d123      	bne.n	80047c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	6939      	ldr	r1, [r7, #16]
 80047be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2203      	movs	r2, #3
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0203 	and.w	r2, r3, #3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 809a 	beq.w	8004938 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004804:	4b55      	ldr	r3, [pc, #340]	; (800495c <HAL_GPIO_Init+0x2cc>)
 8004806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004808:	4a54      	ldr	r2, [pc, #336]	; (800495c <HAL_GPIO_Init+0x2cc>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6613      	str	r3, [r2, #96]	; 0x60
 8004810:	4b52      	ldr	r3, [pc, #328]	; (800495c <HAL_GPIO_Init+0x2cc>)
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800481c:	4a50      	ldr	r2, [pc, #320]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	3302      	adds	r3, #2
 8004824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	220f      	movs	r2, #15
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004846:	d013      	beq.n	8004870 <HAL_GPIO_Init+0x1e0>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a46      	ldr	r2, [pc, #280]	; (8004964 <HAL_GPIO_Init+0x2d4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00d      	beq.n	800486c <HAL_GPIO_Init+0x1dc>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a45      	ldr	r2, [pc, #276]	; (8004968 <HAL_GPIO_Init+0x2d8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <HAL_GPIO_Init+0x1d8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a44      	ldr	r2, [pc, #272]	; (800496c <HAL_GPIO_Init+0x2dc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_GPIO_Init+0x1d4>
 8004860:	2303      	movs	r3, #3
 8004862:	e006      	b.n	8004872 <HAL_GPIO_Init+0x1e2>
 8004864:	2307      	movs	r3, #7
 8004866:	e004      	b.n	8004872 <HAL_GPIO_Init+0x1e2>
 8004868:	2302      	movs	r3, #2
 800486a:	e002      	b.n	8004872 <HAL_GPIO_Init+0x1e2>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <HAL_GPIO_Init+0x1e2>
 8004870:	2300      	movs	r3, #0
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	f002 0203 	and.w	r2, r2, #3
 8004878:	0092      	lsls	r2, r2, #2
 800487a:	4093      	lsls	r3, r2
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004882:	4937      	ldr	r1, [pc, #220]	; (8004960 <HAL_GPIO_Init+0x2d0>)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	3302      	adds	r3, #2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004890:	4b37      	ldr	r3, [pc, #220]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	43db      	mvns	r3, r3
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048b4:	4a2e      	ldr	r2, [pc, #184]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048ba:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048de:	4a24      	ldr	r2, [pc, #144]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048e4:	4b22      	ldr	r3, [pc, #136]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4013      	ands	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004908:	4a19      	ldr	r2, [pc, #100]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	43db      	mvns	r3, r3
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4013      	ands	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004932:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <HAL_GPIO_Init+0x2e0>)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	3301      	adds	r3, #1
 800493c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	f47f aea9 	bne.w	80046a0 <HAL_GPIO_Init+0x10>
  }
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40021000 	.word	0x40021000
 8004960:	40010000 	.word	0x40010000
 8004964:	48000400 	.word	0x48000400
 8004968:	48000800 	.word	0x48000800
 800496c:	48000c00 	.word	0x48000c00
 8004970:	40010400 	.word	0x40010400

08004974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
 8004980:	4613      	mov	r3, r2
 8004982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004984:	787b      	ldrb	r3, [r7, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004990:	e002      	b.n	8004998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4013      	ands	r3, r2
 80049bc:	041a      	lsls	r2, r3, #16
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	43d9      	mvns	r1, r3
 80049c2:	887b      	ldrh	r3, [r7, #2]
 80049c4:	400b      	ands	r3, r1
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	619a      	str	r2, [r3, #24]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40007000 	.word	0x40007000

080049f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40007000 	.word	0x40007000

08004a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a22:	d130      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a30:	d038      	beq.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2232      	movs	r2, #50	; 0x32
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	0c9b      	lsrs	r3, r3, #18
 8004a54:	3301      	adds	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a58:	e002      	b.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d102      	bne.n	8004a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f2      	bne.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d110      	bne.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	d007      	beq.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a9c:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	2000007c 	.word	0x2000007c
 8004abc:	431bde83 	.word	0x431bde83

08004ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f000 bc56 	b.w	8005380 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad4:	4ba1      	ldr	r3, [pc, #644]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ade:	4b9f      	ldr	r3, [pc, #636]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80e6 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4c>
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	f040 808d 	bne.w	8004c1e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	f040 8089 	bne.w	8004c1e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b0c:	4b93      	ldr	r3, [pc, #588]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d006      	beq.n	8004b26 <HAL_RCC_OscConfig+0x66>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f000 bc2d 	b.w	8005380 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2a:	4b8c      	ldr	r3, [pc, #560]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <HAL_RCC_OscConfig+0x80>
 8004b36:	4b89      	ldr	r3, [pc, #548]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3e:	e005      	b.n	8004b4c <HAL_RCC_OscConfig+0x8c>
 8004b40:	4b86      	ldr	r3, [pc, #536]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d224      	bcs.n	8004b9a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fdbf 	bl	80056d8 <RCC_SetFlashLatencyFromMSIRange>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f000 bc0d 	b.w	8005380 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b66:	4b7d      	ldr	r3, [pc, #500]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a7c      	ldr	r2, [pc, #496]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b6c:	f043 0308 	orr.w	r3, r3, #8
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b7a      	ldr	r3, [pc, #488]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	4977      	ldr	r1, [pc, #476]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b84:	4b75      	ldr	r3, [pc, #468]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	4972      	ldr	r1, [pc, #456]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
 8004b98:	e025      	b.n	8004be6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b9a:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6f      	ldr	r2, [pc, #444]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004ba0:	f043 0308 	orr.w	r3, r3, #8
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	496a      	ldr	r1, [pc, #424]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bb8:	4b68      	ldr	r3, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	4965      	ldr	r1, [pc, #404]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fd7e 	bl	80056d8 <RCC_SetFlashLatencyFromMSIRange>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e3cc      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004be6:	f000 fcb3 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8004bea:	4602      	mov	r2, r0
 8004bec:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	495a      	ldr	r1, [pc, #360]	; (8004d60 <HAL_RCC_OscConfig+0x2a0>)
 8004bf8:	5ccb      	ldrb	r3, [r1, r3]
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004c02:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <HAL_RCC_OscConfig+0x2a4>)
 8004c04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c06:	4b58      	ldr	r3, [pc, #352]	; (8004d68 <HAL_RCC_OscConfig+0x2a8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fd fa04 	bl	8002018 <HAL_InitTick>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d052      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	e3b0      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d032      	beq.n	8004c8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c26:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4c      	ldr	r2, [pc, #304]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c32:	f7fd fa41 	bl	80020b8 <HAL_GetTick>
 8004c36:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c3a:	f7fd fa3d 	bl	80020b8 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e399      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c4c:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c58:	4b40      	ldr	r3, [pc, #256]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3f      	ldr	r2, [pc, #252]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c5e:	f043 0308 	orr.w	r3, r3, #8
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	493a      	ldr	r1, [pc, #232]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c76:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	4935      	ldr	r1, [pc, #212]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
 8004c8a:	e01a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c8c:	4b33      	ldr	r3, [pc, #204]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a32      	ldr	r2, [pc, #200]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c98:	f7fd fa0e 	bl	80020b8 <HAL_GetTick>
 8004c9c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ca0:	f7fd fa0a 	bl	80020b8 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e366      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cb2:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x1e0>
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d073      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x220>
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d10b      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d063      	beq.n	8004db4 <HAL_RCC_OscConfig+0x2f4>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d15f      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e343      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d00:	d106      	bne.n	8004d10 <HAL_RCC_OscConfig+0x250>
 8004d02:	4b16      	ldr	r3, [pc, #88]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e01d      	b.n	8004d4c <HAL_RCC_OscConfig+0x28c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x274>
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a0f      	ldr	r2, [pc, #60]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a0c      	ldr	r2, [pc, #48]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0x28c>
 8004d34:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a08      	ldr	r2, [pc, #32]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a05      	ldr	r2, [pc, #20]	; (8004d5c <HAL_RCC_OscConfig+0x29c>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd f9b0 	bl	80020b8 <HAL_GetTick>
 8004d58:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d5a:	e010      	b.n	8004d7e <HAL_RCC_OscConfig+0x2be>
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	08009d70 	.word	0x08009d70
 8004d64:	2000007c 	.word	0x2000007c
 8004d68:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fd f9a4 	bl	80020b8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	; 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e300      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d7e:	4ba0      	ldr	r3, [pc, #640]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x2ac>
 8004d8a:	e014      	b.n	8004db6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd f994 	bl	80020b8 <HAL_GetTick>
 8004d90:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fd f990 	bl	80020b8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e2ec      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004da6:	4b96      	ldr	r3, [pc, #600]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x2d4>
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d060      	beq.n	8004e84 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x314>
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d119      	bne.n	8004e02 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d116      	bne.n	8004e02 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd4:	4b8a      	ldr	r3, [pc, #552]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_OscConfig+0x32c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e2c9      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dec:	4b84      	ldr	r3, [pc, #528]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	4981      	ldr	r1, [pc, #516]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e00:	e040      	b.n	8004e84 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d023      	beq.n	8004e52 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0a:	4b7d      	ldr	r3, [pc, #500]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7c      	ldr	r2, [pc, #496]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7fd f94f 	bl	80020b8 <HAL_GetTick>
 8004e1a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1e:	f7fd f94b 	bl	80020b8 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e2a7      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e30:	4b73      	ldr	r3, [pc, #460]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3c:	4b70      	ldr	r3, [pc, #448]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	496d      	ldr	r1, [pc, #436]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
 8004e50:	e018      	b.n	8004e84 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e52:	4b6b      	ldr	r3, [pc, #428]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6a      	ldr	r2, [pc, #424]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fd f92b 	bl	80020b8 <HAL_GetTick>
 8004e62:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e66:	f7fd f927 	bl	80020b8 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e283      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d07f      	beq.n	8004f90 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05f      	beq.n	8004f58 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004e98:	4b59      	ldr	r3, [pc, #356]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d037      	beq.n	8004f1e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d006      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e25c      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01b      	beq.n	8004f08 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004ed0:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed6:	4a4a      	ldr	r2, [pc, #296]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ee0:	f7fd f8ea 	bl	80020b8 <HAL_GetTick>
 8004ee4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee8:	f7fd f8e6 	bl	80020b8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b11      	cmp	r3, #17
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e242      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004efa:	4b41      	ldr	r3, [pc, #260]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1ef      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004f08:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0e:	f023 0210 	bic.w	r2, r3, #16
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	493a      	ldr	r1, [pc, #232]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b38      	ldr	r3, [pc, #224]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f24:	4a36      	ldr	r2, [pc, #216]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fd f8c3 	bl	80020b8 <HAL_GetTick>
 8004f32:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f36:	f7fd f8bf 	bl	80020b8 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b11      	cmp	r3, #17
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e21b      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f48:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ef      	beq.n	8004f36 <HAL_RCC_OscConfig+0x476>
 8004f56:	e01b      	b.n	8004f90 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f58:	4b29      	ldr	r3, [pc, #164]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fd f8a6 	bl	80020b8 <HAL_GetTick>
 8004f6c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f70:	f7fd f8a2 	bl	80020b8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b11      	cmp	r3, #17
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1fe      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f82:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ef      	bne.n	8004f70 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80c1 	beq.w	8005120 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10e      	bne.n	8004fce <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb0:	4b13      	ldr	r3, [pc, #76]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	4a12      	ldr	r2, [pc, #72]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6593      	str	r3, [r2, #88]	; 0x58
 8004fbc:	4b10      	ldr	r3, [pc, #64]	; (8005000 <HAL_RCC_OscConfig+0x540>)
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <HAL_RCC_OscConfig+0x544>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d11c      	bne.n	8005014 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_RCC_OscConfig+0x544>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <HAL_RCC_OscConfig+0x544>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe6:	f7fd f867 	bl	80020b8 <HAL_GetTick>
 8004fea:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fec:	e00c      	b.n	8005008 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fd f863 	bl	80020b8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d905      	bls.n	8005008 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e1bf      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
 8005000:	40021000 	.word	0x40021000
 8005004:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005008:	4bb1      	ldr	r3, [pc, #708]	; (80052d0 <HAL_RCC_OscConfig+0x810>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0ec      	beq.n	8004fee <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02c      	beq.n	800507a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005020:	4bac      	ldr	r3, [pc, #688]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	49a8      	ldr	r1, [pc, #672]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d010      	beq.n	8005068 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005046:	4ba3      	ldr	r3, [pc, #652]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	4aa1      	ldr	r2, [pc, #644]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800504e:	f043 0304 	orr.w	r3, r3, #4
 8005052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005056:	4b9f      	ldr	r3, [pc, #636]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	4a9d      	ldr	r2, [pc, #628]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005066:	e018      	b.n	800509a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005068:	4b9a      	ldr	r3, [pc, #616]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	4a99      	ldr	r2, [pc, #612]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005078:	e00f      	b.n	800509a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800507a:	4b96      	ldr	r3, [pc, #600]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	4a94      	ldr	r2, [pc, #592]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800508a:	4b92      	ldr	r3, [pc, #584]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	4a90      	ldr	r2, [pc, #576]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005092:	f023 0304 	bic.w	r3, r3, #4
 8005096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fd f809 	bl	80020b8 <HAL_GetTick>
 80050a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a8:	e00a      	b.n	80050c0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fd f805 	bl	80020b8 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e15f      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c0:	4b84      	ldr	r3, [pc, #528]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0ed      	beq.n	80050aa <HAL_RCC_OscConfig+0x5ea>
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d0:	f7fc fff2 	bl	80020b8 <HAL_GetTick>
 80050d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d6:	e00a      	b.n	80050ee <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d8:	f7fc ffee 	bl	80020b8 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e148      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050ee:	4b79      	ldr	r3, [pc, #484]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ed      	bne.n	80050d8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80050fc:	4b75      	ldr	r3, [pc, #468]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	4a74      	ldr	r2, [pc, #464]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800510c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005110:	2b01      	cmp	r3, #1
 8005112:	d105      	bne.n	8005120 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005114:	4b6f      	ldr	r3, [pc, #444]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	4a6e      	ldr	r2, [pc, #440]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800511a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d03c      	beq.n	80051a6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005134:	4b67      	ldr	r3, [pc, #412]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800513a:	4a66      	ldr	r2, [pc, #408]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fc ffb8 	bl	80020b8 <HAL_GetTick>
 8005148:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800514c:	f7fc ffb4 	bl	80020b8 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e110      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800515e:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ef      	beq.n	800514c <HAL_RCC_OscConfig+0x68c>
 800516c:	e01b      	b.n	80051a6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800516e:	4b59      	ldr	r3, [pc, #356]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005174:	4a57      	ldr	r2, [pc, #348]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7fc ff9b 	bl	80020b8 <HAL_GetTick>
 8005182:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005186:	f7fc ff97 	bl	80020b8 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e0f3      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005198:	4b4e      	ldr	r3, [pc, #312]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800519a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ef      	bne.n	8005186 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80e7 	beq.w	800537e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	f040 80b7 	bne.w	8005328 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051ba:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0203 	and.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d124      	bne.n	8005218 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d8:	3b01      	subs	r3, #1
 80051da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d11b      	bne.n	8005218 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d113      	bne.n	8005218 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	3b01      	subs	r3, #1
 80051fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d109      	bne.n	8005218 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	3b01      	subs	r3, #1
 8005212:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d061      	beq.n	80052dc <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2b0c      	cmp	r3, #12
 800521c:	d056      	beq.n	80052cc <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800521e:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005228:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800522a:	f7fc ff45 	bl	80020b8 <HAL_GetTick>
 800522e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005232:	f7fc ff41 	bl	80020b8 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e09d      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005244:	4b23      	ldr	r3, [pc, #140]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_RCC_OscConfig+0x818>)
 8005256:	4013      	ands	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005260:	3a01      	subs	r2, #1
 8005262:	0112      	lsls	r2, r2, #4
 8005264:	4311      	orrs	r1, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800526a:	0212      	lsls	r2, r2, #8
 800526c:	4311      	orrs	r1, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005272:	0852      	lsrs	r2, r2, #1
 8005274:	3a01      	subs	r2, #1
 8005276:	0552      	lsls	r2, r2, #21
 8005278:	4311      	orrs	r1, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800527e:	0852      	lsrs	r2, r2, #1
 8005280:	3a01      	subs	r2, #1
 8005282:	0652      	lsls	r2, r2, #25
 8005284:	430a      	orrs	r2, r1
 8005286:	4913      	ldr	r1, [pc, #76]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005288:	4313      	orrs	r3, r2
 800528a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a10      	ldr	r2, [pc, #64]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 8005292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005296:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 800529e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052a4:	f7fc ff08 	bl	80020b8 <HAL_GetTick>
 80052a8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fc ff04 	bl	80020b8 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e060      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCC_OscConfig+0x814>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052ca:	e058      	b.n	800537e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e057      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
 80052d0:	40007000 	.word	0x40007000
 80052d4:	40021000 	.word	0x40021000
 80052d8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052dc:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d14a      	bne.n	800537e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052e8:	4b27      	ldr	r3, [pc, #156]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a26      	ldr	r2, [pc, #152]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 80052ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052f4:	4b24      	ldr	r3, [pc, #144]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a23      	ldr	r2, [pc, #140]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 80052fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005300:	f7fc feda 	bl	80020b8 <HAL_GetTick>
 8005304:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fc fed6 	bl	80020b8 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e032      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531a:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x848>
 8005326:	e02a      	b.n	800537e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d025      	beq.n	800537a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532e:	4b16      	ldr	r3, [pc, #88]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a15      	ldr	r2, [pc, #84]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 8005334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005338:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 8005340:	f023 0303 	bic.w	r3, r3, #3
 8005344:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 800534c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005350:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fc feb1 	bl	80020b8 <HAL_GetTick>
 8005356:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535a:	f7fc fead 	bl	80020b8 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e009      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_RCC_OscConfig+0x8c8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f0      	bne.n	800535a <HAL_RCC_OscConfig+0x89a>
 8005378:	e001      	b.n	800537e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3728      	adds	r7, #40	; 0x28
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40021000 	.word	0x40021000

0800538c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0c8      	b.n	8005532 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053a0:	4b66      	ldr	r3, [pc, #408]	; (800553c <HAL_RCC_ClockConfig+0x1b0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d910      	bls.n	80053d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ae:	4b63      	ldr	r3, [pc, #396]	; (800553c <HAL_RCC_ClockConfig+0x1b0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 0207 	bic.w	r2, r3, #7
 80053b6:	4961      	ldr	r1, [pc, #388]	; (800553c <HAL_RCC_ClockConfig+0x1b0>)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	4b5f      	ldr	r3, [pc, #380]	; (800553c <HAL_RCC_ClockConfig+0x1b0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0b0      	b.n	8005532 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d04c      	beq.n	8005476 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e4:	4b56      	ldr	r3, [pc, #344]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d121      	bne.n	8005434 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e09e      	b.n	8005532 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d107      	bne.n	800540c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053fc:	4b50      	ldr	r3, [pc, #320]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d115      	bne.n	8005434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e092      	b.n	8005532 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005414:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e086      	b.n	8005532 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005424:	4b46      	ldr	r3, [pc, #280]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e07e      	b.n	8005532 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005434:	4b42      	ldr	r3, [pc, #264]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 0203 	bic.w	r2, r3, #3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	493f      	ldr	r1, [pc, #252]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005446:	f7fc fe37 	bl	80020b8 <HAL_GetTick>
 800544a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544c:	e00a      	b.n	8005464 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544e:	f7fc fe33 	bl	80020b8 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	f241 3288 	movw	r2, #5000	; 0x1388
 800545c:	4293      	cmp	r3, r2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e066      	b.n	8005532 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005464:	4b36      	ldr	r3, [pc, #216]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 020c 	and.w	r2, r3, #12
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	429a      	cmp	r2, r3
 8005474:	d1eb      	bne.n	800544e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005482:	4b2f      	ldr	r3, [pc, #188]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	492c      	ldr	r1, [pc, #176]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 8005490:	4313      	orrs	r3, r2
 8005492:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005494:	4b29      	ldr	r3, [pc, #164]	; (800553c <HAL_RCC_ClockConfig+0x1b0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d210      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b26      	ldr	r3, [pc, #152]	; (800553c <HAL_RCC_ClockConfig+0x1b0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 0207 	bic.w	r2, r3, #7
 80054aa:	4924      	ldr	r1, [pc, #144]	; (800553c <HAL_RCC_ClockConfig+0x1b0>)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b22      	ldr	r3, [pc, #136]	; (800553c <HAL_RCC_ClockConfig+0x1b0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e036      	b.n	8005532 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4918      	ldr	r1, [pc, #96]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4910      	ldr	r1, [pc, #64]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005502:	f000 f825 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8005506:	4602      	mov	r2, r0
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <HAL_RCC_ClockConfig+0x1b4>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	490c      	ldr	r1, [pc, #48]	; (8005544 <HAL_RCC_ClockConfig+0x1b8>)
 8005514:	5ccb      	ldrb	r3, [r1, r3]
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a0a      	ldr	r2, [pc, #40]	; (8005548 <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <HAL_RCC_ClockConfig+0x1c0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc fd76 	bl	8002018 <HAL_InitTick>
 800552c:	4603      	mov	r3, r0
 800552e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005530:	7afb      	ldrb	r3, [r7, #11]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40022000 	.word	0x40022000
 8005540:	40021000 	.word	0x40021000
 8005544:	08009d70 	.word	0x08009d70
 8005548:	2000007c 	.word	0x2000007c
 800554c:	20000084 	.word	0x20000084

08005550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800555e:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005568:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x34>
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d121      	bne.n	80055c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d11e      	bne.n	80055c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005584:	4b34      	ldr	r3, [pc, #208]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d107      	bne.n	80055a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005590:	4b31      	ldr	r3, [pc, #196]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	e005      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055a0:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055ac:	4a2b      	ldr	r2, [pc, #172]	; (800565c <HAL_RCC_GetSysClockFreq+0x10c>)
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10d      	bne.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055c0:	e00a      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d102      	bne.n	80055ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	e004      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d4:	4b23      	ldr	r3, [pc, #140]	; (8005664 <HAL_RCC_GetSysClockFreq+0x114>)
 80055d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	d134      	bne.n	8005648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055de:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d003      	beq.n	80055f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d003      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0xac>
 80055f4:	e005      	b.n	8005602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <HAL_RCC_GetSysClockFreq+0x110>)
 80055f8:	617b      	str	r3, [r7, #20]
      break;
 80055fa:	e005      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_RCC_GetSysClockFreq+0x114>)
 80055fe:	617b      	str	r3, [r7, #20]
      break;
 8005600:	e002      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	617b      	str	r3, [r7, #20]
      break;
 8005606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005608:	4b13      	ldr	r3, [pc, #76]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	3301      	adds	r3, #1
 8005614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005616:	4b10      	ldr	r3, [pc, #64]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	fb02 f203 	mul.w	r2, r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <HAL_RCC_GetSysClockFreq+0x108>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	0e5b      	lsrs	r3, r3, #25
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	3301      	adds	r3, #1
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005648:	69bb      	ldr	r3, [r7, #24]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3724      	adds	r7, #36	; 0x24
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40021000 	.word	0x40021000
 800565c:	08009d88 	.word	0x08009d88
 8005660:	00f42400 	.word	0x00f42400
 8005664:	007a1200 	.word	0x007a1200

08005668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <HAL_RCC_GetHCLKFreq+0x14>)
 800566e:	681b      	ldr	r3, [r3, #0]
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	2000007c 	.word	0x2000007c

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005684:	f7ff fff0 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	4904      	ldr	r1, [pc, #16]	; (80056a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40021000 	.word	0x40021000
 80056a8:	08009d80 	.word	0x08009d80

080056ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056b0:	f7ff ffda 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0adb      	lsrs	r3, r3, #11
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40021000 	.word	0x40021000
 80056d4:	08009d80 	.word	0x08009d80

080056d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056e4:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056f0:	f7ff f982 	bl	80049f8 <HAL_PWREx_GetVoltageRange>
 80056f4:	6178      	str	r0, [r7, #20]
 80056f6:	e014      	b.n	8005722 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fc:	4a24      	ldr	r2, [pc, #144]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005702:	6593      	str	r3, [r2, #88]	; 0x58
 8005704:	4b22      	ldr	r3, [pc, #136]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005710:	f7ff f972 	bl	80049f8 <HAL_PWREx_GetVoltageRange>
 8005714:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005716:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800571c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005720:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005728:	d10b      	bne.n	8005742 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d919      	bls.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2ba0      	cmp	r3, #160	; 0xa0
 8005734:	d902      	bls.n	800573c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005736:	2302      	movs	r3, #2
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e013      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800573c:	2301      	movs	r3, #1
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e010      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d902      	bls.n	800574e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005748:	2303      	movs	r3, #3
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	e00a      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d102      	bne.n	800575a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005754:	2302      	movs	r3, #2
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	e004      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b70      	cmp	r3, #112	; 0x70
 800575e:	d101      	bne.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005760:	2301      	movs	r3, #1
 8005762:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f023 0207 	bic.w	r2, r3, #7
 800576c:	4909      	ldr	r1, [pc, #36]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005774:	4b07      	ldr	r3, [pc, #28]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d001      	beq.n	8005786 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40021000 	.word	0x40021000
 8005794:	40022000 	.word	0x40022000

08005798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057a0:	2300      	movs	r3, #0
 80057a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057a4:	2300      	movs	r3, #0
 80057a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 809e 	beq.w	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b6:	2300      	movs	r3, #0
 80057b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057ba:	4b46      	ldr	r3, [pc, #280]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80057ca:	2300      	movs	r3, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d0:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d4:	4a3f      	ldr	r2, [pc, #252]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057da:	6593      	str	r3, [r2, #88]	; 0x58
 80057dc:	4b3d      	ldr	r3, [pc, #244]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057e8:	2301      	movs	r3, #1
 80057ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ec:	4b3a      	ldr	r3, [pc, #232]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a39      	ldr	r2, [pc, #228]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80057f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057f8:	f7fc fc5e 	bl	80020b8 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057fe:	e009      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005800:	f7fc fc5a 	bl	80020b8 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d902      	bls.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	74fb      	strb	r3, [r7, #19]
        break;
 8005812:	e005      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005814:	4b30      	ldr	r3, [pc, #192]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ef      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d15a      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005826:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005830:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01e      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	429a      	cmp	r2, r3
 8005840:	d019      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800586e:	4a19      	ldr	r2, [pc, #100]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d016      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fc fc1a 	bl	80020b8 <HAL_GetTick>
 8005884:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005886:	e00b      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005888:	f7fc fc16 	bl	80020b8 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	f241 3288 	movw	r2, #5000	; 0x1388
 8005896:	4293      	cmp	r3, r2
 8005898:	d902      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	74fb      	strb	r3, [r7, #19]
            break;
 800589e:	e006      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0ec      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80058ae:	7cfb      	ldrb	r3, [r7, #19]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b4:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	4904      	ldr	r1, [pc, #16]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058ca:	e009      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	74bb      	strb	r3, [r7, #18]
 80058d0:	e006      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80058d2:	bf00      	nop
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e0:	7c7b      	ldrb	r3, [r7, #17]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	4b6e      	ldr	r3, [pc, #440]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	4a6d      	ldr	r2, [pc, #436]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058fe:	4b68      	ldr	r3, [pc, #416]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	f023 0203 	bic.w	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4964      	ldr	r1, [pc, #400]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005920:	4b5f      	ldr	r3, [pc, #380]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005926:	f023 020c 	bic.w	r2, r3, #12
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	495c      	ldr	r1, [pc, #368]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005942:	4b57      	ldr	r3, [pc, #348]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005948:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4953      	ldr	r1, [pc, #332]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005964:	4b4e      	ldr	r3, [pc, #312]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	494b      	ldr	r1, [pc, #300]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005986:	4b46      	ldr	r3, [pc, #280]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	4942      	ldr	r1, [pc, #264]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059a8:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	493a      	ldr	r1, [pc, #232]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ca:	4b35      	ldr	r3, [pc, #212]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	4931      	ldr	r1, [pc, #196]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ec:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	4929      	ldr	r1, [pc, #164]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	4920      	ldr	r1, [pc, #128]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d015      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a30:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	4918      	ldr	r1, [pc, #96]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a4e:	d105      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a50:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d015      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a68:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	490a      	ldr	r1, [pc, #40]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a86:	d105      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4a04      	ldr	r2, [pc, #16]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a94:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000

08005aa4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a04      	ldr	r2, [pc, #16]	; (8005ac0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6013      	str	r3, [r2, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40021000 	.word	0x40021000

08005ac4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d073      	beq.n	8005bbe <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fc f85c 	bl	8001ba8 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005af6:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	22ca      	movs	r2, #202	; 0xca
 8005b06:	625a      	str	r2, [r3, #36]	; 0x24
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2253      	movs	r2, #83	; 0x53
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fb6b 	bl	80061ec <RTC_EnterInitMode>
 8005b16:	4603      	mov	r3, r0
 8005b18:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d14e      	bne.n	8005bbe <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b32:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6999      	ldr	r1, [r3, #24]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6912      	ldr	r2, [r2, #16]
 8005b5a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6919      	ldr	r1, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	041a      	lsls	r2, r3, #16
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fb71 	bl	8006258 <RTC_ExitInitMode>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d11e      	bne.n	8005bbe <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005b8e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6999      	ldr	r1, [r3, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	22ff      	movs	r2, #255	; 0xff
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bc8:	b590      	push	{r4, r7, lr}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_RTC_SetTime+0x1a>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e08b      	b.n	8005cfa <HAL_RTC_SetTime+0x132>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2202      	movs	r2, #2
 8005bee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	22ca      	movs	r2, #202	; 0xca
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2253      	movs	r2, #83	; 0x53
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 faf2 	bl	80061ec <RTC_EnterInitMode>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c0c:	7cfb      	ldrb	r3, [r7, #19]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d163      	bne.n	8005cda <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d126      	bne.n	8005c66 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fb4f 	bl	80062d4 <RTC_ByteToBcd2>
 8005c36:	4603      	mov	r3, r0
 8005c38:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fb48 	bl	80062d4 <RTC_ByteToBcd2>
 8005c44:	4603      	mov	r3, r0
 8005c46:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c48:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	789b      	ldrb	r3, [r3, #2]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fb40 	bl	80062d4 <RTC_ByteToBcd2>
 8005c54:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c56:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	78db      	ldrb	r3, [r3, #3]
 8005c5e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e018      	b.n	8005c98 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c86:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c8c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	78db      	ldrb	r3, [r3, #3]
 8005c92:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ca2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ca6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cb6:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fac1 	bl	8006258 <RTC_ExitInitMode>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	22ff      	movs	r2, #255	; 0xff
 8005ce0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005ce2:	7cfb      	ldrb	r3, [r7, #19]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8005cf8:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd90      	pop	{r4, r7, pc}

08005d02 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b086      	sub	sp, #24
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d30:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	0d9b      	lsrs	r3, r3, #22
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d11a      	bne.n	8005db0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fac8 	bl	8006314 <RTC_Bcd2ToByte>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fabf 	bl	8006314 <RTC_Bcd2ToByte>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	789b      	ldrb	r3, [r3, #2]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fab6 	bl	8006314 <RTC_Bcd2ToByte>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461a      	mov	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dba:	b590      	push	{r4, r7, lr}
 8005dbc:	b087      	sub	sp, #28
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_RTC_SetDate+0x1a>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e075      	b.n	8005ec0 <HAL_RTC_SetDate+0x106>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10e      	bne.n	8005e08 <HAL_RTC_SetDate+0x4e>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	f023 0310 	bic.w	r3, r3, #16
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	330a      	adds	r3, #10
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d11c      	bne.n	8005e48 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	78db      	ldrb	r3, [r3, #3]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fa5e 	bl	80062d4 <RTC_ByteToBcd2>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fa57 	bl	80062d4 <RTC_ByteToBcd2>
 8005e26:	4603      	mov	r3, r0
 8005e28:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005e2a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	789b      	ldrb	r3, [r3, #2]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fa4f 	bl	80062d4 <RTC_ByteToBcd2>
 8005e36:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e38:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e00e      	b.n	8005e66 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	78db      	ldrb	r3, [r3, #3]
 8005e4c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005e54:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005e5a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	22ca      	movs	r2, #202	; 0xca
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2253      	movs	r2, #83	; 0x53
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f9b8 	bl	80061ec <RTC_EnterInitMode>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10c      	bne.n	8005ea0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f9de 	bl	8006258 <RTC_ExitInitMode>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	22ff      	movs	r2, #255	; 0xff
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8005ebe:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd90      	pop	{r4, r7, pc}

08005ec8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ede:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	0b5b      	lsrs	r3, r3, #13
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11a      	bne.n	8005f58 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	78db      	ldrb	r3, [r3, #3]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f9f4 	bl	8006314 <RTC_Bcd2ToByte>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f9eb 	bl	8006314 <RTC_Bcd2ToByte>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	789b      	ldrb	r3, [r3, #2]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f9e2 	bl	8006314 <RTC_Bcd2ToByte>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_RTC_SetAlarm_IT+0x1a>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e0db      	b.n	8006136 <HAL_RTC_SetAlarm_IT+0x1d2>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d137      	bne.n	8006004 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f991 	bl	80062d4 <RTC_ByteToBcd2>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f98a 	bl	80062d4 <RTC_ByteToBcd2>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fc4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	789b      	ldrb	r3, [r3, #2]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f982 	bl	80062d4 <RTC_ByteToBcd2>
 8005fd0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fd2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	78db      	ldrb	r3, [r3, #3]
 8005fda:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005fdc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f974 	bl	80062d4 <RTC_ByteToBcd2>
 8005fec:	4603      	mov	r3, r0
 8005fee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ff0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ff8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e023      	b.n	800604c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006024:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800602a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	78db      	ldrb	r3, [r3, #3]
 8006030:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006032:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800603a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800603c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006042:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	22ca      	movs	r2, #202	; 0xca
 800605e:	625a      	str	r2, [r3, #36]	; 0x24
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2253      	movs	r2, #83	; 0x53
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006070:	d124      	bne.n	80060bc <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006080:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2201      	movs	r2, #1
 8006088:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060b8:	619a      	str	r2, [r3, #24]
 80060ba:	e023      	b.n	8006104 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060ca:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2202      	movs	r2, #2
 80060d2:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006102:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a0d      	ldr	r2, [pc, #52]	; (8006140 <HAL_RTC_SetAlarm_IT+0x1dc>)
 800610a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800610e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	4a0a      	ldr	r2, [pc, #40]	; (8006140 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8006116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800611a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	22ff      	movs	r2, #255	; 0xff
 8006122:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd90      	pop	{r4, r7, pc}
 800613e:	bf00      	nop
 8006140:	40010400 	.word	0x40010400

08006144 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800614c:	4b13      	ldr	r3, [pc, #76]	; (800619c <HAL_RTC_AlarmIRQHandler+0x58>)
 800614e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006152:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d006      	beq.n	8006174 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2201      	movs	r2, #1
 800616c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fb f930 	bl	80013d4 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d006      	beq.n	800618c <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2202      	movs	r2, #2
 8006184:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f9a4 	bl	80064d4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40010400 	.word	0x40010400

080061a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061b6:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 80061b8:	f7fb ff7e 	bl	80020b8 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80061be:	e009      	b.n	80061d4 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061c0:	f7fb ff7a 	bl	80020b8 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ce:	d901      	bls.n	80061d4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e007      	b.n	80061e4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0ee      	beq.n	80061c0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d123      	bne.n	800624e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006214:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006216:	f7fb ff4f 	bl	80020b8 <HAL_GetTick>
 800621a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800621c:	e00d      	b.n	800623a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800621e:	f7fb ff4b 	bl	80020b8 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800622c:	d905      	bls.n	800623a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2203      	movs	r2, #3
 8006236:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <RTC_EnterInitMode+0x62>
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d1e7      	bne.n	800621e <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800624e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006264:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <RTC_ExitInitMode+0x78>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	4a19      	ldr	r2, [pc, #100]	; (80062d0 <RTC_ExitInitMode+0x78>)
 800626a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800626e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006270:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <RTC_ExitInitMode+0x78>)
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10c      	bne.n	8006296 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ff8f 	bl	80061a0 <HAL_RTC_WaitForSynchro>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01e      	beq.n	80062c6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2203      	movs	r2, #3
 800628c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	e017      	b.n	80062c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006296:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <RTC_ExitInitMode+0x78>)
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	4a0d      	ldr	r2, [pc, #52]	; (80062d0 <RTC_ExitInitMode+0x78>)
 800629c:	f023 0320 	bic.w	r3, r3, #32
 80062a0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ff7c 	bl	80061a0 <HAL_RTC_WaitForSynchro>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2203      	movs	r2, #3
 80062b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <RTC_ExitInitMode+0x78>)
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <RTC_ExitInitMode+0x78>)
 80062c0:	f043 0320 	orr.w	r3, r3, #32
 80062c4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40002800 	.word	0x40002800

080062d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80062e6:	e005      	b.n	80062f4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80062ee:	7afb      	ldrb	r3, [r7, #11]
 80062f0:	3b0a      	subs	r3, #10
 80062f2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	2b09      	cmp	r3, #9
 80062f8:	d8f6      	bhi.n	80062e8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	b2da      	uxtb	r2, r3
 8006302:	7afb      	ldrb	r3, [r7, #11]
 8006304:	4313      	orrs	r3, r2
 8006306:	b2db      	uxtb	r3, r3
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	091b      	lsrs	r3, r3, #4
 8006322:	b2db      	uxtb	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	0092      	lsls	r2, r2, #2
 8006328:	4413      	add	r3, r2
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	b2da      	uxtb	r2, r3
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	4413      	add	r3, r2
 800633a:	b2db      	uxtb	r3, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8006360:	2302      	movs	r3, #2
 8006362:	e087      	b.n	8006474 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	22ca      	movs	r2, #202	; 0xca
 800637a:	625a      	str	r2, [r3, #36]	; 0x24
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2253      	movs	r2, #83	; 0x53
 8006382:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006392:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2204      	movs	r2, #4
 800639a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d120      	bne.n	80063ec <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
#endif
  {
    tickstart = HAL_GetTick();
 80063aa:	f7fb fe85 	bl	80020b8 <HAL_GetTick>
 80063ae:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80063b0:	e015      	b.n	80063de <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063b2:	f7fb fe81 	bl	80020b8 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c0:	d90d      	bls.n	80063de <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	22ff      	movs	r2, #255	; 0xff
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2203      	movs	r2, #3
 80063ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04a      	b.n	8006474 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0e2      	beq.n	80063b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	0419      	lsls	r1, r3, #16
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	615a      	str	r2, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f023 0107 	bic.w	r1, r3, #7
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	430a      	orrs	r2, r1
 800640c:	619a      	str	r2, [r3, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d006      	beq.n	8006422 <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a18      	ldr	r2, [pc, #96]	; (800647c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 800641a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800641e:	6053      	str	r3, [r2, #4]
 8006420:	e005      	b.n	800642e <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006422:	4b16      	ldr	r3, [pc, #88]	; (800647c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a15      	ldr	r2, [pc, #84]	; (800647c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8006428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800642c:	6013      	str	r3, [r2, #0]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	4a12      	ldr	r2, [pc, #72]	; (800647c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8006434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006438:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699a      	ldr	r2, [r3, #24]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006448:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006458:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	22ff      	movs	r2, #255	; 0xff
 8006460:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	40010400 	.word	0x40010400

08006480 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 800648a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800648e:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2204      	movs	r2, #4
 80064a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f80a 	bl	80064c0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40010400 	.word	0x40010400

080064c0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d001      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e03b      	b.n	8006578 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a19      	ldr	r2, [pc, #100]	; (8006584 <HAL_TIM_Base_Start_IT+0x9c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_TIM_Base_Start_IT+0x4e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652a:	d004      	beq.n	8006536 <HAL_TIM_Base_Start_IT+0x4e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a15      	ldr	r2, [pc, #84]	; (8006588 <HAL_TIM_Base_Start_IT+0xa0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d115      	bne.n	8006562 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	4b13      	ldr	r3, [pc, #76]	; (800658c <HAL_TIM_Base_Start_IT+0xa4>)
 800653e:	4013      	ands	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b06      	cmp	r3, #6
 8006546:	d015      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x8c>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654e:	d011      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006560:	e008      	b.n	8006574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	e000      	b.n	8006576 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006574:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	40012c00 	.word	0x40012c00
 8006588:	40014000 	.word	0x40014000
 800658c:	00010007 	.word	0x00010007

08006590 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e049      	b.n	8006636 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb fb36 	bl	8001c28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f000 fc06 	bl	8006de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <HAL_TIM_IC_Start_IT+0x1e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800665a:	b2db      	uxtb	r3, r3
 800665c:	e023      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0x66>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b04      	cmp	r3, #4
 8006662:	d104      	bne.n	800666e <HAL_TIM_IC_Start_IT+0x2e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800666a:	b2db      	uxtb	r3, r3
 800666c:	e01b      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0x66>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b08      	cmp	r3, #8
 8006672:	d104      	bne.n	800667e <HAL_TIM_IC_Start_IT+0x3e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800667a:	b2db      	uxtb	r3, r3
 800667c:	e013      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0x66>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b0c      	cmp	r3, #12
 8006682:	d104      	bne.n	800668e <HAL_TIM_IC_Start_IT+0x4e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800668a:	b2db      	uxtb	r3, r3
 800668c:	e00b      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0x66>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b10      	cmp	r3, #16
 8006692:	d104      	bne.n	800669e <HAL_TIM_IC_Start_IT+0x5e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800669a:	b2db      	uxtb	r3, r3
 800669c:	e003      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0x66>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <HAL_TIM_IC_Start_IT+0x78>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	e013      	b.n	80066e0 <HAL_TIM_IC_Start_IT+0xa0>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d104      	bne.n	80066c8 <HAL_TIM_IC_Start_IT+0x88>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e00b      	b.n	80066e0 <HAL_TIM_IC_Start_IT+0xa0>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d104      	bne.n	80066d8 <HAL_TIM_IC_Start_IT+0x98>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	e003      	b.n	80066e0 <HAL_TIM_IC_Start_IT+0xa0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d102      	bne.n	80066ee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80066e8:	7b7b      	ldrb	r3, [r7, #13]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d001      	beq.n	80066f2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e0c9      	b.n	8006886 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_IC_Start_IT+0xc2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006700:	e023      	b.n	800674a <HAL_TIM_IC_Start_IT+0x10a>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b04      	cmp	r3, #4
 8006706:	d104      	bne.n	8006712 <HAL_TIM_IC_Start_IT+0xd2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006710:	e01b      	b.n	800674a <HAL_TIM_IC_Start_IT+0x10a>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b08      	cmp	r3, #8
 8006716:	d104      	bne.n	8006722 <HAL_TIM_IC_Start_IT+0xe2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006720:	e013      	b.n	800674a <HAL_TIM_IC_Start_IT+0x10a>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b0c      	cmp	r3, #12
 8006726:	d104      	bne.n	8006732 <HAL_TIM_IC_Start_IT+0xf2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006730:	e00b      	b.n	800674a <HAL_TIM_IC_Start_IT+0x10a>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b10      	cmp	r3, #16
 8006736:	d104      	bne.n	8006742 <HAL_TIM_IC_Start_IT+0x102>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006740:	e003      	b.n	800674a <HAL_TIM_IC_Start_IT+0x10a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2202      	movs	r2, #2
 8006746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_TIM_IC_Start_IT+0x11a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006758:	e013      	b.n	8006782 <HAL_TIM_IC_Start_IT+0x142>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b04      	cmp	r3, #4
 800675e:	d104      	bne.n	800676a <HAL_TIM_IC_Start_IT+0x12a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006768:	e00b      	b.n	8006782 <HAL_TIM_IC_Start_IT+0x142>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b08      	cmp	r3, #8
 800676e:	d104      	bne.n	800677a <HAL_TIM_IC_Start_IT+0x13a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006778:	e003      	b.n	8006782 <HAL_TIM_IC_Start_IT+0x142>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b0c      	cmp	r3, #12
 8006786:	d841      	bhi.n	800680c <HAL_TIM_IC_Start_IT+0x1cc>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <HAL_TIM_IC_Start_IT+0x150>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067c5 	.word	0x080067c5
 8006794:	0800680d 	.word	0x0800680d
 8006798:	0800680d 	.word	0x0800680d
 800679c:	0800680d 	.word	0x0800680d
 80067a0:	080067d7 	.word	0x080067d7
 80067a4:	0800680d 	.word	0x0800680d
 80067a8:	0800680d 	.word	0x0800680d
 80067ac:	0800680d 	.word	0x0800680d
 80067b0:	080067e9 	.word	0x080067e9
 80067b4:	0800680d 	.word	0x0800680d
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	0800680d 	.word	0x0800680d
 80067c0:	080067fb 	.word	0x080067fb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0202 	orr.w	r2, r2, #2
 80067d2:	60da      	str	r2, [r3, #12]
      break;
 80067d4:	e01d      	b.n	8006812 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0204 	orr.w	r2, r2, #4
 80067e4:	60da      	str	r2, [r3, #12]
      break;
 80067e6:	e014      	b.n	8006812 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0208 	orr.w	r2, r2, #8
 80067f6:	60da      	str	r2, [r3, #12]
      break;
 80067f8:	e00b      	b.n	8006812 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0210 	orr.w	r2, r2, #16
 8006808:	60da      	str	r2, [r3, #12]
      break;
 800680a:	e002      	b.n	8006812 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
      break;
 8006810:	bf00      	nop
  }

  if (status == HAL_OK)
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d135      	bne.n	8006884 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2201      	movs	r2, #1
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fc4d 	bl	80070c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a19      	ldr	r2, [pc, #100]	; (8006890 <HAL_TIM_IC_Start_IT+0x250>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_TIM_IC_Start_IT+0x204>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006838:	d004      	beq.n	8006844 <HAL_TIM_IC_Start_IT+0x204>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a15      	ldr	r2, [pc, #84]	; (8006894 <HAL_TIM_IC_Start_IT+0x254>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d115      	bne.n	8006870 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <HAL_TIM_IC_Start_IT+0x258>)
 800684c:	4013      	ands	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b06      	cmp	r3, #6
 8006854:	d015      	beq.n	8006882 <HAL_TIM_IC_Start_IT+0x242>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685c:	d011      	beq.n	8006882 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0201 	orr.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686e:	e008      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	e000      	b.n	8006884 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006882:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40012c00 	.word	0x40012c00
 8006894:	40014000 	.word	0x40014000
 8006898:	00010007 	.word	0x00010007

0800689c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b0c      	cmp	r3, #12
 80068ae:	d841      	bhi.n	8006934 <HAL_TIM_IC_Stop_IT+0x98>
 80068b0:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068ed 	.word	0x080068ed
 80068bc:	08006935 	.word	0x08006935
 80068c0:	08006935 	.word	0x08006935
 80068c4:	08006935 	.word	0x08006935
 80068c8:	080068ff 	.word	0x080068ff
 80068cc:	08006935 	.word	0x08006935
 80068d0:	08006935 	.word	0x08006935
 80068d4:	08006935 	.word	0x08006935
 80068d8:	08006911 	.word	0x08006911
 80068dc:	08006935 	.word	0x08006935
 80068e0:	08006935 	.word	0x08006935
 80068e4:	08006935 	.word	0x08006935
 80068e8:	08006923 	.word	0x08006923
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0202 	bic.w	r2, r2, #2
 80068fa:	60da      	str	r2, [r3, #12]
      break;
 80068fc:	e01d      	b.n	800693a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0204 	bic.w	r2, r2, #4
 800690c:	60da      	str	r2, [r3, #12]
      break;
 800690e:	e014      	b.n	800693a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0208 	bic.w	r2, r2, #8
 800691e:	60da      	str	r2, [r3, #12]
      break;
 8006920:	e00b      	b.n	800693a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0210 	bic.w	r2, r2, #16
 8006930:	60da      	str	r2, [r3, #12]
      break;
 8006932:	e002      	b.n	800693a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
      break;
 8006938:	bf00      	nop
  }

  if (status == HAL_OK)
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d166      	bne.n	8006a0e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2200      	movs	r2, #0
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fbb9 	bl	80070c0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	f241 1311 	movw	r3, #4369	; 0x1111
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10f      	bne.n	800697e <HAL_TIM_IC_Stop_IT+0xe2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	f240 4344 	movw	r3, #1092	; 0x444
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d107      	bne.n	800697e <HAL_TIM_IC_Stop_IT+0xe2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0201 	bic.w	r2, r2, #1
 800697c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <HAL_TIM_IC_Stop_IT+0xf2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698c:	e023      	b.n	80069d6 <HAL_TIM_IC_Stop_IT+0x13a>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b04      	cmp	r3, #4
 8006992:	d104      	bne.n	800699e <HAL_TIM_IC_Stop_IT+0x102>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800699c:	e01b      	b.n	80069d6 <HAL_TIM_IC_Stop_IT+0x13a>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_IC_Stop_IT+0x112>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ac:	e013      	b.n	80069d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b0c      	cmp	r3, #12
 80069b2:	d104      	bne.n	80069be <HAL_TIM_IC_Stop_IT+0x122>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069bc:	e00b      	b.n	80069d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d104      	bne.n	80069ce <HAL_TIM_IC_Stop_IT+0x132>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069cc:	e003      	b.n	80069d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_IC_Stop_IT+0x14a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e4:	e013      	b.n	8006a0e <HAL_TIM_IC_Stop_IT+0x172>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_IC_Stop_IT+0x15a>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f4:	e00b      	b.n	8006a0e <HAL_TIM_IC_Stop_IT+0x172>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_IC_Stop_IT+0x16a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a04:	e003      	b.n	8006a0e <HAL_TIM_IC_Stop_IT+0x172>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d122      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d11b      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0202 	mvn.w	r2, #2
 8006a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7f9 ff8a 	bl	8000974 <HAL_TIM_IC_CaptureCallback>
 8006a60:	e005      	b.n	8006a6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f99d 	bl	8006da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9a4 	bl	8006db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d122      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d11b      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0204 	mvn.w	r2, #4
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7f9 ff60 	bl	8000974 <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f973 	bl	8006da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f97a 	bl	8006db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d122      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d11b      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0208 	mvn.w	r2, #8
 8006aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2204      	movs	r2, #4
 8006af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7f9 ff36 	bl	8000974 <HAL_TIM_IC_CaptureCallback>
 8006b08:	e005      	b.n	8006b16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f949 	bl	8006da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f950 	bl	8006db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	2b10      	cmp	r3, #16
 8006b28:	d122      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b10      	cmp	r3, #16
 8006b36:	d11b      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0210 	mvn.w	r2, #16
 8006b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2208      	movs	r2, #8
 8006b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7f9 ff0c 	bl	8000974 <HAL_TIM_IC_CaptureCallback>
 8006b5c:	e005      	b.n	8006b6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f91f 	bl	8006da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f926 	bl	8006db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d10e      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d107      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0201 	mvn.w	r2, #1
 8006b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f8f9 	bl	8006d8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b80      	cmp	r3, #128	; 0x80
 8006ba8:	d10e      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb4:	2b80      	cmp	r3, #128	; 0x80
 8006bb6:	d107      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fb12 	bl	80071ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd6:	d10e      	bne.n	8006bf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be2:	2b80      	cmp	r3, #128	; 0x80
 8006be4:	d107      	bne.n	8006bf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fb05 	bl	8007200 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d10e      	bne.n	8006c22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	d107      	bne.n	8006c22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f8d4 	bl	8006dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d10e      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d107      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f06f 0220 	mvn.w	r2, #32
 8006c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fac5 	bl	80071d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e088      	b.n	8006d86 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d11b      	bne.n	8006cba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f000 f909 	bl	8006ea8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 020c 	bic.w	r2, r2, #12
 8006ca4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6999      	ldr	r1, [r3, #24]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	619a      	str	r2, [r3, #24]
 8006cb8:	e060      	b.n	8006d7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d11c      	bne.n	8006cfa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6819      	ldr	r1, [r3, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f000 f940 	bl	8006f54 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ce2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6999      	ldr	r1, [r3, #24]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	021a      	lsls	r2, r3, #8
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	619a      	str	r2, [r3, #24]
 8006cf8:	e040      	b.n	8006d7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d11b      	bne.n	8006d38 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6819      	ldr	r1, [r3, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f000 f95d 	bl	8006fce <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 020c 	bic.w	r2, r2, #12
 8006d22:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	69d9      	ldr	r1, [r3, #28]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	61da      	str	r2, [r3, #28]
 8006d36:	e021      	b.n	8006d7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d11c      	bne.n	8006d78 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6819      	ldr	r1, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f000 f97a 	bl	8007046 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69d9      	ldr	r1, [r3, #28]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	021a      	lsls	r2, r3, #8
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	61da      	str	r2, [r3, #28]
 8006d76:	e001      	b.n	8006d7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <TIM_Base_SetConfig+0xbc>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_Base_SetConfig+0x20>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfe:	d108      	bne.n	8006e12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a21      	ldr	r2, [pc, #132]	; (8006e9c <TIM_Base_SetConfig+0xbc>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00b      	beq.n	8006e32 <TIM_Base_SetConfig+0x52>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e20:	d007      	beq.n	8006e32 <TIM_Base_SetConfig+0x52>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <TIM_Base_SetConfig+0xc0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_Base_SetConfig+0x52>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <TIM_Base_SetConfig+0xc4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d108      	bne.n	8006e44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <TIM_Base_SetConfig+0xbc>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <TIM_Base_SetConfig+0xa0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a0b      	ldr	r2, [pc, #44]	; (8006ea0 <TIM_Base_SetConfig+0xc0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_Base_SetConfig+0xa0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ea4 <TIM_Base_SetConfig+0xc4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d103      	bne.n	8006e88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	615a      	str	r2, [r3, #20]
}
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400

08006ea8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f023 0201 	bic.w	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <TIM_TI1_SetConfig+0xa4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d007      	beq.n	8006ee6 <TIM_TI1_SetConfig+0x3e>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006edc:	d003      	beq.n	8006ee6 <TIM_TI1_SetConfig+0x3e>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <TIM_TI1_SetConfig+0xa8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <TIM_TI1_SetConfig+0x42>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <TIM_TI1_SetConfig+0x44>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	e003      	b.n	8006f0a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f043 0301 	orr.w	r3, r3, #1
 8006f08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f023 030a 	bic.w	r3, r3, #10
 8006f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f003 030a 	and.w	r3, r3, #10
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	621a      	str	r2, [r3, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40012c00 	.word	0x40012c00
 8006f50:	40014000 	.word	0x40014000

08006f54 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f023 0210 	bic.w	r2, r3, #16
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	031b      	lsls	r3, r3, #12
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b087      	sub	sp, #28
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f023 0303 	bic.w	r3, r3, #3
 8006ffa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800700a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	b2db      	uxtb	r3, r3
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800701e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007046:	b480      	push	{r7}
 8007048:	b087      	sub	sp, #28
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007072:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007084:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	031b      	lsls	r3, r3, #12
 800708a:	b29b      	uxth	r3, r3
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007098:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	031b      	lsls	r3, r3, #12
 800709e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	621a      	str	r2, [r3, #32]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	2201      	movs	r2, #1
 80070d4:	fa02 f303 	lsl.w	r3, r2, r3
 80070d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1a      	ldr	r2, [r3, #32]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1a      	ldr	r2, [r3, #32]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	431a      	orrs	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	621a      	str	r2, [r3, #32]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007120:	2302      	movs	r3, #2
 8007122:	e04f      	b.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a21      	ldr	r2, [pc, #132]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d108      	bne.n	8007160 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007154:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a14      	ldr	r2, [pc, #80]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718c:	d004      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a10      	ldr	r2, [pc, #64]	; (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d10c      	bne.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40014000 	.word	0x40014000

080071d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e040      	b.n	80072a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fa fd3e 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2224      	movs	r2, #36	; 0x24
 8007240:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fc94 	bl	8007b80 <UART_SetConfig>
 8007258:	4603      	mov	r3, r0
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e022      	b.n	80072a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 febc 	bl	8007fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800727e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800728e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 ff43 	bl	800812c <UART_CheckIdleState>
 80072a6:	4603      	mov	r3, r0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	4613      	mov	r3, r2
 80072be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	f040 8082 	bne.w	80073ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <HAL_UART_Transmit+0x26>
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e07a      	b.n	80073d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UART_Transmit+0x38>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e073      	b.n	80073d0 <HAL_UART_Transmit+0x120>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2221      	movs	r2, #33	; 0x21
 80072fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072fe:	f7fa fedb 	bl	80020b8 <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	88fa      	ldrh	r2, [r7, #6]
 8007308:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	88fa      	ldrh	r2, [r7, #6]
 8007310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731c:	d108      	bne.n	8007330 <HAL_UART_Transmit+0x80>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	e003      	b.n	8007338 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007340:	e02d      	b.n	800739e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2200      	movs	r2, #0
 800734a:	2180      	movs	r1, #128	; 0x80
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 ff36 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e039      	b.n	80073d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10b      	bne.n	800737a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	881a      	ldrh	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800736e:	b292      	uxth	r2, r2
 8007370:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	3302      	adds	r3, #2
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	e008      	b.n	800738c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	781a      	ldrb	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	b292      	uxth	r2, r2
 8007384:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	3301      	adds	r3, #1
 800738a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1cb      	bne.n	8007342 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2200      	movs	r2, #0
 80073b2:	2140      	movs	r1, #64	; 0x40
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 ff02 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e005      	b.n	80073d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2220      	movs	r2, #32
 80073c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	f040 80bf 	bne.w	8007570 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_UART_Receive+0x26>
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e0b7      	b.n	8007572 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_UART_Receive+0x38>
 800740c:	2302      	movs	r3, #2
 800740e:	e0b0      	b.n	8007572 <HAL_UART_Receive+0x19a>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2222      	movs	r2, #34	; 0x22
 8007424:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742c:	f7fa fe44 	bl	80020b8 <HAL_GetTick>
 8007430:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	88fa      	ldrh	r2, [r7, #6]
 8007436:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	88fa      	ldrh	r2, [r7, #6]
 800743e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744a:	d10e      	bne.n	800746a <HAL_UART_Receive+0x92>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <HAL_UART_Receive+0x88>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f240 12ff 	movw	r2, #511	; 0x1ff
 800745a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800745e:	e02d      	b.n	80074bc <HAL_UART_Receive+0xe4>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	22ff      	movs	r2, #255	; 0xff
 8007464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007468:	e028      	b.n	80074bc <HAL_UART_Receive+0xe4>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <HAL_UART_Receive+0xb6>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <HAL_UART_Receive+0xac>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	22ff      	movs	r2, #255	; 0xff
 800747e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007482:	e01b      	b.n	80074bc <HAL_UART_Receive+0xe4>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	227f      	movs	r2, #127	; 0x7f
 8007488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800748c:	e016      	b.n	80074bc <HAL_UART_Receive+0xe4>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007496:	d10d      	bne.n	80074b4 <HAL_UART_Receive+0xdc>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <HAL_UART_Receive+0xd2>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	227f      	movs	r2, #127	; 0x7f
 80074a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074a8:	e008      	b.n	80074bc <HAL_UART_Receive+0xe4>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	223f      	movs	r2, #63	; 0x3f
 80074ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b2:	e003      	b.n	80074bc <HAL_UART_Receive+0xe4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074cc:	d108      	bne.n	80074e0 <HAL_UART_Receive+0x108>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d104      	bne.n	80074e0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	e003      	b.n	80074e8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80074f0:	e033      	b.n	800755a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	2120      	movs	r1, #32
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fe5e 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e032      	b.n	8007572 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10c      	bne.n	800752c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007518:	b29a      	uxth	r2, r3
 800751a:	8a7b      	ldrh	r3, [r7, #18]
 800751c:	4013      	ands	r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	3302      	adds	r3, #2
 8007528:	61bb      	str	r3, [r7, #24]
 800752a:	e00d      	b.n	8007548 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007532:	b29b      	uxth	r3, r3
 8007534:	b2da      	uxtb	r2, r3
 8007536:	8a7b      	ldrh	r3, [r7, #18]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	4013      	ands	r3, r2
 800753c:	b2da      	uxtb	r2, r3
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	3301      	adds	r3, #1
 8007546:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1c5      	bne.n	80074f2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	e000      	b.n	8007572 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007570:	2302      	movs	r3, #2
  }
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b0ba      	sub	sp, #232	; 0xe8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80075aa:	4013      	ands	r3, r2
 80075ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d115      	bne.n	80075e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 82a6 	beq.w	8007b26 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
      }
      return;
 80075e2:	e2a0      	b.n	8007b26 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80075e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8117 	beq.w	800781c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075fe:	4b85      	ldr	r3, [pc, #532]	; (8007814 <HAL_UART_IRQHandler+0x298>)
 8007600:	4013      	ands	r3, r2
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 810a 	beq.w	800781c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d011      	beq.n	8007638 <HAL_UART_IRQHandler+0xbc>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2201      	movs	r2, #1
 8007626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800762e:	f043 0201 	orr.w	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d011      	beq.n	8007668 <HAL_UART_IRQHandler+0xec>
 8007644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2202      	movs	r2, #2
 8007656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800765e:	f043 0204 	orr.w	r2, r3, #4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b00      	cmp	r3, #0
 8007672:	d011      	beq.n	8007698 <HAL_UART_IRQHandler+0x11c>
 8007674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2204      	movs	r2, #4
 8007686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800768e:	f043 0202 	orr.w	r2, r3, #2
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d017      	beq.n	80076d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d105      	bne.n	80076bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2208      	movs	r2, #8
 80076c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ca:	f043 0208 	orr.w	r2, r3, #8
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d012      	beq.n	8007706 <HAL_UART_IRQHandler+0x18a>
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00c      	beq.n	8007706 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fc:	f043 0220 	orr.w	r2, r3, #32
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 820c 	beq.w	8007b2a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00d      	beq.n	800773a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	d005      	beq.n	800775e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007756:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800775a:	2b00      	cmp	r3, #0
 800775c:	d04f      	beq.n	80077fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fdf1 	bl	8008346 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d141      	bne.n	80077f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007788:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800778c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800779e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1d9      	bne.n	8007772 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d013      	beq.n	80077ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	4a13      	ldr	r2, [pc, #76]	; (8007818 <HAL_UART_IRQHandler+0x29c>)
 80077cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fc fca5 	bl	8004122 <HAL_DMA_Abort_IT>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	e00f      	b.n	800780e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9b0 	bl	8007b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	e00b      	b.n	800780e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9ac 	bl	8007b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fc:	e007      	b.n	800780e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f9a8 	bl	8007b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800780c:	e18d      	b.n	8007b2a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780e:	bf00      	nop
    return;
 8007810:	e18b      	b.n	8007b2a <HAL_UART_IRQHandler+0x5ae>
 8007812:	bf00      	nop
 8007814:	04000120 	.word	0x04000120
 8007818:	0800840d 	.word	0x0800840d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007820:	2b01      	cmp	r3, #1
 8007822:	f040 8146 	bne.w	8007ab2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 813f 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	f003 0310 	and.w	r3, r3, #16
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8138 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2210      	movs	r2, #16
 8007848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	f040 80b4 	bne.w	80079c2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007866:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 815f 	beq.w	8007b2e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800787a:	429a      	cmp	r2, r3
 800787c:	f080 8157 	bcs.w	8007b2e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	f040 8085 	bne.w	80079a6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1da      	bne.n	800789c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3308      	adds	r3, #8
 80078ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078f8:	f023 0301 	bic.w	r3, r3, #1
 80078fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800790a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800790e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800791c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e1      	bne.n	80078e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3308      	adds	r3, #8
 8007928:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3308      	adds	r3, #8
 8007942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007948:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800794c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e3      	bne.n	8007922 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007976:	f023 0310 	bic.w	r3, r3, #16
 800797a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007988:	65bb      	str	r3, [r7, #88]	; 0x58
 800798a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800798e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e4      	bne.n	8007966 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fc fb80 	bl	80040a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8d4 	bl	8007b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079c0:	e0b5      	b.n	8007b2e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80a7 	beq.w	8007b32 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80079e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80a2 	beq.w	8007b32 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a10:	647b      	str	r3, [r7, #68]	; 0x44
 8007a12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e4      	bne.n	80079ee <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	623b      	str	r3, [r7, #32]
   return(result);
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	f023 0301 	bic.w	r3, r3, #1
 8007a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a48:	633a      	str	r2, [r7, #48]	; 0x30
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e3      	bne.n	8007a24 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0310 	bic.w	r3, r3, #16
 8007a82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	69b9      	ldr	r1, [r7, #24]
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e4      	bne.n	8007a6e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f85c 	bl	8007b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab0:	e03f      	b.n	8007b32 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00e      	beq.n	8007adc <HAL_UART_IRQHandler+0x560>
 8007abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ad2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fcd9 	bl	800848c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ada:	e02d      	b.n	8007b38 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00e      	beq.n	8007b06 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01c      	beq.n	8007b36 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
    }
    return;
 8007b04:	e017      	b.n	8007b36 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d012      	beq.n	8007b38 <HAL_UART_IRQHandler+0x5bc>
 8007b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00c      	beq.n	8007b38 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fc8a 	bl	8008438 <UART_EndTransmit_IT>
    return;
 8007b24:	e008      	b.n	8007b38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b26:	bf00      	nop
 8007b28:	e006      	b.n	8007b38 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007b2a:	bf00      	nop
 8007b2c:	e004      	b.n	8007b38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b2e:	bf00      	nop
 8007b30:	e002      	b.n	8007b38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b32:	bf00      	nop
 8007b34:	e000      	b.n	8007b38 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007b36:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007b38:	37e8      	adds	r7, #232	; 0xe8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop

08007b40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b80:	b5b0      	push	{r4, r5, r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4baa      	ldr	r3, [pc, #680]	; (8007e54 <UART_SetConfig+0x2d4>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	69f9      	ldr	r1, [r7, #28]
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a9f      	ldr	r2, [pc, #636]	; (8007e58 <UART_SetConfig+0x2d8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a96      	ldr	r2, [pc, #600]	; (8007e5c <UART_SetConfig+0x2dc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d121      	bne.n	8007c4a <UART_SetConfig+0xca>
 8007c06:	4b96      	ldr	r3, [pc, #600]	; (8007e60 <UART_SetConfig+0x2e0>)
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d817      	bhi.n	8007c44 <UART_SetConfig+0xc4>
 8007c14:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <UART_SetConfig+0x9c>)
 8007c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007c2d 	.word	0x08007c2d
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c33 	.word	0x08007c33
 8007c28:	08007c3f 	.word	0x08007c3f
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	76fb      	strb	r3, [r7, #27]
 8007c30:	e096      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007c32:	2302      	movs	r3, #2
 8007c34:	76fb      	strb	r3, [r7, #27]
 8007c36:	e093      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	76fb      	strb	r3, [r7, #27]
 8007c3c:	e090      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007c3e:	2308      	movs	r3, #8
 8007c40:	76fb      	strb	r3, [r7, #27]
 8007c42:	e08d      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007c44:	2310      	movs	r3, #16
 8007c46:	76fb      	strb	r3, [r7, #27]
 8007c48:	e08a      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a85      	ldr	r2, [pc, #532]	; (8007e64 <UART_SetConfig+0x2e4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d132      	bne.n	8007cba <UART_SetConfig+0x13a>
 8007c54:	4b82      	ldr	r3, [pc, #520]	; (8007e60 <UART_SetConfig+0x2e0>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	f003 030c 	and.w	r3, r3, #12
 8007c5e:	2b0c      	cmp	r3, #12
 8007c60:	d828      	bhi.n	8007cb4 <UART_SetConfig+0x134>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <UART_SetConfig+0xe8>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c9d 	.word	0x08007c9d
 8007c6c:	08007cb5 	.word	0x08007cb5
 8007c70:	08007cb5 	.word	0x08007cb5
 8007c74:	08007cb5 	.word	0x08007cb5
 8007c78:	08007ca9 	.word	0x08007ca9
 8007c7c:	08007cb5 	.word	0x08007cb5
 8007c80:	08007cb5 	.word	0x08007cb5
 8007c84:	08007cb5 	.word	0x08007cb5
 8007c88:	08007ca3 	.word	0x08007ca3
 8007c8c:	08007cb5 	.word	0x08007cb5
 8007c90:	08007cb5 	.word	0x08007cb5
 8007c94:	08007cb5 	.word	0x08007cb5
 8007c98:	08007caf 	.word	0x08007caf
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	76fb      	strb	r3, [r7, #27]
 8007ca0:	e05e      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	76fb      	strb	r3, [r7, #27]
 8007ca6:	e05b      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	76fb      	strb	r3, [r7, #27]
 8007cac:	e058      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007cae:	2308      	movs	r3, #8
 8007cb0:	76fb      	strb	r3, [r7, #27]
 8007cb2:	e055      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	76fb      	strb	r3, [r7, #27]
 8007cb8:	e052      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a6a      	ldr	r2, [pc, #424]	; (8007e68 <UART_SetConfig+0x2e8>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d120      	bne.n	8007d06 <UART_SetConfig+0x186>
 8007cc4:	4b66      	ldr	r3, [pc, #408]	; (8007e60 <UART_SetConfig+0x2e0>)
 8007cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cce:	2b30      	cmp	r3, #48	; 0x30
 8007cd0:	d013      	beq.n	8007cfa <UART_SetConfig+0x17a>
 8007cd2:	2b30      	cmp	r3, #48	; 0x30
 8007cd4:	d814      	bhi.n	8007d00 <UART_SetConfig+0x180>
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d009      	beq.n	8007cee <UART_SetConfig+0x16e>
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d810      	bhi.n	8007d00 <UART_SetConfig+0x180>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <UART_SetConfig+0x168>
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d006      	beq.n	8007cf4 <UART_SetConfig+0x174>
 8007ce6:	e00b      	b.n	8007d00 <UART_SetConfig+0x180>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	76fb      	strb	r3, [r7, #27]
 8007cec:	e038      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	76fb      	strb	r3, [r7, #27]
 8007cf2:	e035      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	76fb      	strb	r3, [r7, #27]
 8007cf8:	e032      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	76fb      	strb	r3, [r7, #27]
 8007cfe:	e02f      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007d00:	2310      	movs	r3, #16
 8007d02:	76fb      	strb	r3, [r7, #27]
 8007d04:	e02c      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a53      	ldr	r2, [pc, #332]	; (8007e58 <UART_SetConfig+0x2d8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d125      	bne.n	8007d5c <UART_SetConfig+0x1dc>
 8007d10:	4b53      	ldr	r3, [pc, #332]	; (8007e60 <UART_SetConfig+0x2e0>)
 8007d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1e:	d017      	beq.n	8007d50 <UART_SetConfig+0x1d0>
 8007d20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d24:	d817      	bhi.n	8007d56 <UART_SetConfig+0x1d6>
 8007d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d2a:	d00b      	beq.n	8007d44 <UART_SetConfig+0x1c4>
 8007d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d30:	d811      	bhi.n	8007d56 <UART_SetConfig+0x1d6>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <UART_SetConfig+0x1be>
 8007d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d3a:	d006      	beq.n	8007d4a <UART_SetConfig+0x1ca>
 8007d3c:	e00b      	b.n	8007d56 <UART_SetConfig+0x1d6>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	76fb      	strb	r3, [r7, #27]
 8007d42:	e00d      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007d44:	2302      	movs	r3, #2
 8007d46:	76fb      	strb	r3, [r7, #27]
 8007d48:	e00a      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	76fb      	strb	r3, [r7, #27]
 8007d4e:	e007      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007d50:	2308      	movs	r3, #8
 8007d52:	76fb      	strb	r3, [r7, #27]
 8007d54:	e004      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007d56:	2310      	movs	r3, #16
 8007d58:	76fb      	strb	r3, [r7, #27]
 8007d5a:	e001      	b.n	8007d60 <UART_SetConfig+0x1e0>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a3c      	ldr	r2, [pc, #240]	; (8007e58 <UART_SetConfig+0x2d8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	f040 8082 	bne.w	8007e70 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d6c:	7efb      	ldrb	r3, [r7, #27]
 8007d6e:	2b08      	cmp	r3, #8
 8007d70:	d823      	bhi.n	8007dba <UART_SetConfig+0x23a>
 8007d72:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <UART_SetConfig+0x1f8>)
 8007d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007dbb 	.word	0x08007dbb
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dbb 	.word	0x08007dbb
 8007d88:	08007dab 	.word	0x08007dab
 8007d8c:	08007dbb 	.word	0x08007dbb
 8007d90:	08007dbb 	.word	0x08007dbb
 8007d94:	08007dbb 	.word	0x08007dbb
 8007d98:	08007db3 	.word	0x08007db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d9c:	f7fd fc70 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007da0:	6178      	str	r0, [r7, #20]
        break;
 8007da2:	e00f      	b.n	8007dc4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da4:	4b31      	ldr	r3, [pc, #196]	; (8007e6c <UART_SetConfig+0x2ec>)
 8007da6:	617b      	str	r3, [r7, #20]
        break;
 8007da8:	e00c      	b.n	8007dc4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007daa:	f7fd fbd1 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8007dae:	6178      	str	r0, [r7, #20]
        break;
 8007db0:	e008      	b.n	8007dc4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007db6:	617b      	str	r3, [r7, #20]
        break;
 8007db8:	e004      	b.n	8007dc4 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	76bb      	strb	r3, [r7, #26]
        break;
 8007dc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 8100 	beq.w	8007fcc <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	4413      	add	r3, r2
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d305      	bcc.n	8007de8 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d902      	bls.n	8007dee <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	76bb      	strb	r3, [r7, #26]
 8007dec:	e0ee      	b.n	8007fcc <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f04f 0100 	mov.w	r1, #0
 8007df6:	f04f 0200 	mov.w	r2, #0
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	020b      	lsls	r3, r1, #8
 8007e00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e04:	0202      	lsls	r2, r0, #8
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	6849      	ldr	r1, [r1, #4]
 8007e0a:	0849      	lsrs	r1, r1, #1
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	f04f 0100 	mov.w	r1, #0
 8007e12:	1814      	adds	r4, r2, r0
 8007e14:	eb43 0501 	adc.w	r5, r3, r1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f04f 0300 	mov.w	r3, #0
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	f7f8 fa33 	bl	8000290 <__aeabi_uldivmod>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4613      	mov	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e38:	d308      	bcc.n	8007e4c <UART_SetConfig+0x2cc>
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e40:	d204      	bcs.n	8007e4c <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	e0bf      	b.n	8007fcc <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	76bb      	strb	r3, [r7, #26]
 8007e50:	e0bc      	b.n	8007fcc <UART_SetConfig+0x44c>
 8007e52:	bf00      	nop
 8007e54:	efff69f3 	.word	0xefff69f3
 8007e58:	40008000 	.word	0x40008000
 8007e5c:	40013800 	.word	0x40013800
 8007e60:	40021000 	.word	0x40021000
 8007e64:	40004400 	.word	0x40004400
 8007e68:	40004800 	.word	0x40004800
 8007e6c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e78:	d15b      	bne.n	8007f32 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8007e7a:	7efb      	ldrb	r3, [r7, #27]
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d828      	bhi.n	8007ed2 <UART_SetConfig+0x352>
 8007e80:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <UART_SetConfig+0x308>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007eb5 	.word	0x08007eb5
 8007e90:	08007ebd 	.word	0x08007ebd
 8007e94:	08007ed3 	.word	0x08007ed3
 8007e98:	08007ec3 	.word	0x08007ec3
 8007e9c:	08007ed3 	.word	0x08007ed3
 8007ea0:	08007ed3 	.word	0x08007ed3
 8007ea4:	08007ed3 	.word	0x08007ed3
 8007ea8:	08007ecb 	.word	0x08007ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eac:	f7fd fbe8 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007eb0:	6178      	str	r0, [r7, #20]
        break;
 8007eb2:	e013      	b.n	8007edc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb4:	f7fd fbfa 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 8007eb8:	6178      	str	r0, [r7, #20]
        break;
 8007eba:	e00f      	b.n	8007edc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ebc:	4b49      	ldr	r3, [pc, #292]	; (8007fe4 <UART_SetConfig+0x464>)
 8007ebe:	617b      	str	r3, [r7, #20]
        break;
 8007ec0:	e00c      	b.n	8007edc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec2:	f7fd fb45 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8007ec6:	6178      	str	r0, [r7, #20]
        break;
 8007ec8:	e008      	b.n	8007edc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ece:	617b      	str	r3, [r7, #20]
        break;
 8007ed0:	e004      	b.n	8007edc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	76bb      	strb	r3, [r7, #26]
        break;
 8007eda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d074      	beq.n	8007fcc <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	005a      	lsls	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	441a      	add	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2b0f      	cmp	r3, #15
 8007efc:	d916      	bls.n	8007f2c <UART_SetConfig+0x3ac>
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f04:	d212      	bcs.n	8007f2c <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f023 030f 	bic.w	r3, r3, #15
 8007f0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	085b      	lsrs	r3, r3, #1
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	89fb      	ldrh	r3, [r7, #14]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	89fa      	ldrh	r2, [r7, #14]
 8007f28:	60da      	str	r2, [r3, #12]
 8007f2a:	e04f      	b.n	8007fcc <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	76bb      	strb	r3, [r7, #26]
 8007f30:	e04c      	b.n	8007fcc <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f32:	7efb      	ldrb	r3, [r7, #27]
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	d828      	bhi.n	8007f8a <UART_SetConfig+0x40a>
 8007f38:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <UART_SetConfig+0x3c0>)
 8007f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3e:	bf00      	nop
 8007f40:	08007f65 	.word	0x08007f65
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f75 	.word	0x08007f75
 8007f4c:	08007f8b 	.word	0x08007f8b
 8007f50:	08007f7b 	.word	0x08007f7b
 8007f54:	08007f8b 	.word	0x08007f8b
 8007f58:	08007f8b 	.word	0x08007f8b
 8007f5c:	08007f8b 	.word	0x08007f8b
 8007f60:	08007f83 	.word	0x08007f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f64:	f7fd fb8c 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007f68:	6178      	str	r0, [r7, #20]
        break;
 8007f6a:	e013      	b.n	8007f94 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f6c:	f7fd fb9e 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 8007f70:	6178      	str	r0, [r7, #20]
        break;
 8007f72:	e00f      	b.n	8007f94 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f74:	4b1b      	ldr	r3, [pc, #108]	; (8007fe4 <UART_SetConfig+0x464>)
 8007f76:	617b      	str	r3, [r7, #20]
        break;
 8007f78:	e00c      	b.n	8007f94 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f7a:	f7fd fae9 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8007f7e:	6178      	str	r0, [r7, #20]
        break;
 8007f80:	e008      	b.n	8007f94 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f86:	617b      	str	r3, [r7, #20]
        break;
 8007f88:	e004      	b.n	8007f94 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	76bb      	strb	r3, [r7, #26]
        break;
 8007f92:	bf00      	nop
    }

    if (pclk != 0U)
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d018      	beq.n	8007fcc <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	085a      	lsrs	r2, r3, #1
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	441a      	add	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b0f      	cmp	r3, #15
 8007fb2:	d909      	bls.n	8007fc8 <UART_SetConfig+0x448>
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fba:	d205      	bcs.n	8007fc8 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60da      	str	r2, [r3, #12]
 8007fc6:	e001      	b.n	8007fcc <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007fd8:	7ebb      	ldrb	r3, [r7, #26]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	00f42400 	.word	0x00f42400

08007fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01a      	beq.n	80080fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e6:	d10a      	bne.n	80080fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	605a      	str	r2, [r3, #4]
  }
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af02      	add	r7, sp, #8
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800813c:	f7f9 ffbc 	bl	80020b8 <HAL_GetTick>
 8008140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b08      	cmp	r3, #8
 800814e:	d10e      	bne.n	800816e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f82d 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e023      	b.n	80081b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b04      	cmp	r3, #4
 800817a:	d10e      	bne.n	800819a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800817c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f817 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e00d      	b.n	80081b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b09c      	sub	sp, #112	; 0x70
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	603b      	str	r3, [r7, #0]
 80081ca:	4613      	mov	r3, r2
 80081cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ce:	e0a5      	b.n	800831c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	f000 80a1 	beq.w	800831c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081da:	f7f9 ff6d 	bl	80020b8 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80081ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d13e      	bne.n	800826e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008204:	667b      	str	r3, [r7, #100]	; 0x64
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008210:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800821c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e6      	bne.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	663b      	str	r3, [r7, #96]	; 0x60
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008242:	64ba      	str	r2, [r7, #72]	; 0x48
 8008244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2220      	movs	r2, #32
 800825a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e067      	b.n	800833e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d04f      	beq.n	800831c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828a:	d147      	bne.n	800831c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008294:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
 80082b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e6      	bne.n	8008296 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	613b      	str	r3, [r7, #16]
   return(result);
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f023 0301 	bic.w	r3, r3, #1
 80082de:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082e8:	623a      	str	r2, [r7, #32]
 80082ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	69f9      	ldr	r1, [r7, #28]
 80082ee:	6a3a      	ldr	r2, [r7, #32]
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2220      	movs	r2, #32
 8008300:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2220      	movs	r2, #32
 8008306:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e010      	b.n	800833e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4013      	ands	r3, r2
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	429a      	cmp	r2, r3
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	461a      	mov	r2, r3
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	429a      	cmp	r2, r3
 8008338:	f43f af4a 	beq.w	80081d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3770      	adds	r7, #112	; 0x70
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008346:	b480      	push	{r7}
 8008348:	b095      	sub	sp, #84	; 0x54
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800836c:	643b      	str	r3, [r7, #64]	; 0x40
 800836e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e6      	bne.n	800834e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	e853 3f00 	ldrex	r3, [r3]
 800838e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	f023 0301 	bic.w	r3, r3, #1
 8008396:	64bb      	str	r3, [r7, #72]	; 0x48
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3308      	adds	r3, #8
 800839e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e5      	bne.n	8008380 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d118      	bne.n	80083ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f023 0310 	bic.w	r3, r3, #16
 80083d0:	647b      	str	r3, [r7, #68]	; 0x44
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083da:	61bb      	str	r3, [r7, #24]
 80083dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6979      	ldr	r1, [r7, #20]
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	613b      	str	r3, [r7, #16]
   return(result);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e6      	bne.n	80083bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008400:	bf00      	nop
 8008402:	3754      	adds	r7, #84	; 0x54
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fb92 	bl	8007b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008430:	bf00      	nop
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	60bb      	str	r3, [r7, #8]
   return(result);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	61bb      	str	r3, [r7, #24]
 8008460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6979      	ldr	r1, [r7, #20]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	613b      	str	r3, [r7, #16]
   return(result);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e6      	bne.n	8008440 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fb5e 	bl	8007b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008484:	bf00      	nop
 8008486:	3720      	adds	r7, #32
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <atoi>:
 80084a0:	220a      	movs	r2, #10
 80084a2:	2100      	movs	r1, #0
 80084a4:	f000 ba32 	b.w	800890c <strtol>

080084a8 <__errno>:
 80084a8:	4b01      	ldr	r3, [pc, #4]	; (80084b0 <__errno+0x8>)
 80084aa:	6818      	ldr	r0, [r3, #0]
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	200000ac 	.word	0x200000ac

080084b4 <getchar>:
 80084b4:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <getchar+0x20>)
 80084b6:	b510      	push	{r4, lr}
 80084b8:	681c      	ldr	r4, [r3, #0]
 80084ba:	b124      	cbz	r4, 80084c6 <getchar+0x12>
 80084bc:	69a3      	ldr	r3, [r4, #24]
 80084be:	b913      	cbnz	r3, 80084c6 <getchar+0x12>
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fc19 	bl	8008cf8 <__sinit>
 80084c6:	6861      	ldr	r1, [r4, #4]
 80084c8:	4620      	mov	r0, r4
 80084ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ce:	f000 bccd 	b.w	8008e6c <_getc_r>
 80084d2:	bf00      	nop
 80084d4:	200000ac 	.word	0x200000ac

080084d8 <__libc_init_array>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	4d0d      	ldr	r5, [pc, #52]	; (8008510 <__libc_init_array+0x38>)
 80084dc:	4c0d      	ldr	r4, [pc, #52]	; (8008514 <__libc_init_array+0x3c>)
 80084de:	1b64      	subs	r4, r4, r5
 80084e0:	10a4      	asrs	r4, r4, #2
 80084e2:	2600      	movs	r6, #0
 80084e4:	42a6      	cmp	r6, r4
 80084e6:	d109      	bne.n	80084fc <__libc_init_array+0x24>
 80084e8:	4d0b      	ldr	r5, [pc, #44]	; (8008518 <__libc_init_array+0x40>)
 80084ea:	4c0c      	ldr	r4, [pc, #48]	; (800851c <__libc_init_array+0x44>)
 80084ec:	f001 fae4 	bl	8009ab8 <_init>
 80084f0:	1b64      	subs	r4, r4, r5
 80084f2:	10a4      	asrs	r4, r4, #2
 80084f4:	2600      	movs	r6, #0
 80084f6:	42a6      	cmp	r6, r4
 80084f8:	d105      	bne.n	8008506 <__libc_init_array+0x2e>
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008500:	4798      	blx	r3
 8008502:	3601      	adds	r6, #1
 8008504:	e7ee      	b.n	80084e4 <__libc_init_array+0xc>
 8008506:	f855 3b04 	ldr.w	r3, [r5], #4
 800850a:	4798      	blx	r3
 800850c:	3601      	adds	r6, #1
 800850e:	e7f2      	b.n	80084f6 <__libc_init_array+0x1e>
 8008510:	08009f5c 	.word	0x08009f5c
 8008514:	08009f5c 	.word	0x08009f5c
 8008518:	08009f5c 	.word	0x08009f5c
 800851c:	08009f60 	.word	0x08009f60

08008520 <memset>:
 8008520:	4402      	add	r2, r0
 8008522:	4603      	mov	r3, r0
 8008524:	4293      	cmp	r3, r2
 8008526:	d100      	bne.n	800852a <memset+0xa>
 8008528:	4770      	bx	lr
 800852a:	f803 1b01 	strb.w	r1, [r3], #1
 800852e:	e7f9      	b.n	8008524 <memset+0x4>

08008530 <iprintf>:
 8008530:	b40f      	push	{r0, r1, r2, r3}
 8008532:	4b0a      	ldr	r3, [pc, #40]	; (800855c <iprintf+0x2c>)
 8008534:	b513      	push	{r0, r1, r4, lr}
 8008536:	681c      	ldr	r4, [r3, #0]
 8008538:	b124      	cbz	r4, 8008544 <iprintf+0x14>
 800853a:	69a3      	ldr	r3, [r4, #24]
 800853c:	b913      	cbnz	r3, 8008544 <iprintf+0x14>
 800853e:	4620      	mov	r0, r4
 8008540:	f000 fbda 	bl	8008cf8 <__sinit>
 8008544:	ab05      	add	r3, sp, #20
 8008546:	9a04      	ldr	r2, [sp, #16]
 8008548:	68a1      	ldr	r1, [r4, #8]
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fe11 	bl	8009174 <_vfiprintf_r>
 8008552:	b002      	add	sp, #8
 8008554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008558:	b004      	add	sp, #16
 800855a:	4770      	bx	lr
 800855c:	200000ac 	.word	0x200000ac

08008560 <putchar>:
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <putchar+0x28>)
 8008562:	b513      	push	{r0, r1, r4, lr}
 8008564:	681c      	ldr	r4, [r3, #0]
 8008566:	4601      	mov	r1, r0
 8008568:	b134      	cbz	r4, 8008578 <putchar+0x18>
 800856a:	69a3      	ldr	r3, [r4, #24]
 800856c:	b923      	cbnz	r3, 8008578 <putchar+0x18>
 800856e:	9001      	str	r0, [sp, #4]
 8008570:	4620      	mov	r0, r4
 8008572:	f000 fbc1 	bl	8008cf8 <__sinit>
 8008576:	9901      	ldr	r1, [sp, #4]
 8008578:	68a2      	ldr	r2, [r4, #8]
 800857a:	4620      	mov	r0, r4
 800857c:	b002      	add	sp, #8
 800857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008582:	f001 b8bb 	b.w	80096fc <_putc_r>
 8008586:	bf00      	nop
 8008588:	200000ac 	.word	0x200000ac

0800858c <_puts_r>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	460e      	mov	r6, r1
 8008590:	4605      	mov	r5, r0
 8008592:	b118      	cbz	r0, 800859c <_puts_r+0x10>
 8008594:	6983      	ldr	r3, [r0, #24]
 8008596:	b90b      	cbnz	r3, 800859c <_puts_r+0x10>
 8008598:	f000 fbae 	bl	8008cf8 <__sinit>
 800859c:	69ab      	ldr	r3, [r5, #24]
 800859e:	68ac      	ldr	r4, [r5, #8]
 80085a0:	b913      	cbnz	r3, 80085a8 <_puts_r+0x1c>
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 fba8 	bl	8008cf8 <__sinit>
 80085a8:	4b2c      	ldr	r3, [pc, #176]	; (800865c <_puts_r+0xd0>)
 80085aa:	429c      	cmp	r4, r3
 80085ac:	d120      	bne.n	80085f0 <_puts_r+0x64>
 80085ae:	686c      	ldr	r4, [r5, #4]
 80085b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085b2:	07db      	lsls	r3, r3, #31
 80085b4:	d405      	bmi.n	80085c2 <_puts_r+0x36>
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	0598      	lsls	r0, r3, #22
 80085ba:	d402      	bmi.n	80085c2 <_puts_r+0x36>
 80085bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085be:	f000 fc96 	bl	8008eee <__retarget_lock_acquire_recursive>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	0719      	lsls	r1, r3, #28
 80085c6:	d51d      	bpl.n	8008604 <_puts_r+0x78>
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	b1db      	cbz	r3, 8008604 <_puts_r+0x78>
 80085cc:	3e01      	subs	r6, #1
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085d4:	3b01      	subs	r3, #1
 80085d6:	60a3      	str	r3, [r4, #8]
 80085d8:	bb39      	cbnz	r1, 800862a <_puts_r+0x9e>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	da38      	bge.n	8008650 <_puts_r+0xc4>
 80085de:	4622      	mov	r2, r4
 80085e0:	210a      	movs	r1, #10
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f99c 	bl	8008920 <__swbuf_r>
 80085e8:	3001      	adds	r0, #1
 80085ea:	d011      	beq.n	8008610 <_puts_r+0x84>
 80085ec:	250a      	movs	r5, #10
 80085ee:	e011      	b.n	8008614 <_puts_r+0x88>
 80085f0:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <_puts_r+0xd4>)
 80085f2:	429c      	cmp	r4, r3
 80085f4:	d101      	bne.n	80085fa <_puts_r+0x6e>
 80085f6:	68ac      	ldr	r4, [r5, #8]
 80085f8:	e7da      	b.n	80085b0 <_puts_r+0x24>
 80085fa:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <_puts_r+0xd8>)
 80085fc:	429c      	cmp	r4, r3
 80085fe:	bf08      	it	eq
 8008600:	68ec      	ldreq	r4, [r5, #12]
 8008602:	e7d5      	b.n	80085b0 <_puts_r+0x24>
 8008604:	4621      	mov	r1, r4
 8008606:	4628      	mov	r0, r5
 8008608:	f000 f9dc 	bl	80089c4 <__swsetup_r>
 800860c:	2800      	cmp	r0, #0
 800860e:	d0dd      	beq.n	80085cc <_puts_r+0x40>
 8008610:	f04f 35ff 	mov.w	r5, #4294967295
 8008614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008616:	07da      	lsls	r2, r3, #31
 8008618:	d405      	bmi.n	8008626 <_puts_r+0x9a>
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	059b      	lsls	r3, r3, #22
 800861e:	d402      	bmi.n	8008626 <_puts_r+0x9a>
 8008620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008622:	f000 fc65 	bl	8008ef0 <__retarget_lock_release_recursive>
 8008626:	4628      	mov	r0, r5
 8008628:	bd70      	pop	{r4, r5, r6, pc}
 800862a:	2b00      	cmp	r3, #0
 800862c:	da04      	bge.n	8008638 <_puts_r+0xac>
 800862e:	69a2      	ldr	r2, [r4, #24]
 8008630:	429a      	cmp	r2, r3
 8008632:	dc06      	bgt.n	8008642 <_puts_r+0xb6>
 8008634:	290a      	cmp	r1, #10
 8008636:	d004      	beq.n	8008642 <_puts_r+0xb6>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	7019      	strb	r1, [r3, #0]
 8008640:	e7c5      	b.n	80085ce <_puts_r+0x42>
 8008642:	4622      	mov	r2, r4
 8008644:	4628      	mov	r0, r5
 8008646:	f000 f96b 	bl	8008920 <__swbuf_r>
 800864a:	3001      	adds	r0, #1
 800864c:	d1bf      	bne.n	80085ce <_puts_r+0x42>
 800864e:	e7df      	b.n	8008610 <_puts_r+0x84>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	250a      	movs	r5, #10
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	701d      	strb	r5, [r3, #0]
 800865a:	e7db      	b.n	8008614 <_puts_r+0x88>
 800865c:	08009ee0 	.word	0x08009ee0
 8008660:	08009f00 	.word	0x08009f00
 8008664:	08009ec0 	.word	0x08009ec0

08008668 <puts>:
 8008668:	4b02      	ldr	r3, [pc, #8]	; (8008674 <puts+0xc>)
 800866a:	4601      	mov	r1, r0
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	f7ff bf8d 	b.w	800858c <_puts_r>
 8008672:	bf00      	nop
 8008674:	200000ac 	.word	0x200000ac

08008678 <setvbuf>:
 8008678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800867c:	461d      	mov	r5, r3
 800867e:	4b5d      	ldr	r3, [pc, #372]	; (80087f4 <setvbuf+0x17c>)
 8008680:	681f      	ldr	r7, [r3, #0]
 8008682:	4604      	mov	r4, r0
 8008684:	460e      	mov	r6, r1
 8008686:	4690      	mov	r8, r2
 8008688:	b127      	cbz	r7, 8008694 <setvbuf+0x1c>
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	b913      	cbnz	r3, 8008694 <setvbuf+0x1c>
 800868e:	4638      	mov	r0, r7
 8008690:	f000 fb32 	bl	8008cf8 <__sinit>
 8008694:	4b58      	ldr	r3, [pc, #352]	; (80087f8 <setvbuf+0x180>)
 8008696:	429c      	cmp	r4, r3
 8008698:	d167      	bne.n	800876a <setvbuf+0xf2>
 800869a:	687c      	ldr	r4, [r7, #4]
 800869c:	f1b8 0f02 	cmp.w	r8, #2
 80086a0:	d006      	beq.n	80086b0 <setvbuf+0x38>
 80086a2:	f1b8 0f01 	cmp.w	r8, #1
 80086a6:	f200 809f 	bhi.w	80087e8 <setvbuf+0x170>
 80086aa:	2d00      	cmp	r5, #0
 80086ac:	f2c0 809c 	blt.w	80087e8 <setvbuf+0x170>
 80086b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086b2:	07db      	lsls	r3, r3, #31
 80086b4:	d405      	bmi.n	80086c2 <setvbuf+0x4a>
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	0598      	lsls	r0, r3, #22
 80086ba:	d402      	bmi.n	80086c2 <setvbuf+0x4a>
 80086bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086be:	f000 fc16 	bl	8008eee <__retarget_lock_acquire_recursive>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4638      	mov	r0, r7
 80086c6:	f000 fa71 	bl	8008bac <_fflush_r>
 80086ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086cc:	b141      	cbz	r1, 80086e0 <setvbuf+0x68>
 80086ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086d2:	4299      	cmp	r1, r3
 80086d4:	d002      	beq.n	80086dc <setvbuf+0x64>
 80086d6:	4638      	mov	r0, r7
 80086d8:	f000 fc78 	bl	8008fcc <_free_r>
 80086dc:	2300      	movs	r3, #0
 80086de:	6363      	str	r3, [r4, #52]	; 0x34
 80086e0:	2300      	movs	r3, #0
 80086e2:	61a3      	str	r3, [r4, #24]
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	0619      	lsls	r1, r3, #24
 80086ea:	d503      	bpl.n	80086f4 <setvbuf+0x7c>
 80086ec:	6921      	ldr	r1, [r4, #16]
 80086ee:	4638      	mov	r0, r7
 80086f0:	f000 fc6c 	bl	8008fcc <_free_r>
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80086fa:	f023 0303 	bic.w	r3, r3, #3
 80086fe:	f1b8 0f02 	cmp.w	r8, #2
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	d06c      	beq.n	80087e0 <setvbuf+0x168>
 8008706:	ab01      	add	r3, sp, #4
 8008708:	466a      	mov	r2, sp
 800870a:	4621      	mov	r1, r4
 800870c:	4638      	mov	r0, r7
 800870e:	f000 fbf0 	bl	8008ef2 <__swhatbuf_r>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	4318      	orrs	r0, r3
 8008716:	81a0      	strh	r0, [r4, #12]
 8008718:	2d00      	cmp	r5, #0
 800871a:	d130      	bne.n	800877e <setvbuf+0x106>
 800871c:	9d00      	ldr	r5, [sp, #0]
 800871e:	4628      	mov	r0, r5
 8008720:	f000 fc4c 	bl	8008fbc <malloc>
 8008724:	4606      	mov	r6, r0
 8008726:	2800      	cmp	r0, #0
 8008728:	d155      	bne.n	80087d6 <setvbuf+0x15e>
 800872a:	f8dd 9000 	ldr.w	r9, [sp]
 800872e:	45a9      	cmp	r9, r5
 8008730:	d14a      	bne.n	80087c8 <setvbuf+0x150>
 8008732:	f04f 35ff 	mov.w	r5, #4294967295
 8008736:	2200      	movs	r2, #0
 8008738:	60a2      	str	r2, [r4, #8]
 800873a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800873e:	6022      	str	r2, [r4, #0]
 8008740:	6122      	str	r2, [r4, #16]
 8008742:	2201      	movs	r2, #1
 8008744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008748:	6162      	str	r2, [r4, #20]
 800874a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	07d2      	lsls	r2, r2, #31
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	d405      	bmi.n	8008762 <setvbuf+0xea>
 8008756:	f413 7f00 	tst.w	r3, #512	; 0x200
 800875a:	d102      	bne.n	8008762 <setvbuf+0xea>
 800875c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800875e:	f000 fbc7 	bl	8008ef0 <__retarget_lock_release_recursive>
 8008762:	4628      	mov	r0, r5
 8008764:	b003      	add	sp, #12
 8008766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800876a:	4b24      	ldr	r3, [pc, #144]	; (80087fc <setvbuf+0x184>)
 800876c:	429c      	cmp	r4, r3
 800876e:	d101      	bne.n	8008774 <setvbuf+0xfc>
 8008770:	68bc      	ldr	r4, [r7, #8]
 8008772:	e793      	b.n	800869c <setvbuf+0x24>
 8008774:	4b22      	ldr	r3, [pc, #136]	; (8008800 <setvbuf+0x188>)
 8008776:	429c      	cmp	r4, r3
 8008778:	bf08      	it	eq
 800877a:	68fc      	ldreq	r4, [r7, #12]
 800877c:	e78e      	b.n	800869c <setvbuf+0x24>
 800877e:	2e00      	cmp	r6, #0
 8008780:	d0cd      	beq.n	800871e <setvbuf+0xa6>
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	b913      	cbnz	r3, 800878c <setvbuf+0x114>
 8008786:	4638      	mov	r0, r7
 8008788:	f000 fab6 	bl	8008cf8 <__sinit>
 800878c:	f1b8 0f01 	cmp.w	r8, #1
 8008790:	bf08      	it	eq
 8008792:	89a3      	ldrheq	r3, [r4, #12]
 8008794:	6026      	str	r6, [r4, #0]
 8008796:	bf04      	itt	eq
 8008798:	f043 0301 	orreq.w	r3, r3, #1
 800879c:	81a3      	strheq	r3, [r4, #12]
 800879e:	89a2      	ldrh	r2, [r4, #12]
 80087a0:	f012 0308 	ands.w	r3, r2, #8
 80087a4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80087a8:	d01c      	beq.n	80087e4 <setvbuf+0x16c>
 80087aa:	07d3      	lsls	r3, r2, #31
 80087ac:	bf41      	itttt	mi
 80087ae:	2300      	movmi	r3, #0
 80087b0:	426d      	negmi	r5, r5
 80087b2:	60a3      	strmi	r3, [r4, #8]
 80087b4:	61a5      	strmi	r5, [r4, #24]
 80087b6:	bf58      	it	pl
 80087b8:	60a5      	strpl	r5, [r4, #8]
 80087ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80087bc:	f015 0501 	ands.w	r5, r5, #1
 80087c0:	d115      	bne.n	80087ee <setvbuf+0x176>
 80087c2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80087c6:	e7c8      	b.n	800875a <setvbuf+0xe2>
 80087c8:	4648      	mov	r0, r9
 80087ca:	f000 fbf7 	bl	8008fbc <malloc>
 80087ce:	4606      	mov	r6, r0
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d0ae      	beq.n	8008732 <setvbuf+0xba>
 80087d4:	464d      	mov	r5, r9
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	e7d0      	b.n	8008782 <setvbuf+0x10a>
 80087e0:	2500      	movs	r5, #0
 80087e2:	e7a8      	b.n	8008736 <setvbuf+0xbe>
 80087e4:	60a3      	str	r3, [r4, #8]
 80087e6:	e7e8      	b.n	80087ba <setvbuf+0x142>
 80087e8:	f04f 35ff 	mov.w	r5, #4294967295
 80087ec:	e7b9      	b.n	8008762 <setvbuf+0xea>
 80087ee:	2500      	movs	r5, #0
 80087f0:	e7b7      	b.n	8008762 <setvbuf+0xea>
 80087f2:	bf00      	nop
 80087f4:	200000ac 	.word	0x200000ac
 80087f8:	08009ee0 	.word	0x08009ee0
 80087fc:	08009f00 	.word	0x08009f00
 8008800:	08009ec0 	.word	0x08009ec0

08008804 <_strtol_l.isra.0>:
 8008804:	2b01      	cmp	r3, #1
 8008806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800880a:	d001      	beq.n	8008810 <_strtol_l.isra.0+0xc>
 800880c:	2b24      	cmp	r3, #36	; 0x24
 800880e:	d906      	bls.n	800881e <_strtol_l.isra.0+0x1a>
 8008810:	f7ff fe4a 	bl	80084a8 <__errno>
 8008814:	2316      	movs	r3, #22
 8008816:	6003      	str	r3, [r0, #0]
 8008818:	2000      	movs	r0, #0
 800881a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881e:	4f3a      	ldr	r7, [pc, #232]	; (8008908 <_strtol_l.isra.0+0x104>)
 8008820:	468e      	mov	lr, r1
 8008822:	4676      	mov	r6, lr
 8008824:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008828:	5de5      	ldrb	r5, [r4, r7]
 800882a:	f015 0508 	ands.w	r5, r5, #8
 800882e:	d1f8      	bne.n	8008822 <_strtol_l.isra.0+0x1e>
 8008830:	2c2d      	cmp	r4, #45	; 0x2d
 8008832:	d134      	bne.n	800889e <_strtol_l.isra.0+0x9a>
 8008834:	f89e 4000 	ldrb.w	r4, [lr]
 8008838:	f04f 0801 	mov.w	r8, #1
 800883c:	f106 0e02 	add.w	lr, r6, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d05c      	beq.n	80088fe <_strtol_l.isra.0+0xfa>
 8008844:	2b10      	cmp	r3, #16
 8008846:	d10c      	bne.n	8008862 <_strtol_l.isra.0+0x5e>
 8008848:	2c30      	cmp	r4, #48	; 0x30
 800884a:	d10a      	bne.n	8008862 <_strtol_l.isra.0+0x5e>
 800884c:	f89e 4000 	ldrb.w	r4, [lr]
 8008850:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008854:	2c58      	cmp	r4, #88	; 0x58
 8008856:	d14d      	bne.n	80088f4 <_strtol_l.isra.0+0xf0>
 8008858:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800885c:	2310      	movs	r3, #16
 800885e:	f10e 0e02 	add.w	lr, lr, #2
 8008862:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008866:	f10c 3cff 	add.w	ip, ip, #4294967295
 800886a:	2600      	movs	r6, #0
 800886c:	fbbc f9f3 	udiv	r9, ip, r3
 8008870:	4635      	mov	r5, r6
 8008872:	fb03 ca19 	mls	sl, r3, r9, ip
 8008876:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800887a:	2f09      	cmp	r7, #9
 800887c:	d818      	bhi.n	80088b0 <_strtol_l.isra.0+0xac>
 800887e:	463c      	mov	r4, r7
 8008880:	42a3      	cmp	r3, r4
 8008882:	dd24      	ble.n	80088ce <_strtol_l.isra.0+0xca>
 8008884:	2e00      	cmp	r6, #0
 8008886:	db1f      	blt.n	80088c8 <_strtol_l.isra.0+0xc4>
 8008888:	45a9      	cmp	r9, r5
 800888a:	d31d      	bcc.n	80088c8 <_strtol_l.isra.0+0xc4>
 800888c:	d101      	bne.n	8008892 <_strtol_l.isra.0+0x8e>
 800888e:	45a2      	cmp	sl, r4
 8008890:	db1a      	blt.n	80088c8 <_strtol_l.isra.0+0xc4>
 8008892:	fb05 4503 	mla	r5, r5, r3, r4
 8008896:	2601      	movs	r6, #1
 8008898:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800889c:	e7eb      	b.n	8008876 <_strtol_l.isra.0+0x72>
 800889e:	2c2b      	cmp	r4, #43	; 0x2b
 80088a0:	bf08      	it	eq
 80088a2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80088a6:	46a8      	mov	r8, r5
 80088a8:	bf08      	it	eq
 80088aa:	f106 0e02 	addeq.w	lr, r6, #2
 80088ae:	e7c7      	b.n	8008840 <_strtol_l.isra.0+0x3c>
 80088b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80088b4:	2f19      	cmp	r7, #25
 80088b6:	d801      	bhi.n	80088bc <_strtol_l.isra.0+0xb8>
 80088b8:	3c37      	subs	r4, #55	; 0x37
 80088ba:	e7e1      	b.n	8008880 <_strtol_l.isra.0+0x7c>
 80088bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80088c0:	2f19      	cmp	r7, #25
 80088c2:	d804      	bhi.n	80088ce <_strtol_l.isra.0+0xca>
 80088c4:	3c57      	subs	r4, #87	; 0x57
 80088c6:	e7db      	b.n	8008880 <_strtol_l.isra.0+0x7c>
 80088c8:	f04f 36ff 	mov.w	r6, #4294967295
 80088cc:	e7e4      	b.n	8008898 <_strtol_l.isra.0+0x94>
 80088ce:	2e00      	cmp	r6, #0
 80088d0:	da05      	bge.n	80088de <_strtol_l.isra.0+0xda>
 80088d2:	2322      	movs	r3, #34	; 0x22
 80088d4:	6003      	str	r3, [r0, #0]
 80088d6:	4665      	mov	r5, ip
 80088d8:	b942      	cbnz	r2, 80088ec <_strtol_l.isra.0+0xe8>
 80088da:	4628      	mov	r0, r5
 80088dc:	e79d      	b.n	800881a <_strtol_l.isra.0+0x16>
 80088de:	f1b8 0f00 	cmp.w	r8, #0
 80088e2:	d000      	beq.n	80088e6 <_strtol_l.isra.0+0xe2>
 80088e4:	426d      	negs	r5, r5
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	d0f7      	beq.n	80088da <_strtol_l.isra.0+0xd6>
 80088ea:	b10e      	cbz	r6, 80088f0 <_strtol_l.isra.0+0xec>
 80088ec:	f10e 31ff 	add.w	r1, lr, #4294967295
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	e7f2      	b.n	80088da <_strtol_l.isra.0+0xd6>
 80088f4:	2430      	movs	r4, #48	; 0x30
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1b3      	bne.n	8008862 <_strtol_l.isra.0+0x5e>
 80088fa:	2308      	movs	r3, #8
 80088fc:	e7b1      	b.n	8008862 <_strtol_l.isra.0+0x5e>
 80088fe:	2c30      	cmp	r4, #48	; 0x30
 8008900:	d0a4      	beq.n	800884c <_strtol_l.isra.0+0x48>
 8008902:	230a      	movs	r3, #10
 8008904:	e7ad      	b.n	8008862 <_strtol_l.isra.0+0x5e>
 8008906:	bf00      	nop
 8008908:	08009dbd 	.word	0x08009dbd

0800890c <strtol>:
 800890c:	4613      	mov	r3, r2
 800890e:	460a      	mov	r2, r1
 8008910:	4601      	mov	r1, r0
 8008912:	4802      	ldr	r0, [pc, #8]	; (800891c <strtol+0x10>)
 8008914:	6800      	ldr	r0, [r0, #0]
 8008916:	f7ff bf75 	b.w	8008804 <_strtol_l.isra.0>
 800891a:	bf00      	nop
 800891c:	200000ac 	.word	0x200000ac

08008920 <__swbuf_r>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	460e      	mov	r6, r1
 8008924:	4614      	mov	r4, r2
 8008926:	4605      	mov	r5, r0
 8008928:	b118      	cbz	r0, 8008932 <__swbuf_r+0x12>
 800892a:	6983      	ldr	r3, [r0, #24]
 800892c:	b90b      	cbnz	r3, 8008932 <__swbuf_r+0x12>
 800892e:	f000 f9e3 	bl	8008cf8 <__sinit>
 8008932:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <__swbuf_r+0x98>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d12b      	bne.n	8008990 <__swbuf_r+0x70>
 8008938:	686c      	ldr	r4, [r5, #4]
 800893a:	69a3      	ldr	r3, [r4, #24]
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	071a      	lsls	r2, r3, #28
 8008942:	d52f      	bpl.n	80089a4 <__swbuf_r+0x84>
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	b36b      	cbz	r3, 80089a4 <__swbuf_r+0x84>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	6820      	ldr	r0, [r4, #0]
 800894c:	1ac0      	subs	r0, r0, r3
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	b2f6      	uxtb	r6, r6
 8008952:	4283      	cmp	r3, r0
 8008954:	4637      	mov	r7, r6
 8008956:	dc04      	bgt.n	8008962 <__swbuf_r+0x42>
 8008958:	4621      	mov	r1, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f000 f926 	bl	8008bac <_fflush_r>
 8008960:	bb30      	cbnz	r0, 80089b0 <__swbuf_r+0x90>
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	3b01      	subs	r3, #1
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	6022      	str	r2, [r4, #0]
 800896e:	701e      	strb	r6, [r3, #0]
 8008970:	6963      	ldr	r3, [r4, #20]
 8008972:	3001      	adds	r0, #1
 8008974:	4283      	cmp	r3, r0
 8008976:	d004      	beq.n	8008982 <__swbuf_r+0x62>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	07db      	lsls	r3, r3, #31
 800897c:	d506      	bpl.n	800898c <__swbuf_r+0x6c>
 800897e:	2e0a      	cmp	r6, #10
 8008980:	d104      	bne.n	800898c <__swbuf_r+0x6c>
 8008982:	4621      	mov	r1, r4
 8008984:	4628      	mov	r0, r5
 8008986:	f000 f911 	bl	8008bac <_fflush_r>
 800898a:	b988      	cbnz	r0, 80089b0 <__swbuf_r+0x90>
 800898c:	4638      	mov	r0, r7
 800898e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <__swbuf_r+0x9c>)
 8008992:	429c      	cmp	r4, r3
 8008994:	d101      	bne.n	800899a <__swbuf_r+0x7a>
 8008996:	68ac      	ldr	r4, [r5, #8]
 8008998:	e7cf      	b.n	800893a <__swbuf_r+0x1a>
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <__swbuf_r+0xa0>)
 800899c:	429c      	cmp	r4, r3
 800899e:	bf08      	it	eq
 80089a0:	68ec      	ldreq	r4, [r5, #12]
 80089a2:	e7ca      	b.n	800893a <__swbuf_r+0x1a>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f80c 	bl	80089c4 <__swsetup_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d0cb      	beq.n	8008948 <__swbuf_r+0x28>
 80089b0:	f04f 37ff 	mov.w	r7, #4294967295
 80089b4:	e7ea      	b.n	800898c <__swbuf_r+0x6c>
 80089b6:	bf00      	nop
 80089b8:	08009ee0 	.word	0x08009ee0
 80089bc:	08009f00 	.word	0x08009f00
 80089c0:	08009ec0 	.word	0x08009ec0

080089c4 <__swsetup_r>:
 80089c4:	4b32      	ldr	r3, [pc, #200]	; (8008a90 <__swsetup_r+0xcc>)
 80089c6:	b570      	push	{r4, r5, r6, lr}
 80089c8:	681d      	ldr	r5, [r3, #0]
 80089ca:	4606      	mov	r6, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	b125      	cbz	r5, 80089da <__swsetup_r+0x16>
 80089d0:	69ab      	ldr	r3, [r5, #24]
 80089d2:	b913      	cbnz	r3, 80089da <__swsetup_r+0x16>
 80089d4:	4628      	mov	r0, r5
 80089d6:	f000 f98f 	bl	8008cf8 <__sinit>
 80089da:	4b2e      	ldr	r3, [pc, #184]	; (8008a94 <__swsetup_r+0xd0>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d10f      	bne.n	8008a00 <__swsetup_r+0x3c>
 80089e0:	686c      	ldr	r4, [r5, #4]
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089e8:	0719      	lsls	r1, r3, #28
 80089ea:	d42c      	bmi.n	8008a46 <__swsetup_r+0x82>
 80089ec:	06dd      	lsls	r5, r3, #27
 80089ee:	d411      	bmi.n	8008a14 <__swsetup_r+0x50>
 80089f0:	2309      	movs	r3, #9
 80089f2:	6033      	str	r3, [r6, #0]
 80089f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295
 80089fe:	e03e      	b.n	8008a7e <__swsetup_r+0xba>
 8008a00:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <__swsetup_r+0xd4>)
 8008a02:	429c      	cmp	r4, r3
 8008a04:	d101      	bne.n	8008a0a <__swsetup_r+0x46>
 8008a06:	68ac      	ldr	r4, [r5, #8]
 8008a08:	e7eb      	b.n	80089e2 <__swsetup_r+0x1e>
 8008a0a:	4b24      	ldr	r3, [pc, #144]	; (8008a9c <__swsetup_r+0xd8>)
 8008a0c:	429c      	cmp	r4, r3
 8008a0e:	bf08      	it	eq
 8008a10:	68ec      	ldreq	r4, [r5, #12]
 8008a12:	e7e6      	b.n	80089e2 <__swsetup_r+0x1e>
 8008a14:	0758      	lsls	r0, r3, #29
 8008a16:	d512      	bpl.n	8008a3e <__swsetup_r+0x7a>
 8008a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a1a:	b141      	cbz	r1, 8008a2e <__swsetup_r+0x6a>
 8008a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a20:	4299      	cmp	r1, r3
 8008a22:	d002      	beq.n	8008a2a <__swsetup_r+0x66>
 8008a24:	4630      	mov	r0, r6
 8008a26:	f000 fad1 	bl	8008fcc <_free_r>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	2300      	movs	r3, #0
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f043 0308 	orr.w	r3, r3, #8
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	b94b      	cbnz	r3, 8008a5e <__swsetup_r+0x9a>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a54:	d003      	beq.n	8008a5e <__swsetup_r+0x9a>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f000 fa6f 	bl	8008f3c <__smakebuf_r>
 8008a5e:	89a0      	ldrh	r0, [r4, #12]
 8008a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a64:	f010 0301 	ands.w	r3, r0, #1
 8008a68:	d00a      	beq.n	8008a80 <__swsetup_r+0xbc>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60a3      	str	r3, [r4, #8]
 8008a6e:	6963      	ldr	r3, [r4, #20]
 8008a70:	425b      	negs	r3, r3
 8008a72:	61a3      	str	r3, [r4, #24]
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	b943      	cbnz	r3, 8008a8a <__swsetup_r+0xc6>
 8008a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a7c:	d1ba      	bne.n	80089f4 <__swsetup_r+0x30>
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	0781      	lsls	r1, r0, #30
 8008a82:	bf58      	it	pl
 8008a84:	6963      	ldrpl	r3, [r4, #20]
 8008a86:	60a3      	str	r3, [r4, #8]
 8008a88:	e7f4      	b.n	8008a74 <__swsetup_r+0xb0>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e7f7      	b.n	8008a7e <__swsetup_r+0xba>
 8008a8e:	bf00      	nop
 8008a90:	200000ac 	.word	0x200000ac
 8008a94:	08009ee0 	.word	0x08009ee0
 8008a98:	08009f00 	.word	0x08009f00
 8008a9c:	08009ec0 	.word	0x08009ec0

08008aa0 <__sflush_r>:
 8008aa0:	898a      	ldrh	r2, [r1, #12]
 8008aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	0710      	lsls	r0, r2, #28
 8008aaa:	460c      	mov	r4, r1
 8008aac:	d458      	bmi.n	8008b60 <__sflush_r+0xc0>
 8008aae:	684b      	ldr	r3, [r1, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dc05      	bgt.n	8008ac0 <__sflush_r+0x20>
 8008ab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	dc02      	bgt.n	8008ac0 <__sflush_r+0x20>
 8008aba:	2000      	movs	r0, #0
 8008abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ac2:	2e00      	cmp	r6, #0
 8008ac4:	d0f9      	beq.n	8008aba <__sflush_r+0x1a>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008acc:	682f      	ldr	r7, [r5, #0]
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	d032      	beq.n	8008b38 <__sflush_r+0x98>
 8008ad2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	075a      	lsls	r2, r3, #29
 8008ad8:	d505      	bpl.n	8008ae6 <__sflush_r+0x46>
 8008ada:	6863      	ldr	r3, [r4, #4]
 8008adc:	1ac0      	subs	r0, r0, r3
 8008ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ae0:	b10b      	cbz	r3, 8008ae6 <__sflush_r+0x46>
 8008ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ae4:	1ac0      	subs	r0, r0, r3
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aec:	6a21      	ldr	r1, [r4, #32]
 8008aee:	4628      	mov	r0, r5
 8008af0:	47b0      	blx	r6
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	d106      	bne.n	8008b06 <__sflush_r+0x66>
 8008af8:	6829      	ldr	r1, [r5, #0]
 8008afa:	291d      	cmp	r1, #29
 8008afc:	d82c      	bhi.n	8008b58 <__sflush_r+0xb8>
 8008afe:	4a2a      	ldr	r2, [pc, #168]	; (8008ba8 <__sflush_r+0x108>)
 8008b00:	40ca      	lsrs	r2, r1
 8008b02:	07d6      	lsls	r6, r2, #31
 8008b04:	d528      	bpl.n	8008b58 <__sflush_r+0xb8>
 8008b06:	2200      	movs	r2, #0
 8008b08:	6062      	str	r2, [r4, #4]
 8008b0a:	04d9      	lsls	r1, r3, #19
 8008b0c:	6922      	ldr	r2, [r4, #16]
 8008b0e:	6022      	str	r2, [r4, #0]
 8008b10:	d504      	bpl.n	8008b1c <__sflush_r+0x7c>
 8008b12:	1c42      	adds	r2, r0, #1
 8008b14:	d101      	bne.n	8008b1a <__sflush_r+0x7a>
 8008b16:	682b      	ldr	r3, [r5, #0]
 8008b18:	b903      	cbnz	r3, 8008b1c <__sflush_r+0x7c>
 8008b1a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b1e:	602f      	str	r7, [r5, #0]
 8008b20:	2900      	cmp	r1, #0
 8008b22:	d0ca      	beq.n	8008aba <__sflush_r+0x1a>
 8008b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d002      	beq.n	8008b32 <__sflush_r+0x92>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 fa4d 	bl	8008fcc <_free_r>
 8008b32:	2000      	movs	r0, #0
 8008b34:	6360      	str	r0, [r4, #52]	; 0x34
 8008b36:	e7c1      	b.n	8008abc <__sflush_r+0x1c>
 8008b38:	6a21      	ldr	r1, [r4, #32]
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b0      	blx	r6
 8008b40:	1c41      	adds	r1, r0, #1
 8008b42:	d1c7      	bne.n	8008ad4 <__sflush_r+0x34>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0c4      	beq.n	8008ad4 <__sflush_r+0x34>
 8008b4a:	2b1d      	cmp	r3, #29
 8008b4c:	d001      	beq.n	8008b52 <__sflush_r+0xb2>
 8008b4e:	2b16      	cmp	r3, #22
 8008b50:	d101      	bne.n	8008b56 <__sflush_r+0xb6>
 8008b52:	602f      	str	r7, [r5, #0]
 8008b54:	e7b1      	b.n	8008aba <__sflush_r+0x1a>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	e7ad      	b.n	8008abc <__sflush_r+0x1c>
 8008b60:	690f      	ldr	r7, [r1, #16]
 8008b62:	2f00      	cmp	r7, #0
 8008b64:	d0a9      	beq.n	8008aba <__sflush_r+0x1a>
 8008b66:	0793      	lsls	r3, r2, #30
 8008b68:	680e      	ldr	r6, [r1, #0]
 8008b6a:	bf08      	it	eq
 8008b6c:	694b      	ldreq	r3, [r1, #20]
 8008b6e:	600f      	str	r7, [r1, #0]
 8008b70:	bf18      	it	ne
 8008b72:	2300      	movne	r3, #0
 8008b74:	eba6 0807 	sub.w	r8, r6, r7
 8008b78:	608b      	str	r3, [r1, #8]
 8008b7a:	f1b8 0f00 	cmp.w	r8, #0
 8008b7e:	dd9c      	ble.n	8008aba <__sflush_r+0x1a>
 8008b80:	6a21      	ldr	r1, [r4, #32]
 8008b82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b84:	4643      	mov	r3, r8
 8008b86:	463a      	mov	r2, r7
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b0      	blx	r6
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	dc06      	bgt.n	8008b9e <__sflush_r+0xfe>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	e78e      	b.n	8008abc <__sflush_r+0x1c>
 8008b9e:	4407      	add	r7, r0
 8008ba0:	eba8 0800 	sub.w	r8, r8, r0
 8008ba4:	e7e9      	b.n	8008b7a <__sflush_r+0xda>
 8008ba6:	bf00      	nop
 8008ba8:	20400001 	.word	0x20400001

08008bac <_fflush_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	690b      	ldr	r3, [r1, #16]
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	b913      	cbnz	r3, 8008bbc <_fflush_r+0x10>
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	4628      	mov	r0, r5
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	b118      	cbz	r0, 8008bc6 <_fflush_r+0x1a>
 8008bbe:	6983      	ldr	r3, [r0, #24]
 8008bc0:	b90b      	cbnz	r3, 8008bc6 <_fflush_r+0x1a>
 8008bc2:	f000 f899 	bl	8008cf8 <__sinit>
 8008bc6:	4b14      	ldr	r3, [pc, #80]	; (8008c18 <_fflush_r+0x6c>)
 8008bc8:	429c      	cmp	r4, r3
 8008bca:	d11b      	bne.n	8008c04 <_fflush_r+0x58>
 8008bcc:	686c      	ldr	r4, [r5, #4]
 8008bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0ef      	beq.n	8008bb6 <_fflush_r+0xa>
 8008bd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bd8:	07d0      	lsls	r0, r2, #31
 8008bda:	d404      	bmi.n	8008be6 <_fflush_r+0x3a>
 8008bdc:	0599      	lsls	r1, r3, #22
 8008bde:	d402      	bmi.n	8008be6 <_fflush_r+0x3a>
 8008be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be2:	f000 f984 	bl	8008eee <__retarget_lock_acquire_recursive>
 8008be6:	4628      	mov	r0, r5
 8008be8:	4621      	mov	r1, r4
 8008bea:	f7ff ff59 	bl	8008aa0 <__sflush_r>
 8008bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bf0:	07da      	lsls	r2, r3, #31
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	d4e0      	bmi.n	8008bb8 <_fflush_r+0xc>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	059b      	lsls	r3, r3, #22
 8008bfa:	d4dd      	bmi.n	8008bb8 <_fflush_r+0xc>
 8008bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bfe:	f000 f977 	bl	8008ef0 <__retarget_lock_release_recursive>
 8008c02:	e7d9      	b.n	8008bb8 <_fflush_r+0xc>
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <_fflush_r+0x70>)
 8008c06:	429c      	cmp	r4, r3
 8008c08:	d101      	bne.n	8008c0e <_fflush_r+0x62>
 8008c0a:	68ac      	ldr	r4, [r5, #8]
 8008c0c:	e7df      	b.n	8008bce <_fflush_r+0x22>
 8008c0e:	4b04      	ldr	r3, [pc, #16]	; (8008c20 <_fflush_r+0x74>)
 8008c10:	429c      	cmp	r4, r3
 8008c12:	bf08      	it	eq
 8008c14:	68ec      	ldreq	r4, [r5, #12]
 8008c16:	e7da      	b.n	8008bce <_fflush_r+0x22>
 8008c18:	08009ee0 	.word	0x08009ee0
 8008c1c:	08009f00 	.word	0x08009f00
 8008c20:	08009ec0 	.word	0x08009ec0

08008c24 <fflush>:
 8008c24:	4601      	mov	r1, r0
 8008c26:	b920      	cbnz	r0, 8008c32 <fflush+0xe>
 8008c28:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <fflush+0x18>)
 8008c2a:	4905      	ldr	r1, [pc, #20]	; (8008c40 <fflush+0x1c>)
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	f000 b8fe 	b.w	8008e2e <_fwalk_reent>
 8008c32:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <fflush+0x20>)
 8008c34:	6818      	ldr	r0, [r3, #0]
 8008c36:	f7ff bfb9 	b.w	8008bac <_fflush_r>
 8008c3a:	bf00      	nop
 8008c3c:	08009db8 	.word	0x08009db8
 8008c40:	08008bad 	.word	0x08008bad
 8008c44:	200000ac 	.word	0x200000ac

08008c48 <std>:
 8008c48:	2300      	movs	r3, #0
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c56:	6083      	str	r3, [r0, #8]
 8008c58:	8181      	strh	r1, [r0, #12]
 8008c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8008c5c:	81c2      	strh	r2, [r0, #14]
 8008c5e:	6183      	str	r3, [r0, #24]
 8008c60:	4619      	mov	r1, r3
 8008c62:	2208      	movs	r2, #8
 8008c64:	305c      	adds	r0, #92	; 0x5c
 8008c66:	f7ff fc5b 	bl	8008520 <memset>
 8008c6a:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <std+0x38>)
 8008c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c6e:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <std+0x3c>)
 8008c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c72:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <std+0x40>)
 8008c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <std+0x44>)
 8008c78:	6224      	str	r4, [r4, #32]
 8008c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c7c:	bd10      	pop	{r4, pc}
 8008c7e:	bf00      	nop
 8008c80:	08009805 	.word	0x08009805
 8008c84:	08009827 	.word	0x08009827
 8008c88:	0800985f 	.word	0x0800985f
 8008c8c:	08009883 	.word	0x08009883

08008c90 <_cleanup_r>:
 8008c90:	4901      	ldr	r1, [pc, #4]	; (8008c98 <_cleanup_r+0x8>)
 8008c92:	f000 b8cc 	b.w	8008e2e <_fwalk_reent>
 8008c96:	bf00      	nop
 8008c98:	08008bad 	.word	0x08008bad

08008c9c <__sfmoreglue>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	1e4a      	subs	r2, r1, #1
 8008ca0:	2568      	movs	r5, #104	; 0x68
 8008ca2:	4355      	muls	r5, r2
 8008ca4:	460e      	mov	r6, r1
 8008ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008caa:	f000 f9df 	bl	800906c <_malloc_r>
 8008cae:	4604      	mov	r4, r0
 8008cb0:	b140      	cbz	r0, 8008cc4 <__sfmoreglue+0x28>
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8008cb8:	300c      	adds	r0, #12
 8008cba:	60a0      	str	r0, [r4, #8]
 8008cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cc0:	f7ff fc2e 	bl	8008520 <memset>
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}

08008cc8 <__sfp_lock_acquire>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	; (8008cd0 <__sfp_lock_acquire+0x8>)
 8008cca:	f000 b910 	b.w	8008eee <__retarget_lock_acquire_recursive>
 8008cce:	bf00      	nop
 8008cd0:	20000334 	.word	0x20000334

08008cd4 <__sfp_lock_release>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__sfp_lock_release+0x8>)
 8008cd6:	f000 b90b 	b.w	8008ef0 <__retarget_lock_release_recursive>
 8008cda:	bf00      	nop
 8008cdc:	20000334 	.word	0x20000334

08008ce0 <__sinit_lock_acquire>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sinit_lock_acquire+0x8>)
 8008ce2:	f000 b904 	b.w	8008eee <__retarget_lock_acquire_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	2000032f 	.word	0x2000032f

08008cec <__sinit_lock_release>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__sinit_lock_release+0x8>)
 8008cee:	f000 b8ff 	b.w	8008ef0 <__retarget_lock_release_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	2000032f 	.word	0x2000032f

08008cf8 <__sinit>:
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	f7ff fff0 	bl	8008ce0 <__sinit_lock_acquire>
 8008d00:	69a3      	ldr	r3, [r4, #24]
 8008d02:	b11b      	cbz	r3, 8008d0c <__sinit+0x14>
 8008d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d08:	f7ff bff0 	b.w	8008cec <__sinit_lock_release>
 8008d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d10:	6523      	str	r3, [r4, #80]	; 0x50
 8008d12:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <__sinit+0x68>)
 8008d14:	4a13      	ldr	r2, [pc, #76]	; (8008d64 <__sinit+0x6c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d1a:	42a3      	cmp	r3, r4
 8008d1c:	bf04      	itt	eq
 8008d1e:	2301      	moveq	r3, #1
 8008d20:	61a3      	streq	r3, [r4, #24]
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 f820 	bl	8008d68 <__sfp>
 8008d28:	6060      	str	r0, [r4, #4]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 f81c 	bl	8008d68 <__sfp>
 8008d30:	60a0      	str	r0, [r4, #8]
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 f818 	bl	8008d68 <__sfp>
 8008d38:	2200      	movs	r2, #0
 8008d3a:	60e0      	str	r0, [r4, #12]
 8008d3c:	2104      	movs	r1, #4
 8008d3e:	6860      	ldr	r0, [r4, #4]
 8008d40:	f7ff ff82 	bl	8008c48 <std>
 8008d44:	68a0      	ldr	r0, [r4, #8]
 8008d46:	2201      	movs	r2, #1
 8008d48:	2109      	movs	r1, #9
 8008d4a:	f7ff ff7d 	bl	8008c48 <std>
 8008d4e:	68e0      	ldr	r0, [r4, #12]
 8008d50:	2202      	movs	r2, #2
 8008d52:	2112      	movs	r1, #18
 8008d54:	f7ff ff78 	bl	8008c48 <std>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	61a3      	str	r3, [r4, #24]
 8008d5c:	e7d2      	b.n	8008d04 <__sinit+0xc>
 8008d5e:	bf00      	nop
 8008d60:	08009db8 	.word	0x08009db8
 8008d64:	08008c91 	.word	0x08008c91

08008d68 <__sfp>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	4607      	mov	r7, r0
 8008d6c:	f7ff ffac 	bl	8008cc8 <__sfp_lock_acquire>
 8008d70:	4b1e      	ldr	r3, [pc, #120]	; (8008dec <__sfp+0x84>)
 8008d72:	681e      	ldr	r6, [r3, #0]
 8008d74:	69b3      	ldr	r3, [r6, #24]
 8008d76:	b913      	cbnz	r3, 8008d7e <__sfp+0x16>
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7ff ffbd 	bl	8008cf8 <__sinit>
 8008d7e:	3648      	adds	r6, #72	; 0x48
 8008d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	d503      	bpl.n	8008d90 <__sfp+0x28>
 8008d88:	6833      	ldr	r3, [r6, #0]
 8008d8a:	b30b      	cbz	r3, 8008dd0 <__sfp+0x68>
 8008d8c:	6836      	ldr	r6, [r6, #0]
 8008d8e:	e7f7      	b.n	8008d80 <__sfp+0x18>
 8008d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d94:	b9d5      	cbnz	r5, 8008dcc <__sfp+0x64>
 8008d96:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <__sfp+0x88>)
 8008d98:	60e3      	str	r3, [r4, #12]
 8008d9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8008da0:	f000 f8a4 	bl	8008eec <__retarget_lock_init_recursive>
 8008da4:	f7ff ff96 	bl	8008cd4 <__sfp_lock_release>
 8008da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008db0:	6025      	str	r5, [r4, #0]
 8008db2:	61a5      	str	r5, [r4, #24]
 8008db4:	2208      	movs	r2, #8
 8008db6:	4629      	mov	r1, r5
 8008db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dbc:	f7ff fbb0 	bl	8008520 <memset>
 8008dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dc8:	4620      	mov	r0, r4
 8008dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dcc:	3468      	adds	r4, #104	; 0x68
 8008dce:	e7d9      	b.n	8008d84 <__sfp+0x1c>
 8008dd0:	2104      	movs	r1, #4
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	f7ff ff62 	bl	8008c9c <__sfmoreglue>
 8008dd8:	4604      	mov	r4, r0
 8008dda:	6030      	str	r0, [r6, #0]
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d1d5      	bne.n	8008d8c <__sfp+0x24>
 8008de0:	f7ff ff78 	bl	8008cd4 <__sfp_lock_release>
 8008de4:	230c      	movs	r3, #12
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	e7ee      	b.n	8008dc8 <__sfp+0x60>
 8008dea:	bf00      	nop
 8008dec:	08009db8 	.word	0x08009db8
 8008df0:	ffff0001 	.word	0xffff0001

08008df4 <_fwalk>:
 8008df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	460f      	mov	r7, r1
 8008dfa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dfe:	2600      	movs	r6, #0
 8008e00:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8008e04:	f1b8 0801 	subs.w	r8, r8, #1
 8008e08:	d505      	bpl.n	8008e16 <_fwalk+0x22>
 8008e0a:	6824      	ldr	r4, [r4, #0]
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	d1f7      	bne.n	8008e00 <_fwalk+0xc>
 8008e10:	4630      	mov	r0, r6
 8008e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d906      	bls.n	8008e2a <_fwalk+0x36>
 8008e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e20:	3301      	adds	r3, #1
 8008e22:	d002      	beq.n	8008e2a <_fwalk+0x36>
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b8      	blx	r7
 8008e28:	4306      	orrs	r6, r0
 8008e2a:	3568      	adds	r5, #104	; 0x68
 8008e2c:	e7ea      	b.n	8008e04 <_fwalk+0x10>

08008e2e <_fwalk_reent>:
 8008e2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e32:	4606      	mov	r6, r0
 8008e34:	4688      	mov	r8, r1
 8008e36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e3a:	2700      	movs	r7, #0
 8008e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e40:	f1b9 0901 	subs.w	r9, r9, #1
 8008e44:	d505      	bpl.n	8008e52 <_fwalk_reent+0x24>
 8008e46:	6824      	ldr	r4, [r4, #0]
 8008e48:	2c00      	cmp	r4, #0
 8008e4a:	d1f7      	bne.n	8008e3c <_fwalk_reent+0xe>
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d907      	bls.n	8008e68 <_fwalk_reent+0x3a>
 8008e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	d003      	beq.n	8008e68 <_fwalk_reent+0x3a>
 8008e60:	4629      	mov	r1, r5
 8008e62:	4630      	mov	r0, r6
 8008e64:	47c0      	blx	r8
 8008e66:	4307      	orrs	r7, r0
 8008e68:	3568      	adds	r5, #104	; 0x68
 8008e6a:	e7e9      	b.n	8008e40 <_fwalk_reent+0x12>

08008e6c <_getc_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	460c      	mov	r4, r1
 8008e70:	4605      	mov	r5, r0
 8008e72:	b118      	cbz	r0, 8008e7c <_getc_r+0x10>
 8008e74:	6983      	ldr	r3, [r0, #24]
 8008e76:	b90b      	cbnz	r3, 8008e7c <_getc_r+0x10>
 8008e78:	f7ff ff3e 	bl	8008cf8 <__sinit>
 8008e7c:	4b18      	ldr	r3, [pc, #96]	; (8008ee0 <_getc_r+0x74>)
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d11e      	bne.n	8008ec0 <_getc_r+0x54>
 8008e82:	686c      	ldr	r4, [r5, #4]
 8008e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e86:	07d8      	lsls	r0, r3, #31
 8008e88:	d405      	bmi.n	8008e96 <_getc_r+0x2a>
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	0599      	lsls	r1, r3, #22
 8008e8e:	d402      	bmi.n	8008e96 <_getc_r+0x2a>
 8008e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e92:	f000 f82c 	bl	8008eee <__retarget_lock_acquire_recursive>
 8008e96:	6863      	ldr	r3, [r4, #4]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	da19      	bge.n	8008ed4 <_getc_r+0x68>
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	f000 fc72 	bl	800978c <__srget_r>
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eac:	07da      	lsls	r2, r3, #31
 8008eae:	d405      	bmi.n	8008ebc <_getc_r+0x50>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	059b      	lsls	r3, r3, #22
 8008eb4:	d402      	bmi.n	8008ebc <_getc_r+0x50>
 8008eb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb8:	f000 f81a 	bl	8008ef0 <__retarget_lock_release_recursive>
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <_getc_r+0x78>)
 8008ec2:	429c      	cmp	r4, r3
 8008ec4:	d101      	bne.n	8008eca <_getc_r+0x5e>
 8008ec6:	68ac      	ldr	r4, [r5, #8]
 8008ec8:	e7dc      	b.n	8008e84 <_getc_r+0x18>
 8008eca:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <_getc_r+0x7c>)
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	bf08      	it	eq
 8008ed0:	68ec      	ldreq	r4, [r5, #12]
 8008ed2:	e7d7      	b.n	8008e84 <_getc_r+0x18>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	781d      	ldrb	r5, [r3, #0]
 8008edc:	e7e5      	b.n	8008eaa <_getc_r+0x3e>
 8008ede:	bf00      	nop
 8008ee0:	08009ee0 	.word	0x08009ee0
 8008ee4:	08009f00 	.word	0x08009f00
 8008ee8:	08009ec0 	.word	0x08009ec0

08008eec <__retarget_lock_init_recursive>:
 8008eec:	4770      	bx	lr

08008eee <__retarget_lock_acquire_recursive>:
 8008eee:	4770      	bx	lr

08008ef0 <__retarget_lock_release_recursive>:
 8008ef0:	4770      	bx	lr

08008ef2 <__swhatbuf_r>:
 8008ef2:	b570      	push	{r4, r5, r6, lr}
 8008ef4:	460e      	mov	r6, r1
 8008ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008efa:	2900      	cmp	r1, #0
 8008efc:	b096      	sub	sp, #88	; 0x58
 8008efe:	4614      	mov	r4, r2
 8008f00:	461d      	mov	r5, r3
 8008f02:	da07      	bge.n	8008f14 <__swhatbuf_r+0x22>
 8008f04:	2300      	movs	r3, #0
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	89b3      	ldrh	r3, [r6, #12]
 8008f0a:	061a      	lsls	r2, r3, #24
 8008f0c:	d410      	bmi.n	8008f30 <__swhatbuf_r+0x3e>
 8008f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f12:	e00e      	b.n	8008f32 <__swhatbuf_r+0x40>
 8008f14:	466a      	mov	r2, sp
 8008f16:	f000 fcdb 	bl	80098d0 <_fstat_r>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	dbf2      	blt.n	8008f04 <__swhatbuf_r+0x12>
 8008f1e:	9a01      	ldr	r2, [sp, #4]
 8008f20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f28:	425a      	negs	r2, r3
 8008f2a:	415a      	adcs	r2, r3
 8008f2c:	602a      	str	r2, [r5, #0]
 8008f2e:	e7ee      	b.n	8008f0e <__swhatbuf_r+0x1c>
 8008f30:	2340      	movs	r3, #64	; 0x40
 8008f32:	2000      	movs	r0, #0
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	b016      	add	sp, #88	; 0x58
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f3c <__smakebuf_r>:
 8008f3c:	898b      	ldrh	r3, [r1, #12]
 8008f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f40:	079d      	lsls	r5, r3, #30
 8008f42:	4606      	mov	r6, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	d507      	bpl.n	8008f58 <__smakebuf_r+0x1c>
 8008f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	2301      	movs	r3, #1
 8008f52:	6163      	str	r3, [r4, #20]
 8008f54:	b002      	add	sp, #8
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	ab01      	add	r3, sp, #4
 8008f5a:	466a      	mov	r2, sp
 8008f5c:	f7ff ffc9 	bl	8008ef2 <__swhatbuf_r>
 8008f60:	9900      	ldr	r1, [sp, #0]
 8008f62:	4605      	mov	r5, r0
 8008f64:	4630      	mov	r0, r6
 8008f66:	f000 f881 	bl	800906c <_malloc_r>
 8008f6a:	b948      	cbnz	r0, 8008f80 <__smakebuf_r+0x44>
 8008f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f70:	059a      	lsls	r2, r3, #22
 8008f72:	d4ef      	bmi.n	8008f54 <__smakebuf_r+0x18>
 8008f74:	f023 0303 	bic.w	r3, r3, #3
 8008f78:	f043 0302 	orr.w	r3, r3, #2
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	e7e3      	b.n	8008f48 <__smakebuf_r+0xc>
 8008f80:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <__smakebuf_r+0x7c>)
 8008f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	6020      	str	r0, [r4, #0]
 8008f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8c:	81a3      	strh	r3, [r4, #12]
 8008f8e:	9b00      	ldr	r3, [sp, #0]
 8008f90:	6163      	str	r3, [r4, #20]
 8008f92:	9b01      	ldr	r3, [sp, #4]
 8008f94:	6120      	str	r0, [r4, #16]
 8008f96:	b15b      	cbz	r3, 8008fb0 <__smakebuf_r+0x74>
 8008f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f000 fca9 	bl	80098f4 <_isatty_r>
 8008fa2:	b128      	cbz	r0, 8008fb0 <__smakebuf_r+0x74>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	81a3      	strh	r3, [r4, #12]
 8008fb0:	89a0      	ldrh	r0, [r4, #12]
 8008fb2:	4305      	orrs	r5, r0
 8008fb4:	81a5      	strh	r5, [r4, #12]
 8008fb6:	e7cd      	b.n	8008f54 <__smakebuf_r+0x18>
 8008fb8:	08008c91 	.word	0x08008c91

08008fbc <malloc>:
 8008fbc:	4b02      	ldr	r3, [pc, #8]	; (8008fc8 <malloc+0xc>)
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	f000 b853 	b.w	800906c <_malloc_r>
 8008fc6:	bf00      	nop
 8008fc8:	200000ac 	.word	0x200000ac

08008fcc <_free_r>:
 8008fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	d048      	beq.n	8009064 <_free_r+0x98>
 8008fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fd6:	9001      	str	r0, [sp, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f1a1 0404 	sub.w	r4, r1, #4
 8008fde:	bfb8      	it	lt
 8008fe0:	18e4      	addlt	r4, r4, r3
 8008fe2:	f000 fca9 	bl	8009938 <__malloc_lock>
 8008fe6:	4a20      	ldr	r2, [pc, #128]	; (8009068 <_free_r+0x9c>)
 8008fe8:	9801      	ldr	r0, [sp, #4]
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	4615      	mov	r5, r2
 8008fee:	b933      	cbnz	r3, 8008ffe <_free_r+0x32>
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	6014      	str	r4, [r2, #0]
 8008ff4:	b003      	add	sp, #12
 8008ff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ffa:	f000 bca3 	b.w	8009944 <__malloc_unlock>
 8008ffe:	42a3      	cmp	r3, r4
 8009000:	d90b      	bls.n	800901a <_free_r+0x4e>
 8009002:	6821      	ldr	r1, [r4, #0]
 8009004:	1862      	adds	r2, r4, r1
 8009006:	4293      	cmp	r3, r2
 8009008:	bf04      	itt	eq
 800900a:	681a      	ldreq	r2, [r3, #0]
 800900c:	685b      	ldreq	r3, [r3, #4]
 800900e:	6063      	str	r3, [r4, #4]
 8009010:	bf04      	itt	eq
 8009012:	1852      	addeq	r2, r2, r1
 8009014:	6022      	streq	r2, [r4, #0]
 8009016:	602c      	str	r4, [r5, #0]
 8009018:	e7ec      	b.n	8008ff4 <_free_r+0x28>
 800901a:	461a      	mov	r2, r3
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	b10b      	cbz	r3, 8009024 <_free_r+0x58>
 8009020:	42a3      	cmp	r3, r4
 8009022:	d9fa      	bls.n	800901a <_free_r+0x4e>
 8009024:	6811      	ldr	r1, [r2, #0]
 8009026:	1855      	adds	r5, r2, r1
 8009028:	42a5      	cmp	r5, r4
 800902a:	d10b      	bne.n	8009044 <_free_r+0x78>
 800902c:	6824      	ldr	r4, [r4, #0]
 800902e:	4421      	add	r1, r4
 8009030:	1854      	adds	r4, r2, r1
 8009032:	42a3      	cmp	r3, r4
 8009034:	6011      	str	r1, [r2, #0]
 8009036:	d1dd      	bne.n	8008ff4 <_free_r+0x28>
 8009038:	681c      	ldr	r4, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	6053      	str	r3, [r2, #4]
 800903e:	4421      	add	r1, r4
 8009040:	6011      	str	r1, [r2, #0]
 8009042:	e7d7      	b.n	8008ff4 <_free_r+0x28>
 8009044:	d902      	bls.n	800904c <_free_r+0x80>
 8009046:	230c      	movs	r3, #12
 8009048:	6003      	str	r3, [r0, #0]
 800904a:	e7d3      	b.n	8008ff4 <_free_r+0x28>
 800904c:	6825      	ldr	r5, [r4, #0]
 800904e:	1961      	adds	r1, r4, r5
 8009050:	428b      	cmp	r3, r1
 8009052:	bf04      	itt	eq
 8009054:	6819      	ldreq	r1, [r3, #0]
 8009056:	685b      	ldreq	r3, [r3, #4]
 8009058:	6063      	str	r3, [r4, #4]
 800905a:	bf04      	itt	eq
 800905c:	1949      	addeq	r1, r1, r5
 800905e:	6021      	streq	r1, [r4, #0]
 8009060:	6054      	str	r4, [r2, #4]
 8009062:	e7c7      	b.n	8008ff4 <_free_r+0x28>
 8009064:	b003      	add	sp, #12
 8009066:	bd30      	pop	{r4, r5, pc}
 8009068:	20000184 	.word	0x20000184

0800906c <_malloc_r>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	1ccd      	adds	r5, r1, #3
 8009070:	f025 0503 	bic.w	r5, r5, #3
 8009074:	3508      	adds	r5, #8
 8009076:	2d0c      	cmp	r5, #12
 8009078:	bf38      	it	cc
 800907a:	250c      	movcc	r5, #12
 800907c:	2d00      	cmp	r5, #0
 800907e:	4606      	mov	r6, r0
 8009080:	db01      	blt.n	8009086 <_malloc_r+0x1a>
 8009082:	42a9      	cmp	r1, r5
 8009084:	d903      	bls.n	800908e <_malloc_r+0x22>
 8009086:	230c      	movs	r3, #12
 8009088:	6033      	str	r3, [r6, #0]
 800908a:	2000      	movs	r0, #0
 800908c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800908e:	f000 fc53 	bl	8009938 <__malloc_lock>
 8009092:	4921      	ldr	r1, [pc, #132]	; (8009118 <_malloc_r+0xac>)
 8009094:	680a      	ldr	r2, [r1, #0]
 8009096:	4614      	mov	r4, r2
 8009098:	b99c      	cbnz	r4, 80090c2 <_malloc_r+0x56>
 800909a:	4f20      	ldr	r7, [pc, #128]	; (800911c <_malloc_r+0xb0>)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	b923      	cbnz	r3, 80090aa <_malloc_r+0x3e>
 80090a0:	4621      	mov	r1, r4
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 fb9e 	bl	80097e4 <_sbrk_r>
 80090a8:	6038      	str	r0, [r7, #0]
 80090aa:	4629      	mov	r1, r5
 80090ac:	4630      	mov	r0, r6
 80090ae:	f000 fb99 	bl	80097e4 <_sbrk_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d123      	bne.n	80090fe <_malloc_r+0x92>
 80090b6:	230c      	movs	r3, #12
 80090b8:	6033      	str	r3, [r6, #0]
 80090ba:	4630      	mov	r0, r6
 80090bc:	f000 fc42 	bl	8009944 <__malloc_unlock>
 80090c0:	e7e3      	b.n	800908a <_malloc_r+0x1e>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	1b5b      	subs	r3, r3, r5
 80090c6:	d417      	bmi.n	80090f8 <_malloc_r+0x8c>
 80090c8:	2b0b      	cmp	r3, #11
 80090ca:	d903      	bls.n	80090d4 <_malloc_r+0x68>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	441c      	add	r4, r3
 80090d0:	6025      	str	r5, [r4, #0]
 80090d2:	e004      	b.n	80090de <_malloc_r+0x72>
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	42a2      	cmp	r2, r4
 80090d8:	bf0c      	ite	eq
 80090da:	600b      	streq	r3, [r1, #0]
 80090dc:	6053      	strne	r3, [r2, #4]
 80090de:	4630      	mov	r0, r6
 80090e0:	f000 fc30 	bl	8009944 <__malloc_unlock>
 80090e4:	f104 000b 	add.w	r0, r4, #11
 80090e8:	1d23      	adds	r3, r4, #4
 80090ea:	f020 0007 	bic.w	r0, r0, #7
 80090ee:	1ac2      	subs	r2, r0, r3
 80090f0:	d0cc      	beq.n	800908c <_malloc_r+0x20>
 80090f2:	1a1b      	subs	r3, r3, r0
 80090f4:	50a3      	str	r3, [r4, r2]
 80090f6:	e7c9      	b.n	800908c <_malloc_r+0x20>
 80090f8:	4622      	mov	r2, r4
 80090fa:	6864      	ldr	r4, [r4, #4]
 80090fc:	e7cc      	b.n	8009098 <_malloc_r+0x2c>
 80090fe:	1cc4      	adds	r4, r0, #3
 8009100:	f024 0403 	bic.w	r4, r4, #3
 8009104:	42a0      	cmp	r0, r4
 8009106:	d0e3      	beq.n	80090d0 <_malloc_r+0x64>
 8009108:	1a21      	subs	r1, r4, r0
 800910a:	4630      	mov	r0, r6
 800910c:	f000 fb6a 	bl	80097e4 <_sbrk_r>
 8009110:	3001      	adds	r0, #1
 8009112:	d1dd      	bne.n	80090d0 <_malloc_r+0x64>
 8009114:	e7cf      	b.n	80090b6 <_malloc_r+0x4a>
 8009116:	bf00      	nop
 8009118:	20000184 	.word	0x20000184
 800911c:	20000188 	.word	0x20000188

08009120 <__sfputc_r>:
 8009120:	6893      	ldr	r3, [r2, #8]
 8009122:	3b01      	subs	r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	b410      	push	{r4}
 8009128:	6093      	str	r3, [r2, #8]
 800912a:	da08      	bge.n	800913e <__sfputc_r+0x1e>
 800912c:	6994      	ldr	r4, [r2, #24]
 800912e:	42a3      	cmp	r3, r4
 8009130:	db01      	blt.n	8009136 <__sfputc_r+0x16>
 8009132:	290a      	cmp	r1, #10
 8009134:	d103      	bne.n	800913e <__sfputc_r+0x1e>
 8009136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800913a:	f7ff bbf1 	b.w	8008920 <__swbuf_r>
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	1c58      	adds	r0, r3, #1
 8009142:	6010      	str	r0, [r2, #0]
 8009144:	7019      	strb	r1, [r3, #0]
 8009146:	4608      	mov	r0, r1
 8009148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800914c:	4770      	bx	lr

0800914e <__sfputs_r>:
 800914e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009150:	4606      	mov	r6, r0
 8009152:	460f      	mov	r7, r1
 8009154:	4614      	mov	r4, r2
 8009156:	18d5      	adds	r5, r2, r3
 8009158:	42ac      	cmp	r4, r5
 800915a:	d101      	bne.n	8009160 <__sfputs_r+0x12>
 800915c:	2000      	movs	r0, #0
 800915e:	e007      	b.n	8009170 <__sfputs_r+0x22>
 8009160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009164:	463a      	mov	r2, r7
 8009166:	4630      	mov	r0, r6
 8009168:	f7ff ffda 	bl	8009120 <__sfputc_r>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d1f3      	bne.n	8009158 <__sfputs_r+0xa>
 8009170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009174 <_vfiprintf_r>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	460d      	mov	r5, r1
 800917a:	b09d      	sub	sp, #116	; 0x74
 800917c:	4614      	mov	r4, r2
 800917e:	4698      	mov	r8, r3
 8009180:	4606      	mov	r6, r0
 8009182:	b118      	cbz	r0, 800918c <_vfiprintf_r+0x18>
 8009184:	6983      	ldr	r3, [r0, #24]
 8009186:	b90b      	cbnz	r3, 800918c <_vfiprintf_r+0x18>
 8009188:	f7ff fdb6 	bl	8008cf8 <__sinit>
 800918c:	4b89      	ldr	r3, [pc, #548]	; (80093b4 <_vfiprintf_r+0x240>)
 800918e:	429d      	cmp	r5, r3
 8009190:	d11b      	bne.n	80091ca <_vfiprintf_r+0x56>
 8009192:	6875      	ldr	r5, [r6, #4]
 8009194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009196:	07d9      	lsls	r1, r3, #31
 8009198:	d405      	bmi.n	80091a6 <_vfiprintf_r+0x32>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	059a      	lsls	r2, r3, #22
 800919e:	d402      	bmi.n	80091a6 <_vfiprintf_r+0x32>
 80091a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a2:	f7ff fea4 	bl	8008eee <__retarget_lock_acquire_recursive>
 80091a6:	89ab      	ldrh	r3, [r5, #12]
 80091a8:	071b      	lsls	r3, r3, #28
 80091aa:	d501      	bpl.n	80091b0 <_vfiprintf_r+0x3c>
 80091ac:	692b      	ldr	r3, [r5, #16]
 80091ae:	b9eb      	cbnz	r3, 80091ec <_vfiprintf_r+0x78>
 80091b0:	4629      	mov	r1, r5
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7ff fc06 	bl	80089c4 <__swsetup_r>
 80091b8:	b1c0      	cbz	r0, 80091ec <_vfiprintf_r+0x78>
 80091ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091bc:	07dc      	lsls	r4, r3, #31
 80091be:	d50e      	bpl.n	80091de <_vfiprintf_r+0x6a>
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	b01d      	add	sp, #116	; 0x74
 80091c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ca:	4b7b      	ldr	r3, [pc, #492]	; (80093b8 <_vfiprintf_r+0x244>)
 80091cc:	429d      	cmp	r5, r3
 80091ce:	d101      	bne.n	80091d4 <_vfiprintf_r+0x60>
 80091d0:	68b5      	ldr	r5, [r6, #8]
 80091d2:	e7df      	b.n	8009194 <_vfiprintf_r+0x20>
 80091d4:	4b79      	ldr	r3, [pc, #484]	; (80093bc <_vfiprintf_r+0x248>)
 80091d6:	429d      	cmp	r5, r3
 80091d8:	bf08      	it	eq
 80091da:	68f5      	ldreq	r5, [r6, #12]
 80091dc:	e7da      	b.n	8009194 <_vfiprintf_r+0x20>
 80091de:	89ab      	ldrh	r3, [r5, #12]
 80091e0:	0598      	lsls	r0, r3, #22
 80091e2:	d4ed      	bmi.n	80091c0 <_vfiprintf_r+0x4c>
 80091e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091e6:	f7ff fe83 	bl	8008ef0 <__retarget_lock_release_recursive>
 80091ea:	e7e9      	b.n	80091c0 <_vfiprintf_r+0x4c>
 80091ec:	2300      	movs	r3, #0
 80091ee:	9309      	str	r3, [sp, #36]	; 0x24
 80091f0:	2320      	movs	r3, #32
 80091f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80091fa:	2330      	movs	r3, #48	; 0x30
 80091fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80093c0 <_vfiprintf_r+0x24c>
 8009200:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009204:	f04f 0901 	mov.w	r9, #1
 8009208:	4623      	mov	r3, r4
 800920a:	469a      	mov	sl, r3
 800920c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009210:	b10a      	cbz	r2, 8009216 <_vfiprintf_r+0xa2>
 8009212:	2a25      	cmp	r2, #37	; 0x25
 8009214:	d1f9      	bne.n	800920a <_vfiprintf_r+0x96>
 8009216:	ebba 0b04 	subs.w	fp, sl, r4
 800921a:	d00b      	beq.n	8009234 <_vfiprintf_r+0xc0>
 800921c:	465b      	mov	r3, fp
 800921e:	4622      	mov	r2, r4
 8009220:	4629      	mov	r1, r5
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff ff93 	bl	800914e <__sfputs_r>
 8009228:	3001      	adds	r0, #1
 800922a:	f000 80aa 	beq.w	8009382 <_vfiprintf_r+0x20e>
 800922e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009230:	445a      	add	r2, fp
 8009232:	9209      	str	r2, [sp, #36]	; 0x24
 8009234:	f89a 3000 	ldrb.w	r3, [sl]
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 80a2 	beq.w	8009382 <_vfiprintf_r+0x20e>
 800923e:	2300      	movs	r3, #0
 8009240:	f04f 32ff 	mov.w	r2, #4294967295
 8009244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009248:	f10a 0a01 	add.w	sl, sl, #1
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	9307      	str	r3, [sp, #28]
 8009250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009254:	931a      	str	r3, [sp, #104]	; 0x68
 8009256:	4654      	mov	r4, sl
 8009258:	2205      	movs	r2, #5
 800925a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800925e:	4858      	ldr	r0, [pc, #352]	; (80093c0 <_vfiprintf_r+0x24c>)
 8009260:	f7f6 ffc6 	bl	80001f0 <memchr>
 8009264:	9a04      	ldr	r2, [sp, #16]
 8009266:	b9d8      	cbnz	r0, 80092a0 <_vfiprintf_r+0x12c>
 8009268:	06d1      	lsls	r1, r2, #27
 800926a:	bf44      	itt	mi
 800926c:	2320      	movmi	r3, #32
 800926e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009272:	0713      	lsls	r3, r2, #28
 8009274:	bf44      	itt	mi
 8009276:	232b      	movmi	r3, #43	; 0x2b
 8009278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800927c:	f89a 3000 	ldrb.w	r3, [sl]
 8009280:	2b2a      	cmp	r3, #42	; 0x2a
 8009282:	d015      	beq.n	80092b0 <_vfiprintf_r+0x13c>
 8009284:	9a07      	ldr	r2, [sp, #28]
 8009286:	4654      	mov	r4, sl
 8009288:	2000      	movs	r0, #0
 800928a:	f04f 0c0a 	mov.w	ip, #10
 800928e:	4621      	mov	r1, r4
 8009290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009294:	3b30      	subs	r3, #48	; 0x30
 8009296:	2b09      	cmp	r3, #9
 8009298:	d94e      	bls.n	8009338 <_vfiprintf_r+0x1c4>
 800929a:	b1b0      	cbz	r0, 80092ca <_vfiprintf_r+0x156>
 800929c:	9207      	str	r2, [sp, #28]
 800929e:	e014      	b.n	80092ca <_vfiprintf_r+0x156>
 80092a0:	eba0 0308 	sub.w	r3, r0, r8
 80092a4:	fa09 f303 	lsl.w	r3, r9, r3
 80092a8:	4313      	orrs	r3, r2
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	46a2      	mov	sl, r4
 80092ae:	e7d2      	b.n	8009256 <_vfiprintf_r+0xe2>
 80092b0:	9b03      	ldr	r3, [sp, #12]
 80092b2:	1d19      	adds	r1, r3, #4
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	9103      	str	r1, [sp, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	bfbb      	ittet	lt
 80092bc:	425b      	neglt	r3, r3
 80092be:	f042 0202 	orrlt.w	r2, r2, #2
 80092c2:	9307      	strge	r3, [sp, #28]
 80092c4:	9307      	strlt	r3, [sp, #28]
 80092c6:	bfb8      	it	lt
 80092c8:	9204      	strlt	r2, [sp, #16]
 80092ca:	7823      	ldrb	r3, [r4, #0]
 80092cc:	2b2e      	cmp	r3, #46	; 0x2e
 80092ce:	d10c      	bne.n	80092ea <_vfiprintf_r+0x176>
 80092d0:	7863      	ldrb	r3, [r4, #1]
 80092d2:	2b2a      	cmp	r3, #42	; 0x2a
 80092d4:	d135      	bne.n	8009342 <_vfiprintf_r+0x1ce>
 80092d6:	9b03      	ldr	r3, [sp, #12]
 80092d8:	1d1a      	adds	r2, r3, #4
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	9203      	str	r2, [sp, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bfb8      	it	lt
 80092e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80092e6:	3402      	adds	r4, #2
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093d0 <_vfiprintf_r+0x25c>
 80092ee:	7821      	ldrb	r1, [r4, #0]
 80092f0:	2203      	movs	r2, #3
 80092f2:	4650      	mov	r0, sl
 80092f4:	f7f6 ff7c 	bl	80001f0 <memchr>
 80092f8:	b140      	cbz	r0, 800930c <_vfiprintf_r+0x198>
 80092fa:	2340      	movs	r3, #64	; 0x40
 80092fc:	eba0 000a 	sub.w	r0, r0, sl
 8009300:	fa03 f000 	lsl.w	r0, r3, r0
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	4303      	orrs	r3, r0
 8009308:	3401      	adds	r4, #1
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009310:	482c      	ldr	r0, [pc, #176]	; (80093c4 <_vfiprintf_r+0x250>)
 8009312:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009316:	2206      	movs	r2, #6
 8009318:	f7f6 ff6a 	bl	80001f0 <memchr>
 800931c:	2800      	cmp	r0, #0
 800931e:	d03f      	beq.n	80093a0 <_vfiprintf_r+0x22c>
 8009320:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <_vfiprintf_r+0x254>)
 8009322:	bb1b      	cbnz	r3, 800936c <_vfiprintf_r+0x1f8>
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	3307      	adds	r3, #7
 8009328:	f023 0307 	bic.w	r3, r3, #7
 800932c:	3308      	adds	r3, #8
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009332:	443b      	add	r3, r7
 8009334:	9309      	str	r3, [sp, #36]	; 0x24
 8009336:	e767      	b.n	8009208 <_vfiprintf_r+0x94>
 8009338:	fb0c 3202 	mla	r2, ip, r2, r3
 800933c:	460c      	mov	r4, r1
 800933e:	2001      	movs	r0, #1
 8009340:	e7a5      	b.n	800928e <_vfiprintf_r+0x11a>
 8009342:	2300      	movs	r3, #0
 8009344:	3401      	adds	r4, #1
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	4619      	mov	r1, r3
 800934a:	f04f 0c0a 	mov.w	ip, #10
 800934e:	4620      	mov	r0, r4
 8009350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009354:	3a30      	subs	r2, #48	; 0x30
 8009356:	2a09      	cmp	r2, #9
 8009358:	d903      	bls.n	8009362 <_vfiprintf_r+0x1ee>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0c5      	beq.n	80092ea <_vfiprintf_r+0x176>
 800935e:	9105      	str	r1, [sp, #20]
 8009360:	e7c3      	b.n	80092ea <_vfiprintf_r+0x176>
 8009362:	fb0c 2101 	mla	r1, ip, r1, r2
 8009366:	4604      	mov	r4, r0
 8009368:	2301      	movs	r3, #1
 800936a:	e7f0      	b.n	800934e <_vfiprintf_r+0x1da>
 800936c:	ab03      	add	r3, sp, #12
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	462a      	mov	r2, r5
 8009372:	4b16      	ldr	r3, [pc, #88]	; (80093cc <_vfiprintf_r+0x258>)
 8009374:	a904      	add	r1, sp, #16
 8009376:	4630      	mov	r0, r6
 8009378:	f3af 8000 	nop.w
 800937c:	4607      	mov	r7, r0
 800937e:	1c78      	adds	r0, r7, #1
 8009380:	d1d6      	bne.n	8009330 <_vfiprintf_r+0x1bc>
 8009382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009384:	07d9      	lsls	r1, r3, #31
 8009386:	d405      	bmi.n	8009394 <_vfiprintf_r+0x220>
 8009388:	89ab      	ldrh	r3, [r5, #12]
 800938a:	059a      	lsls	r2, r3, #22
 800938c:	d402      	bmi.n	8009394 <_vfiprintf_r+0x220>
 800938e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009390:	f7ff fdae 	bl	8008ef0 <__retarget_lock_release_recursive>
 8009394:	89ab      	ldrh	r3, [r5, #12]
 8009396:	065b      	lsls	r3, r3, #25
 8009398:	f53f af12 	bmi.w	80091c0 <_vfiprintf_r+0x4c>
 800939c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800939e:	e711      	b.n	80091c4 <_vfiprintf_r+0x50>
 80093a0:	ab03      	add	r3, sp, #12
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	462a      	mov	r2, r5
 80093a6:	4b09      	ldr	r3, [pc, #36]	; (80093cc <_vfiprintf_r+0x258>)
 80093a8:	a904      	add	r1, sp, #16
 80093aa:	4630      	mov	r0, r6
 80093ac:	f000 f880 	bl	80094b0 <_printf_i>
 80093b0:	e7e4      	b.n	800937c <_vfiprintf_r+0x208>
 80093b2:	bf00      	nop
 80093b4:	08009ee0 	.word	0x08009ee0
 80093b8:	08009f00 	.word	0x08009f00
 80093bc:	08009ec0 	.word	0x08009ec0
 80093c0:	08009f20 	.word	0x08009f20
 80093c4:	08009f2a 	.word	0x08009f2a
 80093c8:	00000000 	.word	0x00000000
 80093cc:	0800914f 	.word	0x0800914f
 80093d0:	08009f26 	.word	0x08009f26

080093d4 <_printf_common>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	4616      	mov	r6, r2
 80093da:	4699      	mov	r9, r3
 80093dc:	688a      	ldr	r2, [r1, #8]
 80093de:	690b      	ldr	r3, [r1, #16]
 80093e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093e4:	4293      	cmp	r3, r2
 80093e6:	bfb8      	it	lt
 80093e8:	4613      	movlt	r3, r2
 80093ea:	6033      	str	r3, [r6, #0]
 80093ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093f0:	4607      	mov	r7, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	b10a      	cbz	r2, 80093fa <_printf_common+0x26>
 80093f6:	3301      	adds	r3, #1
 80093f8:	6033      	str	r3, [r6, #0]
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	0699      	lsls	r1, r3, #26
 80093fe:	bf42      	ittt	mi
 8009400:	6833      	ldrmi	r3, [r6, #0]
 8009402:	3302      	addmi	r3, #2
 8009404:	6033      	strmi	r3, [r6, #0]
 8009406:	6825      	ldr	r5, [r4, #0]
 8009408:	f015 0506 	ands.w	r5, r5, #6
 800940c:	d106      	bne.n	800941c <_printf_common+0x48>
 800940e:	f104 0a19 	add.w	sl, r4, #25
 8009412:	68e3      	ldr	r3, [r4, #12]
 8009414:	6832      	ldr	r2, [r6, #0]
 8009416:	1a9b      	subs	r3, r3, r2
 8009418:	42ab      	cmp	r3, r5
 800941a:	dc26      	bgt.n	800946a <_printf_common+0x96>
 800941c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009420:	1e13      	subs	r3, r2, #0
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	bf18      	it	ne
 8009426:	2301      	movne	r3, #1
 8009428:	0692      	lsls	r2, r2, #26
 800942a:	d42b      	bmi.n	8009484 <_printf_common+0xb0>
 800942c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009430:	4649      	mov	r1, r9
 8009432:	4638      	mov	r0, r7
 8009434:	47c0      	blx	r8
 8009436:	3001      	adds	r0, #1
 8009438:	d01e      	beq.n	8009478 <_printf_common+0xa4>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	68e5      	ldr	r5, [r4, #12]
 800943e:	6832      	ldr	r2, [r6, #0]
 8009440:	f003 0306 	and.w	r3, r3, #6
 8009444:	2b04      	cmp	r3, #4
 8009446:	bf08      	it	eq
 8009448:	1aad      	subeq	r5, r5, r2
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	bf0c      	ite	eq
 8009450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009454:	2500      	movne	r5, #0
 8009456:	4293      	cmp	r3, r2
 8009458:	bfc4      	itt	gt
 800945a:	1a9b      	subgt	r3, r3, r2
 800945c:	18ed      	addgt	r5, r5, r3
 800945e:	2600      	movs	r6, #0
 8009460:	341a      	adds	r4, #26
 8009462:	42b5      	cmp	r5, r6
 8009464:	d11a      	bne.n	800949c <_printf_common+0xc8>
 8009466:	2000      	movs	r0, #0
 8009468:	e008      	b.n	800947c <_printf_common+0xa8>
 800946a:	2301      	movs	r3, #1
 800946c:	4652      	mov	r2, sl
 800946e:	4649      	mov	r1, r9
 8009470:	4638      	mov	r0, r7
 8009472:	47c0      	blx	r8
 8009474:	3001      	adds	r0, #1
 8009476:	d103      	bne.n	8009480 <_printf_common+0xac>
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009480:	3501      	adds	r5, #1
 8009482:	e7c6      	b.n	8009412 <_printf_common+0x3e>
 8009484:	18e1      	adds	r1, r4, r3
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	2030      	movs	r0, #48	; 0x30
 800948a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800948e:	4422      	add	r2, r4
 8009490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009498:	3302      	adds	r3, #2
 800949a:	e7c7      	b.n	800942c <_printf_common+0x58>
 800949c:	2301      	movs	r3, #1
 800949e:	4622      	mov	r2, r4
 80094a0:	4649      	mov	r1, r9
 80094a2:	4638      	mov	r0, r7
 80094a4:	47c0      	blx	r8
 80094a6:	3001      	adds	r0, #1
 80094a8:	d0e6      	beq.n	8009478 <_printf_common+0xa4>
 80094aa:	3601      	adds	r6, #1
 80094ac:	e7d9      	b.n	8009462 <_printf_common+0x8e>
	...

080094b0 <_printf_i>:
 80094b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	460c      	mov	r4, r1
 80094b6:	4691      	mov	r9, r2
 80094b8:	7e27      	ldrb	r7, [r4, #24]
 80094ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094bc:	2f78      	cmp	r7, #120	; 0x78
 80094be:	4680      	mov	r8, r0
 80094c0:	469a      	mov	sl, r3
 80094c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094c6:	d807      	bhi.n	80094d8 <_printf_i+0x28>
 80094c8:	2f62      	cmp	r7, #98	; 0x62
 80094ca:	d80a      	bhi.n	80094e2 <_printf_i+0x32>
 80094cc:	2f00      	cmp	r7, #0
 80094ce:	f000 80d8 	beq.w	8009682 <_printf_i+0x1d2>
 80094d2:	2f58      	cmp	r7, #88	; 0x58
 80094d4:	f000 80a3 	beq.w	800961e <_printf_i+0x16e>
 80094d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094e0:	e03a      	b.n	8009558 <_printf_i+0xa8>
 80094e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094e6:	2b15      	cmp	r3, #21
 80094e8:	d8f6      	bhi.n	80094d8 <_printf_i+0x28>
 80094ea:	a001      	add	r0, pc, #4	; (adr r0, 80094f0 <_printf_i+0x40>)
 80094ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80094f0:	08009549 	.word	0x08009549
 80094f4:	0800955d 	.word	0x0800955d
 80094f8:	080094d9 	.word	0x080094d9
 80094fc:	080094d9 	.word	0x080094d9
 8009500:	080094d9 	.word	0x080094d9
 8009504:	080094d9 	.word	0x080094d9
 8009508:	0800955d 	.word	0x0800955d
 800950c:	080094d9 	.word	0x080094d9
 8009510:	080094d9 	.word	0x080094d9
 8009514:	080094d9 	.word	0x080094d9
 8009518:	080094d9 	.word	0x080094d9
 800951c:	08009669 	.word	0x08009669
 8009520:	0800958d 	.word	0x0800958d
 8009524:	0800964b 	.word	0x0800964b
 8009528:	080094d9 	.word	0x080094d9
 800952c:	080094d9 	.word	0x080094d9
 8009530:	0800968b 	.word	0x0800968b
 8009534:	080094d9 	.word	0x080094d9
 8009538:	0800958d 	.word	0x0800958d
 800953c:	080094d9 	.word	0x080094d9
 8009540:	080094d9 	.word	0x080094d9
 8009544:	08009653 	.word	0x08009653
 8009548:	680b      	ldr	r3, [r1, #0]
 800954a:	1d1a      	adds	r2, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	600a      	str	r2, [r1, #0]
 8009550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009558:	2301      	movs	r3, #1
 800955a:	e0a3      	b.n	80096a4 <_printf_i+0x1f4>
 800955c:	6825      	ldr	r5, [r4, #0]
 800955e:	6808      	ldr	r0, [r1, #0]
 8009560:	062e      	lsls	r6, r5, #24
 8009562:	f100 0304 	add.w	r3, r0, #4
 8009566:	d50a      	bpl.n	800957e <_printf_i+0xce>
 8009568:	6805      	ldr	r5, [r0, #0]
 800956a:	600b      	str	r3, [r1, #0]
 800956c:	2d00      	cmp	r5, #0
 800956e:	da03      	bge.n	8009578 <_printf_i+0xc8>
 8009570:	232d      	movs	r3, #45	; 0x2d
 8009572:	426d      	negs	r5, r5
 8009574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009578:	485e      	ldr	r0, [pc, #376]	; (80096f4 <_printf_i+0x244>)
 800957a:	230a      	movs	r3, #10
 800957c:	e019      	b.n	80095b2 <_printf_i+0x102>
 800957e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009582:	6805      	ldr	r5, [r0, #0]
 8009584:	600b      	str	r3, [r1, #0]
 8009586:	bf18      	it	ne
 8009588:	b22d      	sxthne	r5, r5
 800958a:	e7ef      	b.n	800956c <_printf_i+0xbc>
 800958c:	680b      	ldr	r3, [r1, #0]
 800958e:	6825      	ldr	r5, [r4, #0]
 8009590:	1d18      	adds	r0, r3, #4
 8009592:	6008      	str	r0, [r1, #0]
 8009594:	0628      	lsls	r0, r5, #24
 8009596:	d501      	bpl.n	800959c <_printf_i+0xec>
 8009598:	681d      	ldr	r5, [r3, #0]
 800959a:	e002      	b.n	80095a2 <_printf_i+0xf2>
 800959c:	0669      	lsls	r1, r5, #25
 800959e:	d5fb      	bpl.n	8009598 <_printf_i+0xe8>
 80095a0:	881d      	ldrh	r5, [r3, #0]
 80095a2:	4854      	ldr	r0, [pc, #336]	; (80096f4 <_printf_i+0x244>)
 80095a4:	2f6f      	cmp	r7, #111	; 0x6f
 80095a6:	bf0c      	ite	eq
 80095a8:	2308      	moveq	r3, #8
 80095aa:	230a      	movne	r3, #10
 80095ac:	2100      	movs	r1, #0
 80095ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095b2:	6866      	ldr	r6, [r4, #4]
 80095b4:	60a6      	str	r6, [r4, #8]
 80095b6:	2e00      	cmp	r6, #0
 80095b8:	bfa2      	ittt	ge
 80095ba:	6821      	ldrge	r1, [r4, #0]
 80095bc:	f021 0104 	bicge.w	r1, r1, #4
 80095c0:	6021      	strge	r1, [r4, #0]
 80095c2:	b90d      	cbnz	r5, 80095c8 <_printf_i+0x118>
 80095c4:	2e00      	cmp	r6, #0
 80095c6:	d04d      	beq.n	8009664 <_printf_i+0x1b4>
 80095c8:	4616      	mov	r6, r2
 80095ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80095ce:	fb03 5711 	mls	r7, r3, r1, r5
 80095d2:	5dc7      	ldrb	r7, [r0, r7]
 80095d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095d8:	462f      	mov	r7, r5
 80095da:	42bb      	cmp	r3, r7
 80095dc:	460d      	mov	r5, r1
 80095de:	d9f4      	bls.n	80095ca <_printf_i+0x11a>
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d10b      	bne.n	80095fc <_printf_i+0x14c>
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	07df      	lsls	r7, r3, #31
 80095e8:	d508      	bpl.n	80095fc <_printf_i+0x14c>
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	6861      	ldr	r1, [r4, #4]
 80095ee:	4299      	cmp	r1, r3
 80095f0:	bfde      	ittt	le
 80095f2:	2330      	movle	r3, #48	; 0x30
 80095f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095fc:	1b92      	subs	r2, r2, r6
 80095fe:	6122      	str	r2, [r4, #16]
 8009600:	f8cd a000 	str.w	sl, [sp]
 8009604:	464b      	mov	r3, r9
 8009606:	aa03      	add	r2, sp, #12
 8009608:	4621      	mov	r1, r4
 800960a:	4640      	mov	r0, r8
 800960c:	f7ff fee2 	bl	80093d4 <_printf_common>
 8009610:	3001      	adds	r0, #1
 8009612:	d14c      	bne.n	80096ae <_printf_i+0x1fe>
 8009614:	f04f 30ff 	mov.w	r0, #4294967295
 8009618:	b004      	add	sp, #16
 800961a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961e:	4835      	ldr	r0, [pc, #212]	; (80096f4 <_printf_i+0x244>)
 8009620:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	680e      	ldr	r6, [r1, #0]
 8009628:	061f      	lsls	r7, r3, #24
 800962a:	f856 5b04 	ldr.w	r5, [r6], #4
 800962e:	600e      	str	r6, [r1, #0]
 8009630:	d514      	bpl.n	800965c <_printf_i+0x1ac>
 8009632:	07d9      	lsls	r1, r3, #31
 8009634:	bf44      	itt	mi
 8009636:	f043 0320 	orrmi.w	r3, r3, #32
 800963a:	6023      	strmi	r3, [r4, #0]
 800963c:	b91d      	cbnz	r5, 8009646 <_printf_i+0x196>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	f023 0320 	bic.w	r3, r3, #32
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	2310      	movs	r3, #16
 8009648:	e7b0      	b.n	80095ac <_printf_i+0xfc>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	f043 0320 	orr.w	r3, r3, #32
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	2378      	movs	r3, #120	; 0x78
 8009654:	4828      	ldr	r0, [pc, #160]	; (80096f8 <_printf_i+0x248>)
 8009656:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800965a:	e7e3      	b.n	8009624 <_printf_i+0x174>
 800965c:	065e      	lsls	r6, r3, #25
 800965e:	bf48      	it	mi
 8009660:	b2ad      	uxthmi	r5, r5
 8009662:	e7e6      	b.n	8009632 <_printf_i+0x182>
 8009664:	4616      	mov	r6, r2
 8009666:	e7bb      	b.n	80095e0 <_printf_i+0x130>
 8009668:	680b      	ldr	r3, [r1, #0]
 800966a:	6826      	ldr	r6, [r4, #0]
 800966c:	6960      	ldr	r0, [r4, #20]
 800966e:	1d1d      	adds	r5, r3, #4
 8009670:	600d      	str	r5, [r1, #0]
 8009672:	0635      	lsls	r5, r6, #24
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	d501      	bpl.n	800967c <_printf_i+0x1cc>
 8009678:	6018      	str	r0, [r3, #0]
 800967a:	e002      	b.n	8009682 <_printf_i+0x1d2>
 800967c:	0671      	lsls	r1, r6, #25
 800967e:	d5fb      	bpl.n	8009678 <_printf_i+0x1c8>
 8009680:	8018      	strh	r0, [r3, #0]
 8009682:	2300      	movs	r3, #0
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	4616      	mov	r6, r2
 8009688:	e7ba      	b.n	8009600 <_printf_i+0x150>
 800968a:	680b      	ldr	r3, [r1, #0]
 800968c:	1d1a      	adds	r2, r3, #4
 800968e:	600a      	str	r2, [r1, #0]
 8009690:	681e      	ldr	r6, [r3, #0]
 8009692:	6862      	ldr	r2, [r4, #4]
 8009694:	2100      	movs	r1, #0
 8009696:	4630      	mov	r0, r6
 8009698:	f7f6 fdaa 	bl	80001f0 <memchr>
 800969c:	b108      	cbz	r0, 80096a2 <_printf_i+0x1f2>
 800969e:	1b80      	subs	r0, r0, r6
 80096a0:	6060      	str	r0, [r4, #4]
 80096a2:	6863      	ldr	r3, [r4, #4]
 80096a4:	6123      	str	r3, [r4, #16]
 80096a6:	2300      	movs	r3, #0
 80096a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ac:	e7a8      	b.n	8009600 <_printf_i+0x150>
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	4632      	mov	r2, r6
 80096b2:	4649      	mov	r1, r9
 80096b4:	4640      	mov	r0, r8
 80096b6:	47d0      	blx	sl
 80096b8:	3001      	adds	r0, #1
 80096ba:	d0ab      	beq.n	8009614 <_printf_i+0x164>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	079b      	lsls	r3, r3, #30
 80096c0:	d413      	bmi.n	80096ea <_printf_i+0x23a>
 80096c2:	68e0      	ldr	r0, [r4, #12]
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	4298      	cmp	r0, r3
 80096c8:	bfb8      	it	lt
 80096ca:	4618      	movlt	r0, r3
 80096cc:	e7a4      	b.n	8009618 <_printf_i+0x168>
 80096ce:	2301      	movs	r3, #1
 80096d0:	4632      	mov	r2, r6
 80096d2:	4649      	mov	r1, r9
 80096d4:	4640      	mov	r0, r8
 80096d6:	47d0      	blx	sl
 80096d8:	3001      	adds	r0, #1
 80096da:	d09b      	beq.n	8009614 <_printf_i+0x164>
 80096dc:	3501      	adds	r5, #1
 80096de:	68e3      	ldr	r3, [r4, #12]
 80096e0:	9903      	ldr	r1, [sp, #12]
 80096e2:	1a5b      	subs	r3, r3, r1
 80096e4:	42ab      	cmp	r3, r5
 80096e6:	dcf2      	bgt.n	80096ce <_printf_i+0x21e>
 80096e8:	e7eb      	b.n	80096c2 <_printf_i+0x212>
 80096ea:	2500      	movs	r5, #0
 80096ec:	f104 0619 	add.w	r6, r4, #25
 80096f0:	e7f5      	b.n	80096de <_printf_i+0x22e>
 80096f2:	bf00      	nop
 80096f4:	08009f31 	.word	0x08009f31
 80096f8:	08009f42 	.word	0x08009f42

080096fc <_putc_r>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	460d      	mov	r5, r1
 8009700:	4614      	mov	r4, r2
 8009702:	4606      	mov	r6, r0
 8009704:	b118      	cbz	r0, 800970e <_putc_r+0x12>
 8009706:	6983      	ldr	r3, [r0, #24]
 8009708:	b90b      	cbnz	r3, 800970e <_putc_r+0x12>
 800970a:	f7ff faf5 	bl	8008cf8 <__sinit>
 800970e:	4b1c      	ldr	r3, [pc, #112]	; (8009780 <_putc_r+0x84>)
 8009710:	429c      	cmp	r4, r3
 8009712:	d124      	bne.n	800975e <_putc_r+0x62>
 8009714:	6874      	ldr	r4, [r6, #4]
 8009716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009718:	07d8      	lsls	r0, r3, #31
 800971a:	d405      	bmi.n	8009728 <_putc_r+0x2c>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	0599      	lsls	r1, r3, #22
 8009720:	d402      	bmi.n	8009728 <_putc_r+0x2c>
 8009722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009724:	f7ff fbe3 	bl	8008eee <__retarget_lock_acquire_recursive>
 8009728:	68a3      	ldr	r3, [r4, #8]
 800972a:	3b01      	subs	r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	60a3      	str	r3, [r4, #8]
 8009730:	da05      	bge.n	800973e <_putc_r+0x42>
 8009732:	69a2      	ldr	r2, [r4, #24]
 8009734:	4293      	cmp	r3, r2
 8009736:	db1c      	blt.n	8009772 <_putc_r+0x76>
 8009738:	b2eb      	uxtb	r3, r5
 800973a:	2b0a      	cmp	r3, #10
 800973c:	d019      	beq.n	8009772 <_putc_r+0x76>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	6022      	str	r2, [r4, #0]
 8009744:	701d      	strb	r5, [r3, #0]
 8009746:	b2ed      	uxtb	r5, r5
 8009748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800974a:	07da      	lsls	r2, r3, #31
 800974c:	d405      	bmi.n	800975a <_putc_r+0x5e>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	059b      	lsls	r3, r3, #22
 8009752:	d402      	bmi.n	800975a <_putc_r+0x5e>
 8009754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009756:	f7ff fbcb 	bl	8008ef0 <__retarget_lock_release_recursive>
 800975a:	4628      	mov	r0, r5
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	4b09      	ldr	r3, [pc, #36]	; (8009784 <_putc_r+0x88>)
 8009760:	429c      	cmp	r4, r3
 8009762:	d101      	bne.n	8009768 <_putc_r+0x6c>
 8009764:	68b4      	ldr	r4, [r6, #8]
 8009766:	e7d6      	b.n	8009716 <_putc_r+0x1a>
 8009768:	4b07      	ldr	r3, [pc, #28]	; (8009788 <_putc_r+0x8c>)
 800976a:	429c      	cmp	r4, r3
 800976c:	bf08      	it	eq
 800976e:	68f4      	ldreq	r4, [r6, #12]
 8009770:	e7d1      	b.n	8009716 <_putc_r+0x1a>
 8009772:	4629      	mov	r1, r5
 8009774:	4622      	mov	r2, r4
 8009776:	4630      	mov	r0, r6
 8009778:	f7ff f8d2 	bl	8008920 <__swbuf_r>
 800977c:	4605      	mov	r5, r0
 800977e:	e7e3      	b.n	8009748 <_putc_r+0x4c>
 8009780:	08009ee0 	.word	0x08009ee0
 8009784:	08009f00 	.word	0x08009f00
 8009788:	08009ec0 	.word	0x08009ec0

0800978c <__srget_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	460c      	mov	r4, r1
 8009790:	4605      	mov	r5, r0
 8009792:	b118      	cbz	r0, 800979c <__srget_r+0x10>
 8009794:	6983      	ldr	r3, [r0, #24]
 8009796:	b90b      	cbnz	r3, 800979c <__srget_r+0x10>
 8009798:	f7ff faae 	bl	8008cf8 <__sinit>
 800979c:	4b0e      	ldr	r3, [pc, #56]	; (80097d8 <__srget_r+0x4c>)
 800979e:	429c      	cmp	r4, r3
 80097a0:	d10d      	bne.n	80097be <__srget_r+0x32>
 80097a2:	686c      	ldr	r4, [r5, #4]
 80097a4:	4621      	mov	r1, r4
 80097a6:	4628      	mov	r0, r5
 80097a8:	f000 f8ee 	bl	8009988 <__srefill_r>
 80097ac:	b988      	cbnz	r0, 80097d2 <__srget_r+0x46>
 80097ae:	6863      	ldr	r3, [r4, #4]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	6063      	str	r3, [r4, #4]
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	6022      	str	r2, [r4, #0]
 80097ba:	7818      	ldrb	r0, [r3, #0]
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	4b07      	ldr	r3, [pc, #28]	; (80097dc <__srget_r+0x50>)
 80097c0:	429c      	cmp	r4, r3
 80097c2:	d101      	bne.n	80097c8 <__srget_r+0x3c>
 80097c4:	68ac      	ldr	r4, [r5, #8]
 80097c6:	e7ed      	b.n	80097a4 <__srget_r+0x18>
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <__srget_r+0x54>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	bf08      	it	eq
 80097ce:	68ec      	ldreq	r4, [r5, #12]
 80097d0:	e7e8      	b.n	80097a4 <__srget_r+0x18>
 80097d2:	f04f 30ff 	mov.w	r0, #4294967295
 80097d6:	e7f1      	b.n	80097bc <__srget_r+0x30>
 80097d8:	08009ee0 	.word	0x08009ee0
 80097dc:	08009f00 	.word	0x08009f00
 80097e0:	08009ec0 	.word	0x08009ec0

080097e4 <_sbrk_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4d06      	ldr	r5, [pc, #24]	; (8009800 <_sbrk_r+0x1c>)
 80097e8:	2300      	movs	r3, #0
 80097ea:	4604      	mov	r4, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	602b      	str	r3, [r5, #0]
 80097f0:	f000 f954 	bl	8009a9c <_sbrk>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_sbrk_r+0x1a>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_sbrk_r+0x1a>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	20000338 	.word	0x20000338

08009804 <__sread>:
 8009804:	b510      	push	{r4, lr}
 8009806:	460c      	mov	r4, r1
 8009808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980c:	f000 f8a0 	bl	8009950 <_read_r>
 8009810:	2800      	cmp	r0, #0
 8009812:	bfab      	itete	ge
 8009814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009816:	89a3      	ldrhlt	r3, [r4, #12]
 8009818:	181b      	addge	r3, r3, r0
 800981a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800981e:	bfac      	ite	ge
 8009820:	6563      	strge	r3, [r4, #84]	; 0x54
 8009822:	81a3      	strhlt	r3, [r4, #12]
 8009824:	bd10      	pop	{r4, pc}

08009826 <__swrite>:
 8009826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982a:	461f      	mov	r7, r3
 800982c:	898b      	ldrh	r3, [r1, #12]
 800982e:	05db      	lsls	r3, r3, #23
 8009830:	4605      	mov	r5, r0
 8009832:	460c      	mov	r4, r1
 8009834:	4616      	mov	r6, r2
 8009836:	d505      	bpl.n	8009844 <__swrite+0x1e>
 8009838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983c:	2302      	movs	r3, #2
 800983e:	2200      	movs	r2, #0
 8009840:	f000 f868 	bl	8009914 <_lseek_r>
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800984a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800984e:	81a3      	strh	r3, [r4, #12]
 8009850:	4632      	mov	r2, r6
 8009852:	463b      	mov	r3, r7
 8009854:	4628      	mov	r0, r5
 8009856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800985a:	f000 b817 	b.w	800988c <_write_r>

0800985e <__sseek>:
 800985e:	b510      	push	{r4, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009866:	f000 f855 	bl	8009914 <_lseek_r>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	bf15      	itete	ne
 8009870:	6560      	strne	r0, [r4, #84]	; 0x54
 8009872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800987a:	81a3      	strheq	r3, [r4, #12]
 800987c:	bf18      	it	ne
 800987e:	81a3      	strhne	r3, [r4, #12]
 8009880:	bd10      	pop	{r4, pc}

08009882 <__sclose>:
 8009882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009886:	f000 b813 	b.w	80098b0 <_close_r>
	...

0800988c <_write_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	4d07      	ldr	r5, [pc, #28]	; (80098ac <_write_r+0x20>)
 8009890:	4604      	mov	r4, r0
 8009892:	4608      	mov	r0, r1
 8009894:	4611      	mov	r1, r2
 8009896:	2200      	movs	r2, #0
 8009898:	602a      	str	r2, [r5, #0]
 800989a:	461a      	mov	r2, r3
 800989c:	f7f7 fee2 	bl	8001664 <_write>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d102      	bne.n	80098aa <_write_r+0x1e>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	b103      	cbz	r3, 80098aa <_write_r+0x1e>
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	20000338 	.word	0x20000338

080098b0 <_close_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4d06      	ldr	r5, [pc, #24]	; (80098cc <_close_r+0x1c>)
 80098b4:	2300      	movs	r3, #0
 80098b6:	4604      	mov	r4, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	602b      	str	r3, [r5, #0]
 80098bc:	f7f7 fefe 	bl	80016bc <_close>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d102      	bne.n	80098ca <_close_r+0x1a>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	b103      	cbz	r3, 80098ca <_close_r+0x1a>
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	20000338 	.word	0x20000338

080098d0 <_fstat_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4d07      	ldr	r5, [pc, #28]	; (80098f0 <_fstat_r+0x20>)
 80098d4:	2300      	movs	r3, #0
 80098d6:	4604      	mov	r4, r0
 80098d8:	4608      	mov	r0, r1
 80098da:	4611      	mov	r1, r2
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	f7f7 ff3d 	bl	800175c <_fstat>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	d102      	bne.n	80098ec <_fstat_r+0x1c>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	b103      	cbz	r3, 80098ec <_fstat_r+0x1c>
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	bd38      	pop	{r3, r4, r5, pc}
 80098ee:	bf00      	nop
 80098f0:	20000338 	.word	0x20000338

080098f4 <_isatty_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4d06      	ldr	r5, [pc, #24]	; (8009910 <_isatty_r+0x1c>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	602b      	str	r3, [r5, #0]
 8009900:	f7f7 fe9a 	bl	8001638 <_isatty>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d102      	bne.n	800990e <_isatty_r+0x1a>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	b103      	cbz	r3, 800990e <_isatty_r+0x1a>
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	20000338 	.word	0x20000338

08009914 <_lseek_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	4d07      	ldr	r5, [pc, #28]	; (8009934 <_lseek_r+0x20>)
 8009918:	4604      	mov	r4, r0
 800991a:	4608      	mov	r0, r1
 800991c:	4611      	mov	r1, r2
 800991e:	2200      	movs	r2, #0
 8009920:	602a      	str	r2, [r5, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	f7f7 fee1 	bl	80016ea <_lseek>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_lseek_r+0x1e>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_lseek_r+0x1e>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	20000338 	.word	0x20000338

08009938 <__malloc_lock>:
 8009938:	4801      	ldr	r0, [pc, #4]	; (8009940 <__malloc_lock+0x8>)
 800993a:	f7ff bad8 	b.w	8008eee <__retarget_lock_acquire_recursive>
 800993e:	bf00      	nop
 8009940:	20000330 	.word	0x20000330

08009944 <__malloc_unlock>:
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__malloc_unlock+0x8>)
 8009946:	f7ff bad3 	b.w	8008ef0 <__retarget_lock_release_recursive>
 800994a:	bf00      	nop
 800994c:	20000330 	.word	0x20000330

08009950 <_read_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4d07      	ldr	r5, [pc, #28]	; (8009970 <_read_r+0x20>)
 8009954:	4604      	mov	r4, r0
 8009956:	4608      	mov	r0, r1
 8009958:	4611      	mov	r1, r2
 800995a:	2200      	movs	r2, #0
 800995c:	602a      	str	r2, [r5, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f7f7 fed4 	bl	800170c <_read>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_read_r+0x1e>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_read_r+0x1e>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20000338 	.word	0x20000338

08009974 <lflush>:
 8009974:	8983      	ldrh	r3, [r0, #12]
 8009976:	f003 0309 	and.w	r3, r3, #9
 800997a:	2b09      	cmp	r3, #9
 800997c:	d101      	bne.n	8009982 <lflush+0xe>
 800997e:	f7ff b951 	b.w	8008c24 <fflush>
 8009982:	2000      	movs	r0, #0
 8009984:	4770      	bx	lr
	...

08009988 <__srefill_r>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	460c      	mov	r4, r1
 800998c:	4605      	mov	r5, r0
 800998e:	b118      	cbz	r0, 8009998 <__srefill_r+0x10>
 8009990:	6983      	ldr	r3, [r0, #24]
 8009992:	b90b      	cbnz	r3, 8009998 <__srefill_r+0x10>
 8009994:	f7ff f9b0 	bl	8008cf8 <__sinit>
 8009998:	4b3b      	ldr	r3, [pc, #236]	; (8009a88 <__srefill_r+0x100>)
 800999a:	429c      	cmp	r4, r3
 800999c:	d10a      	bne.n	80099b4 <__srefill_r+0x2c>
 800999e:	686c      	ldr	r4, [r5, #4]
 80099a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099a4:	2300      	movs	r3, #0
 80099a6:	6063      	str	r3, [r4, #4]
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	069e      	lsls	r6, r3, #26
 80099ac:	d50c      	bpl.n	80099c8 <__srefill_r+0x40>
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295
 80099b2:	e066      	b.n	8009a82 <__srefill_r+0xfa>
 80099b4:	4b35      	ldr	r3, [pc, #212]	; (8009a8c <__srefill_r+0x104>)
 80099b6:	429c      	cmp	r4, r3
 80099b8:	d101      	bne.n	80099be <__srefill_r+0x36>
 80099ba:	68ac      	ldr	r4, [r5, #8]
 80099bc:	e7f0      	b.n	80099a0 <__srefill_r+0x18>
 80099be:	4b34      	ldr	r3, [pc, #208]	; (8009a90 <__srefill_r+0x108>)
 80099c0:	429c      	cmp	r4, r3
 80099c2:	bf08      	it	eq
 80099c4:	68ec      	ldreq	r4, [r5, #12]
 80099c6:	e7eb      	b.n	80099a0 <__srefill_r+0x18>
 80099c8:	0758      	lsls	r0, r3, #29
 80099ca:	d448      	bmi.n	8009a5e <__srefill_r+0xd6>
 80099cc:	06d9      	lsls	r1, r3, #27
 80099ce:	d405      	bmi.n	80099dc <__srefill_r+0x54>
 80099d0:	2309      	movs	r3, #9
 80099d2:	602b      	str	r3, [r5, #0]
 80099d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	e7e8      	b.n	80099ae <__srefill_r+0x26>
 80099dc:	071a      	lsls	r2, r3, #28
 80099de:	d50b      	bpl.n	80099f8 <__srefill_r+0x70>
 80099e0:	4621      	mov	r1, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	f7ff f8e2 	bl	8008bac <_fflush_r>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d1e0      	bne.n	80099ae <__srefill_r+0x26>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	60a0      	str	r0, [r4, #8]
 80099f0:	f023 0308 	bic.w	r3, r3, #8
 80099f4:	81a3      	strh	r3, [r4, #12]
 80099f6:	61a0      	str	r0, [r4, #24]
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f043 0304 	orr.w	r3, r3, #4
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	b91b      	cbnz	r3, 8009a0c <__srefill_r+0x84>
 8009a04:	4621      	mov	r1, r4
 8009a06:	4628      	mov	r0, r5
 8009a08:	f7ff fa98 	bl	8008f3c <__smakebuf_r>
 8009a0c:	89a6      	ldrh	r6, [r4, #12]
 8009a0e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009a12:	07b3      	lsls	r3, r6, #30
 8009a14:	d00f      	beq.n	8009a36 <__srefill_r+0xae>
 8009a16:	2301      	movs	r3, #1
 8009a18:	81a3      	strh	r3, [r4, #12]
 8009a1a:	4b1e      	ldr	r3, [pc, #120]	; (8009a94 <__srefill_r+0x10c>)
 8009a1c:	491e      	ldr	r1, [pc, #120]	; (8009a98 <__srefill_r+0x110>)
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	f006 0609 	and.w	r6, r6, #9
 8009a24:	f7ff f9e6 	bl	8008df4 <_fwalk>
 8009a28:	2e09      	cmp	r6, #9
 8009a2a:	81a7      	strh	r7, [r4, #12]
 8009a2c:	d103      	bne.n	8009a36 <__srefill_r+0xae>
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7ff f835 	bl	8008aa0 <__sflush_r>
 8009a36:	6922      	ldr	r2, [r4, #16]
 8009a38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a3a:	6963      	ldr	r3, [r4, #20]
 8009a3c:	6a21      	ldr	r1, [r4, #32]
 8009a3e:	6022      	str	r2, [r4, #0]
 8009a40:	4628      	mov	r0, r5
 8009a42:	47b0      	blx	r6
 8009a44:	2800      	cmp	r0, #0
 8009a46:	6060      	str	r0, [r4, #4]
 8009a48:	dc1c      	bgt.n	8009a84 <__srefill_r+0xfc>
 8009a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4e:	bf17      	itett	ne
 8009a50:	2200      	movne	r2, #0
 8009a52:	f043 0320 	orreq.w	r3, r3, #32
 8009a56:	6062      	strne	r2, [r4, #4]
 8009a58:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009a5c:	e7bc      	b.n	80099d8 <__srefill_r+0x50>
 8009a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a60:	2900      	cmp	r1, #0
 8009a62:	d0cd      	beq.n	8009a00 <__srefill_r+0x78>
 8009a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a68:	4299      	cmp	r1, r3
 8009a6a:	d002      	beq.n	8009a72 <__srefill_r+0xea>
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f7ff faad 	bl	8008fcc <_free_r>
 8009a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a74:	6063      	str	r3, [r4, #4]
 8009a76:	2000      	movs	r0, #0
 8009a78:	6360      	str	r0, [r4, #52]	; 0x34
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0c0      	beq.n	8009a00 <__srefill_r+0x78>
 8009a7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a84:	2000      	movs	r0, #0
 8009a86:	e7fc      	b.n	8009a82 <__srefill_r+0xfa>
 8009a88:	08009ee0 	.word	0x08009ee0
 8009a8c:	08009f00 	.word	0x08009f00
 8009a90:	08009ec0 	.word	0x08009ec0
 8009a94:	08009db8 	.word	0x08009db8
 8009a98:	08009975 	.word	0x08009975

08009a9c <_sbrk>:
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <_sbrk+0x14>)
 8009a9e:	6819      	ldr	r1, [r3, #0]
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	b909      	cbnz	r1, 8009aa8 <_sbrk+0xc>
 8009aa4:	4903      	ldr	r1, [pc, #12]	; (8009ab4 <_sbrk+0x18>)
 8009aa6:	6019      	str	r1, [r3, #0]
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	4402      	add	r2, r0
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	4770      	bx	lr
 8009ab0:	2000018c 	.word	0x2000018c
 8009ab4:	20000340 	.word	0x20000340

08009ab8 <_init>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	bf00      	nop
 8009abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009abe:	bc08      	pop	{r3}
 8009ac0:	469e      	mov	lr, r3
 8009ac2:	4770      	bx	lr

08009ac4 <_fini>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	bf00      	nop
 8009ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aca:	bc08      	pop	{r3}
 8009acc:	469e      	mov	lr, r3
 8009ace:	4770      	bx	lr
