
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800797c  0800797c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007984  08007984  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800798c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200000c0  08007a4c  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08007a4c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018da9  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f29  00000000  00000000  00038e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0003bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6bb  00000000  00000000  0003df70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014635  00000000  00000000  0005c62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd4da  00000000  00000000  00070c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e13a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005310  00000000  00000000  0012e190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007634 	.word	0x08007634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08007634 	.word	0x08007634

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <disable>:
 */

#include "main.h"
#include "interrupt.h"

uint32_t disable(void) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000592:	f3ef 8310 	mrs	r3, PRIMASK
 8000596:	603b      	str	r3, [r7, #0]
  return(result);
 8000598:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 800059a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <restore>:

void restore(uint32_t priority_mask) {
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f383 8810 	msr	PRIMASK, r3
}
 80005c0:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b089      	sub	sp, #36	; 0x24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	e853 3f00 	ldrex	r3, [r3]
 80005e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	61fb      	str	r3, [r7, #28]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	69fa      	ldr	r2, [r7, #28]
 80005ee:	61ba      	str	r2, [r7, #24]
 80005f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005f2:	6979      	ldr	r1, [r7, #20]
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	e841 2300 	strex	r3, r2, [r1]
 80005fa:	613b      	str	r3, [r7, #16]
   return(result);
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e9      	bne.n	80005d6 <LL_USART_EnableIT_RXNE+0x8>
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	3724      	adds	r7, #36	; 0x24
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 ffbc 	bl	8001592 <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t command_line[QUEUE_SIZE];
  uint8_t ch;
  //RTC_DateTypeDef date;
  //RTC_TimeTypeDef time;
  int n = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f889 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 fa1f 	bl	8000a64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f9ed 	bl	8000a04 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800062a:	f000 f94b 	bl	80008c4 <MX_RTC_Init>
  MX_ADC2_Init();
 800062e:	f000 f8d9 	bl	80007e4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Init(&hadc2); // Initialize the A2D
 8000632:	4834      	ldr	r0, [pc, #208]	; (8000704 <main+0xf4>)
 8000634:	f001 fa4e 	bl	8001ad4 <HAL_ADC_Init>
  while (HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED) != HAL_OK);   // Calibrate the A2D
 8000638:	bf00      	nop
 800063a:	217f      	movs	r1, #127	; 0x7f
 800063c:	4831      	ldr	r0, [pc, #196]	; (8000704 <main+0xf4>)
 800063e:	f002 fa59 	bl	8002af4 <HAL_ADCEx_Calibration_Start>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f8      	bne.n	800063a <main+0x2a>
  RetargetInit(&huart2);
 8000648:	482f      	ldr	r0, [pc, #188]	; (8000708 <main+0xf8>)
 800064a:	f000 fd17 	bl	800107c <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);
 800064e:	482f      	ldr	r0, [pc, #188]	; (800070c <main+0xfc>)
 8000650:	f7ff ffbd 	bl	80005ce <LL_USART_EnableIT_RXNE>
  printf("\r\nSystem Running\n\r");
 8000654:	482e      	ldr	r0, [pc, #184]	; (8000710 <main+0x100>)
 8000656:	f005 fd29 	bl	80060ac <iprintf>
  printf("\r\nSTM$");
 800065a:	482e      	ldr	r0, [pc, #184]	; (8000714 <main+0x104>)
 800065c:	f005 fd26 	bl	80060ac <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(toggle){
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <main+0x108>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00d      	beq.n	8000684 <main+0x74>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000668:	2108      	movs	r1, #8
 800066a:	482c      	ldr	r0, [pc, #176]	; (800071c <main+0x10c>)
 800066c:	f002 fdee 	bl	800324c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000670:	2064      	movs	r0, #100	; 0x64
 8000672:	f001 f803 	bl	800167c <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000676:	2108      	movs	r1, #8
 8000678:	4828      	ldr	r0, [pc, #160]	; (800071c <main+0x10c>)
 800067a:	f002 fde7 	bl	800324c <HAL_GPIO_TogglePin>
		toggle = 0;
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <main+0x108>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
	}
    if ((ch = dequeue(&rx_queue))) {
 8000684:	4826      	ldr	r0, [pc, #152]	; (8000720 <main+0x110>)
 8000686:	f000 fccf 	bl	8001028 <dequeue>
 800068a:	4603      	mov	r3, r0
 800068c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e3      	beq.n	8000660 <main+0x50>
      putchar(ch);
 8000698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800069c:	4618      	mov	r0, r3
 800069e:	f005 fd1d 	bl	80060dc <putchar>
      command_line[n] = ch;
 80006a2:	463a      	mov	r2, r7
 80006a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a6:	4413      	add	r3, r2
 80006a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80006ac:	701a      	strb	r2, [r3, #0]
      if(ch == '\r' || ch == '\n'){
 80006ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006b2:	2b0d      	cmp	r3, #13
 80006b4:	d003      	beq.n	80006be <main+0xae>
 80006b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006ba:	2b0a      	cmp	r3, #10
 80006bc:	d11d      	bne.n	80006fa <main+0xea>
    	  command_line[n] = '\0'; //end of string
 80006be:	463a      	mov	r2, r7
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	4413      	add	r3, r2
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
    	  if(!execute_command(command_line)){
 80006c8:	463b      	mov	r3, r7
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fa14 	bl	8000af8 <execute_command>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d103      	bne.n	80006de <main+0xce>
    		  printf("\r\nOK");
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <main+0x114>)
 80006d8:	f005 fce8 	bl	80060ac <iprintf>
 80006dc:	e002      	b.n	80006e4 <main+0xd4>
    	  }else{
    		  printf("\r\nNOK");
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <main+0x118>)
 80006e0:	f005 fce4 	bl	80060ac <iprintf>
    	  }
    	  n = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
    	  printf("\r\n");
 80006e8:	4810      	ldr	r0, [pc, #64]	; (800072c <main+0x11c>)
 80006ea:	f005 fd7b 	bl	80061e4 <puts>
    	  printDateTime();
 80006ee:	f000 fb0f 	bl	8000d10 <printDateTime>
    	  printf(" IULS>");
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <main+0x120>)
 80006f4:	f005 fcda 	bl	80060ac <iprintf>
 80006f8:	e002      	b.n	8000700 <main+0xf0>
      }else{
    	  n++;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	3301      	adds	r3, #1
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
	if(toggle){
 8000700:	e7ae      	b.n	8000660 <main+0x50>
 8000702:	bf00      	nop
 8000704:	200000f0 	.word	0x200000f0
 8000708:	200001a8 	.word	0x200001a8
 800070c:	40004400 	.word	0x40004400
 8000710:	08007684 	.word	0x08007684
 8000714:	08007698 	.word	0x08007698
 8000718:	200000e0 	.word	0x200000e0
 800071c:	48000400 	.word	0x48000400
 8000720:	20000154 	.word	0x20000154
 8000724:	080076a0 	.word	0x080076a0
 8000728:	080076a8 	.word	0x080076a8
 800072c:	080076b0 	.word	0x080076b0
 8000730:	080076b4 	.word	0x080076b4

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	; 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	; 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fcaa 	bl	800609c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075a:	f002 fdaf 	bl	80032bc <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000764:	f000 fc22 	bl	8000fac <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000768:	f002 fd8a 	bl	8003280 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <SystemClock_Config+0xac>)
 800076e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000772:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <SystemClock_Config+0xac>)
 8000774:	f023 0318 	bic.w	r3, r3, #24
 8000778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800077c:	231c      	movs	r3, #28
 800077e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000794:	2300      	movs	r3, #0
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fde3 	bl	8003368 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007a8:	f000 fc00 	bl	8000fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2101      	movs	r1, #1
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 fa35 	bl	8003c34 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007d0:	f000 fbec 	bl	8000fac <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007d4:	f003 fdba 	bl	800434c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	; 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <MX_ADC2_Init+0xd0>)
 80007fc:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <MX_ADC2_Init+0xd4>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_ADC2_Init+0xd0>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_ADC2_Init+0xd0>)
 800081a:	2204      	movs	r2, #4
 800081c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000820:	2200      	movs	r2, #0
 8000822:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000826:	2200      	movs	r2, #0
 8000828:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_ADC2_Init+0xd0>)
 800082c:	2201      	movs	r2, #1
 800082e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_ADC2_Init+0xd0>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000840:	2200      	movs	r2, #0
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_ADC2_Init+0xd0>)
 800084e:	2200      	movs	r2, #0
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <MX_ADC2_Init+0xd0>)
 800085c:	f001 f93a 	bl	8001ad4 <HAL_ADC_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000866:	f000 fba1 	bl	8000fac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_ADC2_Init+0xd8>)
 800086c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086e:	2306      	movs	r3, #6
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000876:	237f      	movs	r3, #127	; 0x7f
 8000878:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800087a:	2304      	movs	r3, #4
 800087c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_ADC2_Init+0xd0>)
 8000888:	f001 fcac 	bl	80021e4 <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000892:	f000 fb8b 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_ADC2_Init+0xdc>)
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800089e:	2307      	movs	r3, #7
 80008a0:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <MX_ADC2_Init+0xd0>)
 80008a8:	f001 fc9c 	bl	80021e4 <HAL_ADC_ConfigChannel>
  /* USER CODE END ADC2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000f0 	.word	0x200000f0
 80008b8:	50040100 	.word	0x50040100
 80008bc:	2a000400 	.word	0x2a000400
 80008c0:	c7520000 	.word	0xc7520000

080008c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b092      	sub	sp, #72	; 0x48
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	222c      	movs	r2, #44	; 0x2c
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f005 fbd9 	bl	800609c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <MX_RTC_Init+0x134>)
 80008ec:	4a43      	ldr	r2, [pc, #268]	; (80009fc <MX_RTC_Init+0x138>)
 80008ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008f0:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <MX_RTC_Init+0x134>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <MX_RTC_Init+0x134>)
 80008f8:	227f      	movs	r2, #127	; 0x7f
 80008fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80008fc:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <MX_RTC_Init+0x134>)
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <MX_RTC_Init+0x134>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000908:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <MX_RTC_Init+0x134>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800090e:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <MX_RTC_Init+0x134>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000914:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <MX_RTC_Init+0x134>)
 8000916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800091c:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <MX_RTC_Init+0x134>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <MX_RTC_Init+0x134>)
 8000924:	f003 fd22 	bl	800436c <HAL_RTC_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 fb3d 	bl	8000fac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000932:	2300      	movs	r3, #0
 8000934:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800093e:	2300      	movs	r3, #0
 8000940:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800094c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000950:	2201      	movs	r2, #1
 8000952:	4619      	mov	r1, r3
 8000954:	4828      	ldr	r0, [pc, #160]	; (80009f8 <MX_RTC_Init+0x134>)
 8000956:	f003 fd8b 	bl	8004470 <HAL_RTC_SetTime>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000960:	f000 fb24 	bl	8000fac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000964:	2301      	movs	r3, #1
 8000966:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800096a:	2301      	movs	r3, #1
 800096c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000970:	2301      	movs	r3, #1
 8000972:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800097c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000980:	2201      	movs	r2, #1
 8000982:	4619      	mov	r1, r3
 8000984:	481c      	ldr	r0, [pc, #112]	; (80009f8 <MX_RTC_Init+0x134>)
 8000986:	f003 fe6c 	bl	8004662 <HAL_RTC_SetDate>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000990:	f000 fb0c 	bl	8000fac <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000994:	2300      	movs	r3, #0
 8000996:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000998:	2300      	movs	r3, #0
 800099a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x1;
 800099c:	2301      	movs	r3, #1
 800099e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_RTC_Init+0x13c>)
 80009ae:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80009be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2201      	movs	r2, #1
 80009c8:	4619      	mov	r1, r3
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <MX_RTC_Init+0x134>)
 80009cc:	f003 ff1e 	bl	800480c <HAL_RTC_SetAlarm_IT>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_RTC_Init+0x116>
  {
    Error_Handler();
 80009d6:	f000 fae9 	bl	8000fac <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80009da:	2300      	movs	r3, #0
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_RTC_Init+0x134>)
 80009e2:	f004 f905 	bl	8004bf0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 80009ec:	f000 fade 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3748      	adds	r7, #72	; 0x48
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000017c 	.word	0x2000017c
 80009fc:	40002800 	.word	0x40002800
 8000a00:	80808000 	.word	0x80808000

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <MX_USART2_UART_Init+0x5c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART2_UART_Init+0x58>)
 8000a48:	f004 f9a2 	bl	8004d90 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 faab 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001a8 	.word	0x200001a8
 8000a60:	40004400 	.word	0x40004400

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	480b      	ldr	r0, [pc, #44]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000ac8:	f002 fba8 	bl	800321c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000acc:	2308      	movs	r3, #8
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000ae4:	f002 fa28 	bl	8002f38 <HAL_GPIO_Init>

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000400 	.word	0x48000400

08000af8 <execute_command>:

/* USER CODE BEGIN 4 */
int execute_command(uint8_t * line) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <execute_command+0x94>)
 8000b02:	617b      	str	r3, [r7, #20]
  int success = 1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <execute_command+0x1c>
    return (-1); // Passed a bad pointer
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e037      	b.n	8000b84 <execute_command+0x8c>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000b14:	f107 0208 	add.w	r2, r7, #8
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f838 	bl	8000b94 <parse_command>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2a:	d120      	bne.n	8000b6e <execute_command+0x76>
    printf("Error with parse command\n\r");
 8000b2c:	4818      	ldr	r0, [pc, #96]	; (8000b90 <execute_command+0x98>)
 8000b2e:	f005 fabd 	bl	80060ac <iprintf>
    return (-1);
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e025      	b.n	8000b84 <execute_command+0x8c>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fb45 	bl	80001d0 <strcmp>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10d      	bne.n	8000b68 <execute_command+0x70>
      if (!p->cmd_function) {
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <execute_command+0x62>
        return (-1);
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	e014      	b.n	8000b84 <execute_command+0x8c>
      }
      success = (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	4610      	mov	r0, r2
 8000b62:	4798      	blx	r3
 8000b64:	6138      	str	r0, [r7, #16]
      //success = 1;
      break;
 8000b66:	e006      	b.n	8000b76 <execute_command+0x7e>
    }
    p++;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e0      	bne.n	8000b38 <execute_command+0x40>
  }
  if (success == 0) {
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <execute_command+0x88>
    return (0);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e001      	b.n	8000b84 <execute_command+0x8c>
  }
  else {
    return (-1);
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
  }
  }
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	080076bc 	.word	0x080076bc

08000b94 <parse_command>:
int parse_command (uint8_t *line, uint8_t **command, uint8_t **args){
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]

  uint8_t *line_temp;
  if((!line) || (!command) || (!args)){ //check for bad pointer
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d005      	beq.n	8000bb2 <parse_command+0x1e>
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <parse_command+0x1e>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <parse_command+0x24>
    return(-1);
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e01d      	b.n	8000bf4 <parse_command+0x60>
  }
  line_temp= line;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	617b      	str	r3, [r7, #20]
  *command = line;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	601a      	str	r2, [r3, #0]
  //strcpy(line_left, line);
  while(*line_temp != ','){ //increment through input to find end of command
 8000bc2:	e00b      	b.n	8000bdc <parse_command+0x48>
    if(!*line_temp){
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d104      	bne.n	8000bd6 <parse_command+0x42>
      *args = '\0'; //no arguments
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
      return(0);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e00e      	b.n	8000bf4 <parse_command+0x60>
    }
    line_temp++;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  while(*line_temp != ','){ //increment through input to find end of command
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b2c      	cmp	r3, #44	; 0x2c
 8000be2:	d1ef      	bne.n	8000bc4 <parse_command+0x30>
  }

  *line_temp = '\0'; //replace comma with null for end of command string
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
  *args = line_temp +1; //one char past null is beginning of arguments
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	601a      	str	r2, [r3, #0]
  return 0;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <help_command>:
int help_command(char *args){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  printf("\r\nAvailable Commands:\n\r");
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <help_command+0x30>)
 8000c0a:	f005 fa4f 	bl	80060ac <iprintf>
  printf("lon\n\r");
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <help_command+0x34>)
 8000c10:	f005 fa4c 	bl	80060ac <iprintf>
  printf("lof\n\r");
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <help_command+0x38>)
 8000c16:	f005 fa49 	bl	80060ac <iprintf>
  printf("test\n\r");
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <help_command+0x3c>)
 8000c1c:	f005 fa46 	bl	80060ac <iprintf>
  printf("ds\n\r");
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <help_command+0x40>)
 8000c22:	f005 fa43 	bl	80060ac <iprintf>
  return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	080076d8 	.word	0x080076d8
 8000c34:	080076f0 	.word	0x080076f0
 8000c38:	080076f8 	.word	0x080076f8
 8000c3c:	08007700 	.word	0x08007700
 8000c40:	08007708 	.word	0x08007708

08000c44 <lon_command>:
int lon_command(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  if(led_on == 0){
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <lon_command+0x30>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d10a      	bne.n	8000c66 <lon_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c50:	2108      	movs	r1, #8
 8000c52:	4809      	ldr	r0, [pc, #36]	; (8000c78 <lon_command+0x34>)
 8000c54:	f002 fafa 	bl	800324c <HAL_GPIO_TogglePin>
    led_on = 1;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <lon_command+0x30>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
    printf("\r\nLED ON\n\r");
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <lon_command+0x38>)
 8000c60:	f005 fa24 	bl	80060ac <iprintf>
 8000c64:	e002      	b.n	8000c6c <lon_command+0x28>
  }else{
    printf("\r\nLED ALREADY ON\n\r");
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <lon_command+0x3c>)
 8000c68:	f005 fa20 	bl	80060ac <iprintf>
  }
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000dc 	.word	0x200000dc
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	08007710 	.word	0x08007710
 8000c80:	0800771c 	.word	0x0800771c

08000c84 <lof_command>:
int lof_command(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  if(led_on == 1){
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <lof_command+0x30>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d10a      	bne.n	8000ca6 <lof_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c90:	2108      	movs	r1, #8
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <lof_command+0x34>)
 8000c94:	f002 fada 	bl	800324c <HAL_GPIO_TogglePin>
    led_on = 0;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <lof_command+0x30>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
    printf("\r\nLED OFF\n\r");
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <lof_command+0x38>)
 8000ca0:	f005 fa04 	bl	80060ac <iprintf>
 8000ca4:	e002      	b.n	8000cac <lof_command+0x28>
  }else{
    printf("\r\nLED ALREADY OFF\n\r");
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <lof_command+0x3c>)
 8000ca8:	f005 fa00 	bl	80060ac <iprintf>
  }
  return 0;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000dc 	.word	0x200000dc
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	08007730 	.word	0x08007730
 8000cc0:	0800773c 	.word	0x0800773c

08000cc4 <test_command>:
int test_command(char *args){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  printf("\r\ntest\n\r");
 8000ccc:	480e      	ldr	r0, [pc, #56]	; (8000d08 <test_command+0x44>)
 8000cce:	f005 f9ed 	bl	80060ac <iprintf>
  while(*args!='\0'){
 8000cd2:	e00f      	b.n	8000cf4 <test_command+0x30>
    if(*args!=','){
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b2c      	cmp	r3, #44	; 0x2c
 8000cda:	d005      	beq.n	8000ce8 <test_command+0x24>
      putchar(*args);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f005 f9fb 	bl	80060dc <putchar>
 8000ce6:	e002      	b.n	8000cee <test_command+0x2a>
    }else{
      printf("\r\n");
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <test_command+0x48>)
 8000cea:	f005 fa7b 	bl	80061e4 <puts>
    }
    args++;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
  while(*args!='\0'){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1eb      	bne.n	8000cd4 <test_command+0x10>
  }
  return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	08007750 	.word	0x08007750
 8000d0c:	080076b0 	.word	0x080076b0

08000d10 <printDateTime>:
void printDateTime(){
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af04      	add	r7, sp, #16
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <printDateTime+0x4c>)
 8000d1e:	f003 fc44 	bl	80045aa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <printDateTime+0x4c>)
 8000d2c:	f003 fd20 	bl	8004770 <HAL_RTC_GetDate>
	printf("%2.2u/%2.2u/%4.4u %2.2u:%2.2u:%2.2u",date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds);
 8000d30:	7d7b      	ldrb	r3, [r7, #21]
 8000d32:	461c      	mov	r4, r3
 8000d34:	7dbb      	ldrb	r3, [r7, #22]
 8000d36:	461d      	mov	r5, r3
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000d3e:	783a      	ldrb	r2, [r7, #0]
 8000d40:	7879      	ldrb	r1, [r7, #1]
 8000d42:	78b8      	ldrb	r0, [r7, #2]
 8000d44:	9002      	str	r0, [sp, #8]
 8000d46:	9101      	str	r1, [sp, #4]
 8000d48:	9200      	str	r2, [sp, #0]
 8000d4a:	462a      	mov	r2, r5
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	4804      	ldr	r0, [pc, #16]	; (8000d60 <printDateTime+0x50>)
 8000d50:	f005 f9ac 	bl	80060ac <iprintf>
}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5c:	2000017c 	.word	0x2000017c
 8000d60:	0800775c 	.word	0x0800775c

08000d64 <dateSet_command>:
int dateSet_command(char *args){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	//HAL_StatusTypeDef hal;
	int comma_count = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
	char* start_of_num = args;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	61bb      	str	r3, [r7, #24]
	int numbers[3];
	while(*args!='\0'){
 8000d74:	e01f      	b.n	8000db6 <dateSet_command+0x52>
	    if(*args==','){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b2c      	cmp	r3, #44	; 0x2c
 8000d7c:	d113      	bne.n	8000da6 <dateSet_command+0x42>
	    	*args = '\0';
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
	        numbers[comma_count] = atoi(start_of_num);
 8000d84:	69b8      	ldr	r0, [r7, #24]
 8000d86:	f005 f949 	bl	800601c <atoi>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	f107 0120 	add.w	r1, r7, #32
 8000d94:	440b      	add	r3, r1
 8000d96:	f843 2c18 	str.w	r2, [r3, #-24]
	        comma_count += 1;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
	        start_of_num = args+1;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
	    }
	    if(comma_count>2){
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	dd01      	ble.n	8000db0 <dateSet_command+0x4c>
	    	//printf("\r\n error \n\r");
	    	return 1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e038      	b.n	8000e22 <dateSet_command+0xbe>
	    }
	    args++;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1db      	bne.n	8000d76 <dateSet_command+0x12>
	  }
	numbers[comma_count] = atoi(start_of_num);
 8000dbe:	69b8      	ldr	r0, [r7, #24]
 8000dc0:	f005 f92c 	bl	800601c <atoi>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	f107 0120 	add.w	r1, r7, #32
 8000dce:	440b      	add	r3, r1
 8000dd0:	f843 2c18 	str.w	r2, [r3, #-24]
	if(numbers[0]>12 || numbers[0] < 1 || numbers[1] > 31 || numbers[1]<1 || numbers[2] > 100 || numbers[2]<0)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b0c      	cmp	r3, #12
 8000dd8:	dc0e      	bgt.n	8000df8 <dateSet_command+0x94>
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dd0b      	ble.n	8000df8 <dateSet_command+0x94>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b1f      	cmp	r3, #31
 8000de4:	dc08      	bgt.n	8000df8 <dateSet_command+0x94>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dd05      	ble.n	8000df8 <dateSet_command+0x94>
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	2b64      	cmp	r3, #100	; 0x64
 8000df0:	dc02      	bgt.n	8000df8 <dateSet_command+0x94>
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da01      	bge.n	8000dfc <dateSet_command+0x98>
		return 1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e012      	b.n	8000e22 <dateSet_command+0xbe>
	date.WeekDay = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	753b      	strb	r3, [r7, #20]
	date.Month = numbers[0];
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	757b      	strb	r3, [r7, #21]
	date.Date = numbers[1];
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	75bb      	strb	r3, [r7, #22]
	date.Year = numbers[2];
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	75fb      	strb	r3, [r7, #23]
	HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <dateSet_command+0xc8>)
 8000e1c:	f003 fc21 	bl	8004662 <HAL_RTC_SetDate>
	return 0;
 8000e20:	2300      	movs	r3, #0
	//hal = HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
	//printf("\r\n%x\r\n",hal);
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000017c 	.word	0x2000017c

08000e30 <timeSet_command>:
int timeSet_command(char *args){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	int comma_count = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* start_of_num = args;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	int numbers[3];
	while(*args!='\0'){
 8000e40:	e01f      	b.n	8000e82 <timeSet_command+0x52>
		if(*args==','){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b2c      	cmp	r3, #44	; 0x2c
 8000e48:	d113      	bne.n	8000e72 <timeSet_command+0x42>
			*args = '\0';
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
		    numbers[comma_count] = atoi(start_of_num);
 8000e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e52:	f005 f8e3 	bl	800601c <atoi>
 8000e56:	4602      	mov	r2, r0
 8000e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e60:	440b      	add	r3, r1
 8000e62:	f843 2c28 	str.w	r2, [r3, #-40]
		    comma_count += 1;
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	3301      	adds	r3, #1
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		    start_of_num = args+1;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(comma_count>2){
 8000e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	dd01      	ble.n	8000e7c <timeSet_command+0x4c>
			//printf("\r\n error \n\r");
		    return 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e036      	b.n	8000eea <timeSet_command+0xba>
		}
		args++;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1db      	bne.n	8000e42 <timeSet_command+0x12>
	}
	if(numbers[0]>24 || numbers[0] < 1 || numbers[1] > 60 || numbers[1]<1 || numbers[2] > 60 || numbers[2]< 1)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b18      	cmp	r3, #24
 8000e8e:	dc0e      	bgt.n	8000eae <timeSet_command+0x7e>
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	dd0b      	ble.n	8000eae <timeSet_command+0x7e>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2b3c      	cmp	r3, #60	; 0x3c
 8000e9a:	dc08      	bgt.n	8000eae <timeSet_command+0x7e>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dd05      	ble.n	8000eae <timeSet_command+0x7e>
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b3c      	cmp	r3, #60	; 0x3c
 8000ea6:	dc02      	bgt.n	8000eae <timeSet_command+0x7e>
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	dc01      	bgt.n	8000eb2 <timeSet_command+0x82>
		return 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e01b      	b.n	8000eea <timeSet_command+0xba>
	numbers[comma_count] = atoi(start_of_num);
 8000eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000eb4:	f005 f8b2 	bl	800601c <atoi>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f843 2c28 	str.w	r2, [r3, #-40]
	time.Hours = numbers[0];
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	753b      	strb	r3, [r7, #20]
	time.Minutes = numbers[1];
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	757b      	strb	r3, [r7, #21]
	time.Seconds = numbers[2];
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	75bb      	strb	r3, [r7, #22]

	HAL_RTC_SetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <timeSet_command+0xc4>)
 8000ee4:	f003 fac4 	bl	8004470 <HAL_RTC_SetTime>
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3730      	adds	r7, #48	; 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000017c 	.word	0x2000017c

08000ef8 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	toggle=1;
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200000e0 	.word	0x200000e0

08000f18 <tsl237_command>:
int tsl237_command(){
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

}
 8000f1c:	bf00      	nop
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <temp_command>:
int temp_command(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
   // uint16_t rawValue;
    float temp = 32.75;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <temp_command+0x64>)
 8000f30:	60fb      	str	r3, [r7, #12]
	//HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);

	//rawValue = HAL_ADC_GetValue(&hadc2);
	//temp = ((float)rawValue) / 4095 * 3300;
	//temp = ((temp - 760.0) / 2.5) + 30;
	number = (int)temp/1;
 8000f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f3e:	793b      	ldrb	r3, [r7, #4]
 8000f40:	72fb      	strb	r3, [r7, #11]
	temp = temp*100;
 8000f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f46:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000f90 <temp_command+0x68>
 8000f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4e:	edc7 7a03 	vstr	s15, [r7, #12]
	decimal = (int)temp%100;
 8000f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5a:	ee17 2a90 	vmov	r2, s15
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <temp_command+0x6c>)
 8000f60:	fb83 1302 	smull	r1, r3, r3, r2
 8000f64:	1159      	asrs	r1, r3, #5
 8000f66:	17d3      	asrs	r3, r2, #31
 8000f68:	1acb      	subs	r3, r1, r3
 8000f6a:	2164      	movs	r1, #100	; 0x64
 8000f6c:	fb01 f303 	mul.w	r3, r1, r3
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	72bb      	strb	r3, [r7, #10]
	printf("\r\nTemperature: %d.%d\r\n", number, decimal);
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	7aba      	ldrb	r2, [r7, #10]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <temp_command+0x70>)
 8000f7c:	f005 f896 	bl	80060ac <iprintf>
	return 0;
 8000f80:	2300      	movs	r3, #0

}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	42030000 	.word	0x42030000
 8000f90:	42c80000 	.word	0x42c80000
 8000f94:	51eb851f 	.word	0x51eb851f
 8000f98:	08007780 	.word	0x08007780

08000f9c <battery_command>:
int battery_command(){
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

}
 8000fa0:	bf00      	nop
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>

08000fb6 <enqueue>:
  buf->head=0;
  buf->tail=0;
  restore(mask);
}

int enqueue (queue_t *buf, uint8_t data) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000fc6:	f7ff fadf 	bl	8000588 <disable>
 8000fca:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	425a      	negs	r2, r3
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	f002 021f 	and.w	r2, r2, #31
 8000fdc:	bf58      	it	pl
 8000fde:	4253      	negpl	r3, r2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6852      	ldr	r2, [r2, #4]
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d014      	beq.n	8001012 <enqueue+0x5c>
    buf->buffer[buf->head]=data;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	78fa      	ldrb	r2, [r7, #3]
 8000ff2:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	425a      	negs	r2, r3
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	f002 021f 	and.w	r2, r2, #31
 8001004:	bf58      	it	pl
 8001006:	4253      	negpl	r3, r2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6013      	str	r3, [r2, #0]
    return_val=0;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e002      	b.n	8001018 <enqueue+0x62>
  }
  else {
    return_val=-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	f7ff fac8 	bl	80005ae <restore>
  return (return_val);
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8001034:	f7ff faa8 	bl	8000588 <disable>
 8001038:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d011      	beq.n	800106a <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	7a1b      	ldrb	r3, [r3, #8]
 8001050:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	425a      	negs	r2, r3
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	f002 021f 	and.w	r2, r2, #31
 8001062:	bf58      	it	pl
 8001064:	4253      	negpl	r3, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 800106a:	68b8      	ldr	r0, [r7, #8]
 800106c:	f7ff fa9f 	bl	80005ae <restore>
  return(return_val);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	b2db      	uxtb	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <RetargetInit+0x28>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <RetargetInit+0x2c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6898      	ldr	r0, [r3, #8]
 8001090:	2300      	movs	r3, #0
 8001092:	2202      	movs	r2, #2
 8001094:	2100      	movs	r1, #0
 8001096:	f005 f8ad 	bl	80061f4 <setvbuf>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000022c 	.word	0x2000022c
 80010a8:	2000005c 	.word	0x2000005c

080010ac <_isatty>:

int _isatty(int fd) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db04      	blt.n	80010c4 <_isatty+0x18>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	dc01      	bgt.n	80010c4 <_isatty+0x18>
    return 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e005      	b.n	80010d0 <_isatty+0x24>

  errno = EBADF;
 80010c4:	f004 ffae 	bl	8006024 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2209      	movs	r2, #9
 80010cc:	601a      	str	r2, [r3, #0]
  return 0;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_write>:

int _write(int fd, char* ptr, int len) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d002      	beq.n	80010f0 <_write+0x18>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d111      	bne.n	8001114 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <_write+0x54>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	f003 fe95 	bl	8004e2c <HAL_UART_Transmit>
 8001102:	4603      	mov	r3, r0
 8001104:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <_write+0x38>
      return len;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	e008      	b.n	8001122 <_write+0x4a>
    else
      return EIO;
 8001110:	2305      	movs	r3, #5
 8001112:	e006      	b.n	8001122 <_write+0x4a>
  }
  errno = EBADF;
 8001114:	f004 ff86 	bl	8006024 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	2209      	movs	r2, #9
 800111c:	601a      	str	r2, [r3, #0]
  return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000022c 	.word	0x2000022c

08001130 <_close>:

int _close(int fd) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db04      	blt.n	8001148 <_close+0x18>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b02      	cmp	r3, #2
 8001142:	dc01      	bgt.n	8001148 <_close+0x18>
    return 0;
 8001144:	2300      	movs	r3, #0
 8001146:	e006      	b.n	8001156 <_close+0x26>

  errno = EBADF;
 8001148:	f004 ff6c 	bl	8006024 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	2209      	movs	r2, #9
 8001150:	601a      	str	r2, [r3, #0]
  return -1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800116a:	f004 ff5b 	bl	8006024 <__errno>
 800116e:	4603      	mov	r3, r0
 8001170:	2209      	movs	r2, #9
 8001172:	601a      	str	r2, [r3, #0]
  return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_read>:

int _read(int fd, char* ptr, int len) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d110      	bne.n	80011b4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <_read+0x4c>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	2201      	movs	r2, #1
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	f003 fed9 	bl	8004f54 <HAL_UART_Receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <_read+0x30>
      return 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e008      	b.n	80011c2 <_read+0x42>
    else
      return EIO;
 80011b0:	2305      	movs	r3, #5
 80011b2:	e006      	b.n	80011c2 <_read+0x42>
  }
  errno = EBADF;
 80011b4:	f004 ff36 	bl	8006024 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2209      	movs	r2, #9
 80011bc:	601a      	str	r2, [r3, #0]
  return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000022c 	.word	0x2000022c

080011d0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db08      	blt.n	80011f2 <_fstat+0x22>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	dc05      	bgt.n	80011f2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ec:	605a      	str	r2, [r3, #4]
    return 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e005      	b.n	80011fe <_fstat+0x2e>
  }

  errno = EBADF;
 80011f2:	f004 ff17 	bl	8006024 <__errno>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2209      	movs	r2, #9
 80011fa:	601a      	str	r2, [r3, #0]
  return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_MspInit+0x44>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_MspInit+0x44>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6613      	str	r3, [r2, #96]	; 0x60
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_MspInit+0x44>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_MspInit+0x44>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_MspInit+0x44>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6593      	str	r3, [r2, #88]	; 0x58
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_MspInit+0x44>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_ADC_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12c      	bne.n	80012cc <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_ADC_MspInit+0x88>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_ADC_MspInit+0x88>)
 8001278:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_ADC_MspInit+0x88>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_ADC_MspInit+0x88>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <HAL_ADC_MspInit+0x88>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_ADC_MspInit+0x88>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012a2:	2320      	movs	r3, #32
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012a6:	230b      	movs	r3, #11
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f001 fe3e 	bl	8002f38 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2012      	movs	r0, #18
 80012c2:	f001 fd84 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012c6:	2012      	movs	r0, #18
 80012c8:	f001 fd9d 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	50040100 	.word	0x50040100
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b090      	sub	sp, #64	; 0x40
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2234      	movs	r2, #52	; 0x34
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fed5 	bl	800609c <memset>
  if(hrtc->Instance==RTC)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_RTC_MspInit+0x78>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d127      	bne.n	800134c <HAL_RTC_MspInit+0x70>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001300:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fe97 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001318:	f7ff fe48 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_RTC_MspInit+0x7c>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_RTC_MspInit+0x7c>)
 8001324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2003      	movs	r0, #3
 8001332:	f001 fd4c 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001336:	2003      	movs	r0, #3
 8001338:	f001 fd65 	bl	8002e06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2101      	movs	r1, #1
 8001340:	2029      	movs	r0, #41	; 0x29
 8001342:	f001 fd44 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001346:	2029      	movs	r0, #41	; 0x29
 8001348:	f001 fd5d 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3740      	adds	r7, #64	; 0x40
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40002800 	.word	0x40002800
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b096      	sub	sp, #88	; 0x58
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2234      	movs	r2, #52	; 0x34
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f004 fe8d 	bl	800609c <memset>
  if(huart->Instance==USART2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a2c      	ldr	r2, [pc, #176]	; (8001438 <HAL_UART_MspInit+0xdc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d150      	bne.n	800142e <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800138c:	2302      	movs	r3, #2
 800138e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fe51 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013a4:	f7ff fe02 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_UART_MspInit+0xe0>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_UART_MspInit+0xe0>)
 80013ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b2:	6593      	str	r3, [r2, #88]	; 0x58
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <HAL_UART_MspInit+0xe0>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <HAL_UART_MspInit+0xe0>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_UART_MspInit+0xe0>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_UART_MspInit+0xe0>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80013d8:	2304      	movs	r3, #4
 80013da:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e8:	2307      	movs	r3, #7
 80013ea:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f001 fd9f 	bl	8002f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80013fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800140c:	2303      	movs	r3, #3
 800140e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f001 fd8d 	bl	8002f38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2026      	movs	r0, #38	; 0x26
 8001424:	f001 fcd3 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001428:	2026      	movs	r0, #38	; 0x26
 800142a:	f001 fcec 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3758      	adds	r7, #88	; 0x58
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004400 	.word	0x40004400
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f8d6 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <RTC_WKUP_IRQHandler+0x10>)
 800149a:	f003 fc45 	bl	8004d28 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000017c 	.word	0x2000017c

080014a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <ADC1_2_IRQHandler+0x10>)
 80014ae:	f000 fc61 	bl	8001d74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200000f0 	.word	0x200000f0

080014bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014c2:	480f      	ldr	r0, [pc, #60]	; (8001500 <USART2_IRQHandler+0x44>)
 80014c4:	f003 fe18 	bl	80050f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  uint8_t ch;
  ch = getchar();
 80014c8:	f004 fdb2 	bl	8006030 <getchar>
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  if (enqueue(&rx_queue,ch)) {
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4619      	mov	r1, r3
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <USART2_IRQHandler+0x48>)
 80014d6:	f7ff fd6e 	bl	8000fb6 <enqueue>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <USART2_IRQHandler+0x34>
    dequeue(&rx_queue);
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <USART2_IRQHandler+0x48>)
 80014e2:	f7ff fda1 	bl	8001028 <dequeue>
    enqueue(&rx_queue,ch);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4806      	ldr	r0, [pc, #24]	; (8001504 <USART2_IRQHandler+0x48>)
 80014ec:	f7ff fd63 	bl	8000fb6 <enqueue>
  if(buf.head == (MAX_BUF-1)){
    buf.head = 0;
  }else{
    buf.head++;
    }*/
  HAL_UART_IRQHandler(&huart2);
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <USART2_IRQHandler+0x44>)
 80014f2:	f003 fe01 	bl	80050f8 <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200001a8 	.word	0x200001a8
 8001504:	20000154 	.word	0x20000154

08001508 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <RTC_Alarm_IRQHandler+0x10>)
 800150e:	f003 fa6d 	bl	80049ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000017c 	.word	0x2000017c

0800151c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001544:	f7ff ffea 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <LoopForever+0x6>)
  ldr r1, =_edata
 800154a:	490d      	ldr	r1, [pc, #52]	; (8001580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <LoopForever+0xe>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001560:	4c0a      	ldr	r4, [pc, #40]	; (800158c <LoopForever+0x16>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156e:	f004 fd71 	bl	8006054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001572:	f7ff f84d 	bl	8000610 <main>

08001576 <LoopForever>:

LoopForever:
    b LoopForever
 8001576:	e7fe      	b.n	8001576 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001578:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001584:	0800798c 	.word	0x0800798c
  ldr r2, =_sbss
 8001588:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800158c:	20000244 	.word	0x20000244

08001590 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <COMP_IRQHandler>

08001592 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f001 fc0b 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f80e 	bl	80015c4 <HAL_InitTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	e001      	b.n	80015b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b4:	f7ff fe28 	bl	8001208 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_InitTick+0x6c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d023      	beq.n	8001620 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_InitTick+0x70>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_InitTick+0x6c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fc17 	bl	8002e22 <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10f      	bne.n	800161a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d809      	bhi.n	8001614 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f001 fbe1 	bl	8002dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_InitTick+0x74>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e007      	b.n	8001624 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e004      	b.n	8001624 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e001      	b.n	8001624 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000058 	.word	0x20000058
 8001634:	20000050 	.word	0x20000050
 8001638:	20000054 	.word	0x20000054

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000058 	.word	0x20000058
 8001660:	20000230 	.word	0x20000230

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000230 	.word	0x20000230

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000058 	.word	0x20000058

080016c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	609a      	str	r2, [r3, #8]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3360      	adds	r3, #96	; 0x60
 800173e:	461a      	mov	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <LL_ADC_SetOffset+0x44>)
 800174e:	4013      	ands	r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	4313      	orrs	r3, r2
 800175c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001764:	bf00      	nop
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	03fff000 	.word	0x03fff000

08001774 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3360      	adds	r3, #96	; 0x60
 8001782:	461a      	mov	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3360      	adds	r3, #96	; 0x60
 80017b0:	461a      	mov	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	615a      	str	r2, [r3, #20]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001822:	b480      	push	{r7}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3330      	adds	r3, #48	; 0x30
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	211f      	movs	r1, #31
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	401a      	ands	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0e9b      	lsrs	r3, r3, #26
 800185a:	f003 011f 	and.w	r1, r3, #31
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3314      	adds	r3, #20
 80018b0:	461a      	mov	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	0e5b      	lsrs	r3, r3, #25
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	0d1b      	lsrs	r3, r3, #20
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2107      	movs	r1, #7
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	401a      	ands	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	0d1b      	lsrs	r3, r3, #20
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0318 	and.w	r3, r3, #24
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <LL_ADC_SetChannelSingleDiff+0x44>)
 800191c:	40d9      	lsrs	r1, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	400b      	ands	r3, r1
 8001922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	0007ffff 	.word	0x0007ffff

08001940 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 031f 	and.w	r3, r3, #31
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001988:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6093      	str	r3, [r2, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b0:	d101      	bne.n	80019b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a00:	d101      	bne.n	8001a06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a28:	f043 0202 	orr.w	r2, r3, #2
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <LL_ADC_IsEnabled+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_ADC_IsEnabled+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_IsDisableOngoing+0x18>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_IsDisableOngoing+0x1a>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d101      	bne.n	8001aa0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d101      	bne.n	8001ac6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e131      	b.n	8001d52 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fba7 	bl	8001250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff41 	bl	800199c <LL_ADC_IsDeepPowerDownEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff27 	bl	8001978 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff5c 	bl	80019ec <LL_ADC_IsInternalRegulatorEnabled>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff40 	bl	80019c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b44:	4b85      	ldr	r3, [pc, #532]	; (8001d5c <HAL_ADC_Init+0x288>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	4a85      	ldr	r2, [pc, #532]	; (8001d60 <HAL_ADC_Init+0x28c>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b58:	e002      	b.n	8001b60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff3e 	bl	80019ec <LL_ADC_IsInternalRegulatorEnabled>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff76 	bl	8001a88 <LL_ADC_REG_IsConversionOngoing>
 8001b9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80ca 	bne.w	8001d40 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80c6 	bne.w	8001d40 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bbc:	f043 0202 	orr.w	r2, r3, #2
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff37 	bl	8001a3c <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d110      	bne.n	8001bf6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd4:	4863      	ldr	r0, [pc, #396]	; (8001d64 <HAL_ADC_Init+0x290>)
 8001bd6:	f7ff ff31 	bl	8001a3c <LL_ADC_IsEnabled>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4862      	ldr	r0, [pc, #392]	; (8001d68 <HAL_ADC_Init+0x294>)
 8001bde:	f7ff ff2d 	bl	8001a3c <LL_ADC_IsEnabled>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4323      	orrs	r3, r4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	485e      	ldr	r0, [pc, #376]	; (8001d6c <HAL_ADC_Init+0x298>)
 8001bf2:	f7ff fd67 	bl	80016c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e5b      	ldrb	r3, [r3, #25]
 8001bfa:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c00:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c06:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c0c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c14:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d106      	bne.n	8001c32 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	045b      	lsls	r3, r3, #17
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_ADC_Init+0x29c>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	69b9      	ldr	r1, [r7, #24]
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff0e 	bl	8001a88 <LL_ADC_REG_IsConversionOngoing>
 8001c6c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff1b 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 8001c78:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d13d      	bne.n	8001cfc <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d13a      	bne.n	8001cfc <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c8a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c92:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ca2:	f023 0302 	bic.w	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d118      	bne.n	8001cec <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cd6:	4311      	orrs	r1, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	e007      	b.n	8001cfc <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10c      	bne.n	8001d1e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f023 010f 	bic.w	r1, r3, #15
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	1e5a      	subs	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1c:	e007      	b.n	8001d2e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 020f 	bic.w	r2, r2, #15
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f023 0303 	bic.w	r3, r3, #3
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
 8001d3e:	e007      	b.n	8001d50 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f043 0210 	orr.w	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d50:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000050 	.word	0x20000050
 8001d60:	053e2d63 	.word	0x053e2d63
 8001d64:	50040000 	.word	0x50040000
 8001d68:	50040100 	.word	0x50040100
 8001d6c:	50040300 	.word	0x50040300
 8001d70:	fff0c007 	.word	0xfff0c007

08001d74 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d90:	4882      	ldr	r0, [pc, #520]	; (8001f9c <HAL_ADC_IRQHandler+0x228>)
 8001d92:	f7ff fdd5 	bl	8001940 <LL_ADC_GetMultimode>
 8001d96:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d017      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x5e>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 ff1d 	bl	8002c04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <HAL_ADC_IRQHandler+0x72>
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8083 	beq.w	8001ef8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d07d      	beq.n	8001ef8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fcef 	bl	80017fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d062      	beq.n	8001eea <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <HAL_ADC_IRQHandler+0x22c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d002      	beq.n	8001e34 <HAL_ADC_IRQHandler+0xc0>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	e000      	b.n	8001e36 <HAL_ADC_IRQHandler+0xc2>
 8001e34:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_ADC_IRQHandler+0x230>)
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d008      	beq.n	8001e50 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d002      	beq.n	8001e50 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b09      	cmp	r3, #9
 8001e4e:	d104      	bne.n	8001e5a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	e00c      	b.n	8001e74 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_ADC_IRQHandler+0x22c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d002      	beq.n	8001e6a <HAL_ADC_IRQHandler+0xf6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	e000      	b.n	8001e6c <HAL_ADC_IRQHandler+0xf8>
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <HAL_ADC_IRQHandler+0x230>)
 8001e6c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d135      	bne.n	8001eea <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d12e      	bne.n	8001eea <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fdf9 	bl	8001a88 <LL_ADC_REG_IsConversionOngoing>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11a      	bne.n	8001ed2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 020c 	bic.w	r2, r2, #12
 8001eaa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d112      	bne.n	8001eea <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
 8001ed0:	e00b      	b.n	8001eea <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f043 0210 	orr.w	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f95c 	bl	80021a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <HAL_ADC_IRQHandler+0x198>
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10b      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 809f 	beq.w	8002056 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8099 	beq.w	8002056 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fc9a 	bl	800187a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f46:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fc55 	bl	80017fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f52:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_ADC_IRQHandler+0x22c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d002      	beq.n	8001f64 <HAL_ADC_IRQHandler+0x1f0>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	e000      	b.n	8001f66 <HAL_ADC_IRQHandler+0x1f2>
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_ADC_IRQHandler+0x230>)
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d008      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d002      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b07      	cmp	r3, #7
 8001f7e:	d104      	bne.n	8001f8a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	e013      	b.n	8001fb2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_ADC_IRQHandler+0x22c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x234>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	e007      	b.n	8001faa <HAL_ADC_IRQHandler+0x236>
 8001f9a:	bf00      	nop
 8001f9c:	50040300 	.word	0x50040300
 8001fa0:	50040100 	.word	0x50040100
 8001fa4:	50040000 	.word	0x50040000
 8001fa8:	4b7d      	ldr	r3, [pc, #500]	; (80021a0 <HAL_ADC_IRQHandler+0x42c>)
 8001faa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d047      	beq.n	8002048 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0x25e>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03f      	beq.n	8002048 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d13a      	bne.n	8002048 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d133      	bne.n	8002048 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12e      	bne.n	8002048 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd5d 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11a      	bne.n	8002030 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002008:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d112      	bne.n	8002048 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
 800202e:	e00b      	b.n	8002048 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fdb3 	bl	8002bb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2260      	movs	r2, #96	; 0x60
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	d011      	beq.n	8002084 <HAL_ADC_IRQHandler+0x310>
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8a0 	bl	80021bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x340>
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fd99 	bl	8002bdc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x370>
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fd8b 	bl	8002bf0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d036      	beq.n	800215c <HAL_ADC_IRQHandler+0x3e8>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d031      	beq.n	800215c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002100:	2301      	movs	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
 8002104:	e014      	b.n	8002130 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800210c:	4825      	ldr	r0, [pc, #148]	; (80021a4 <HAL_ADC_IRQHandler+0x430>)
 800210e:	f7ff fc25 	bl	800195c <LL_ADC_GetMultiDMATransfer>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00b      	beq.n	8002130 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002118:	2301      	movs	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
 800211c:	e008      	b.n	8002130 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800212c:	2301      	movs	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	2b01      	cmp	r3, #1
 8002134:	d10e      	bne.n	8002154 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f043 0202 	orr.w	r2, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f83e 	bl	80021d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2210      	movs	r2, #16
 800215a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d018      	beq.n	8002198 <HAL_ADC_IRQHandler+0x424>
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f043 0208 	orr.w	r2, r3, #8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002190:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fd18 	bl	8002bc8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	50040000 	.word	0x50040000
 80021a4:	50040300 	.word	0x50040300

080021a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0b6      	sub	sp, #216	; 0xd8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x22>
 8002202:	2302      	movs	r3, #2
 8002204:	e3d5      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x7ce>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fc38 	bl	8001a88 <LL_ADC_REG_IsConversionOngoing>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 83ba 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d824      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	3b02      	subs	r3, #2
 800222e:	2b03      	cmp	r3, #3
 8002230:	d81b      	bhi.n	800226a <HAL_ADC_ConfigChannel+0x86>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <HAL_ADC_ConfigChannel+0x54>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	08002251 	.word	0x08002251
 8002240:	08002259 	.word	0x08002259
 8002244:	08002261 	.word	0x08002261
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	220c      	movs	r2, #12
 800224c:	605a      	str	r2, [r3, #4]
          break;
 800224e:	e011      	b.n	8002274 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2212      	movs	r2, #18
 8002254:	605a      	str	r2, [r3, #4]
          break;
 8002256:	e00d      	b.n	8002274 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2218      	movs	r2, #24
 800225c:	605a      	str	r2, [r3, #4]
          break;
 800225e:	e009      	b.n	8002274 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002266:	605a      	str	r2, [r3, #4]
          break;
 8002268:	e004      	b.n	8002274 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2206      	movs	r2, #6
 800226e:	605a      	str	r2, [r3, #4]
          break;
 8002270:	e000      	b.n	8002274 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002272:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	f7ff face 	bl	8001822 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fbfc 	bl	8001a88 <LL_ADC_REG_IsConversionOngoing>
 8002290:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fc08 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 800229e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 81c1 	bne.w	800262e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 81bc 	bne.w	800262e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022be:	d10f      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7ff fae8 	bl	80018a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa7c 	bl	80017d6 <LL_ADC_SetSamplingTimeCommonConfig>
 80022de:	e00e      	b.n	80022fe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	461a      	mov	r2, r3
 80022ee:	f7ff fad7 	bl	80018a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fa6c 	bl	80017d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d00a      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6919      	ldr	r1, [r3, #16]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002330:	f7ff f9fc 	bl	800172c <LL_ADC_SetOffset>
 8002334:	e17b      	b.n	800262e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fa19 	bl	8001774 <LL_ADC_GetOffsetChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x17e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fa0e 	bl	8001774 <LL_ADC_GetOffsetChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	e01e      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x1bc>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fa03 	bl	8001774 <LL_ADC_GetOffsetChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1b0>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e004      	b.n	800239e <HAL_ADC_ConfigChannel+0x1ba>
  return __builtin_clz(value);
 8002394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d4>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	e018      	b.n	80023ea <HAL_ADC_ConfigChannel+0x206>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e004      	b.n	80023ea <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80023e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f9d2 	bl	80017a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff f9b6 	bl	8001774 <LL_ADC_GetOffsetChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x244>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff f9ab 	bl	8001774 <LL_ADC_GetOffsetChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	f003 021f 	and.w	r2, r3, #31
 8002426:	e01e      	b.n	8002466 <HAL_ADC_ConfigChannel+0x282>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff f9a0 	bl	8001774 <LL_ADC_GetOffsetChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800244a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800244e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e004      	b.n	8002464 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800245a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_ADC_ConfigChannel+0x29a>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	e018      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x2cc>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800249a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e004      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80024a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d106      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f96f 	bl	80017a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2102      	movs	r1, #2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff f953 	bl	8001774 <LL_ADC_GetOffsetChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x30a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2102      	movs	r1, #2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f948 	bl	8001774 <LL_ADC_GetOffsetChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	e01e      	b.n	800252c <HAL_ADC_ConfigChannel+0x348>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2102      	movs	r1, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f93d 	bl	8001774 <LL_ADC_GetOffsetChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800250c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e004      	b.n	800252a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002520:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x360>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	e016      	b.n	8002572 <HAL_ADC_ConfigChannel+0x38e>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800255c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	e004      	b.n	8002572 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002572:	429a      	cmp	r2, r3
 8002574:	d106      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	2102      	movs	r1, #2
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f90e 	bl	80017a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2103      	movs	r1, #3
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f8f2 	bl	8001774 <LL_ADC_GetOffsetChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x3cc>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2103      	movs	r1, #3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f8e7 	bl	8001774 <LL_ADC_GetOffsetChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	f003 021f 	and.w	r2, r3, #31
 80025ae:	e017      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x3fc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2103      	movs	r1, #3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff f8dc 	bl	8001774 <LL_ADC_GetOffsetChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e003      	b.n	80025de <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80025d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x414>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	e011      	b.n	800261c <HAL_ADC_ConfigChannel+0x438>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002608:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800260a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e003      	b.n	800261c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800261c:	429a      	cmp	r2, r3
 800261e:	d106      	bne.n	800262e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2200      	movs	r2, #0
 8002626:	2103      	movs	r1, #3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff f8b9 	bl	80017a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fa02 	bl	8001a3c <LL_ADC_IsEnabled>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 8140 	bne.w	80028c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	461a      	mov	r2, r3
 800264e:	f7ff f953 	bl	80018f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a8f      	ldr	r2, [pc, #572]	; (8002894 <HAL_ADC_ConfigChannel+0x6b0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	f040 8131 	bne.w	80028c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10b      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x4a2>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	3301      	adds	r3, #1
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2b09      	cmp	r3, #9
 800267c:	bf94      	ite	ls
 800267e:	2301      	movls	r3, #1
 8002680:	2300      	movhi	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e019      	b.n	80026ba <HAL_ADC_ConfigChannel+0x4d6>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002696:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800269e:	2320      	movs	r3, #32
 80026a0:	e003      	b.n	80026aa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80026a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	bf94      	ite	ls
 80026b4:	2301      	movls	r3, #1
 80026b6:	2300      	movhi	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d079      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <HAL_ADC_ConfigChannel+0x4f6>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	3301      	adds	r3, #1
 80026d2:	069b      	lsls	r3, r3, #26
 80026d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d8:	e015      	b.n	8002706 <HAL_ADC_ConfigChannel+0x522>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e003      	b.n	80026fe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80026f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	069b      	lsls	r3, r3, #26
 8002702:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x542>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	0e9b      	lsrs	r3, r3, #26
 8002718:	3301      	adds	r3, #1
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	e017      	b.n	8002756 <HAL_ADC_ConfigChannel+0x572>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002736:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e003      	b.n	800274a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	ea42 0103 	orr.w	r1, r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_ADC_ConfigChannel+0x598>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0e9b      	lsrs	r3, r3, #26
 800276c:	3301      	adds	r3, #1
 800276e:	f003 021f 	and.w	r2, r3, #31
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	051b      	lsls	r3, r3, #20
 800277a:	e018      	b.n	80027ae <HAL_ADC_ConfigChannel+0x5ca>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800278e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ae:	430b      	orrs	r3, r1
 80027b0:	e081      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d107      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x5ea>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0e9b      	lsrs	r3, r3, #26
 80027c4:	3301      	adds	r3, #1
 80027c6:	069b      	lsls	r3, r3, #26
 80027c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027cc:	e015      	b.n	80027fa <HAL_ADC_ConfigChannel+0x616>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	069b      	lsls	r3, r3, #26
 80027f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_ADC_ConfigChannel+0x636>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0e9b      	lsrs	r3, r3, #26
 800280c:	3301      	adds	r3, #1
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	e017      	b.n	800284a <HAL_ADC_ConfigChannel+0x666>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	61fb      	str	r3, [r7, #28]
  return result;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e003      	b.n	800283e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	ea42 0103 	orr.w	r1, r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10d      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x692>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	3301      	adds	r3, #1
 8002862:	f003 021f 	and.w	r2, r3, #31
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	3b1e      	subs	r3, #30
 800286e:	051b      	lsls	r3, r3, #20
 8002870:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002874:	e01e      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x6d0>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	613b      	str	r3, [r7, #16]
  return result;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d104      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e006      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x6bc>
 8002892:	bf00      	nop
 8002894:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f003 021f 	and.w	r2, r3, #31
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	3b1e      	subs	r3, #30
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b4:	430b      	orrs	r3, r1
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe fff0 	bl	80018a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_ADC_ConfigChannel+0x7d8>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d06c      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028cc:	483c      	ldr	r0, [pc, #240]	; (80029c0 <HAL_ADC_ConfigChannel+0x7dc>)
 80028ce:	f7fe ff1f 	bl	8001710 <LL_ADC_GetCommonPathInternalCh>
 80028d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a3a      	ldr	r2, [pc, #232]	; (80029c4 <HAL_ADC_ConfigChannel+0x7e0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d127      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d121      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a35      	ldr	r2, [pc, #212]	; (80029c8 <HAL_ADC_ConfigChannel+0x7e4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d157      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028fe:	4619      	mov	r1, r3
 8002900:	482f      	ldr	r0, [pc, #188]	; (80029c0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002902:	f7fe fef2 	bl	80016ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002906:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_ADC_ConfigChannel+0x7e8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <HAL_ADC_ConfigChannel+0x7ec>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002920:	e002      	b.n	8002928 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3b01      	subs	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f9      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800292e:	e03a      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a27      	ldr	r2, [pc, #156]	; (80029d4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d113      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x77e>
 800293a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800293e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d12a      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002958:	4619      	mov	r1, r3
 800295a:	4819      	ldr	r0, [pc, #100]	; (80029c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800295c:	f7fe fec5 	bl	80016ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002960:	e021      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d11c      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800296c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d116      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d111      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800298a:	4619      	mov	r1, r3
 800298c:	480c      	ldr	r0, [pc, #48]	; (80029c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800298e:	f7fe feac 	bl	80016ea <LL_ADC_SetCommonPathInternalCh>
 8002992:	e008      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	f043 0220 	orr.w	r2, r3, #32
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	37d8      	adds	r7, #216	; 0xd8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	80080000 	.word	0x80080000
 80029c0:	50040300 	.word	0x50040300
 80029c4:	c7520000 	.word	0xc7520000
 80029c8:	50040000 	.word	0x50040000
 80029cc:	20000050 	.word	0x20000050
 80029d0:	053e2d63 	.word	0x053e2d63
 80029d4:	cb840000 	.word	0xcb840000
 80029d8:	80000001 	.word	0x80000001

080029dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f83a 	bl	8001a62 <LL_ADC_IsDisableOngoing>
 80029ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff f821 	bl	8001a3c <LL_ADC_IsEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d047      	beq.n	8002a90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d144      	bne.n	8002a90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030d 	and.w	r3, r3, #13
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d10c      	bne.n	8002a2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fffb 	bl	8001a14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2203      	movs	r2, #3
 8002a24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a26:	f7fe fe1d 	bl	8001664 <HAL_GetTick>
 8002a2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a2c:	e029      	b.n	8002a82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0210 	orr.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e023      	b.n	8002a92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a4a:	f7fe fe0b 	bl	8001664 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d914      	bls.n	8002a82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e007      	b.n	8002a92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1dc      	bne.n	8002a4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <LL_ADC_StartCalibration>:
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002aac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_IsCalibrationOnGoing>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ae0:	d101      	bne.n	8002ae6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADCEx_Calibration_Start+0x1c>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e04d      	b.n	8002bac <HAL_ADCEx_Calibration_Start+0xb8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff5f 	bl	80029dc <ADC_Disable>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d136      	bne.n	8002b96 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b30:	f023 0302 	bic.w	r3, r3, #2
 8002b34:	f043 0202 	orr.w	r2, r3, #2
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ffa9 	bl	8002a9a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b48:	e014      	b.n	8002b74 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002b56:	d30d      	bcc.n	8002b74 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f023 0312 	bic.w	r3, r3, #18
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e01b      	b.n	8002bac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ffa7 	bl	8002acc <LL_ADC_IsCalibrationOnGoing>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e2      	bne.n	8002b4a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	f023 0303 	bic.w	r3, r3, #3
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
 8002b94:	e005      	b.n	8002ba2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f043 0210 	orr.w	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60d3      	str	r3, [r2, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <__NVIC_GetPriorityGrouping+0x18>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f003 0307 	and.w	r3, r3, #7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db0b      	blt.n	8002ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4907      	ldr	r1, [pc, #28]	; (8002cb4 <__NVIC_EnableIRQ+0x38>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	; (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d84:	d301      	bcc.n	8002d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <SysTick_Config+0x40>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d92:	210f      	movs	r1, #15
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	f7ff ff8e 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <SysTick_Config+0x40>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <SysTick_Config+0x40>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000e010 	.word	0xe000e010

08002db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff29 	bl	8002c18 <__NVIC_SetPriorityGrouping>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002de0:	f7ff ff3e 	bl	8002c60 <__NVIC_GetPriorityGrouping>
 8002de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f7ff ff8e 	bl	8002d0c <NVIC_EncodePriority>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff5d 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff31 	bl	8002c7c <__NVIC_EnableIRQ>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffa2 	bl	8002d74 <SysTick_Config>
 8002e30:	4603      	mov	r3, r0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d008      	beq.n	8002e64 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2204      	movs	r2, #4
 8002e56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e022      	b.n	8002eaa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 020e 	bic.w	r2, r2, #14
 8002e72:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f003 021c 	and.w	r2, r3, #28
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d005      	beq.n	8002eda <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e029      	b.n	8002f2e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 020e 	bic.w	r2, r2, #14
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 021c 	and.w	r2, r3, #28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2101      	movs	r1, #1
 8002f08:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
    }
  }
  return status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f46:	e14e      	b.n	80031e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8140 	beq.w	80031e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d005      	beq.n	8002f78 <HAL_GPIO_Init+0x40>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d130      	bne.n	8002fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fae:	2201      	movs	r2, #1
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 0201 	and.w	r2, r3, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d017      	beq.n	8003016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d123      	bne.n	800306a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	6939      	ldr	r1, [r7, #16]
 8003066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0203 	and.w	r2, r3, #3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 809a 	beq.w	80031e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ac:	4b55      	ldr	r3, [pc, #340]	; (8003204 <HAL_GPIO_Init+0x2cc>)
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	4a54      	ldr	r2, [pc, #336]	; (8003204 <HAL_GPIO_Init+0x2cc>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6613      	str	r3, [r2, #96]	; 0x60
 80030b8:	4b52      	ldr	r3, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x2cc>)
 80030ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030c4:	4a50      	ldr	r2, [pc, #320]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	3302      	adds	r3, #2
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ee:	d013      	beq.n	8003118 <HAL_GPIO_Init+0x1e0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a46      	ldr	r2, [pc, #280]	; (800320c <HAL_GPIO_Init+0x2d4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00d      	beq.n	8003114 <HAL_GPIO_Init+0x1dc>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a45      	ldr	r2, [pc, #276]	; (8003210 <HAL_GPIO_Init+0x2d8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <HAL_GPIO_Init+0x1d8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a44      	ldr	r2, [pc, #272]	; (8003214 <HAL_GPIO_Init+0x2dc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_GPIO_Init+0x1d4>
 8003108:	2303      	movs	r3, #3
 800310a:	e006      	b.n	800311a <HAL_GPIO_Init+0x1e2>
 800310c:	2307      	movs	r3, #7
 800310e:	e004      	b.n	800311a <HAL_GPIO_Init+0x1e2>
 8003110:	2302      	movs	r3, #2
 8003112:	e002      	b.n	800311a <HAL_GPIO_Init+0x1e2>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <HAL_GPIO_Init+0x1e2>
 8003118:	2300      	movs	r3, #0
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	f002 0203 	and.w	r2, r2, #3
 8003120:	0092      	lsls	r2, r2, #2
 8003122:	4093      	lsls	r3, r2
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800312a:	4937      	ldr	r1, [pc, #220]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	3302      	adds	r3, #2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003138:	4b37      	ldr	r3, [pc, #220]	; (8003218 <HAL_GPIO_Init+0x2e0>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800315c:	4a2e      	ldr	r2, [pc, #184]	; (8003218 <HAL_GPIO_Init+0x2e0>)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_GPIO_Init+0x2e0>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_GPIO_Init+0x2e0>)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800318c:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_GPIO_Init+0x2e0>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031b0:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_GPIO_Init+0x2e0>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_GPIO_Init+0x2e0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031da:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <HAL_GPIO_Init+0x2e0>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3301      	adds	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f47f aea9 	bne.w	8002f48 <HAL_GPIO_Init+0x10>
  }
}
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40021000 	.word	0x40021000
 8003208:	40010000 	.word	0x40010000
 800320c:	48000400 	.word	0x48000400
 8003210:	48000800 	.word	0x48000800
 8003214:	48000c00 	.word	0x48000c00
 8003218:	40010400 	.word	0x40010400

0800321c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800322c:	787b      	ldrb	r3, [r7, #1]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003238:	e002      	b.n	8003240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	041a      	lsls	r2, r3, #16
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43d9      	mvns	r1, r3
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	400b      	ands	r3, r1
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800328a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40007000 	.word	0x40007000

080032a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40007000 	.word	0x40007000

080032bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ca:	d130      	bne.n	800332e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032cc:	4b23      	ldr	r3, [pc, #140]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d8:	d038      	beq.n	800334c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032da:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032e2:	4a1e      	ldr	r2, [pc, #120]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ea:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2232      	movs	r2, #50	; 0x32
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0c9b      	lsrs	r3, r3, #18
 80032fc:	3301      	adds	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003300:	e002      	b.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3b01      	subs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003308:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003314:	d102      	bne.n	800331c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f2      	bne.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003328:	d110      	bne.n	800334c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e00f      	b.n	800334e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d007      	beq.n	800334c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800333c:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003344:	4a05      	ldr	r2, [pc, #20]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40007000 	.word	0x40007000
 8003360:	20000050 	.word	0x20000050
 8003364:	431bde83 	.word	0x431bde83

08003368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f000 bc56 	b.w	8003c28 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800337c:	4ba1      	ldr	r3, [pc, #644]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003386:	4b9f      	ldr	r3, [pc, #636]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80e6 	beq.w	800356a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4c>
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	f040 808d 	bne.w	80034c6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	f040 8089 	bne.w	80034c6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033b4:	4b93      	ldr	r3, [pc, #588]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <HAL_RCC_OscConfig+0x66>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f000 bc2d 	b.w	8003c28 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033d2:	4b8c      	ldr	r3, [pc, #560]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <HAL_RCC_OscConfig+0x80>
 80033de:	4b89      	ldr	r3, [pc, #548]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_OscConfig+0x8c>
 80033e8:	4b86      	ldr	r3, [pc, #536]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d224      	bcs.n	8003442 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fdbf 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f000 bc0d 	b.w	8003c28 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340e:	4b7d      	ldr	r3, [pc, #500]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7c      	ldr	r2, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b7a      	ldr	r3, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	4977      	ldr	r1, [pc, #476]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342c:	4b75      	ldr	r3, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4972      	ldr	r1, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
 8003440:	e025      	b.n	800348e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003442:	4b70      	ldr	r3, [pc, #448]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6f      	ldr	r2, [pc, #444]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6d      	ldr	r3, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	496a      	ldr	r1, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003460:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	4965      	ldr	r1, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd7e 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e3cc      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800348e:	f000 fcb3 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003492:	4602      	mov	r2, r0
 8003494:	4b5b      	ldr	r3, [pc, #364]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	495a      	ldr	r1, [pc, #360]	; (8003608 <HAL_RCC_OscConfig+0x2a0>)
 80034a0:	5ccb      	ldrb	r3, [r1, r3]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a58      	ldr	r2, [pc, #352]	; (800360c <HAL_RCC_OscConfig+0x2a4>)
 80034ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034ae:	4b58      	ldr	r3, [pc, #352]	; (8003610 <HAL_RCC_OscConfig+0x2a8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe f886 	bl	80015c4 <HAL_InitTick>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d052      	beq.n	8003568 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	e3b0      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d032      	beq.n	8003534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ce:	4b4d      	ldr	r3, [pc, #308]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4c      	ldr	r2, [pc, #304]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034da:	f7fe f8c3 	bl	8001664 <HAL_GetTick>
 80034de:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034e2:	f7fe f8bf 	bl	8001664 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e399      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f4:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003500:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a3f      	ldr	r2, [pc, #252]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	493a      	ldr	r1, [pc, #232]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	4935      	ldr	r1, [pc, #212]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
 8003532:	e01a      	b.n	800356a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003534:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a32      	ldr	r2, [pc, #200]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003540:	f7fe f890 	bl	8001664 <HAL_GetTick>
 8003544:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003548:	f7fe f88c 	bl	8001664 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e366      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800355a:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1e0>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d073      	beq.n	800365e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d005      	beq.n	8003588 <HAL_RCC_OscConfig+0x220>
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d10e      	bne.n	80035a0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d063      	beq.n	800365c <HAL_RCC_OscConfig+0x2f4>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d15f      	bne.n	800365c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e343      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x250>
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0x28c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x274>
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a0f      	ldr	r2, [pc, #60]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0x28c>
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a05      	ldr	r2, [pc, #20]	; (8003604 <HAL_RCC_OscConfig+0x29c>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe f832 	bl	8001664 <HAL_GetTick>
 8003600:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003602:	e010      	b.n	8003626 <HAL_RCC_OscConfig+0x2be>
 8003604:	40021000 	.word	0x40021000
 8003608:	08007798 	.word	0x08007798
 800360c:	20000050 	.word	0x20000050
 8003610:	20000054 	.word	0x20000054
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe f826 	bl	8001664 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e300      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003626:	4ba0      	ldr	r3, [pc, #640]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x2ac>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe f816 	bl	8001664 <HAL_GetTick>
 8003638:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe f812 	bl	8001664 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e2ec      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800364e:	4b96      	ldr	r3, [pc, #600]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x2d4>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d060      	beq.n	800372c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d005      	beq.n	800367c <HAL_RCC_OscConfig+0x314>
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	2b0c      	cmp	r3, #12
 8003674:	d119      	bne.n	80036aa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d116      	bne.n	80036aa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800367c:	4b8a      	ldr	r3, [pc, #552]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x32c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e2c9      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b84      	ldr	r3, [pc, #528]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	4981      	ldr	r1, [pc, #516]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a8:	e040      	b.n	800372c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d023      	beq.n	80036fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b2:	4b7d      	ldr	r3, [pc, #500]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a7c      	ldr	r2, [pc, #496]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80036b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fd ffd1 	bl	8001664 <HAL_GetTick>
 80036c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c6:	f7fd ffcd 	bl	8001664 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e2a7      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d8:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b70      	ldr	r3, [pc, #448]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	496d      	ldr	r1, [pc, #436]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
 80036f8:	e018      	b.n	800372c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b6b      	ldr	r3, [pc, #428]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6a      	ldr	r2, [pc, #424]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fd ffad 	bl	8001664 <HAL_GetTick>
 800370a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370e:	f7fd ffa9 	bl	8001664 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e283      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003720:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d07f      	beq.n	8003838 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d05f      	beq.n	8003800 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003746:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	429a      	cmp	r2, r3
 8003754:	d037      	beq.n	80037c6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e25c      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 800377a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377e:	4a4a      	ldr	r2, [pc, #296]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003788:	f7fd ff6c 	bl	8001664 <HAL_GetTick>
 800378c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003790:	f7fd ff68 	bl	8001664 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b11      	cmp	r3, #17
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e242      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80037a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ef      	bne.n	8003790 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80037b0:	4b3d      	ldr	r3, [pc, #244]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	493a      	ldr	r1, [pc, #232]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80037c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037cc:	4a36      	ldr	r2, [pc, #216]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fd ff45 	bl	8001664 <HAL_GetTick>
 80037da:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037de:	f7fd ff41 	bl	8001664 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b11      	cmp	r3, #17
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e21b      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ef      	beq.n	80037de <HAL_RCC_OscConfig+0x476>
 80037fe:	e01b      	b.n	8003838 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003806:	4a28      	ldr	r2, [pc, #160]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd ff28 	bl	8001664 <HAL_GetTick>
 8003814:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003818:	f7fd ff24 	bl	8001664 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b11      	cmp	r3, #17
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e1fe      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ef      	bne.n	8003818 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80c1 	beq.w	80039c8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10e      	bne.n	8003876 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 800385e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003862:	6593      	str	r3, [r2, #88]	; 0x58
 8003864:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCC_OscConfig+0x540>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <HAL_RCC_OscConfig+0x544>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11c      	bne.n	80038bc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_RCC_OscConfig+0x544>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a09      	ldr	r2, [pc, #36]	; (80038ac <HAL_RCC_OscConfig+0x544>)
 8003888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388e:	f7fd fee9 	bl	8001664 <HAL_GetTick>
 8003892:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003894:	e00c      	b.n	80038b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003896:	f7fd fee5 	bl	8001664 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d905      	bls.n	80038b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1bf      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b0:	4bb1      	ldr	r3, [pc, #708]	; (8003b78 <HAL_RCC_OscConfig+0x810>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ec      	beq.n	8003896 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d02c      	beq.n	8003922 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80038c8:	4bac      	ldr	r3, [pc, #688]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	49a8      	ldr	r1, [pc, #672]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038ee:	4ba3      	ldr	r3, [pc, #652]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	4aa1      	ldr	r2, [pc, #644]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038fe:	4b9f      	ldr	r3, [pc, #636]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	4a9d      	ldr	r2, [pc, #628]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390e:	e018      	b.n	8003942 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003910:	4b9a      	ldr	r3, [pc, #616]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	4a99      	ldr	r2, [pc, #612]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003920:	e00f      	b.n	8003942 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003922:	4b96      	ldr	r3, [pc, #600]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	4a94      	ldr	r2, [pc, #592]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003932:	4b92      	ldr	r3, [pc, #584]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fd fe8b 	bl	8001664 <HAL_GetTick>
 800394e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fd fe87 	bl	8001664 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e15f      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003968:	4b84      	ldr	r3, [pc, #528]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ed      	beq.n	8003952 <HAL_RCC_OscConfig+0x5ea>
 8003976:	e01d      	b.n	80039b4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fd fe74 	bl	8001664 <HAL_GetTick>
 800397c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fd fe70 	bl	8001664 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e148      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003996:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ed      	bne.n	8003980 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80039a4:	4b75      	ldr	r3, [pc, #468]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	4a74      	ldr	r2, [pc, #464]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80039ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039bc:	4b6f      	ldr	r3, [pc, #444]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	4a6e      	ldr	r2, [pc, #440]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80039c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d03c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01c      	beq.n	8003a16 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039dc:	4b67      	ldr	r3, [pc, #412]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80039de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e2:	4a66      	ldr	r2, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fd fe3a 	bl	8001664 <HAL_GetTick>
 80039f0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f4:	f7fd fe36 	bl	8001664 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e110      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a06:	4b5d      	ldr	r3, [pc, #372]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ef      	beq.n	80039f4 <HAL_RCC_OscConfig+0x68c>
 8003a14:	e01b      	b.n	8003a4e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a16:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a1c:	4a57      	ldr	r2, [pc, #348]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fd fe1d 	bl	8001664 <HAL_GetTick>
 8003a2a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a2e:	f7fd fe19 	bl	8001664 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0f3      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a40:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ef      	bne.n	8003a2e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80e7 	beq.w	8003c26 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	f040 80b7 	bne.w	8003bd0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a62:	4b46      	ldr	r3, [pc, #280]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0203 	and.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d124      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	3b01      	subs	r3, #1
 8003a82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d11b      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d113      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d109      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d061      	beq.n	8003b84 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d056      	beq.n	8003b74 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ad2:	f7fd fdc7 	bl	8001664 <HAL_GetTick>
 8003ad6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fd fdc3 	bl	8001664 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e09d      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aec:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af8:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_OscConfig+0x818>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b08:	3a01      	subs	r2, #1
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	4311      	orrs	r1, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b12:	0212      	lsls	r2, r2, #8
 8003b14:	4311      	orrs	r1, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b1a:	0852      	lsrs	r2, r2, #1
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	0552      	lsls	r2, r2, #21
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b26:	0852      	lsrs	r2, r2, #1
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	0652      	lsls	r2, r2, #25
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	4913      	ldr	r1, [pc, #76]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b4c:	f7fd fd8a 	bl	8001664 <HAL_GetTick>
 8003b50:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd fd86 	bl	8001664 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e060      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_OscConfig+0x814>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b72:	e058      	b.n	8003c26 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e057      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d14a      	bne.n	8003c26 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ba8:	f7fd fd5c 	bl	8001664 <HAL_GetTick>
 8003bac:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fd fd58 	bl	8001664 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e032      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x848>
 8003bce:	e02a      	b.n	8003c26 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d025      	beq.n	8003c22 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003be2:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003be8:	f023 0303 	bic.w	r3, r3, #3
 8003bec:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	4a0f      	ldr	r2, [pc, #60]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003bf4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003bf8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fd33 	bl	8001664 <HAL_GetTick>
 8003bfe:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fd fd2f 	bl	8001664 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e009      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCC_OscConfig+0x8c8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x89a>
 8003c20:	e001      	b.n	8003c26 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3728      	adds	r7, #40	; 0x28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000

08003c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0c8      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c48:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d910      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 0207 	bic.w	r2, r3, #7
 8003c5e:	4961      	ldr	r1, [pc, #388]	; (8003de4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b5f      	ldr	r3, [pc, #380]	; (8003de4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b0      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d04c      	beq.n	8003d1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8c:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d121      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e09e      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d115      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e092      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cbc:	4b4a      	ldr	r3, [pc, #296]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e086      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e07e      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cdc:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 0203 	bic.w	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	493f      	ldr	r1, [pc, #252]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cee:	f7fd fcb9 	bl	8001664 <HAL_GetTick>
 8003cf2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf6:	f7fd fcb5 	bl	8001664 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e066      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0c:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 020c 	and.w	r2, r3, #12
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d1eb      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	492c      	ldr	r1, [pc, #176]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d210      	bcs.n	8003d6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 0207 	bic.w	r2, r3, #7
 8003d52:	4924      	ldr	r1, [pc, #144]	; (8003de4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e036      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4918      	ldr	r1, [pc, #96]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4910      	ldr	r1, [pc, #64]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003daa:	f000 f825 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <HAL_RCC_ClockConfig+0x1b4>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	490c      	ldr	r1, [pc, #48]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	5ccb      	ldrb	r3, [r1, r3]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <HAL_RCC_ClockConfig+0x1c0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd fbf8 	bl	80015c4 <HAL_InitTick>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dd8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40022000 	.word	0x40022000
 8003de8:	40021000 	.word	0x40021000
 8003dec:	08007798 	.word	0x08007798
 8003df0:	20000050 	.word	0x20000050
 8003df4:	20000054 	.word	0x20000054

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e06:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e10:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x34>
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d121      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d11e      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e2c:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e38:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	e005      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e48:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e54:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10d      	bne.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d102      	bne.n	8003e76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e004      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d134      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e86:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d003      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xac>
 8003e9c:	e005      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea0:	617b      	str	r3, [r7, #20]
      break;
 8003ea2:	e005      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ea6:	617b      	str	r3, [r7, #20]
      break;
 8003ea8:	e002      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	617b      	str	r3, [r7, #20]
      break;
 8003eae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	3301      	adds	r3, #1
 8003ebc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	fb02 f203 	mul.w	r2, r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	0e5b      	lsrs	r3, r3, #25
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	080077b0 	.word	0x080077b0
 8003f08:	00f42400 	.word	0x00f42400
 8003f0c:	007a1200 	.word	0x007a1200

08003f10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000050 	.word	0x20000050

08003f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f2c:	f7ff fff0 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4904      	ldr	r1, [pc, #16]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	080077a8 	.word	0x080077a8

08003f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f58:	f7ff ffda 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0adb      	lsrs	r3, r3, #11
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4904      	ldr	r1, [pc, #16]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	080077a8 	.word	0x080077a8

08003f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f98:	f7ff f982 	bl	80032a0 <HAL_PWREx_GetVoltageRange>
 8003f9c:	6178      	str	r0, [r7, #20]
 8003f9e:	e014      	b.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	4a24      	ldr	r2, [pc, #144]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6593      	str	r3, [r2, #88]	; 0x58
 8003fac:	4b22      	ldr	r3, [pc, #136]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fb8:	f7ff f972 	bl	80032a0 <HAL_PWREx_GetVoltageRange>
 8003fbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd0:	d10b      	bne.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d919      	bls.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2ba0      	cmp	r3, #160	; 0xa0
 8003fdc:	d902      	bls.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fde:	2302      	movs	r3, #2
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e013      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e010      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d902      	bls.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e00a      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d102      	bne.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e004      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b70      	cmp	r3, #112	; 0x70
 8004006:	d101      	bne.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004008:	2301      	movs	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 0207 	bic.w	r2, r3, #7
 8004014:	4909      	ldr	r1, [pc, #36]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	40022000 	.word	0x40022000

08004040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004048:	2300      	movs	r3, #0
 800404a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800404c:	2300      	movs	r3, #0
 800404e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 809e 	beq.w	800419a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004062:	4b46      	ldr	r3, [pc, #280]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004078:	4b40      	ldr	r3, [pc, #256]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	4a3f      	ldr	r2, [pc, #252]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004082:	6593      	str	r3, [r2, #88]	; 0x58
 8004084:	4b3d      	ldr	r3, [pc, #244]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004090:	2301      	movs	r3, #1
 8004092:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004094:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a39      	ldr	r2, [pc, #228]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800409a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040a0:	f7fd fae0 	bl	8001664 <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a6:	e009      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a8:	f7fd fadc 	bl	8001664 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d902      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	74fb      	strb	r3, [r7, #19]
        break;
 80040ba:	e005      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040bc:	4b30      	ldr	r3, [pc, #192]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ef      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d15a      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040ce:	4b2b      	ldr	r3, [pc, #172]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01e      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d019      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040f6:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	4a1f      	ldr	r2, [pc, #124]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800410e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004116:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d016      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fd fa9c 	bl	8001664 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412e:	e00b      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fd fa98 	bl	8001664 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d902      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	74fb      	strb	r3, [r7, #19]
            break;
 8004146:	e006      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ec      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4904      	ldr	r1, [pc, #16]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004172:	e009      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	74bb      	strb	r3, [r7, #18]
 8004178:	e006      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
 8004180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004188:	7c7b      	ldrb	r3, [r7, #17]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d105      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418e:	4b6e      	ldr	r3, [pc, #440]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	4a6d      	ldr	r2, [pc, #436]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004198:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a6:	4b68      	ldr	r3, [pc, #416]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f023 0203 	bic.w	r2, r3, #3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4964      	ldr	r1, [pc, #400]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c8:	4b5f      	ldr	r3, [pc, #380]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f023 020c 	bic.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	495c      	ldr	r1, [pc, #368]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ea:	4b57      	ldr	r3, [pc, #348]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4953      	ldr	r1, [pc, #332]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800420c:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	494b      	ldr	r1, [pc, #300]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800422e:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	4942      	ldr	r1, [pc, #264]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004250:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	493a      	ldr	r1, [pc, #232]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004272:	4b35      	ldr	r3, [pc, #212]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4931      	ldr	r1, [pc, #196]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	4929      	ldr	r1, [pc, #164]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4920      	ldr	r1, [pc, #128]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d015      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d8:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	4918      	ldr	r1, [pc, #96]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f6:	d105      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a12      	ldr	r2, [pc, #72]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004302:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d015      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004310:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	490a      	ldr	r1, [pc, #40]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800432e:	d105      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800433c:	7cbb      	ldrb	r3, [r7, #18]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000

0800434c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004356:	f043 0304 	orr.w	r3, r3, #4
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d073      	beq.n	8004466 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc ffa2 	bl	80012dc <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800439e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	22ca      	movs	r2, #202	; 0xca
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2253      	movs	r2, #83	; 0x53
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fb6b 	bl	8004a94 <RTC_EnterInitMode>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d14e      	bne.n	8004466 <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80043d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043da:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6999      	ldr	r1, [r3, #24]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6912      	ldr	r2, [r2, #16]
 8004402:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6919      	ldr	r1, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	041a      	lsls	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fb71 	bl	8004b00 <RTC_ExitInitMode>
 800441e:	4603      	mov	r3, r0
 8004420:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11e      	bne.n	8004466 <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8004436:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6999      	ldr	r1, [r3, #24]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	22ff      	movs	r2, #255	; 0xff
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_RTC_SetTime+0x1a>
 8004486:	2302      	movs	r3, #2
 8004488:	e08b      	b.n	80045a2 <HAL_RTC_SetTime+0x132>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	22ca      	movs	r2, #202	; 0xca
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2253      	movs	r2, #83	; 0x53
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 faf2 	bl	8004a94 <RTC_EnterInitMode>
 80044b0:	4603      	mov	r3, r0
 80044b2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d163      	bne.n	8004582 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d126      	bne.n	800450e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2200      	movs	r2, #0
 80044d2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fb4f 	bl	8004b7c <RTC_ByteToBcd2>
 80044de:	4603      	mov	r3, r0
 80044e0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb48 	bl	8004b7c <RTC_ByteToBcd2>
 80044ec:	4603      	mov	r3, r0
 80044ee:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044f0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	789b      	ldrb	r3, [r3, #2]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fb40 	bl	8004b7c <RTC_ByteToBcd2>
 80044fc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044fe:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	78db      	ldrb	r3, [r3, #3]
 8004506:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e018      	b.n	8004540 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2200      	movs	r2, #0
 8004520:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800452e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004534:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	78db      	ldrb	r3, [r3, #3]
 800453a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800454a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800454e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800455e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6999      	ldr	r1, [r3, #24]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	431a      	orrs	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fac1 	bl	8004b00 <RTC_ExitInitMode>
 800457e:	4603      	mov	r3, r0
 8004580:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	22ff      	movs	r2, #255	; 0xff
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d103      	bne.n	8004598 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd90      	pop	{r4, r7, pc}

080045aa <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80045d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	0d9b      	lsrs	r3, r3, #22
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11a      	bne.n	8004658 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fac8 	bl	8004bbc <RTC_Bcd2ToByte>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fabf 	bl	8004bbc <RTC_Bcd2ToByte>
 800463e:	4603      	mov	r3, r0
 8004640:	461a      	mov	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	789b      	ldrb	r3, [r3, #2]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fab6 	bl	8004bbc <RTC_Bcd2ToByte>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004662:	b590      	push	{r4, r7, lr}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_RTC_SetDate+0x1a>
 8004678:	2302      	movs	r3, #2
 800467a:	e075      	b.n	8004768 <HAL_RTC_SetDate+0x106>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10e      	bne.n	80046b0 <HAL_RTC_SetDate+0x4e>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	330a      	adds	r3, #10
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11c      	bne.n	80046f0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	78db      	ldrb	r3, [r3, #3]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fa5e 	bl	8004b7c <RTC_ByteToBcd2>
 80046c0:	4603      	mov	r3, r0
 80046c2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fa57 	bl	8004b7c <RTC_ByteToBcd2>
 80046ce:	4603      	mov	r3, r0
 80046d0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046d2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	789b      	ldrb	r3, [r3, #2]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fa4f 	bl	8004b7c <RTC_ByteToBcd2>
 80046de:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046e0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	e00e      	b.n	800470e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	78db      	ldrb	r3, [r3, #3]
 80046f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046fc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004702:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	22ca      	movs	r2, #202	; 0xca
 8004714:	625a      	str	r2, [r3, #36]	; 0x24
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2253      	movs	r2, #83	; 0x53
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f9b8 	bl	8004a94 <RTC_EnterInitMode>
 8004724:	4603      	mov	r3, r0
 8004726:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004738:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800473c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f9de 	bl	8004b00 <RTC_ExitInitMode>
 8004744:	4603      	mov	r3, r0
 8004746:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	22ff      	movs	r2, #255	; 0xff
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8004766:	7cfb      	ldrb	r3, [r7, #19]
}
 8004768:	4618      	mov	r0, r3
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd90      	pop	{r4, r7, pc}

08004770 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004786:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800478a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	0c1b      	lsrs	r3, r3, #16
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	0b5b      	lsrs	r3, r3, #13
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11a      	bne.n	8004800 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	78db      	ldrb	r3, [r3, #3]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f9f4 	bl	8004bbc <RTC_Bcd2ToByte>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f9eb 	bl	8004bbc <RTC_Bcd2ToByte>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	789b      	ldrb	r3, [r3, #2]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f9e2 	bl	8004bbc <RTC_Bcd2ToByte>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_RTC_SetAlarm_IT+0x1a>
 8004822:	2302      	movs	r3, #2
 8004824:	e0db      	b.n	80049de <HAL_RTC_SetAlarm_IT+0x1d2>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d137      	bne.n	80048ac <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2200      	movs	r2, #0
 800484e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f991 	bl	8004b7c <RTC_ByteToBcd2>
 800485a:	4603      	mov	r3, r0
 800485c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f98a 	bl	8004b7c <RTC_ByteToBcd2>
 8004868:	4603      	mov	r3, r0
 800486a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800486c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	789b      	ldrb	r3, [r3, #2]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f982 	bl	8004b7c <RTC_ByteToBcd2>
 8004878:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800487a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	78db      	ldrb	r3, [r3, #3]
 8004882:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004884:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f974 	bl	8004b7c <RTC_ByteToBcd2>
 8004894:	4603      	mov	r3, r0
 8004896:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004898:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e023      	b.n	80048f4 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2200      	movs	r2, #0
 80048be:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	785b      	ldrb	r3, [r3, #1]
 80048ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048cc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	78db      	ldrb	r3, [r3, #3]
 80048d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80048da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80048e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	22ca      	movs	r2, #202	; 0xca
 8004906:	625a      	str	r2, [r3, #36]	; 0x24
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2253      	movs	r2, #83	; 0x53
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004918:	d124      	bne.n	8004964 <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004928:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699a      	ldr	r2, [r3, #24]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004950:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004960:	619a      	str	r2, [r3, #24]
 8004962:	e023      	b.n	80049ac <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004972:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2202      	movs	r2, #2
 800497a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049aa:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <HAL_RTC_SetAlarm_IT+0x1dc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0d      	ldr	r2, [pc, #52]	; (80049e8 <HAL_RTC_SetAlarm_IT+0x1dc>)
 80049b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RTC_SetAlarm_IT+0x1dc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <HAL_RTC_SetAlarm_IT+0x1dc>)
 80049be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd90      	pop	{r4, r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40010400 	.word	0x40010400

080049ec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80049f4:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <HAL_RTC_AlarmIRQHandler+0x58>)
 80049f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80049fa:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d006      	beq.n	8004a1c <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2201      	movs	r2, #1
 8004a14:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc fa6e 	bl	8000ef8 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d006      	beq.n	8004a34 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9a4 	bl	8004d7c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40010400 	.word	0x40010400

08004a48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a5e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8004a60:	f7fc fe00 	bl	8001664 <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004a66:	e009      	b.n	8004a7c <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a68:	f7fc fdfc 	bl	8001664 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a76:	d901      	bls.n	8004a7c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e007      	b.n	8004a8c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0ee      	beq.n	8004a68 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d123      	bne.n	8004af6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004abc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004abe:	f7fc fdd1 	bl	8001664 <HAL_GetTick>
 8004ac2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ac4:	e00d      	b.n	8004ae2 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ac6:	f7fc fdcd 	bl	8001664 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ad4:	d905      	bls.n	8004ae2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2203      	movs	r2, #3
 8004ade:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <RTC_EnterInitMode+0x62>
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d1e7      	bne.n	8004ac6 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <RTC_ExitInitMode+0x78>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <RTC_ExitInitMode+0x78>)
 8004b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b16:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b18:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <RTC_ExitInitMode+0x78>)
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10c      	bne.n	8004b3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ff8f 	bl	8004a48 <HAL_RTC_WaitForSynchro>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01e      	beq.n	8004b6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2203      	movs	r2, #3
 8004b34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	73fb      	strb	r3, [r7, #15]
 8004b3c:	e017      	b.n	8004b6e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <RTC_ExitInitMode+0x78>)
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	4a0d      	ldr	r2, [pc, #52]	; (8004b78 <RTC_ExitInitMode+0x78>)
 8004b44:	f023 0320 	bic.w	r3, r3, #32
 8004b48:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff ff7c 	bl	8004a48 <HAL_RTC_WaitForSynchro>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2203      	movs	r2, #3
 8004b5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b62:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <RTC_ExitInitMode+0x78>)
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <RTC_ExitInitMode+0x78>)
 8004b68:	f043 0320 	orr.w	r3, r3, #32
 8004b6c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40002800 	.word	0x40002800

08004b7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004b8e:	e005      	b.n	8004b9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004b96:	7afb      	ldrb	r3, [r7, #11]
 8004b98:	3b0a      	subs	r3, #10
 8004b9a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004b9c:	7afb      	ldrb	r3, [r7, #11]
 8004b9e:	2b09      	cmp	r3, #9
 8004ba0:	d8f6      	bhi.n	8004b90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	7afb      	ldrb	r3, [r7, #11]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	b2db      	uxtb	r3, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	0092      	lsls	r2, r2, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	4413      	add	r3, r2
 8004be2:	b2db      	uxtb	r3, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e087      	b.n	8004d1c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	22ca      	movs	r2, #202	; 0xca
 8004c22:	625a      	str	r2, [r3, #36]	; 0x24
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2253      	movs	r2, #83	; 0x53
 8004c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2204      	movs	r2, #4
 8004c42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d120      	bne.n	8004c94 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
#endif
  {
    tickstart = HAL_GetTick();
 8004c52:	f7fc fd07 	bl	8001664 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004c58:	e015      	b.n	8004c86 <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c5a:	f7fc fd03 	bl	8001664 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c68:	d90d      	bls.n	8004c86 <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	22ff      	movs	r2, #255	; 0xff
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2203      	movs	r2, #3
 8004c76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e04a      	b.n	8004d1c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0e2      	beq.n	8004c5a <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	0419      	lsls	r1, r3, #16
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	615a      	str	r2, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f023 0107 	bic.w	r1, r3, #7
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	619a      	str	r2, [r3, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	6053      	str	r3, [r2, #4]
 8004cc8:	e005      	b.n	8004cd6 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004cca:	4b16      	ldr	r3, [pc, #88]	; (8004d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8004cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd4:	6013      	str	r3, [r2, #0]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8004cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce0:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf0:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d00:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	22ff      	movs	r2, #255	; 0xff
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40010400 	.word	0x40010400

08004d28 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 8004d32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d36:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d006      	beq.n	8004d54 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f80a 	bl	8004d68 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40010400 	.word	0x40010400

08004d68 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e040      	b.n	8004e24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc fad2 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fc94 	bl	80056fc <UART_SetConfig>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e022      	b.n	8004e24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 febc 	bl	8005b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 ff43 	bl	8005ca8 <UART_CheckIdleState>
 8004e22:	4603      	mov	r3, r0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	f040 8082 	bne.w	8004f4a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_UART_Transmit+0x26>
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e07a      	b.n	8004f4c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Transmit+0x38>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e073      	b.n	8004f4c <HAL_UART_Transmit+0x120>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2221      	movs	r2, #33	; 0x21
 8004e78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e7a:	f7fc fbf3 	bl	8001664 <HAL_GetTick>
 8004e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d108      	bne.n	8004eac <HAL_UART_Transmit+0x80>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d104      	bne.n	8004eac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e003      	b.n	8004eb4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ebc:	e02d      	b.n	8004f1a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 ff36 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e039      	b.n	8004f4c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10b      	bne.n	8004ef6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eea:	b292      	uxth	r2, r2
 8004eec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e008      	b.n	8004f08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	b292      	uxth	r2, r2
 8004f00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3301      	adds	r3, #1
 8004f06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1cb      	bne.n	8004ebe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2140      	movs	r1, #64	; 0x40
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 ff02 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e005      	b.n	8004f4c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e000      	b.n	8004f4c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
  }
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	f040 80bf 	bne.w	80050ec <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_UART_Receive+0x26>
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e0b7      	b.n	80050ee <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_UART_Receive+0x38>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0b0      	b.n	80050ee <HAL_UART_Receive+0x19a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2222      	movs	r2, #34	; 0x22
 8004fa0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fa8:	f7fc fb5c 	bl	8001664 <HAL_GetTick>
 8004fac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	88fa      	ldrh	r2, [r7, #6]
 8004fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	d10e      	bne.n	8004fe6 <HAL_UART_Receive+0x92>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_UART_Receive+0x88>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fda:	e02d      	b.n	8005038 <HAL_UART_Receive+0xe4>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	22ff      	movs	r2, #255	; 0xff
 8004fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fe4:	e028      	b.n	8005038 <HAL_UART_Receive+0xe4>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10d      	bne.n	800500a <HAL_UART_Receive+0xb6>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <HAL_UART_Receive+0xac>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	22ff      	movs	r2, #255	; 0xff
 8004ffa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ffe:	e01b      	b.n	8005038 <HAL_UART_Receive+0xe4>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	227f      	movs	r2, #127	; 0x7f
 8005004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005008:	e016      	b.n	8005038 <HAL_UART_Receive+0xe4>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005012:	d10d      	bne.n	8005030 <HAL_UART_Receive+0xdc>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <HAL_UART_Receive+0xd2>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	227f      	movs	r2, #127	; 0x7f
 8005020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005024:	e008      	b.n	8005038 <HAL_UART_Receive+0xe4>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	223f      	movs	r2, #63	; 0x3f
 800502a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800502e:	e003      	b.n	8005038 <HAL_UART_Receive+0xe4>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800503e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005048:	d108      	bne.n	800505c <HAL_UART_Receive+0x108>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e003      	b.n	8005064 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800506c:	e033      	b.n	80050d6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2200      	movs	r2, #0
 8005076:	2120      	movs	r1, #32
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fe5e 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e032      	b.n	80050ee <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10c      	bne.n	80050a8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005094:	b29a      	uxth	r2, r3
 8005096:	8a7b      	ldrh	r3, [r7, #18]
 8005098:	4013      	ands	r3, r2
 800509a:	b29a      	uxth	r2, r3
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	3302      	adds	r3, #2
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e00d      	b.n	80050c4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	8a7b      	ldrh	r3, [r7, #18]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	4013      	ands	r3, r2
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1c5      	bne.n	800506e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b0ba      	sub	sp, #232	; 0xe8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800511e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005122:	f640 030f 	movw	r3, #2063	; 0x80f
 8005126:	4013      	ands	r3, r2
 8005128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800512c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d115      	bne.n	8005160 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00f      	beq.n	8005160 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 82a6 	beq.w	80056a2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
      }
      return;
 800515e:	e2a0      	b.n	80056a2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8117 	beq.w	8005398 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800516a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005176:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800517a:	4b85      	ldr	r3, [pc, #532]	; (8005390 <HAL_UART_IRQHandler+0x298>)
 800517c:	4013      	ands	r3, r2
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 810a 	beq.w	8005398 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d011      	beq.n	80051b4 <HAL_UART_IRQHandler+0xbc>
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00b      	beq.n	80051b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2201      	movs	r2, #1
 80051a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <HAL_UART_IRQHandler+0xec>
 80051c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00b      	beq.n	80051e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2202      	movs	r2, #2
 80051d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051da:	f043 0204 	orr.w	r2, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d011      	beq.n	8005214 <HAL_UART_IRQHandler+0x11c>
 80051f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2204      	movs	r2, #4
 8005202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520a:	f043 0202 	orr.w	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d017      	beq.n	8005250 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d105      	bne.n	8005238 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800522c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005230:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00b      	beq.n	8005250 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2208      	movs	r2, #8
 800523e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005246:	f043 0208 	orr.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005258:	2b00      	cmp	r3, #0
 800525a:	d012      	beq.n	8005282 <HAL_UART_IRQHandler+0x18a>
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 820c 	beq.w	80056a6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800528e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00d      	beq.n	80052b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800529a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d005      	beq.n	80052da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d04f      	beq.n	800537a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fdf1 	bl	8005ec2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b40      	cmp	r3, #64	; 0x40
 80052ec:	d141      	bne.n	8005372 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3308      	adds	r3, #8
 80052f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800531a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800531e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1d9      	bne.n	80052ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	2b00      	cmp	r3, #0
 8005340:	d013      	beq.n	800536a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	4a13      	ldr	r2, [pc, #76]	; (8005394 <HAL_UART_IRQHandler+0x29c>)
 8005348:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	4618      	mov	r0, r3
 8005350:	f7fd fdb1 	bl	8002eb6 <HAL_DMA_Abort_IT>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d017      	beq.n	800538a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005364:	4610      	mov	r0, r2
 8005366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	e00f      	b.n	800538a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f9b0 	bl	80056d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005370:	e00b      	b.n	800538a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f9ac 	bl	80056d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005378:	e007      	b.n	800538a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f9a8 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005388:	e18d      	b.n	80056a6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538a:	bf00      	nop
    return;
 800538c:	e18b      	b.n	80056a6 <HAL_UART_IRQHandler+0x5ae>
 800538e:	bf00      	nop
 8005390:	04000120 	.word	0x04000120
 8005394:	08005f89 	.word	0x08005f89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539c:	2b01      	cmp	r3, #1
 800539e:	f040 8146 	bne.w	800562e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 813f 	beq.w	800562e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8138 	beq.w	800562e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2210      	movs	r2, #16
 80053c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	f040 80b4 	bne.w	800553e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 815f 	beq.w	80056aa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053f6:	429a      	cmp	r2, r3
 80053f8:	f080 8157 	bcs.w	80056aa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	f040 8085 	bne.w	8005522 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800542c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005446:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800544e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800545a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1da      	bne.n	8005418 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005486:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800548a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800548e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e1      	bne.n	8005462 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e3      	bne.n	800549e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f2:	f023 0310 	bic.w	r3, r3, #16
 80054f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005504:	65bb      	str	r3, [r7, #88]	; 0x58
 8005506:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800550a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e4      	bne.n	80054e2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	4618      	mov	r0, r3
 800551e:	f7fd fc8c 	bl	8002e3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800552e:	b29b      	uxth	r3, r3
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	b29b      	uxth	r3, r3
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8d4 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800553c:	e0b5      	b.n	80056aa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800554a:	b29b      	uxth	r3, r3
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80a7 	beq.w	80056ae <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80a2 	beq.w	80056ae <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800557e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800558c:	647b      	str	r3, [r7, #68]	; 0x44
 800558e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e4      	bne.n	800556a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	623b      	str	r3, [r7, #32]
   return(result);
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3308      	adds	r3, #8
 80055c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055c4:	633a      	str	r2, [r7, #48]	; 0x30
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e3      	bne.n	80055a0 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0310 	bic.w	r3, r3, #16
 80055fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	69b9      	ldr	r1, [r7, #24]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	617b      	str	r3, [r7, #20]
   return(result);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e4      	bne.n	80055ea <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f85c 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800562c:	e03f      	b.n	80056ae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00e      	beq.n	8005658 <HAL_UART_IRQHandler+0x560>
 800563a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800563e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800564e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fcd9 	bl	8006008 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005656:	e02d      	b.n	80056b4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01c      	beq.n	80056b2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
    }
    return;
 8005680:	e017      	b.n	80056b2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d012      	beq.n	80056b4 <HAL_UART_IRQHandler+0x5bc>
 800568e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fc8a 	bl	8005fb4 <UART_EndTransmit_IT>
    return;
 80056a0:	e008      	b.n	80056b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80056a2:	bf00      	nop
 80056a4:	e006      	b.n	80056b4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80056a6:	bf00      	nop
 80056a8:	e004      	b.n	80056b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80056aa:	bf00      	nop
 80056ac:	e002      	b.n	80056b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80056ae:	bf00      	nop
 80056b0:	e000      	b.n	80056b4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80056b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80056b4:	37e8      	adds	r7, #232	; 0xe8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop

080056bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	b5b0      	push	{r4, r5, r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	4313      	orrs	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4baa      	ldr	r3, [pc, #680]	; (80059d0 <UART_SetConfig+0x2d4>)
 8005728:	4013      	ands	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	69f9      	ldr	r1, [r7, #28]
 8005730:	430b      	orrs	r3, r1
 8005732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a9f      	ldr	r2, [pc, #636]	; (80059d4 <UART_SetConfig+0x2d8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d004      	beq.n	8005764 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	4313      	orrs	r3, r2
 8005762:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	430a      	orrs	r2, r1
 8005776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a96      	ldr	r2, [pc, #600]	; (80059d8 <UART_SetConfig+0x2dc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d121      	bne.n	80057c6 <UART_SetConfig+0xca>
 8005782:	4b96      	ldr	r3, [pc, #600]	; (80059dc <UART_SetConfig+0x2e0>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	2b03      	cmp	r3, #3
 800578e:	d817      	bhi.n	80057c0 <UART_SetConfig+0xc4>
 8005790:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <UART_SetConfig+0x9c>)
 8005792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005796:	bf00      	nop
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057b5 	.word	0x080057b5
 80057a0:	080057af 	.word	0x080057af
 80057a4:	080057bb 	.word	0x080057bb
 80057a8:	2301      	movs	r3, #1
 80057aa:	76fb      	strb	r3, [r7, #27]
 80057ac:	e096      	b.n	80058dc <UART_SetConfig+0x1e0>
 80057ae:	2302      	movs	r3, #2
 80057b0:	76fb      	strb	r3, [r7, #27]
 80057b2:	e093      	b.n	80058dc <UART_SetConfig+0x1e0>
 80057b4:	2304      	movs	r3, #4
 80057b6:	76fb      	strb	r3, [r7, #27]
 80057b8:	e090      	b.n	80058dc <UART_SetConfig+0x1e0>
 80057ba:	2308      	movs	r3, #8
 80057bc:	76fb      	strb	r3, [r7, #27]
 80057be:	e08d      	b.n	80058dc <UART_SetConfig+0x1e0>
 80057c0:	2310      	movs	r3, #16
 80057c2:	76fb      	strb	r3, [r7, #27]
 80057c4:	e08a      	b.n	80058dc <UART_SetConfig+0x1e0>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a85      	ldr	r2, [pc, #532]	; (80059e0 <UART_SetConfig+0x2e4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d132      	bne.n	8005836 <UART_SetConfig+0x13a>
 80057d0:	4b82      	ldr	r3, [pc, #520]	; (80059dc <UART_SetConfig+0x2e0>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d828      	bhi.n	8005830 <UART_SetConfig+0x134>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <UART_SetConfig+0xe8>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005819 	.word	0x08005819
 80057e8:	08005831 	.word	0x08005831
 80057ec:	08005831 	.word	0x08005831
 80057f0:	08005831 	.word	0x08005831
 80057f4:	08005825 	.word	0x08005825
 80057f8:	08005831 	.word	0x08005831
 80057fc:	08005831 	.word	0x08005831
 8005800:	08005831 	.word	0x08005831
 8005804:	0800581f 	.word	0x0800581f
 8005808:	08005831 	.word	0x08005831
 800580c:	08005831 	.word	0x08005831
 8005810:	08005831 	.word	0x08005831
 8005814:	0800582b 	.word	0x0800582b
 8005818:	2300      	movs	r3, #0
 800581a:	76fb      	strb	r3, [r7, #27]
 800581c:	e05e      	b.n	80058dc <UART_SetConfig+0x1e0>
 800581e:	2302      	movs	r3, #2
 8005820:	76fb      	strb	r3, [r7, #27]
 8005822:	e05b      	b.n	80058dc <UART_SetConfig+0x1e0>
 8005824:	2304      	movs	r3, #4
 8005826:	76fb      	strb	r3, [r7, #27]
 8005828:	e058      	b.n	80058dc <UART_SetConfig+0x1e0>
 800582a:	2308      	movs	r3, #8
 800582c:	76fb      	strb	r3, [r7, #27]
 800582e:	e055      	b.n	80058dc <UART_SetConfig+0x1e0>
 8005830:	2310      	movs	r3, #16
 8005832:	76fb      	strb	r3, [r7, #27]
 8005834:	e052      	b.n	80058dc <UART_SetConfig+0x1e0>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a6a      	ldr	r2, [pc, #424]	; (80059e4 <UART_SetConfig+0x2e8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d120      	bne.n	8005882 <UART_SetConfig+0x186>
 8005840:	4b66      	ldr	r3, [pc, #408]	; (80059dc <UART_SetConfig+0x2e0>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800584a:	2b30      	cmp	r3, #48	; 0x30
 800584c:	d013      	beq.n	8005876 <UART_SetConfig+0x17a>
 800584e:	2b30      	cmp	r3, #48	; 0x30
 8005850:	d814      	bhi.n	800587c <UART_SetConfig+0x180>
 8005852:	2b20      	cmp	r3, #32
 8005854:	d009      	beq.n	800586a <UART_SetConfig+0x16e>
 8005856:	2b20      	cmp	r3, #32
 8005858:	d810      	bhi.n	800587c <UART_SetConfig+0x180>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <UART_SetConfig+0x168>
 800585e:	2b10      	cmp	r3, #16
 8005860:	d006      	beq.n	8005870 <UART_SetConfig+0x174>
 8005862:	e00b      	b.n	800587c <UART_SetConfig+0x180>
 8005864:	2300      	movs	r3, #0
 8005866:	76fb      	strb	r3, [r7, #27]
 8005868:	e038      	b.n	80058dc <UART_SetConfig+0x1e0>
 800586a:	2302      	movs	r3, #2
 800586c:	76fb      	strb	r3, [r7, #27]
 800586e:	e035      	b.n	80058dc <UART_SetConfig+0x1e0>
 8005870:	2304      	movs	r3, #4
 8005872:	76fb      	strb	r3, [r7, #27]
 8005874:	e032      	b.n	80058dc <UART_SetConfig+0x1e0>
 8005876:	2308      	movs	r3, #8
 8005878:	76fb      	strb	r3, [r7, #27]
 800587a:	e02f      	b.n	80058dc <UART_SetConfig+0x1e0>
 800587c:	2310      	movs	r3, #16
 800587e:	76fb      	strb	r3, [r7, #27]
 8005880:	e02c      	b.n	80058dc <UART_SetConfig+0x1e0>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a53      	ldr	r2, [pc, #332]	; (80059d4 <UART_SetConfig+0x2d8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d125      	bne.n	80058d8 <UART_SetConfig+0x1dc>
 800588c:	4b53      	ldr	r3, [pc, #332]	; (80059dc <UART_SetConfig+0x2e0>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005896:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800589a:	d017      	beq.n	80058cc <UART_SetConfig+0x1d0>
 800589c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058a0:	d817      	bhi.n	80058d2 <UART_SetConfig+0x1d6>
 80058a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a6:	d00b      	beq.n	80058c0 <UART_SetConfig+0x1c4>
 80058a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ac:	d811      	bhi.n	80058d2 <UART_SetConfig+0x1d6>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <UART_SetConfig+0x1be>
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d006      	beq.n	80058c6 <UART_SetConfig+0x1ca>
 80058b8:	e00b      	b.n	80058d2 <UART_SetConfig+0x1d6>
 80058ba:	2300      	movs	r3, #0
 80058bc:	76fb      	strb	r3, [r7, #27]
 80058be:	e00d      	b.n	80058dc <UART_SetConfig+0x1e0>
 80058c0:	2302      	movs	r3, #2
 80058c2:	76fb      	strb	r3, [r7, #27]
 80058c4:	e00a      	b.n	80058dc <UART_SetConfig+0x1e0>
 80058c6:	2304      	movs	r3, #4
 80058c8:	76fb      	strb	r3, [r7, #27]
 80058ca:	e007      	b.n	80058dc <UART_SetConfig+0x1e0>
 80058cc:	2308      	movs	r3, #8
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e004      	b.n	80058dc <UART_SetConfig+0x1e0>
 80058d2:	2310      	movs	r3, #16
 80058d4:	76fb      	strb	r3, [r7, #27]
 80058d6:	e001      	b.n	80058dc <UART_SetConfig+0x1e0>
 80058d8:	2310      	movs	r3, #16
 80058da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3c      	ldr	r2, [pc, #240]	; (80059d4 <UART_SetConfig+0x2d8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	f040 8082 	bne.w	80059ec <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058e8:	7efb      	ldrb	r3, [r7, #27]
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d823      	bhi.n	8005936 <UART_SetConfig+0x23a>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x1f8>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005937 	.word	0x08005937
 80058fc:	08005921 	.word	0x08005921
 8005900:	08005937 	.word	0x08005937
 8005904:	08005927 	.word	0x08005927
 8005908:	08005937 	.word	0x08005937
 800590c:	08005937 	.word	0x08005937
 8005910:	08005937 	.word	0x08005937
 8005914:	0800592f 	.word	0x0800592f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7fe fb06 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 800591c:	6178      	str	r0, [r7, #20]
        break;
 800591e:	e00f      	b.n	8005940 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005920:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <UART_SetConfig+0x2ec>)
 8005922:	617b      	str	r3, [r7, #20]
        break;
 8005924:	e00c      	b.n	8005940 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005926:	f7fe fa67 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 800592a:	6178      	str	r0, [r7, #20]
        break;
 800592c:	e008      	b.n	8005940 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005932:	617b      	str	r3, [r7, #20]
        break;
 8005934:	e004      	b.n	8005940 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	76bb      	strb	r3, [r7, #26]
        break;
 800593e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8100 	beq.w	8005b48 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	429a      	cmp	r2, r3
 8005956:	d305      	bcc.n	8005964 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	429a      	cmp	r2, r3
 8005962:	d902      	bls.n	800596a <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	76bb      	strb	r3, [r7, #26]
 8005968:	e0ee      	b.n	8005b48 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	4618      	mov	r0, r3
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	020b      	lsls	r3, r1, #8
 800597c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005980:	0202      	lsls	r2, r0, #8
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	6849      	ldr	r1, [r1, #4]
 8005986:	0849      	lsrs	r1, r1, #1
 8005988:	4608      	mov	r0, r1
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	1814      	adds	r4, r2, r0
 8005990:	eb43 0501 	adc.w	r5, r3, r1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	461a      	mov	r2, r3
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fa fc75 	bl	8000290 <__aeabi_uldivmod>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4613      	mov	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b4:	d308      	bcc.n	80059c8 <UART_SetConfig+0x2cc>
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059bc:	d204      	bcs.n	80059c8 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e0bf      	b.n	8005b48 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	76bb      	strb	r3, [r7, #26]
 80059cc:	e0bc      	b.n	8005b48 <UART_SetConfig+0x44c>
 80059ce:	bf00      	nop
 80059d0:	efff69f3 	.word	0xefff69f3
 80059d4:	40008000 	.word	0x40008000
 80059d8:	40013800 	.word	0x40013800
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40004400 	.word	0x40004400
 80059e4:	40004800 	.word	0x40004800
 80059e8:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059f4:	d15b      	bne.n	8005aae <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 80059f6:	7efb      	ldrb	r3, [r7, #27]
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d828      	bhi.n	8005a4e <UART_SetConfig+0x352>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x308>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	08005a4f 	.word	0x08005a4f
 8005a14:	08005a3f 	.word	0x08005a3f
 8005a18:	08005a4f 	.word	0x08005a4f
 8005a1c:	08005a4f 	.word	0x08005a4f
 8005a20:	08005a4f 	.word	0x08005a4f
 8005a24:	08005a47 	.word	0x08005a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a28:	f7fe fa7e 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 8005a2c:	6178      	str	r0, [r7, #20]
        break;
 8005a2e:	e013      	b.n	8005a58 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7fe fa90 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 8005a34:	6178      	str	r0, [r7, #20]
        break;
 8005a36:	e00f      	b.n	8005a58 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a38:	4b49      	ldr	r3, [pc, #292]	; (8005b60 <UART_SetConfig+0x464>)
 8005a3a:	617b      	str	r3, [r7, #20]
        break;
 8005a3c:	e00c      	b.n	8005a58 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3e:	f7fe f9db 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8005a42:	6178      	str	r0, [r7, #20]
        break;
 8005a44:	e008      	b.n	8005a58 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4a:	617b      	str	r3, [r7, #20]
        break;
 8005a4c:	e004      	b.n	8005a58 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	76bb      	strb	r3, [r7, #26]
        break;
 8005a56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d074      	beq.n	8005b48 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	005a      	lsls	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	441a      	add	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b0f      	cmp	r3, #15
 8005a78:	d916      	bls.n	8005aa8 <UART_SetConfig+0x3ac>
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a80:	d212      	bcs.n	8005aa8 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f023 030f 	bic.w	r3, r3, #15
 8005a8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	89fb      	ldrh	r3, [r7, #14]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	89fa      	ldrh	r2, [r7, #14]
 8005aa4:	60da      	str	r2, [r3, #12]
 8005aa6:	e04f      	b.n	8005b48 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	76bb      	strb	r3, [r7, #26]
 8005aac:	e04c      	b.n	8005b48 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aae:	7efb      	ldrb	r3, [r7, #27]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d828      	bhi.n	8005b06 <UART_SetConfig+0x40a>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <UART_SetConfig+0x3c0>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005af1 	.word	0x08005af1
 8005ac8:	08005b07 	.word	0x08005b07
 8005acc:	08005af7 	.word	0x08005af7
 8005ad0:	08005b07 	.word	0x08005b07
 8005ad4:	08005b07 	.word	0x08005b07
 8005ad8:	08005b07 	.word	0x08005b07
 8005adc:	08005aff 	.word	0x08005aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae0:	f7fe fa22 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 8005ae4:	6178      	str	r0, [r7, #20]
        break;
 8005ae6:	e013      	b.n	8005b10 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fe fa34 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 8005aec:	6178      	str	r0, [r7, #20]
        break;
 8005aee:	e00f      	b.n	8005b10 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af0:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <UART_SetConfig+0x464>)
 8005af2:	617b      	str	r3, [r7, #20]
        break;
 8005af4:	e00c      	b.n	8005b10 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af6:	f7fe f97f 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8005afa:	6178      	str	r0, [r7, #20]
        break;
 8005afc:	e008      	b.n	8005b10 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b02:	617b      	str	r3, [r7, #20]
        break;
 8005b04:	e004      	b.n	8005b10 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	76bb      	strb	r3, [r7, #26]
        break;
 8005b0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	085a      	lsrs	r2, r3, #1
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	441a      	add	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b0f      	cmp	r3, #15
 8005b2e:	d909      	bls.n	8005b44 <UART_SetConfig+0x448>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b36:	d205      	bcs.n	8005b44 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	e001      	b.n	8005b48 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b54:	7ebb      	ldrb	r3, [r7, #26]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	00f42400 	.word	0x00f42400

08005b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c62:	d10a      	bne.n	8005c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb8:	f7fb fcd4 	bl	8001664 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d10e      	bne.n	8005cea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f82d 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e023      	b.n	8005d32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d10e      	bne.n	8005d16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f817 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e00d      	b.n	8005d32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b09c      	sub	sp, #112	; 0x70
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4a:	e0a5      	b.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	f000 80a1 	beq.w	8005e98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fb fc85 	bl	8001664 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <UART_WaitOnFlagUntilTimeout+0x32>
 8005d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d13e      	bne.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d80:	667b      	str	r3, [r7, #100]	; 0x64
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d8c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e6      	bne.n	8005d6c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	663b      	str	r3, [r7, #96]	; 0x60
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e067      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d04f      	beq.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e06:	d147      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e10:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
 8005e32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e6      	bne.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	613b      	str	r3, [r7, #16]
   return(result);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e64:	623a      	str	r2, [r7, #32]
 8005e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	69f9      	ldr	r1, [r7, #28]
 8005e6a:	6a3a      	ldr	r2, [r7, #32]
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e5      	bne.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2220      	movs	r2, #32
 8005e82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e010      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	f43f af4a 	beq.w	8005d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3770      	adds	r7, #112	; 0x70
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b095      	sub	sp, #84	; 0x54
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e6      	bne.n	8005eca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3308      	adds	r3, #8
 8005f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e5      	bne.n	8005efc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d118      	bne.n	8005f6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f023 0310 	bic.w	r3, r3, #16
 8005f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6979      	ldr	r1, [r7, #20]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	613b      	str	r3, [r7, #16]
   return(result);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e6      	bne.n	8005f38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f7c:	bf00      	nop
 8005f7e:	3754      	adds	r7, #84	; 0x54
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff fb92 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6979      	ldr	r1, [r7, #20]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e6      	bne.n	8005fbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fb5e 	bl	80056bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006000:	bf00      	nop
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <atoi>:
 800601c:	220a      	movs	r2, #10
 800601e:	2100      	movs	r1, #0
 8006020:	f000 ba32 	b.w	8006488 <strtol>

08006024 <__errno>:
 8006024:	4b01      	ldr	r3, [pc, #4]	; (800602c <__errno+0x8>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	2000005c 	.word	0x2000005c

08006030 <getchar>:
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <getchar+0x20>)
 8006032:	b510      	push	{r4, lr}
 8006034:	681c      	ldr	r4, [r3, #0]
 8006036:	b124      	cbz	r4, 8006042 <getchar+0x12>
 8006038:	69a3      	ldr	r3, [r4, #24]
 800603a:	b913      	cbnz	r3, 8006042 <getchar+0x12>
 800603c:	4620      	mov	r0, r4
 800603e:	f000 fc19 	bl	8006874 <__sinit>
 8006042:	6861      	ldr	r1, [r4, #4]
 8006044:	4620      	mov	r0, r4
 8006046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800604a:	f000 bccd 	b.w	80069e8 <_getc_r>
 800604e:	bf00      	nop
 8006050:	2000005c 	.word	0x2000005c

08006054 <__libc_init_array>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	4d0d      	ldr	r5, [pc, #52]	; (800608c <__libc_init_array+0x38>)
 8006058:	4c0d      	ldr	r4, [pc, #52]	; (8006090 <__libc_init_array+0x3c>)
 800605a:	1b64      	subs	r4, r4, r5
 800605c:	10a4      	asrs	r4, r4, #2
 800605e:	2600      	movs	r6, #0
 8006060:	42a6      	cmp	r6, r4
 8006062:	d109      	bne.n	8006078 <__libc_init_array+0x24>
 8006064:	4d0b      	ldr	r5, [pc, #44]	; (8006094 <__libc_init_array+0x40>)
 8006066:	4c0c      	ldr	r4, [pc, #48]	; (8006098 <__libc_init_array+0x44>)
 8006068:	f001 fae4 	bl	8007634 <_init>
 800606c:	1b64      	subs	r4, r4, r5
 800606e:	10a4      	asrs	r4, r4, #2
 8006070:	2600      	movs	r6, #0
 8006072:	42a6      	cmp	r6, r4
 8006074:	d105      	bne.n	8006082 <__libc_init_array+0x2e>
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	f855 3b04 	ldr.w	r3, [r5], #4
 800607c:	4798      	blx	r3
 800607e:	3601      	adds	r6, #1
 8006080:	e7ee      	b.n	8006060 <__libc_init_array+0xc>
 8006082:	f855 3b04 	ldr.w	r3, [r5], #4
 8006086:	4798      	blx	r3
 8006088:	3601      	adds	r6, #1
 800608a:	e7f2      	b.n	8006072 <__libc_init_array+0x1e>
 800608c:	08007984 	.word	0x08007984
 8006090:	08007984 	.word	0x08007984
 8006094:	08007984 	.word	0x08007984
 8006098:	08007988 	.word	0x08007988

0800609c <memset>:
 800609c:	4402      	add	r2, r0
 800609e:	4603      	mov	r3, r0
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d100      	bne.n	80060a6 <memset+0xa>
 80060a4:	4770      	bx	lr
 80060a6:	f803 1b01 	strb.w	r1, [r3], #1
 80060aa:	e7f9      	b.n	80060a0 <memset+0x4>

080060ac <iprintf>:
 80060ac:	b40f      	push	{r0, r1, r2, r3}
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <iprintf+0x2c>)
 80060b0:	b513      	push	{r0, r1, r4, lr}
 80060b2:	681c      	ldr	r4, [r3, #0]
 80060b4:	b124      	cbz	r4, 80060c0 <iprintf+0x14>
 80060b6:	69a3      	ldr	r3, [r4, #24]
 80060b8:	b913      	cbnz	r3, 80060c0 <iprintf+0x14>
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 fbda 	bl	8006874 <__sinit>
 80060c0:	ab05      	add	r3, sp, #20
 80060c2:	9a04      	ldr	r2, [sp, #16]
 80060c4:	68a1      	ldr	r1, [r4, #8]
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fe11 	bl	8006cf0 <_vfiprintf_r>
 80060ce:	b002      	add	sp, #8
 80060d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d4:	b004      	add	sp, #16
 80060d6:	4770      	bx	lr
 80060d8:	2000005c 	.word	0x2000005c

080060dc <putchar>:
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <putchar+0x28>)
 80060de:	b513      	push	{r0, r1, r4, lr}
 80060e0:	681c      	ldr	r4, [r3, #0]
 80060e2:	4601      	mov	r1, r0
 80060e4:	b134      	cbz	r4, 80060f4 <putchar+0x18>
 80060e6:	69a3      	ldr	r3, [r4, #24]
 80060e8:	b923      	cbnz	r3, 80060f4 <putchar+0x18>
 80060ea:	9001      	str	r0, [sp, #4]
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fbc1 	bl	8006874 <__sinit>
 80060f2:	9901      	ldr	r1, [sp, #4]
 80060f4:	68a2      	ldr	r2, [r4, #8]
 80060f6:	4620      	mov	r0, r4
 80060f8:	b002      	add	sp, #8
 80060fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fe:	f001 b8bb 	b.w	8007278 <_putc_r>
 8006102:	bf00      	nop
 8006104:	2000005c 	.word	0x2000005c

08006108 <_puts_r>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	460e      	mov	r6, r1
 800610c:	4605      	mov	r5, r0
 800610e:	b118      	cbz	r0, 8006118 <_puts_r+0x10>
 8006110:	6983      	ldr	r3, [r0, #24]
 8006112:	b90b      	cbnz	r3, 8006118 <_puts_r+0x10>
 8006114:	f000 fbae 	bl	8006874 <__sinit>
 8006118:	69ab      	ldr	r3, [r5, #24]
 800611a:	68ac      	ldr	r4, [r5, #8]
 800611c:	b913      	cbnz	r3, 8006124 <_puts_r+0x1c>
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fba8 	bl	8006874 <__sinit>
 8006124:	4b2c      	ldr	r3, [pc, #176]	; (80061d8 <_puts_r+0xd0>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d120      	bne.n	800616c <_puts_r+0x64>
 800612a:	686c      	ldr	r4, [r5, #4]
 800612c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800612e:	07db      	lsls	r3, r3, #31
 8006130:	d405      	bmi.n	800613e <_puts_r+0x36>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	0598      	lsls	r0, r3, #22
 8006136:	d402      	bmi.n	800613e <_puts_r+0x36>
 8006138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800613a:	f000 fc96 	bl	8006a6a <__retarget_lock_acquire_recursive>
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	0719      	lsls	r1, r3, #28
 8006142:	d51d      	bpl.n	8006180 <_puts_r+0x78>
 8006144:	6923      	ldr	r3, [r4, #16]
 8006146:	b1db      	cbz	r3, 8006180 <_puts_r+0x78>
 8006148:	3e01      	subs	r6, #1
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006150:	3b01      	subs	r3, #1
 8006152:	60a3      	str	r3, [r4, #8]
 8006154:	bb39      	cbnz	r1, 80061a6 <_puts_r+0x9e>
 8006156:	2b00      	cmp	r3, #0
 8006158:	da38      	bge.n	80061cc <_puts_r+0xc4>
 800615a:	4622      	mov	r2, r4
 800615c:	210a      	movs	r1, #10
 800615e:	4628      	mov	r0, r5
 8006160:	f000 f99c 	bl	800649c <__swbuf_r>
 8006164:	3001      	adds	r0, #1
 8006166:	d011      	beq.n	800618c <_puts_r+0x84>
 8006168:	250a      	movs	r5, #10
 800616a:	e011      	b.n	8006190 <_puts_r+0x88>
 800616c:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <_puts_r+0xd4>)
 800616e:	429c      	cmp	r4, r3
 8006170:	d101      	bne.n	8006176 <_puts_r+0x6e>
 8006172:	68ac      	ldr	r4, [r5, #8]
 8006174:	e7da      	b.n	800612c <_puts_r+0x24>
 8006176:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <_puts_r+0xd8>)
 8006178:	429c      	cmp	r4, r3
 800617a:	bf08      	it	eq
 800617c:	68ec      	ldreq	r4, [r5, #12]
 800617e:	e7d5      	b.n	800612c <_puts_r+0x24>
 8006180:	4621      	mov	r1, r4
 8006182:	4628      	mov	r0, r5
 8006184:	f000 f9dc 	bl	8006540 <__swsetup_r>
 8006188:	2800      	cmp	r0, #0
 800618a:	d0dd      	beq.n	8006148 <_puts_r+0x40>
 800618c:	f04f 35ff 	mov.w	r5, #4294967295
 8006190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006192:	07da      	lsls	r2, r3, #31
 8006194:	d405      	bmi.n	80061a2 <_puts_r+0x9a>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	059b      	lsls	r3, r3, #22
 800619a:	d402      	bmi.n	80061a2 <_puts_r+0x9a>
 800619c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800619e:	f000 fc65 	bl	8006a6c <__retarget_lock_release_recursive>
 80061a2:	4628      	mov	r0, r5
 80061a4:	bd70      	pop	{r4, r5, r6, pc}
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	da04      	bge.n	80061b4 <_puts_r+0xac>
 80061aa:	69a2      	ldr	r2, [r4, #24]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	dc06      	bgt.n	80061be <_puts_r+0xb6>
 80061b0:	290a      	cmp	r1, #10
 80061b2:	d004      	beq.n	80061be <_puts_r+0xb6>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	6022      	str	r2, [r4, #0]
 80061ba:	7019      	strb	r1, [r3, #0]
 80061bc:	e7c5      	b.n	800614a <_puts_r+0x42>
 80061be:	4622      	mov	r2, r4
 80061c0:	4628      	mov	r0, r5
 80061c2:	f000 f96b 	bl	800649c <__swbuf_r>
 80061c6:	3001      	adds	r0, #1
 80061c8:	d1bf      	bne.n	800614a <_puts_r+0x42>
 80061ca:	e7df      	b.n	800618c <_puts_r+0x84>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	250a      	movs	r5, #10
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	701d      	strb	r5, [r3, #0]
 80061d6:	e7db      	b.n	8006190 <_puts_r+0x88>
 80061d8:	08007908 	.word	0x08007908
 80061dc:	08007928 	.word	0x08007928
 80061e0:	080078e8 	.word	0x080078e8

080061e4 <puts>:
 80061e4:	4b02      	ldr	r3, [pc, #8]	; (80061f0 <puts+0xc>)
 80061e6:	4601      	mov	r1, r0
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f7ff bf8d 	b.w	8006108 <_puts_r>
 80061ee:	bf00      	nop
 80061f0:	2000005c 	.word	0x2000005c

080061f4 <setvbuf>:
 80061f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061f8:	461d      	mov	r5, r3
 80061fa:	4b5d      	ldr	r3, [pc, #372]	; (8006370 <setvbuf+0x17c>)
 80061fc:	681f      	ldr	r7, [r3, #0]
 80061fe:	4604      	mov	r4, r0
 8006200:	460e      	mov	r6, r1
 8006202:	4690      	mov	r8, r2
 8006204:	b127      	cbz	r7, 8006210 <setvbuf+0x1c>
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	b913      	cbnz	r3, 8006210 <setvbuf+0x1c>
 800620a:	4638      	mov	r0, r7
 800620c:	f000 fb32 	bl	8006874 <__sinit>
 8006210:	4b58      	ldr	r3, [pc, #352]	; (8006374 <setvbuf+0x180>)
 8006212:	429c      	cmp	r4, r3
 8006214:	d167      	bne.n	80062e6 <setvbuf+0xf2>
 8006216:	687c      	ldr	r4, [r7, #4]
 8006218:	f1b8 0f02 	cmp.w	r8, #2
 800621c:	d006      	beq.n	800622c <setvbuf+0x38>
 800621e:	f1b8 0f01 	cmp.w	r8, #1
 8006222:	f200 809f 	bhi.w	8006364 <setvbuf+0x170>
 8006226:	2d00      	cmp	r5, #0
 8006228:	f2c0 809c 	blt.w	8006364 <setvbuf+0x170>
 800622c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800622e:	07db      	lsls	r3, r3, #31
 8006230:	d405      	bmi.n	800623e <setvbuf+0x4a>
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	0598      	lsls	r0, r3, #22
 8006236:	d402      	bmi.n	800623e <setvbuf+0x4a>
 8006238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800623a:	f000 fc16 	bl	8006a6a <__retarget_lock_acquire_recursive>
 800623e:	4621      	mov	r1, r4
 8006240:	4638      	mov	r0, r7
 8006242:	f000 fa71 	bl	8006728 <_fflush_r>
 8006246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006248:	b141      	cbz	r1, 800625c <setvbuf+0x68>
 800624a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800624e:	4299      	cmp	r1, r3
 8006250:	d002      	beq.n	8006258 <setvbuf+0x64>
 8006252:	4638      	mov	r0, r7
 8006254:	f000 fc78 	bl	8006b48 <_free_r>
 8006258:	2300      	movs	r3, #0
 800625a:	6363      	str	r3, [r4, #52]	; 0x34
 800625c:	2300      	movs	r3, #0
 800625e:	61a3      	str	r3, [r4, #24]
 8006260:	6063      	str	r3, [r4, #4]
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	0619      	lsls	r1, r3, #24
 8006266:	d503      	bpl.n	8006270 <setvbuf+0x7c>
 8006268:	6921      	ldr	r1, [r4, #16]
 800626a:	4638      	mov	r0, r7
 800626c:	f000 fc6c 	bl	8006b48 <_free_r>
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	f1b8 0f02 	cmp.w	r8, #2
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	d06c      	beq.n	800635c <setvbuf+0x168>
 8006282:	ab01      	add	r3, sp, #4
 8006284:	466a      	mov	r2, sp
 8006286:	4621      	mov	r1, r4
 8006288:	4638      	mov	r0, r7
 800628a:	f000 fbf0 	bl	8006a6e <__swhatbuf_r>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	4318      	orrs	r0, r3
 8006292:	81a0      	strh	r0, [r4, #12]
 8006294:	2d00      	cmp	r5, #0
 8006296:	d130      	bne.n	80062fa <setvbuf+0x106>
 8006298:	9d00      	ldr	r5, [sp, #0]
 800629a:	4628      	mov	r0, r5
 800629c:	f000 fc4c 	bl	8006b38 <malloc>
 80062a0:	4606      	mov	r6, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d155      	bne.n	8006352 <setvbuf+0x15e>
 80062a6:	f8dd 9000 	ldr.w	r9, [sp]
 80062aa:	45a9      	cmp	r9, r5
 80062ac:	d14a      	bne.n	8006344 <setvbuf+0x150>
 80062ae:	f04f 35ff 	mov.w	r5, #4294967295
 80062b2:	2200      	movs	r2, #0
 80062b4:	60a2      	str	r2, [r4, #8]
 80062b6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80062ba:	6022      	str	r2, [r4, #0]
 80062bc:	6122      	str	r2, [r4, #16]
 80062be:	2201      	movs	r2, #1
 80062c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c4:	6162      	str	r2, [r4, #20]
 80062c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062c8:	f043 0302 	orr.w	r3, r3, #2
 80062cc:	07d2      	lsls	r2, r2, #31
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	d405      	bmi.n	80062de <setvbuf+0xea>
 80062d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80062d6:	d102      	bne.n	80062de <setvbuf+0xea>
 80062d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062da:	f000 fbc7 	bl	8006a6c <__retarget_lock_release_recursive>
 80062de:	4628      	mov	r0, r5
 80062e0:	b003      	add	sp, #12
 80062e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062e6:	4b24      	ldr	r3, [pc, #144]	; (8006378 <setvbuf+0x184>)
 80062e8:	429c      	cmp	r4, r3
 80062ea:	d101      	bne.n	80062f0 <setvbuf+0xfc>
 80062ec:	68bc      	ldr	r4, [r7, #8]
 80062ee:	e793      	b.n	8006218 <setvbuf+0x24>
 80062f0:	4b22      	ldr	r3, [pc, #136]	; (800637c <setvbuf+0x188>)
 80062f2:	429c      	cmp	r4, r3
 80062f4:	bf08      	it	eq
 80062f6:	68fc      	ldreq	r4, [r7, #12]
 80062f8:	e78e      	b.n	8006218 <setvbuf+0x24>
 80062fa:	2e00      	cmp	r6, #0
 80062fc:	d0cd      	beq.n	800629a <setvbuf+0xa6>
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	b913      	cbnz	r3, 8006308 <setvbuf+0x114>
 8006302:	4638      	mov	r0, r7
 8006304:	f000 fab6 	bl	8006874 <__sinit>
 8006308:	f1b8 0f01 	cmp.w	r8, #1
 800630c:	bf08      	it	eq
 800630e:	89a3      	ldrheq	r3, [r4, #12]
 8006310:	6026      	str	r6, [r4, #0]
 8006312:	bf04      	itt	eq
 8006314:	f043 0301 	orreq.w	r3, r3, #1
 8006318:	81a3      	strheq	r3, [r4, #12]
 800631a:	89a2      	ldrh	r2, [r4, #12]
 800631c:	f012 0308 	ands.w	r3, r2, #8
 8006320:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006324:	d01c      	beq.n	8006360 <setvbuf+0x16c>
 8006326:	07d3      	lsls	r3, r2, #31
 8006328:	bf41      	itttt	mi
 800632a:	2300      	movmi	r3, #0
 800632c:	426d      	negmi	r5, r5
 800632e:	60a3      	strmi	r3, [r4, #8]
 8006330:	61a5      	strmi	r5, [r4, #24]
 8006332:	bf58      	it	pl
 8006334:	60a5      	strpl	r5, [r4, #8]
 8006336:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006338:	f015 0501 	ands.w	r5, r5, #1
 800633c:	d115      	bne.n	800636a <setvbuf+0x176>
 800633e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006342:	e7c8      	b.n	80062d6 <setvbuf+0xe2>
 8006344:	4648      	mov	r0, r9
 8006346:	f000 fbf7 	bl	8006b38 <malloc>
 800634a:	4606      	mov	r6, r0
 800634c:	2800      	cmp	r0, #0
 800634e:	d0ae      	beq.n	80062ae <setvbuf+0xba>
 8006350:	464d      	mov	r5, r9
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006358:	81a3      	strh	r3, [r4, #12]
 800635a:	e7d0      	b.n	80062fe <setvbuf+0x10a>
 800635c:	2500      	movs	r5, #0
 800635e:	e7a8      	b.n	80062b2 <setvbuf+0xbe>
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	e7e8      	b.n	8006336 <setvbuf+0x142>
 8006364:	f04f 35ff 	mov.w	r5, #4294967295
 8006368:	e7b9      	b.n	80062de <setvbuf+0xea>
 800636a:	2500      	movs	r5, #0
 800636c:	e7b7      	b.n	80062de <setvbuf+0xea>
 800636e:	bf00      	nop
 8006370:	2000005c 	.word	0x2000005c
 8006374:	08007908 	.word	0x08007908
 8006378:	08007928 	.word	0x08007928
 800637c:	080078e8 	.word	0x080078e8

08006380 <_strtol_l.isra.0>:
 8006380:	2b01      	cmp	r3, #1
 8006382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006386:	d001      	beq.n	800638c <_strtol_l.isra.0+0xc>
 8006388:	2b24      	cmp	r3, #36	; 0x24
 800638a:	d906      	bls.n	800639a <_strtol_l.isra.0+0x1a>
 800638c:	f7ff fe4a 	bl	8006024 <__errno>
 8006390:	2316      	movs	r3, #22
 8006392:	6003      	str	r3, [r0, #0]
 8006394:	2000      	movs	r0, #0
 8006396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639a:	4f3a      	ldr	r7, [pc, #232]	; (8006484 <_strtol_l.isra.0+0x104>)
 800639c:	468e      	mov	lr, r1
 800639e:	4676      	mov	r6, lr
 80063a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80063a4:	5de5      	ldrb	r5, [r4, r7]
 80063a6:	f015 0508 	ands.w	r5, r5, #8
 80063aa:	d1f8      	bne.n	800639e <_strtol_l.isra.0+0x1e>
 80063ac:	2c2d      	cmp	r4, #45	; 0x2d
 80063ae:	d134      	bne.n	800641a <_strtol_l.isra.0+0x9a>
 80063b0:	f89e 4000 	ldrb.w	r4, [lr]
 80063b4:	f04f 0801 	mov.w	r8, #1
 80063b8:	f106 0e02 	add.w	lr, r6, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d05c      	beq.n	800647a <_strtol_l.isra.0+0xfa>
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d10c      	bne.n	80063de <_strtol_l.isra.0+0x5e>
 80063c4:	2c30      	cmp	r4, #48	; 0x30
 80063c6:	d10a      	bne.n	80063de <_strtol_l.isra.0+0x5e>
 80063c8:	f89e 4000 	ldrb.w	r4, [lr]
 80063cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80063d0:	2c58      	cmp	r4, #88	; 0x58
 80063d2:	d14d      	bne.n	8006470 <_strtol_l.isra.0+0xf0>
 80063d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80063d8:	2310      	movs	r3, #16
 80063da:	f10e 0e02 	add.w	lr, lr, #2
 80063de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80063e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80063e6:	2600      	movs	r6, #0
 80063e8:	fbbc f9f3 	udiv	r9, ip, r3
 80063ec:	4635      	mov	r5, r6
 80063ee:	fb03 ca19 	mls	sl, r3, r9, ip
 80063f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80063f6:	2f09      	cmp	r7, #9
 80063f8:	d818      	bhi.n	800642c <_strtol_l.isra.0+0xac>
 80063fa:	463c      	mov	r4, r7
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	dd24      	ble.n	800644a <_strtol_l.isra.0+0xca>
 8006400:	2e00      	cmp	r6, #0
 8006402:	db1f      	blt.n	8006444 <_strtol_l.isra.0+0xc4>
 8006404:	45a9      	cmp	r9, r5
 8006406:	d31d      	bcc.n	8006444 <_strtol_l.isra.0+0xc4>
 8006408:	d101      	bne.n	800640e <_strtol_l.isra.0+0x8e>
 800640a:	45a2      	cmp	sl, r4
 800640c:	db1a      	blt.n	8006444 <_strtol_l.isra.0+0xc4>
 800640e:	fb05 4503 	mla	r5, r5, r3, r4
 8006412:	2601      	movs	r6, #1
 8006414:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006418:	e7eb      	b.n	80063f2 <_strtol_l.isra.0+0x72>
 800641a:	2c2b      	cmp	r4, #43	; 0x2b
 800641c:	bf08      	it	eq
 800641e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006422:	46a8      	mov	r8, r5
 8006424:	bf08      	it	eq
 8006426:	f106 0e02 	addeq.w	lr, r6, #2
 800642a:	e7c7      	b.n	80063bc <_strtol_l.isra.0+0x3c>
 800642c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006430:	2f19      	cmp	r7, #25
 8006432:	d801      	bhi.n	8006438 <_strtol_l.isra.0+0xb8>
 8006434:	3c37      	subs	r4, #55	; 0x37
 8006436:	e7e1      	b.n	80063fc <_strtol_l.isra.0+0x7c>
 8006438:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800643c:	2f19      	cmp	r7, #25
 800643e:	d804      	bhi.n	800644a <_strtol_l.isra.0+0xca>
 8006440:	3c57      	subs	r4, #87	; 0x57
 8006442:	e7db      	b.n	80063fc <_strtol_l.isra.0+0x7c>
 8006444:	f04f 36ff 	mov.w	r6, #4294967295
 8006448:	e7e4      	b.n	8006414 <_strtol_l.isra.0+0x94>
 800644a:	2e00      	cmp	r6, #0
 800644c:	da05      	bge.n	800645a <_strtol_l.isra.0+0xda>
 800644e:	2322      	movs	r3, #34	; 0x22
 8006450:	6003      	str	r3, [r0, #0]
 8006452:	4665      	mov	r5, ip
 8006454:	b942      	cbnz	r2, 8006468 <_strtol_l.isra.0+0xe8>
 8006456:	4628      	mov	r0, r5
 8006458:	e79d      	b.n	8006396 <_strtol_l.isra.0+0x16>
 800645a:	f1b8 0f00 	cmp.w	r8, #0
 800645e:	d000      	beq.n	8006462 <_strtol_l.isra.0+0xe2>
 8006460:	426d      	negs	r5, r5
 8006462:	2a00      	cmp	r2, #0
 8006464:	d0f7      	beq.n	8006456 <_strtol_l.isra.0+0xd6>
 8006466:	b10e      	cbz	r6, 800646c <_strtol_l.isra.0+0xec>
 8006468:	f10e 31ff 	add.w	r1, lr, #4294967295
 800646c:	6011      	str	r1, [r2, #0]
 800646e:	e7f2      	b.n	8006456 <_strtol_l.isra.0+0xd6>
 8006470:	2430      	movs	r4, #48	; 0x30
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1b3      	bne.n	80063de <_strtol_l.isra.0+0x5e>
 8006476:	2308      	movs	r3, #8
 8006478:	e7b1      	b.n	80063de <_strtol_l.isra.0+0x5e>
 800647a:	2c30      	cmp	r4, #48	; 0x30
 800647c:	d0a4      	beq.n	80063c8 <_strtol_l.isra.0+0x48>
 800647e:	230a      	movs	r3, #10
 8006480:	e7ad      	b.n	80063de <_strtol_l.isra.0+0x5e>
 8006482:	bf00      	nop
 8006484:	080077e5 	.word	0x080077e5

08006488 <strtol>:
 8006488:	4613      	mov	r3, r2
 800648a:	460a      	mov	r2, r1
 800648c:	4601      	mov	r1, r0
 800648e:	4802      	ldr	r0, [pc, #8]	; (8006498 <strtol+0x10>)
 8006490:	6800      	ldr	r0, [r0, #0]
 8006492:	f7ff bf75 	b.w	8006380 <_strtol_l.isra.0>
 8006496:	bf00      	nop
 8006498:	2000005c 	.word	0x2000005c

0800649c <__swbuf_r>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	460e      	mov	r6, r1
 80064a0:	4614      	mov	r4, r2
 80064a2:	4605      	mov	r5, r0
 80064a4:	b118      	cbz	r0, 80064ae <__swbuf_r+0x12>
 80064a6:	6983      	ldr	r3, [r0, #24]
 80064a8:	b90b      	cbnz	r3, 80064ae <__swbuf_r+0x12>
 80064aa:	f000 f9e3 	bl	8006874 <__sinit>
 80064ae:	4b21      	ldr	r3, [pc, #132]	; (8006534 <__swbuf_r+0x98>)
 80064b0:	429c      	cmp	r4, r3
 80064b2:	d12b      	bne.n	800650c <__swbuf_r+0x70>
 80064b4:	686c      	ldr	r4, [r5, #4]
 80064b6:	69a3      	ldr	r3, [r4, #24]
 80064b8:	60a3      	str	r3, [r4, #8]
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	071a      	lsls	r2, r3, #28
 80064be:	d52f      	bpl.n	8006520 <__swbuf_r+0x84>
 80064c0:	6923      	ldr	r3, [r4, #16]
 80064c2:	b36b      	cbz	r3, 8006520 <__swbuf_r+0x84>
 80064c4:	6923      	ldr	r3, [r4, #16]
 80064c6:	6820      	ldr	r0, [r4, #0]
 80064c8:	1ac0      	subs	r0, r0, r3
 80064ca:	6963      	ldr	r3, [r4, #20]
 80064cc:	b2f6      	uxtb	r6, r6
 80064ce:	4283      	cmp	r3, r0
 80064d0:	4637      	mov	r7, r6
 80064d2:	dc04      	bgt.n	80064de <__swbuf_r+0x42>
 80064d4:	4621      	mov	r1, r4
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 f926 	bl	8006728 <_fflush_r>
 80064dc:	bb30      	cbnz	r0, 800652c <__swbuf_r+0x90>
 80064de:	68a3      	ldr	r3, [r4, #8]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	60a3      	str	r3, [r4, #8]
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	6022      	str	r2, [r4, #0]
 80064ea:	701e      	strb	r6, [r3, #0]
 80064ec:	6963      	ldr	r3, [r4, #20]
 80064ee:	3001      	adds	r0, #1
 80064f0:	4283      	cmp	r3, r0
 80064f2:	d004      	beq.n	80064fe <__swbuf_r+0x62>
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	07db      	lsls	r3, r3, #31
 80064f8:	d506      	bpl.n	8006508 <__swbuf_r+0x6c>
 80064fa:	2e0a      	cmp	r6, #10
 80064fc:	d104      	bne.n	8006508 <__swbuf_r+0x6c>
 80064fe:	4621      	mov	r1, r4
 8006500:	4628      	mov	r0, r5
 8006502:	f000 f911 	bl	8006728 <_fflush_r>
 8006506:	b988      	cbnz	r0, 800652c <__swbuf_r+0x90>
 8006508:	4638      	mov	r0, r7
 800650a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <__swbuf_r+0x9c>)
 800650e:	429c      	cmp	r4, r3
 8006510:	d101      	bne.n	8006516 <__swbuf_r+0x7a>
 8006512:	68ac      	ldr	r4, [r5, #8]
 8006514:	e7cf      	b.n	80064b6 <__swbuf_r+0x1a>
 8006516:	4b09      	ldr	r3, [pc, #36]	; (800653c <__swbuf_r+0xa0>)
 8006518:	429c      	cmp	r4, r3
 800651a:	bf08      	it	eq
 800651c:	68ec      	ldreq	r4, [r5, #12]
 800651e:	e7ca      	b.n	80064b6 <__swbuf_r+0x1a>
 8006520:	4621      	mov	r1, r4
 8006522:	4628      	mov	r0, r5
 8006524:	f000 f80c 	bl	8006540 <__swsetup_r>
 8006528:	2800      	cmp	r0, #0
 800652a:	d0cb      	beq.n	80064c4 <__swbuf_r+0x28>
 800652c:	f04f 37ff 	mov.w	r7, #4294967295
 8006530:	e7ea      	b.n	8006508 <__swbuf_r+0x6c>
 8006532:	bf00      	nop
 8006534:	08007908 	.word	0x08007908
 8006538:	08007928 	.word	0x08007928
 800653c:	080078e8 	.word	0x080078e8

08006540 <__swsetup_r>:
 8006540:	4b32      	ldr	r3, [pc, #200]	; (800660c <__swsetup_r+0xcc>)
 8006542:	b570      	push	{r4, r5, r6, lr}
 8006544:	681d      	ldr	r5, [r3, #0]
 8006546:	4606      	mov	r6, r0
 8006548:	460c      	mov	r4, r1
 800654a:	b125      	cbz	r5, 8006556 <__swsetup_r+0x16>
 800654c:	69ab      	ldr	r3, [r5, #24]
 800654e:	b913      	cbnz	r3, 8006556 <__swsetup_r+0x16>
 8006550:	4628      	mov	r0, r5
 8006552:	f000 f98f 	bl	8006874 <__sinit>
 8006556:	4b2e      	ldr	r3, [pc, #184]	; (8006610 <__swsetup_r+0xd0>)
 8006558:	429c      	cmp	r4, r3
 800655a:	d10f      	bne.n	800657c <__swsetup_r+0x3c>
 800655c:	686c      	ldr	r4, [r5, #4]
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006564:	0719      	lsls	r1, r3, #28
 8006566:	d42c      	bmi.n	80065c2 <__swsetup_r+0x82>
 8006568:	06dd      	lsls	r5, r3, #27
 800656a:	d411      	bmi.n	8006590 <__swsetup_r+0x50>
 800656c:	2309      	movs	r3, #9
 800656e:	6033      	str	r3, [r6, #0]
 8006570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006574:	81a3      	strh	r3, [r4, #12]
 8006576:	f04f 30ff 	mov.w	r0, #4294967295
 800657a:	e03e      	b.n	80065fa <__swsetup_r+0xba>
 800657c:	4b25      	ldr	r3, [pc, #148]	; (8006614 <__swsetup_r+0xd4>)
 800657e:	429c      	cmp	r4, r3
 8006580:	d101      	bne.n	8006586 <__swsetup_r+0x46>
 8006582:	68ac      	ldr	r4, [r5, #8]
 8006584:	e7eb      	b.n	800655e <__swsetup_r+0x1e>
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <__swsetup_r+0xd8>)
 8006588:	429c      	cmp	r4, r3
 800658a:	bf08      	it	eq
 800658c:	68ec      	ldreq	r4, [r5, #12]
 800658e:	e7e6      	b.n	800655e <__swsetup_r+0x1e>
 8006590:	0758      	lsls	r0, r3, #29
 8006592:	d512      	bpl.n	80065ba <__swsetup_r+0x7a>
 8006594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006596:	b141      	cbz	r1, 80065aa <__swsetup_r+0x6a>
 8006598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800659c:	4299      	cmp	r1, r3
 800659e:	d002      	beq.n	80065a6 <__swsetup_r+0x66>
 80065a0:	4630      	mov	r0, r6
 80065a2:	f000 fad1 	bl	8006b48 <_free_r>
 80065a6:	2300      	movs	r3, #0
 80065a8:	6363      	str	r3, [r4, #52]	; 0x34
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065b0:	81a3      	strh	r3, [r4, #12]
 80065b2:	2300      	movs	r3, #0
 80065b4:	6063      	str	r3, [r4, #4]
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	f043 0308 	orr.w	r3, r3, #8
 80065c0:	81a3      	strh	r3, [r4, #12]
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	b94b      	cbnz	r3, 80065da <__swsetup_r+0x9a>
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d0:	d003      	beq.n	80065da <__swsetup_r+0x9a>
 80065d2:	4621      	mov	r1, r4
 80065d4:	4630      	mov	r0, r6
 80065d6:	f000 fa6f 	bl	8006ab8 <__smakebuf_r>
 80065da:	89a0      	ldrh	r0, [r4, #12]
 80065dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065e0:	f010 0301 	ands.w	r3, r0, #1
 80065e4:	d00a      	beq.n	80065fc <__swsetup_r+0xbc>
 80065e6:	2300      	movs	r3, #0
 80065e8:	60a3      	str	r3, [r4, #8]
 80065ea:	6963      	ldr	r3, [r4, #20]
 80065ec:	425b      	negs	r3, r3
 80065ee:	61a3      	str	r3, [r4, #24]
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	b943      	cbnz	r3, 8006606 <__swsetup_r+0xc6>
 80065f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065f8:	d1ba      	bne.n	8006570 <__swsetup_r+0x30>
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	0781      	lsls	r1, r0, #30
 80065fe:	bf58      	it	pl
 8006600:	6963      	ldrpl	r3, [r4, #20]
 8006602:	60a3      	str	r3, [r4, #8]
 8006604:	e7f4      	b.n	80065f0 <__swsetup_r+0xb0>
 8006606:	2000      	movs	r0, #0
 8006608:	e7f7      	b.n	80065fa <__swsetup_r+0xba>
 800660a:	bf00      	nop
 800660c:	2000005c 	.word	0x2000005c
 8006610:	08007908 	.word	0x08007908
 8006614:	08007928 	.word	0x08007928
 8006618:	080078e8 	.word	0x080078e8

0800661c <__sflush_r>:
 800661c:	898a      	ldrh	r2, [r1, #12]
 800661e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006622:	4605      	mov	r5, r0
 8006624:	0710      	lsls	r0, r2, #28
 8006626:	460c      	mov	r4, r1
 8006628:	d458      	bmi.n	80066dc <__sflush_r+0xc0>
 800662a:	684b      	ldr	r3, [r1, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	dc05      	bgt.n	800663c <__sflush_r+0x20>
 8006630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	dc02      	bgt.n	800663c <__sflush_r+0x20>
 8006636:	2000      	movs	r0, #0
 8006638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800663c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800663e:	2e00      	cmp	r6, #0
 8006640:	d0f9      	beq.n	8006636 <__sflush_r+0x1a>
 8006642:	2300      	movs	r3, #0
 8006644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006648:	682f      	ldr	r7, [r5, #0]
 800664a:	602b      	str	r3, [r5, #0]
 800664c:	d032      	beq.n	80066b4 <__sflush_r+0x98>
 800664e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	075a      	lsls	r2, r3, #29
 8006654:	d505      	bpl.n	8006662 <__sflush_r+0x46>
 8006656:	6863      	ldr	r3, [r4, #4]
 8006658:	1ac0      	subs	r0, r0, r3
 800665a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800665c:	b10b      	cbz	r3, 8006662 <__sflush_r+0x46>
 800665e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006660:	1ac0      	subs	r0, r0, r3
 8006662:	2300      	movs	r3, #0
 8006664:	4602      	mov	r2, r0
 8006666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006668:	6a21      	ldr	r1, [r4, #32]
 800666a:	4628      	mov	r0, r5
 800666c:	47b0      	blx	r6
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	d106      	bne.n	8006682 <__sflush_r+0x66>
 8006674:	6829      	ldr	r1, [r5, #0]
 8006676:	291d      	cmp	r1, #29
 8006678:	d82c      	bhi.n	80066d4 <__sflush_r+0xb8>
 800667a:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <__sflush_r+0x108>)
 800667c:	40ca      	lsrs	r2, r1
 800667e:	07d6      	lsls	r6, r2, #31
 8006680:	d528      	bpl.n	80066d4 <__sflush_r+0xb8>
 8006682:	2200      	movs	r2, #0
 8006684:	6062      	str	r2, [r4, #4]
 8006686:	04d9      	lsls	r1, r3, #19
 8006688:	6922      	ldr	r2, [r4, #16]
 800668a:	6022      	str	r2, [r4, #0]
 800668c:	d504      	bpl.n	8006698 <__sflush_r+0x7c>
 800668e:	1c42      	adds	r2, r0, #1
 8006690:	d101      	bne.n	8006696 <__sflush_r+0x7a>
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	b903      	cbnz	r3, 8006698 <__sflush_r+0x7c>
 8006696:	6560      	str	r0, [r4, #84]	; 0x54
 8006698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800669a:	602f      	str	r7, [r5, #0]
 800669c:	2900      	cmp	r1, #0
 800669e:	d0ca      	beq.n	8006636 <__sflush_r+0x1a>
 80066a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a4:	4299      	cmp	r1, r3
 80066a6:	d002      	beq.n	80066ae <__sflush_r+0x92>
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 fa4d 	bl	8006b48 <_free_r>
 80066ae:	2000      	movs	r0, #0
 80066b0:	6360      	str	r0, [r4, #52]	; 0x34
 80066b2:	e7c1      	b.n	8006638 <__sflush_r+0x1c>
 80066b4:	6a21      	ldr	r1, [r4, #32]
 80066b6:	2301      	movs	r3, #1
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b0      	blx	r6
 80066bc:	1c41      	adds	r1, r0, #1
 80066be:	d1c7      	bne.n	8006650 <__sflush_r+0x34>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0c4      	beq.n	8006650 <__sflush_r+0x34>
 80066c6:	2b1d      	cmp	r3, #29
 80066c8:	d001      	beq.n	80066ce <__sflush_r+0xb2>
 80066ca:	2b16      	cmp	r3, #22
 80066cc:	d101      	bne.n	80066d2 <__sflush_r+0xb6>
 80066ce:	602f      	str	r7, [r5, #0]
 80066d0:	e7b1      	b.n	8006636 <__sflush_r+0x1a>
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d8:	81a3      	strh	r3, [r4, #12]
 80066da:	e7ad      	b.n	8006638 <__sflush_r+0x1c>
 80066dc:	690f      	ldr	r7, [r1, #16]
 80066de:	2f00      	cmp	r7, #0
 80066e0:	d0a9      	beq.n	8006636 <__sflush_r+0x1a>
 80066e2:	0793      	lsls	r3, r2, #30
 80066e4:	680e      	ldr	r6, [r1, #0]
 80066e6:	bf08      	it	eq
 80066e8:	694b      	ldreq	r3, [r1, #20]
 80066ea:	600f      	str	r7, [r1, #0]
 80066ec:	bf18      	it	ne
 80066ee:	2300      	movne	r3, #0
 80066f0:	eba6 0807 	sub.w	r8, r6, r7
 80066f4:	608b      	str	r3, [r1, #8]
 80066f6:	f1b8 0f00 	cmp.w	r8, #0
 80066fa:	dd9c      	ble.n	8006636 <__sflush_r+0x1a>
 80066fc:	6a21      	ldr	r1, [r4, #32]
 80066fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006700:	4643      	mov	r3, r8
 8006702:	463a      	mov	r2, r7
 8006704:	4628      	mov	r0, r5
 8006706:	47b0      	blx	r6
 8006708:	2800      	cmp	r0, #0
 800670a:	dc06      	bgt.n	800671a <__sflush_r+0xfe>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	e78e      	b.n	8006638 <__sflush_r+0x1c>
 800671a:	4407      	add	r7, r0
 800671c:	eba8 0800 	sub.w	r8, r8, r0
 8006720:	e7e9      	b.n	80066f6 <__sflush_r+0xda>
 8006722:	bf00      	nop
 8006724:	20400001 	.word	0x20400001

08006728 <_fflush_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	690b      	ldr	r3, [r1, #16]
 800672c:	4605      	mov	r5, r0
 800672e:	460c      	mov	r4, r1
 8006730:	b913      	cbnz	r3, 8006738 <_fflush_r+0x10>
 8006732:	2500      	movs	r5, #0
 8006734:	4628      	mov	r0, r5
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	b118      	cbz	r0, 8006742 <_fflush_r+0x1a>
 800673a:	6983      	ldr	r3, [r0, #24]
 800673c:	b90b      	cbnz	r3, 8006742 <_fflush_r+0x1a>
 800673e:	f000 f899 	bl	8006874 <__sinit>
 8006742:	4b14      	ldr	r3, [pc, #80]	; (8006794 <_fflush_r+0x6c>)
 8006744:	429c      	cmp	r4, r3
 8006746:	d11b      	bne.n	8006780 <_fflush_r+0x58>
 8006748:	686c      	ldr	r4, [r5, #4]
 800674a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0ef      	beq.n	8006732 <_fflush_r+0xa>
 8006752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006754:	07d0      	lsls	r0, r2, #31
 8006756:	d404      	bmi.n	8006762 <_fflush_r+0x3a>
 8006758:	0599      	lsls	r1, r3, #22
 800675a:	d402      	bmi.n	8006762 <_fflush_r+0x3a>
 800675c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800675e:	f000 f984 	bl	8006a6a <__retarget_lock_acquire_recursive>
 8006762:	4628      	mov	r0, r5
 8006764:	4621      	mov	r1, r4
 8006766:	f7ff ff59 	bl	800661c <__sflush_r>
 800676a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800676c:	07da      	lsls	r2, r3, #31
 800676e:	4605      	mov	r5, r0
 8006770:	d4e0      	bmi.n	8006734 <_fflush_r+0xc>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	059b      	lsls	r3, r3, #22
 8006776:	d4dd      	bmi.n	8006734 <_fflush_r+0xc>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f000 f977 	bl	8006a6c <__retarget_lock_release_recursive>
 800677e:	e7d9      	b.n	8006734 <_fflush_r+0xc>
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <_fflush_r+0x70>)
 8006782:	429c      	cmp	r4, r3
 8006784:	d101      	bne.n	800678a <_fflush_r+0x62>
 8006786:	68ac      	ldr	r4, [r5, #8]
 8006788:	e7df      	b.n	800674a <_fflush_r+0x22>
 800678a:	4b04      	ldr	r3, [pc, #16]	; (800679c <_fflush_r+0x74>)
 800678c:	429c      	cmp	r4, r3
 800678e:	bf08      	it	eq
 8006790:	68ec      	ldreq	r4, [r5, #12]
 8006792:	e7da      	b.n	800674a <_fflush_r+0x22>
 8006794:	08007908 	.word	0x08007908
 8006798:	08007928 	.word	0x08007928
 800679c:	080078e8 	.word	0x080078e8

080067a0 <fflush>:
 80067a0:	4601      	mov	r1, r0
 80067a2:	b920      	cbnz	r0, 80067ae <fflush+0xe>
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <fflush+0x18>)
 80067a6:	4905      	ldr	r1, [pc, #20]	; (80067bc <fflush+0x1c>)
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	f000 b8fe 	b.w	80069aa <_fwalk_reent>
 80067ae:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <fflush+0x20>)
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	f7ff bfb9 	b.w	8006728 <_fflush_r>
 80067b6:	bf00      	nop
 80067b8:	080077e0 	.word	0x080077e0
 80067bc:	08006729 	.word	0x08006729
 80067c0:	2000005c 	.word	0x2000005c

080067c4 <std>:
 80067c4:	2300      	movs	r3, #0
 80067c6:	b510      	push	{r4, lr}
 80067c8:	4604      	mov	r4, r0
 80067ca:	e9c0 3300 	strd	r3, r3, [r0]
 80067ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067d2:	6083      	str	r3, [r0, #8]
 80067d4:	8181      	strh	r1, [r0, #12]
 80067d6:	6643      	str	r3, [r0, #100]	; 0x64
 80067d8:	81c2      	strh	r2, [r0, #14]
 80067da:	6183      	str	r3, [r0, #24]
 80067dc:	4619      	mov	r1, r3
 80067de:	2208      	movs	r2, #8
 80067e0:	305c      	adds	r0, #92	; 0x5c
 80067e2:	f7ff fc5b 	bl	800609c <memset>
 80067e6:	4b05      	ldr	r3, [pc, #20]	; (80067fc <std+0x38>)
 80067e8:	6263      	str	r3, [r4, #36]	; 0x24
 80067ea:	4b05      	ldr	r3, [pc, #20]	; (8006800 <std+0x3c>)
 80067ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80067ee:	4b05      	ldr	r3, [pc, #20]	; (8006804 <std+0x40>)
 80067f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067f2:	4b05      	ldr	r3, [pc, #20]	; (8006808 <std+0x44>)
 80067f4:	6224      	str	r4, [r4, #32]
 80067f6:	6323      	str	r3, [r4, #48]	; 0x30
 80067f8:	bd10      	pop	{r4, pc}
 80067fa:	bf00      	nop
 80067fc:	08007381 	.word	0x08007381
 8006800:	080073a3 	.word	0x080073a3
 8006804:	080073db 	.word	0x080073db
 8006808:	080073ff 	.word	0x080073ff

0800680c <_cleanup_r>:
 800680c:	4901      	ldr	r1, [pc, #4]	; (8006814 <_cleanup_r+0x8>)
 800680e:	f000 b8cc 	b.w	80069aa <_fwalk_reent>
 8006812:	bf00      	nop
 8006814:	08006729 	.word	0x08006729

08006818 <__sfmoreglue>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	1e4a      	subs	r2, r1, #1
 800681c:	2568      	movs	r5, #104	; 0x68
 800681e:	4355      	muls	r5, r2
 8006820:	460e      	mov	r6, r1
 8006822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006826:	f000 f9df 	bl	8006be8 <_malloc_r>
 800682a:	4604      	mov	r4, r0
 800682c:	b140      	cbz	r0, 8006840 <__sfmoreglue+0x28>
 800682e:	2100      	movs	r1, #0
 8006830:	e9c0 1600 	strd	r1, r6, [r0]
 8006834:	300c      	adds	r0, #12
 8006836:	60a0      	str	r0, [r4, #8]
 8006838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800683c:	f7ff fc2e 	bl	800609c <memset>
 8006840:	4620      	mov	r0, r4
 8006842:	bd70      	pop	{r4, r5, r6, pc}

08006844 <__sfp_lock_acquire>:
 8006844:	4801      	ldr	r0, [pc, #4]	; (800684c <__sfp_lock_acquire+0x8>)
 8006846:	f000 b910 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 800684a:	bf00      	nop
 800684c:	2000023c 	.word	0x2000023c

08006850 <__sfp_lock_release>:
 8006850:	4801      	ldr	r0, [pc, #4]	; (8006858 <__sfp_lock_release+0x8>)
 8006852:	f000 b90b 	b.w	8006a6c <__retarget_lock_release_recursive>
 8006856:	bf00      	nop
 8006858:	2000023c 	.word	0x2000023c

0800685c <__sinit_lock_acquire>:
 800685c:	4801      	ldr	r0, [pc, #4]	; (8006864 <__sinit_lock_acquire+0x8>)
 800685e:	f000 b904 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 8006862:	bf00      	nop
 8006864:	20000237 	.word	0x20000237

08006868 <__sinit_lock_release>:
 8006868:	4801      	ldr	r0, [pc, #4]	; (8006870 <__sinit_lock_release+0x8>)
 800686a:	f000 b8ff 	b.w	8006a6c <__retarget_lock_release_recursive>
 800686e:	bf00      	nop
 8006870:	20000237 	.word	0x20000237

08006874 <__sinit>:
 8006874:	b510      	push	{r4, lr}
 8006876:	4604      	mov	r4, r0
 8006878:	f7ff fff0 	bl	800685c <__sinit_lock_acquire>
 800687c:	69a3      	ldr	r3, [r4, #24]
 800687e:	b11b      	cbz	r3, 8006888 <__sinit+0x14>
 8006880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006884:	f7ff bff0 	b.w	8006868 <__sinit_lock_release>
 8006888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800688c:	6523      	str	r3, [r4, #80]	; 0x50
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <__sinit+0x68>)
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <__sinit+0x6c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	62a2      	str	r2, [r4, #40]	; 0x28
 8006896:	42a3      	cmp	r3, r4
 8006898:	bf04      	itt	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	61a3      	streq	r3, [r4, #24]
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 f820 	bl	80068e4 <__sfp>
 80068a4:	6060      	str	r0, [r4, #4]
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 f81c 	bl	80068e4 <__sfp>
 80068ac:	60a0      	str	r0, [r4, #8]
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 f818 	bl	80068e4 <__sfp>
 80068b4:	2200      	movs	r2, #0
 80068b6:	60e0      	str	r0, [r4, #12]
 80068b8:	2104      	movs	r1, #4
 80068ba:	6860      	ldr	r0, [r4, #4]
 80068bc:	f7ff ff82 	bl	80067c4 <std>
 80068c0:	68a0      	ldr	r0, [r4, #8]
 80068c2:	2201      	movs	r2, #1
 80068c4:	2109      	movs	r1, #9
 80068c6:	f7ff ff7d 	bl	80067c4 <std>
 80068ca:	68e0      	ldr	r0, [r4, #12]
 80068cc:	2202      	movs	r2, #2
 80068ce:	2112      	movs	r1, #18
 80068d0:	f7ff ff78 	bl	80067c4 <std>
 80068d4:	2301      	movs	r3, #1
 80068d6:	61a3      	str	r3, [r4, #24]
 80068d8:	e7d2      	b.n	8006880 <__sinit+0xc>
 80068da:	bf00      	nop
 80068dc:	080077e0 	.word	0x080077e0
 80068e0:	0800680d 	.word	0x0800680d

080068e4 <__sfp>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	4607      	mov	r7, r0
 80068e8:	f7ff ffac 	bl	8006844 <__sfp_lock_acquire>
 80068ec:	4b1e      	ldr	r3, [pc, #120]	; (8006968 <__sfp+0x84>)
 80068ee:	681e      	ldr	r6, [r3, #0]
 80068f0:	69b3      	ldr	r3, [r6, #24]
 80068f2:	b913      	cbnz	r3, 80068fa <__sfp+0x16>
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff ffbd 	bl	8006874 <__sinit>
 80068fa:	3648      	adds	r6, #72	; 0x48
 80068fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006900:	3b01      	subs	r3, #1
 8006902:	d503      	bpl.n	800690c <__sfp+0x28>
 8006904:	6833      	ldr	r3, [r6, #0]
 8006906:	b30b      	cbz	r3, 800694c <__sfp+0x68>
 8006908:	6836      	ldr	r6, [r6, #0]
 800690a:	e7f7      	b.n	80068fc <__sfp+0x18>
 800690c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006910:	b9d5      	cbnz	r5, 8006948 <__sfp+0x64>
 8006912:	4b16      	ldr	r3, [pc, #88]	; (800696c <__sfp+0x88>)
 8006914:	60e3      	str	r3, [r4, #12]
 8006916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800691a:	6665      	str	r5, [r4, #100]	; 0x64
 800691c:	f000 f8a4 	bl	8006a68 <__retarget_lock_init_recursive>
 8006920:	f7ff ff96 	bl	8006850 <__sfp_lock_release>
 8006924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800692c:	6025      	str	r5, [r4, #0]
 800692e:	61a5      	str	r5, [r4, #24]
 8006930:	2208      	movs	r2, #8
 8006932:	4629      	mov	r1, r5
 8006934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006938:	f7ff fbb0 	bl	800609c <memset>
 800693c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006944:	4620      	mov	r0, r4
 8006946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006948:	3468      	adds	r4, #104	; 0x68
 800694a:	e7d9      	b.n	8006900 <__sfp+0x1c>
 800694c:	2104      	movs	r1, #4
 800694e:	4638      	mov	r0, r7
 8006950:	f7ff ff62 	bl	8006818 <__sfmoreglue>
 8006954:	4604      	mov	r4, r0
 8006956:	6030      	str	r0, [r6, #0]
 8006958:	2800      	cmp	r0, #0
 800695a:	d1d5      	bne.n	8006908 <__sfp+0x24>
 800695c:	f7ff ff78 	bl	8006850 <__sfp_lock_release>
 8006960:	230c      	movs	r3, #12
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	e7ee      	b.n	8006944 <__sfp+0x60>
 8006966:	bf00      	nop
 8006968:	080077e0 	.word	0x080077e0
 800696c:	ffff0001 	.word	0xffff0001

08006970 <_fwalk>:
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	460f      	mov	r7, r1
 8006976:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800697a:	2600      	movs	r6, #0
 800697c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8006980:	f1b8 0801 	subs.w	r8, r8, #1
 8006984:	d505      	bpl.n	8006992 <_fwalk+0x22>
 8006986:	6824      	ldr	r4, [r4, #0]
 8006988:	2c00      	cmp	r4, #0
 800698a:	d1f7      	bne.n	800697c <_fwalk+0xc>
 800698c:	4630      	mov	r0, r6
 800698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d906      	bls.n	80069a6 <_fwalk+0x36>
 8006998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800699c:	3301      	adds	r3, #1
 800699e:	d002      	beq.n	80069a6 <_fwalk+0x36>
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	4306      	orrs	r6, r0
 80069a6:	3568      	adds	r5, #104	; 0x68
 80069a8:	e7ea      	b.n	8006980 <_fwalk+0x10>

080069aa <_fwalk_reent>:
 80069aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ae:	4606      	mov	r6, r0
 80069b0:	4688      	mov	r8, r1
 80069b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069b6:	2700      	movs	r7, #0
 80069b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069bc:	f1b9 0901 	subs.w	r9, r9, #1
 80069c0:	d505      	bpl.n	80069ce <_fwalk_reent+0x24>
 80069c2:	6824      	ldr	r4, [r4, #0]
 80069c4:	2c00      	cmp	r4, #0
 80069c6:	d1f7      	bne.n	80069b8 <_fwalk_reent+0xe>
 80069c8:	4638      	mov	r0, r7
 80069ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ce:	89ab      	ldrh	r3, [r5, #12]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d907      	bls.n	80069e4 <_fwalk_reent+0x3a>
 80069d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069d8:	3301      	adds	r3, #1
 80069da:	d003      	beq.n	80069e4 <_fwalk_reent+0x3a>
 80069dc:	4629      	mov	r1, r5
 80069de:	4630      	mov	r0, r6
 80069e0:	47c0      	blx	r8
 80069e2:	4307      	orrs	r7, r0
 80069e4:	3568      	adds	r5, #104	; 0x68
 80069e6:	e7e9      	b.n	80069bc <_fwalk_reent+0x12>

080069e8 <_getc_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	460c      	mov	r4, r1
 80069ec:	4605      	mov	r5, r0
 80069ee:	b118      	cbz	r0, 80069f8 <_getc_r+0x10>
 80069f0:	6983      	ldr	r3, [r0, #24]
 80069f2:	b90b      	cbnz	r3, 80069f8 <_getc_r+0x10>
 80069f4:	f7ff ff3e 	bl	8006874 <__sinit>
 80069f8:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <_getc_r+0x74>)
 80069fa:	429c      	cmp	r4, r3
 80069fc:	d11e      	bne.n	8006a3c <_getc_r+0x54>
 80069fe:	686c      	ldr	r4, [r5, #4]
 8006a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a02:	07d8      	lsls	r0, r3, #31
 8006a04:	d405      	bmi.n	8006a12 <_getc_r+0x2a>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	0599      	lsls	r1, r3, #22
 8006a0a:	d402      	bmi.n	8006a12 <_getc_r+0x2a>
 8006a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a0e:	f000 f82c 	bl	8006a6a <__retarget_lock_acquire_recursive>
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	da19      	bge.n	8006a50 <_getc_r+0x68>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	4621      	mov	r1, r4
 8006a20:	f000 fc72 	bl	8007308 <__srget_r>
 8006a24:	4605      	mov	r5, r0
 8006a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a28:	07da      	lsls	r2, r3, #31
 8006a2a:	d405      	bmi.n	8006a38 <_getc_r+0x50>
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	059b      	lsls	r3, r3, #22
 8006a30:	d402      	bmi.n	8006a38 <_getc_r+0x50>
 8006a32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a34:	f000 f81a 	bl	8006a6c <__retarget_lock_release_recursive>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <_getc_r+0x78>)
 8006a3e:	429c      	cmp	r4, r3
 8006a40:	d101      	bne.n	8006a46 <_getc_r+0x5e>
 8006a42:	68ac      	ldr	r4, [r5, #8]
 8006a44:	e7dc      	b.n	8006a00 <_getc_r+0x18>
 8006a46:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <_getc_r+0x7c>)
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	bf08      	it	eq
 8006a4c:	68ec      	ldreq	r4, [r5, #12]
 8006a4e:	e7d7      	b.n	8006a00 <_getc_r+0x18>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	6022      	str	r2, [r4, #0]
 8006a56:	781d      	ldrb	r5, [r3, #0]
 8006a58:	e7e5      	b.n	8006a26 <_getc_r+0x3e>
 8006a5a:	bf00      	nop
 8006a5c:	08007908 	.word	0x08007908
 8006a60:	08007928 	.word	0x08007928
 8006a64:	080078e8 	.word	0x080078e8

08006a68 <__retarget_lock_init_recursive>:
 8006a68:	4770      	bx	lr

08006a6a <__retarget_lock_acquire_recursive>:
 8006a6a:	4770      	bx	lr

08006a6c <__retarget_lock_release_recursive>:
 8006a6c:	4770      	bx	lr

08006a6e <__swhatbuf_r>:
 8006a6e:	b570      	push	{r4, r5, r6, lr}
 8006a70:	460e      	mov	r6, r1
 8006a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a76:	2900      	cmp	r1, #0
 8006a78:	b096      	sub	sp, #88	; 0x58
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	461d      	mov	r5, r3
 8006a7e:	da07      	bge.n	8006a90 <__swhatbuf_r+0x22>
 8006a80:	2300      	movs	r3, #0
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	89b3      	ldrh	r3, [r6, #12]
 8006a86:	061a      	lsls	r2, r3, #24
 8006a88:	d410      	bmi.n	8006aac <__swhatbuf_r+0x3e>
 8006a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a8e:	e00e      	b.n	8006aae <__swhatbuf_r+0x40>
 8006a90:	466a      	mov	r2, sp
 8006a92:	f000 fcdb 	bl	800744c <_fstat_r>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	dbf2      	blt.n	8006a80 <__swhatbuf_r+0x12>
 8006a9a:	9a01      	ldr	r2, [sp, #4]
 8006a9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006aa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aa4:	425a      	negs	r2, r3
 8006aa6:	415a      	adcs	r2, r3
 8006aa8:	602a      	str	r2, [r5, #0]
 8006aaa:	e7ee      	b.n	8006a8a <__swhatbuf_r+0x1c>
 8006aac:	2340      	movs	r3, #64	; 0x40
 8006aae:	2000      	movs	r0, #0
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	b016      	add	sp, #88	; 0x58
 8006ab4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ab8 <__smakebuf_r>:
 8006ab8:	898b      	ldrh	r3, [r1, #12]
 8006aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006abc:	079d      	lsls	r5, r3, #30
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	d507      	bpl.n	8006ad4 <__smakebuf_r+0x1c>
 8006ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	6123      	str	r3, [r4, #16]
 8006acc:	2301      	movs	r3, #1
 8006ace:	6163      	str	r3, [r4, #20]
 8006ad0:	b002      	add	sp, #8
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
 8006ad4:	ab01      	add	r3, sp, #4
 8006ad6:	466a      	mov	r2, sp
 8006ad8:	f7ff ffc9 	bl	8006a6e <__swhatbuf_r>
 8006adc:	9900      	ldr	r1, [sp, #0]
 8006ade:	4605      	mov	r5, r0
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 f881 	bl	8006be8 <_malloc_r>
 8006ae6:	b948      	cbnz	r0, 8006afc <__smakebuf_r+0x44>
 8006ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aec:	059a      	lsls	r2, r3, #22
 8006aee:	d4ef      	bmi.n	8006ad0 <__smakebuf_r+0x18>
 8006af0:	f023 0303 	bic.w	r3, r3, #3
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	81a3      	strh	r3, [r4, #12]
 8006afa:	e7e3      	b.n	8006ac4 <__smakebuf_r+0xc>
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <__smakebuf_r+0x7c>)
 8006afe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	6020      	str	r0, [r4, #0]
 8006b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	9b00      	ldr	r3, [sp, #0]
 8006b0c:	6163      	str	r3, [r4, #20]
 8006b0e:	9b01      	ldr	r3, [sp, #4]
 8006b10:	6120      	str	r0, [r4, #16]
 8006b12:	b15b      	cbz	r3, 8006b2c <__smakebuf_r+0x74>
 8006b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f000 fca9 	bl	8007470 <_isatty_r>
 8006b1e:	b128      	cbz	r0, 8006b2c <__smakebuf_r+0x74>
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	89a0      	ldrh	r0, [r4, #12]
 8006b2e:	4305      	orrs	r5, r0
 8006b30:	81a5      	strh	r5, [r4, #12]
 8006b32:	e7cd      	b.n	8006ad0 <__smakebuf_r+0x18>
 8006b34:	0800680d 	.word	0x0800680d

08006b38 <malloc>:
 8006b38:	4b02      	ldr	r3, [pc, #8]	; (8006b44 <malloc+0xc>)
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	f000 b853 	b.w	8006be8 <_malloc_r>
 8006b42:	bf00      	nop
 8006b44:	2000005c 	.word	0x2000005c

08006b48 <_free_r>:
 8006b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d048      	beq.n	8006be0 <_free_r+0x98>
 8006b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b52:	9001      	str	r0, [sp, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f1a1 0404 	sub.w	r4, r1, #4
 8006b5a:	bfb8      	it	lt
 8006b5c:	18e4      	addlt	r4, r4, r3
 8006b5e:	f000 fca9 	bl	80074b4 <__malloc_lock>
 8006b62:	4a20      	ldr	r2, [pc, #128]	; (8006be4 <_free_r+0x9c>)
 8006b64:	9801      	ldr	r0, [sp, #4]
 8006b66:	6813      	ldr	r3, [r2, #0]
 8006b68:	4615      	mov	r5, r2
 8006b6a:	b933      	cbnz	r3, 8006b7a <_free_r+0x32>
 8006b6c:	6063      	str	r3, [r4, #4]
 8006b6e:	6014      	str	r4, [r2, #0]
 8006b70:	b003      	add	sp, #12
 8006b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b76:	f000 bca3 	b.w	80074c0 <__malloc_unlock>
 8006b7a:	42a3      	cmp	r3, r4
 8006b7c:	d90b      	bls.n	8006b96 <_free_r+0x4e>
 8006b7e:	6821      	ldr	r1, [r4, #0]
 8006b80:	1862      	adds	r2, r4, r1
 8006b82:	4293      	cmp	r3, r2
 8006b84:	bf04      	itt	eq
 8006b86:	681a      	ldreq	r2, [r3, #0]
 8006b88:	685b      	ldreq	r3, [r3, #4]
 8006b8a:	6063      	str	r3, [r4, #4]
 8006b8c:	bf04      	itt	eq
 8006b8e:	1852      	addeq	r2, r2, r1
 8006b90:	6022      	streq	r2, [r4, #0]
 8006b92:	602c      	str	r4, [r5, #0]
 8006b94:	e7ec      	b.n	8006b70 <_free_r+0x28>
 8006b96:	461a      	mov	r2, r3
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_free_r+0x58>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d9fa      	bls.n	8006b96 <_free_r+0x4e>
 8006ba0:	6811      	ldr	r1, [r2, #0]
 8006ba2:	1855      	adds	r5, r2, r1
 8006ba4:	42a5      	cmp	r5, r4
 8006ba6:	d10b      	bne.n	8006bc0 <_free_r+0x78>
 8006ba8:	6824      	ldr	r4, [r4, #0]
 8006baa:	4421      	add	r1, r4
 8006bac:	1854      	adds	r4, r2, r1
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	d1dd      	bne.n	8006b70 <_free_r+0x28>
 8006bb4:	681c      	ldr	r4, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	6053      	str	r3, [r2, #4]
 8006bba:	4421      	add	r1, r4
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	e7d7      	b.n	8006b70 <_free_r+0x28>
 8006bc0:	d902      	bls.n	8006bc8 <_free_r+0x80>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	e7d3      	b.n	8006b70 <_free_r+0x28>
 8006bc8:	6825      	ldr	r5, [r4, #0]
 8006bca:	1961      	adds	r1, r4, r5
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf04      	itt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	bf04      	itt	eq
 8006bd8:	1949      	addeq	r1, r1, r5
 8006bda:	6021      	streq	r1, [r4, #0]
 8006bdc:	6054      	str	r4, [r2, #4]
 8006bde:	e7c7      	b.n	8006b70 <_free_r+0x28>
 8006be0:	b003      	add	sp, #12
 8006be2:	bd30      	pop	{r4, r5, pc}
 8006be4:	200000e4 	.word	0x200000e4

08006be8 <_malloc_r>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	1ccd      	adds	r5, r1, #3
 8006bec:	f025 0503 	bic.w	r5, r5, #3
 8006bf0:	3508      	adds	r5, #8
 8006bf2:	2d0c      	cmp	r5, #12
 8006bf4:	bf38      	it	cc
 8006bf6:	250c      	movcc	r5, #12
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	db01      	blt.n	8006c02 <_malloc_r+0x1a>
 8006bfe:	42a9      	cmp	r1, r5
 8006c00:	d903      	bls.n	8006c0a <_malloc_r+0x22>
 8006c02:	230c      	movs	r3, #12
 8006c04:	6033      	str	r3, [r6, #0]
 8006c06:	2000      	movs	r0, #0
 8006c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0a:	f000 fc53 	bl	80074b4 <__malloc_lock>
 8006c0e:	4921      	ldr	r1, [pc, #132]	; (8006c94 <_malloc_r+0xac>)
 8006c10:	680a      	ldr	r2, [r1, #0]
 8006c12:	4614      	mov	r4, r2
 8006c14:	b99c      	cbnz	r4, 8006c3e <_malloc_r+0x56>
 8006c16:	4f20      	ldr	r7, [pc, #128]	; (8006c98 <_malloc_r+0xb0>)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	b923      	cbnz	r3, 8006c26 <_malloc_r+0x3e>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 fb9e 	bl	8007360 <_sbrk_r>
 8006c24:	6038      	str	r0, [r7, #0]
 8006c26:	4629      	mov	r1, r5
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 fb99 	bl	8007360 <_sbrk_r>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	d123      	bne.n	8006c7a <_malloc_r+0x92>
 8006c32:	230c      	movs	r3, #12
 8006c34:	6033      	str	r3, [r6, #0]
 8006c36:	4630      	mov	r0, r6
 8006c38:	f000 fc42 	bl	80074c0 <__malloc_unlock>
 8006c3c:	e7e3      	b.n	8006c06 <_malloc_r+0x1e>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	1b5b      	subs	r3, r3, r5
 8006c42:	d417      	bmi.n	8006c74 <_malloc_r+0x8c>
 8006c44:	2b0b      	cmp	r3, #11
 8006c46:	d903      	bls.n	8006c50 <_malloc_r+0x68>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	441c      	add	r4, r3
 8006c4c:	6025      	str	r5, [r4, #0]
 8006c4e:	e004      	b.n	8006c5a <_malloc_r+0x72>
 8006c50:	6863      	ldr	r3, [r4, #4]
 8006c52:	42a2      	cmp	r2, r4
 8006c54:	bf0c      	ite	eq
 8006c56:	600b      	streq	r3, [r1, #0]
 8006c58:	6053      	strne	r3, [r2, #4]
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 fc30 	bl	80074c0 <__malloc_unlock>
 8006c60:	f104 000b 	add.w	r0, r4, #11
 8006c64:	1d23      	adds	r3, r4, #4
 8006c66:	f020 0007 	bic.w	r0, r0, #7
 8006c6a:	1ac2      	subs	r2, r0, r3
 8006c6c:	d0cc      	beq.n	8006c08 <_malloc_r+0x20>
 8006c6e:	1a1b      	subs	r3, r3, r0
 8006c70:	50a3      	str	r3, [r4, r2]
 8006c72:	e7c9      	b.n	8006c08 <_malloc_r+0x20>
 8006c74:	4622      	mov	r2, r4
 8006c76:	6864      	ldr	r4, [r4, #4]
 8006c78:	e7cc      	b.n	8006c14 <_malloc_r+0x2c>
 8006c7a:	1cc4      	adds	r4, r0, #3
 8006c7c:	f024 0403 	bic.w	r4, r4, #3
 8006c80:	42a0      	cmp	r0, r4
 8006c82:	d0e3      	beq.n	8006c4c <_malloc_r+0x64>
 8006c84:	1a21      	subs	r1, r4, r0
 8006c86:	4630      	mov	r0, r6
 8006c88:	f000 fb6a 	bl	8007360 <_sbrk_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d1dd      	bne.n	8006c4c <_malloc_r+0x64>
 8006c90:	e7cf      	b.n	8006c32 <_malloc_r+0x4a>
 8006c92:	bf00      	nop
 8006c94:	200000e4 	.word	0x200000e4
 8006c98:	200000e8 	.word	0x200000e8

08006c9c <__sfputc_r>:
 8006c9c:	6893      	ldr	r3, [r2, #8]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	b410      	push	{r4}
 8006ca4:	6093      	str	r3, [r2, #8]
 8006ca6:	da08      	bge.n	8006cba <__sfputc_r+0x1e>
 8006ca8:	6994      	ldr	r4, [r2, #24]
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	db01      	blt.n	8006cb2 <__sfputc_r+0x16>
 8006cae:	290a      	cmp	r1, #10
 8006cb0:	d103      	bne.n	8006cba <__sfputc_r+0x1e>
 8006cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cb6:	f7ff bbf1 	b.w	800649c <__swbuf_r>
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	1c58      	adds	r0, r3, #1
 8006cbe:	6010      	str	r0, [r2, #0]
 8006cc0:	7019      	strb	r1, [r3, #0]
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <__sfputs_r>:
 8006cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ccc:	4606      	mov	r6, r0
 8006cce:	460f      	mov	r7, r1
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	18d5      	adds	r5, r2, r3
 8006cd4:	42ac      	cmp	r4, r5
 8006cd6:	d101      	bne.n	8006cdc <__sfputs_r+0x12>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e007      	b.n	8006cec <__sfputs_r+0x22>
 8006cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce0:	463a      	mov	r2, r7
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff ffda 	bl	8006c9c <__sfputc_r>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d1f3      	bne.n	8006cd4 <__sfputs_r+0xa>
 8006cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cf0 <_vfiprintf_r>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	b09d      	sub	sp, #116	; 0x74
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	4698      	mov	r8, r3
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	b118      	cbz	r0, 8006d08 <_vfiprintf_r+0x18>
 8006d00:	6983      	ldr	r3, [r0, #24]
 8006d02:	b90b      	cbnz	r3, 8006d08 <_vfiprintf_r+0x18>
 8006d04:	f7ff fdb6 	bl	8006874 <__sinit>
 8006d08:	4b89      	ldr	r3, [pc, #548]	; (8006f30 <_vfiprintf_r+0x240>)
 8006d0a:	429d      	cmp	r5, r3
 8006d0c:	d11b      	bne.n	8006d46 <_vfiprintf_r+0x56>
 8006d0e:	6875      	ldr	r5, [r6, #4]
 8006d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d12:	07d9      	lsls	r1, r3, #31
 8006d14:	d405      	bmi.n	8006d22 <_vfiprintf_r+0x32>
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	059a      	lsls	r2, r3, #22
 8006d1a:	d402      	bmi.n	8006d22 <_vfiprintf_r+0x32>
 8006d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d1e:	f7ff fea4 	bl	8006a6a <__retarget_lock_acquire_recursive>
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	071b      	lsls	r3, r3, #28
 8006d26:	d501      	bpl.n	8006d2c <_vfiprintf_r+0x3c>
 8006d28:	692b      	ldr	r3, [r5, #16]
 8006d2a:	b9eb      	cbnz	r3, 8006d68 <_vfiprintf_r+0x78>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f7ff fc06 	bl	8006540 <__swsetup_r>
 8006d34:	b1c0      	cbz	r0, 8006d68 <_vfiprintf_r+0x78>
 8006d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d38:	07dc      	lsls	r4, r3, #31
 8006d3a:	d50e      	bpl.n	8006d5a <_vfiprintf_r+0x6a>
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	b01d      	add	sp, #116	; 0x74
 8006d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d46:	4b7b      	ldr	r3, [pc, #492]	; (8006f34 <_vfiprintf_r+0x244>)
 8006d48:	429d      	cmp	r5, r3
 8006d4a:	d101      	bne.n	8006d50 <_vfiprintf_r+0x60>
 8006d4c:	68b5      	ldr	r5, [r6, #8]
 8006d4e:	e7df      	b.n	8006d10 <_vfiprintf_r+0x20>
 8006d50:	4b79      	ldr	r3, [pc, #484]	; (8006f38 <_vfiprintf_r+0x248>)
 8006d52:	429d      	cmp	r5, r3
 8006d54:	bf08      	it	eq
 8006d56:	68f5      	ldreq	r5, [r6, #12]
 8006d58:	e7da      	b.n	8006d10 <_vfiprintf_r+0x20>
 8006d5a:	89ab      	ldrh	r3, [r5, #12]
 8006d5c:	0598      	lsls	r0, r3, #22
 8006d5e:	d4ed      	bmi.n	8006d3c <_vfiprintf_r+0x4c>
 8006d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d62:	f7ff fe83 	bl	8006a6c <__retarget_lock_release_recursive>
 8006d66:	e7e9      	b.n	8006d3c <_vfiprintf_r+0x4c>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6c:	2320      	movs	r3, #32
 8006d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d76:	2330      	movs	r3, #48	; 0x30
 8006d78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f3c <_vfiprintf_r+0x24c>
 8006d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d80:	f04f 0901 	mov.w	r9, #1
 8006d84:	4623      	mov	r3, r4
 8006d86:	469a      	mov	sl, r3
 8006d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d8c:	b10a      	cbz	r2, 8006d92 <_vfiprintf_r+0xa2>
 8006d8e:	2a25      	cmp	r2, #37	; 0x25
 8006d90:	d1f9      	bne.n	8006d86 <_vfiprintf_r+0x96>
 8006d92:	ebba 0b04 	subs.w	fp, sl, r4
 8006d96:	d00b      	beq.n	8006db0 <_vfiprintf_r+0xc0>
 8006d98:	465b      	mov	r3, fp
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ff93 	bl	8006cca <__sfputs_r>
 8006da4:	3001      	adds	r0, #1
 8006da6:	f000 80aa 	beq.w	8006efe <_vfiprintf_r+0x20e>
 8006daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dac:	445a      	add	r2, fp
 8006dae:	9209      	str	r2, [sp, #36]	; 0x24
 8006db0:	f89a 3000 	ldrb.w	r3, [sl]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80a2 	beq.w	8006efe <_vfiprintf_r+0x20e>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc4:	f10a 0a01 	add.w	sl, sl, #1
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	9307      	str	r3, [sp, #28]
 8006dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006dd2:	4654      	mov	r4, sl
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dda:	4858      	ldr	r0, [pc, #352]	; (8006f3c <_vfiprintf_r+0x24c>)
 8006ddc:	f7f9 fa08 	bl	80001f0 <memchr>
 8006de0:	9a04      	ldr	r2, [sp, #16]
 8006de2:	b9d8      	cbnz	r0, 8006e1c <_vfiprintf_r+0x12c>
 8006de4:	06d1      	lsls	r1, r2, #27
 8006de6:	bf44      	itt	mi
 8006de8:	2320      	movmi	r3, #32
 8006dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dee:	0713      	lsls	r3, r2, #28
 8006df0:	bf44      	itt	mi
 8006df2:	232b      	movmi	r3, #43	; 0x2b
 8006df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006dfe:	d015      	beq.n	8006e2c <_vfiprintf_r+0x13c>
 8006e00:	9a07      	ldr	r2, [sp, #28]
 8006e02:	4654      	mov	r4, sl
 8006e04:	2000      	movs	r0, #0
 8006e06:	f04f 0c0a 	mov.w	ip, #10
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e10:	3b30      	subs	r3, #48	; 0x30
 8006e12:	2b09      	cmp	r3, #9
 8006e14:	d94e      	bls.n	8006eb4 <_vfiprintf_r+0x1c4>
 8006e16:	b1b0      	cbz	r0, 8006e46 <_vfiprintf_r+0x156>
 8006e18:	9207      	str	r2, [sp, #28]
 8006e1a:	e014      	b.n	8006e46 <_vfiprintf_r+0x156>
 8006e1c:	eba0 0308 	sub.w	r3, r0, r8
 8006e20:	fa09 f303 	lsl.w	r3, r9, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	46a2      	mov	sl, r4
 8006e2a:	e7d2      	b.n	8006dd2 <_vfiprintf_r+0xe2>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	1d19      	adds	r1, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	9103      	str	r1, [sp, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bfbb      	ittet	lt
 8006e38:	425b      	neglt	r3, r3
 8006e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e3e:	9307      	strge	r3, [sp, #28]
 8006e40:	9307      	strlt	r3, [sp, #28]
 8006e42:	bfb8      	it	lt
 8006e44:	9204      	strlt	r2, [sp, #16]
 8006e46:	7823      	ldrb	r3, [r4, #0]
 8006e48:	2b2e      	cmp	r3, #46	; 0x2e
 8006e4a:	d10c      	bne.n	8006e66 <_vfiprintf_r+0x176>
 8006e4c:	7863      	ldrb	r3, [r4, #1]
 8006e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e50:	d135      	bne.n	8006ebe <_vfiprintf_r+0x1ce>
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	1d1a      	adds	r2, r3, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	9203      	str	r2, [sp, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bfb8      	it	lt
 8006e5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e62:	3402      	adds	r4, #2
 8006e64:	9305      	str	r3, [sp, #20]
 8006e66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f4c <_vfiprintf_r+0x25c>
 8006e6a:	7821      	ldrb	r1, [r4, #0]
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	4650      	mov	r0, sl
 8006e70:	f7f9 f9be 	bl	80001f0 <memchr>
 8006e74:	b140      	cbz	r0, 8006e88 <_vfiprintf_r+0x198>
 8006e76:	2340      	movs	r3, #64	; 0x40
 8006e78:	eba0 000a 	sub.w	r0, r0, sl
 8006e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8006e80:	9b04      	ldr	r3, [sp, #16]
 8006e82:	4303      	orrs	r3, r0
 8006e84:	3401      	adds	r4, #1
 8006e86:	9304      	str	r3, [sp, #16]
 8006e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8c:	482c      	ldr	r0, [pc, #176]	; (8006f40 <_vfiprintf_r+0x250>)
 8006e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e92:	2206      	movs	r2, #6
 8006e94:	f7f9 f9ac 	bl	80001f0 <memchr>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d03f      	beq.n	8006f1c <_vfiprintf_r+0x22c>
 8006e9c:	4b29      	ldr	r3, [pc, #164]	; (8006f44 <_vfiprintf_r+0x254>)
 8006e9e:	bb1b      	cbnz	r3, 8006ee8 <_vfiprintf_r+0x1f8>
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	3307      	adds	r3, #7
 8006ea4:	f023 0307 	bic.w	r3, r3, #7
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	9303      	str	r3, [sp, #12]
 8006eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eae:	443b      	add	r3, r7
 8006eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb2:	e767      	b.n	8006d84 <_vfiprintf_r+0x94>
 8006eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eb8:	460c      	mov	r4, r1
 8006eba:	2001      	movs	r0, #1
 8006ebc:	e7a5      	b.n	8006e0a <_vfiprintf_r+0x11a>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	3401      	adds	r4, #1
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f04f 0c0a 	mov.w	ip, #10
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed0:	3a30      	subs	r2, #48	; 0x30
 8006ed2:	2a09      	cmp	r2, #9
 8006ed4:	d903      	bls.n	8006ede <_vfiprintf_r+0x1ee>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0c5      	beq.n	8006e66 <_vfiprintf_r+0x176>
 8006eda:	9105      	str	r1, [sp, #20]
 8006edc:	e7c3      	b.n	8006e66 <_vfiprintf_r+0x176>
 8006ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e7f0      	b.n	8006eca <_vfiprintf_r+0x1da>
 8006ee8:	ab03      	add	r3, sp, #12
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	462a      	mov	r2, r5
 8006eee:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <_vfiprintf_r+0x258>)
 8006ef0:	a904      	add	r1, sp, #16
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f3af 8000 	nop.w
 8006ef8:	4607      	mov	r7, r0
 8006efa:	1c78      	adds	r0, r7, #1
 8006efc:	d1d6      	bne.n	8006eac <_vfiprintf_r+0x1bc>
 8006efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f00:	07d9      	lsls	r1, r3, #31
 8006f02:	d405      	bmi.n	8006f10 <_vfiprintf_r+0x220>
 8006f04:	89ab      	ldrh	r3, [r5, #12]
 8006f06:	059a      	lsls	r2, r3, #22
 8006f08:	d402      	bmi.n	8006f10 <_vfiprintf_r+0x220>
 8006f0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f0c:	f7ff fdae 	bl	8006a6c <__retarget_lock_release_recursive>
 8006f10:	89ab      	ldrh	r3, [r5, #12]
 8006f12:	065b      	lsls	r3, r3, #25
 8006f14:	f53f af12 	bmi.w	8006d3c <_vfiprintf_r+0x4c>
 8006f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f1a:	e711      	b.n	8006d40 <_vfiprintf_r+0x50>
 8006f1c:	ab03      	add	r3, sp, #12
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	462a      	mov	r2, r5
 8006f22:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <_vfiprintf_r+0x258>)
 8006f24:	a904      	add	r1, sp, #16
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f880 	bl	800702c <_printf_i>
 8006f2c:	e7e4      	b.n	8006ef8 <_vfiprintf_r+0x208>
 8006f2e:	bf00      	nop
 8006f30:	08007908 	.word	0x08007908
 8006f34:	08007928 	.word	0x08007928
 8006f38:	080078e8 	.word	0x080078e8
 8006f3c:	08007948 	.word	0x08007948
 8006f40:	08007952 	.word	0x08007952
 8006f44:	00000000 	.word	0x00000000
 8006f48:	08006ccb 	.word	0x08006ccb
 8006f4c:	0800794e 	.word	0x0800794e

08006f50 <_printf_common>:
 8006f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f54:	4616      	mov	r6, r2
 8006f56:	4699      	mov	r9, r3
 8006f58:	688a      	ldr	r2, [r1, #8]
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f60:	4293      	cmp	r3, r2
 8006f62:	bfb8      	it	lt
 8006f64:	4613      	movlt	r3, r2
 8006f66:	6033      	str	r3, [r6, #0]
 8006f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	b10a      	cbz	r2, 8006f76 <_printf_common+0x26>
 8006f72:	3301      	adds	r3, #1
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	0699      	lsls	r1, r3, #26
 8006f7a:	bf42      	ittt	mi
 8006f7c:	6833      	ldrmi	r3, [r6, #0]
 8006f7e:	3302      	addmi	r3, #2
 8006f80:	6033      	strmi	r3, [r6, #0]
 8006f82:	6825      	ldr	r5, [r4, #0]
 8006f84:	f015 0506 	ands.w	r5, r5, #6
 8006f88:	d106      	bne.n	8006f98 <_printf_common+0x48>
 8006f8a:	f104 0a19 	add.w	sl, r4, #25
 8006f8e:	68e3      	ldr	r3, [r4, #12]
 8006f90:	6832      	ldr	r2, [r6, #0]
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	dc26      	bgt.n	8006fe6 <_printf_common+0x96>
 8006f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f9c:	1e13      	subs	r3, r2, #0
 8006f9e:	6822      	ldr	r2, [r4, #0]
 8006fa0:	bf18      	it	ne
 8006fa2:	2301      	movne	r3, #1
 8006fa4:	0692      	lsls	r2, r2, #26
 8006fa6:	d42b      	bmi.n	8007000 <_printf_common+0xb0>
 8006fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fac:	4649      	mov	r1, r9
 8006fae:	4638      	mov	r0, r7
 8006fb0:	47c0      	blx	r8
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d01e      	beq.n	8006ff4 <_printf_common+0xa4>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	68e5      	ldr	r5, [r4, #12]
 8006fba:	6832      	ldr	r2, [r6, #0]
 8006fbc:	f003 0306 	and.w	r3, r3, #6
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	bf08      	it	eq
 8006fc4:	1aad      	subeq	r5, r5, r2
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	6922      	ldr	r2, [r4, #16]
 8006fca:	bf0c      	ite	eq
 8006fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd0:	2500      	movne	r5, #0
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	bfc4      	itt	gt
 8006fd6:	1a9b      	subgt	r3, r3, r2
 8006fd8:	18ed      	addgt	r5, r5, r3
 8006fda:	2600      	movs	r6, #0
 8006fdc:	341a      	adds	r4, #26
 8006fde:	42b5      	cmp	r5, r6
 8006fe0:	d11a      	bne.n	8007018 <_printf_common+0xc8>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e008      	b.n	8006ff8 <_printf_common+0xa8>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4649      	mov	r1, r9
 8006fec:	4638      	mov	r0, r7
 8006fee:	47c0      	blx	r8
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d103      	bne.n	8006ffc <_printf_common+0xac>
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	e7c6      	b.n	8006f8e <_printf_common+0x3e>
 8007000:	18e1      	adds	r1, r4, r3
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	2030      	movs	r0, #48	; 0x30
 8007006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800700a:	4422      	add	r2, r4
 800700c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007014:	3302      	adds	r3, #2
 8007016:	e7c7      	b.n	8006fa8 <_printf_common+0x58>
 8007018:	2301      	movs	r3, #1
 800701a:	4622      	mov	r2, r4
 800701c:	4649      	mov	r1, r9
 800701e:	4638      	mov	r0, r7
 8007020:	47c0      	blx	r8
 8007022:	3001      	adds	r0, #1
 8007024:	d0e6      	beq.n	8006ff4 <_printf_common+0xa4>
 8007026:	3601      	adds	r6, #1
 8007028:	e7d9      	b.n	8006fde <_printf_common+0x8e>
	...

0800702c <_printf_i>:
 800702c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	460c      	mov	r4, r1
 8007032:	4691      	mov	r9, r2
 8007034:	7e27      	ldrb	r7, [r4, #24]
 8007036:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007038:	2f78      	cmp	r7, #120	; 0x78
 800703a:	4680      	mov	r8, r0
 800703c:	469a      	mov	sl, r3
 800703e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007042:	d807      	bhi.n	8007054 <_printf_i+0x28>
 8007044:	2f62      	cmp	r7, #98	; 0x62
 8007046:	d80a      	bhi.n	800705e <_printf_i+0x32>
 8007048:	2f00      	cmp	r7, #0
 800704a:	f000 80d8 	beq.w	80071fe <_printf_i+0x1d2>
 800704e:	2f58      	cmp	r7, #88	; 0x58
 8007050:	f000 80a3 	beq.w	800719a <_printf_i+0x16e>
 8007054:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800705c:	e03a      	b.n	80070d4 <_printf_i+0xa8>
 800705e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007062:	2b15      	cmp	r3, #21
 8007064:	d8f6      	bhi.n	8007054 <_printf_i+0x28>
 8007066:	a001      	add	r0, pc, #4	; (adr r0, 800706c <_printf_i+0x40>)
 8007068:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070d9 	.word	0x080070d9
 8007074:	08007055 	.word	0x08007055
 8007078:	08007055 	.word	0x08007055
 800707c:	08007055 	.word	0x08007055
 8007080:	08007055 	.word	0x08007055
 8007084:	080070d9 	.word	0x080070d9
 8007088:	08007055 	.word	0x08007055
 800708c:	08007055 	.word	0x08007055
 8007090:	08007055 	.word	0x08007055
 8007094:	08007055 	.word	0x08007055
 8007098:	080071e5 	.word	0x080071e5
 800709c:	08007109 	.word	0x08007109
 80070a0:	080071c7 	.word	0x080071c7
 80070a4:	08007055 	.word	0x08007055
 80070a8:	08007055 	.word	0x08007055
 80070ac:	08007207 	.word	0x08007207
 80070b0:	08007055 	.word	0x08007055
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007055 	.word	0x08007055
 80070bc:	08007055 	.word	0x08007055
 80070c0:	080071cf 	.word	0x080071cf
 80070c4:	680b      	ldr	r3, [r1, #0]
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	600a      	str	r2, [r1, #0]
 80070cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0a3      	b.n	8007220 <_printf_i+0x1f4>
 80070d8:	6825      	ldr	r5, [r4, #0]
 80070da:	6808      	ldr	r0, [r1, #0]
 80070dc:	062e      	lsls	r6, r5, #24
 80070de:	f100 0304 	add.w	r3, r0, #4
 80070e2:	d50a      	bpl.n	80070fa <_printf_i+0xce>
 80070e4:	6805      	ldr	r5, [r0, #0]
 80070e6:	600b      	str	r3, [r1, #0]
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	da03      	bge.n	80070f4 <_printf_i+0xc8>
 80070ec:	232d      	movs	r3, #45	; 0x2d
 80070ee:	426d      	negs	r5, r5
 80070f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f4:	485e      	ldr	r0, [pc, #376]	; (8007270 <_printf_i+0x244>)
 80070f6:	230a      	movs	r3, #10
 80070f8:	e019      	b.n	800712e <_printf_i+0x102>
 80070fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070fe:	6805      	ldr	r5, [r0, #0]
 8007100:	600b      	str	r3, [r1, #0]
 8007102:	bf18      	it	ne
 8007104:	b22d      	sxthne	r5, r5
 8007106:	e7ef      	b.n	80070e8 <_printf_i+0xbc>
 8007108:	680b      	ldr	r3, [r1, #0]
 800710a:	6825      	ldr	r5, [r4, #0]
 800710c:	1d18      	adds	r0, r3, #4
 800710e:	6008      	str	r0, [r1, #0]
 8007110:	0628      	lsls	r0, r5, #24
 8007112:	d501      	bpl.n	8007118 <_printf_i+0xec>
 8007114:	681d      	ldr	r5, [r3, #0]
 8007116:	e002      	b.n	800711e <_printf_i+0xf2>
 8007118:	0669      	lsls	r1, r5, #25
 800711a:	d5fb      	bpl.n	8007114 <_printf_i+0xe8>
 800711c:	881d      	ldrh	r5, [r3, #0]
 800711e:	4854      	ldr	r0, [pc, #336]	; (8007270 <_printf_i+0x244>)
 8007120:	2f6f      	cmp	r7, #111	; 0x6f
 8007122:	bf0c      	ite	eq
 8007124:	2308      	moveq	r3, #8
 8007126:	230a      	movne	r3, #10
 8007128:	2100      	movs	r1, #0
 800712a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800712e:	6866      	ldr	r6, [r4, #4]
 8007130:	60a6      	str	r6, [r4, #8]
 8007132:	2e00      	cmp	r6, #0
 8007134:	bfa2      	ittt	ge
 8007136:	6821      	ldrge	r1, [r4, #0]
 8007138:	f021 0104 	bicge.w	r1, r1, #4
 800713c:	6021      	strge	r1, [r4, #0]
 800713e:	b90d      	cbnz	r5, 8007144 <_printf_i+0x118>
 8007140:	2e00      	cmp	r6, #0
 8007142:	d04d      	beq.n	80071e0 <_printf_i+0x1b4>
 8007144:	4616      	mov	r6, r2
 8007146:	fbb5 f1f3 	udiv	r1, r5, r3
 800714a:	fb03 5711 	mls	r7, r3, r1, r5
 800714e:	5dc7      	ldrb	r7, [r0, r7]
 8007150:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007154:	462f      	mov	r7, r5
 8007156:	42bb      	cmp	r3, r7
 8007158:	460d      	mov	r5, r1
 800715a:	d9f4      	bls.n	8007146 <_printf_i+0x11a>
 800715c:	2b08      	cmp	r3, #8
 800715e:	d10b      	bne.n	8007178 <_printf_i+0x14c>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	07df      	lsls	r7, r3, #31
 8007164:	d508      	bpl.n	8007178 <_printf_i+0x14c>
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	6861      	ldr	r1, [r4, #4]
 800716a:	4299      	cmp	r1, r3
 800716c:	bfde      	ittt	le
 800716e:	2330      	movle	r3, #48	; 0x30
 8007170:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007174:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007178:	1b92      	subs	r2, r2, r6
 800717a:	6122      	str	r2, [r4, #16]
 800717c:	f8cd a000 	str.w	sl, [sp]
 8007180:	464b      	mov	r3, r9
 8007182:	aa03      	add	r2, sp, #12
 8007184:	4621      	mov	r1, r4
 8007186:	4640      	mov	r0, r8
 8007188:	f7ff fee2 	bl	8006f50 <_printf_common>
 800718c:	3001      	adds	r0, #1
 800718e:	d14c      	bne.n	800722a <_printf_i+0x1fe>
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	b004      	add	sp, #16
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	4835      	ldr	r0, [pc, #212]	; (8007270 <_printf_i+0x244>)
 800719c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	680e      	ldr	r6, [r1, #0]
 80071a4:	061f      	lsls	r7, r3, #24
 80071a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80071aa:	600e      	str	r6, [r1, #0]
 80071ac:	d514      	bpl.n	80071d8 <_printf_i+0x1ac>
 80071ae:	07d9      	lsls	r1, r3, #31
 80071b0:	bf44      	itt	mi
 80071b2:	f043 0320 	orrmi.w	r3, r3, #32
 80071b6:	6023      	strmi	r3, [r4, #0]
 80071b8:	b91d      	cbnz	r5, 80071c2 <_printf_i+0x196>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	f023 0320 	bic.w	r3, r3, #32
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	2310      	movs	r3, #16
 80071c4:	e7b0      	b.n	8007128 <_printf_i+0xfc>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	f043 0320 	orr.w	r3, r3, #32
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	2378      	movs	r3, #120	; 0x78
 80071d0:	4828      	ldr	r0, [pc, #160]	; (8007274 <_printf_i+0x248>)
 80071d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071d6:	e7e3      	b.n	80071a0 <_printf_i+0x174>
 80071d8:	065e      	lsls	r6, r3, #25
 80071da:	bf48      	it	mi
 80071dc:	b2ad      	uxthmi	r5, r5
 80071de:	e7e6      	b.n	80071ae <_printf_i+0x182>
 80071e0:	4616      	mov	r6, r2
 80071e2:	e7bb      	b.n	800715c <_printf_i+0x130>
 80071e4:	680b      	ldr	r3, [r1, #0]
 80071e6:	6826      	ldr	r6, [r4, #0]
 80071e8:	6960      	ldr	r0, [r4, #20]
 80071ea:	1d1d      	adds	r5, r3, #4
 80071ec:	600d      	str	r5, [r1, #0]
 80071ee:	0635      	lsls	r5, r6, #24
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	d501      	bpl.n	80071f8 <_printf_i+0x1cc>
 80071f4:	6018      	str	r0, [r3, #0]
 80071f6:	e002      	b.n	80071fe <_printf_i+0x1d2>
 80071f8:	0671      	lsls	r1, r6, #25
 80071fa:	d5fb      	bpl.n	80071f4 <_printf_i+0x1c8>
 80071fc:	8018      	strh	r0, [r3, #0]
 80071fe:	2300      	movs	r3, #0
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	4616      	mov	r6, r2
 8007204:	e7ba      	b.n	800717c <_printf_i+0x150>
 8007206:	680b      	ldr	r3, [r1, #0]
 8007208:	1d1a      	adds	r2, r3, #4
 800720a:	600a      	str	r2, [r1, #0]
 800720c:	681e      	ldr	r6, [r3, #0]
 800720e:	6862      	ldr	r2, [r4, #4]
 8007210:	2100      	movs	r1, #0
 8007212:	4630      	mov	r0, r6
 8007214:	f7f8 ffec 	bl	80001f0 <memchr>
 8007218:	b108      	cbz	r0, 800721e <_printf_i+0x1f2>
 800721a:	1b80      	subs	r0, r0, r6
 800721c:	6060      	str	r0, [r4, #4]
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	6123      	str	r3, [r4, #16]
 8007222:	2300      	movs	r3, #0
 8007224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007228:	e7a8      	b.n	800717c <_printf_i+0x150>
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	4632      	mov	r2, r6
 800722e:	4649      	mov	r1, r9
 8007230:	4640      	mov	r0, r8
 8007232:	47d0      	blx	sl
 8007234:	3001      	adds	r0, #1
 8007236:	d0ab      	beq.n	8007190 <_printf_i+0x164>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	079b      	lsls	r3, r3, #30
 800723c:	d413      	bmi.n	8007266 <_printf_i+0x23a>
 800723e:	68e0      	ldr	r0, [r4, #12]
 8007240:	9b03      	ldr	r3, [sp, #12]
 8007242:	4298      	cmp	r0, r3
 8007244:	bfb8      	it	lt
 8007246:	4618      	movlt	r0, r3
 8007248:	e7a4      	b.n	8007194 <_printf_i+0x168>
 800724a:	2301      	movs	r3, #1
 800724c:	4632      	mov	r2, r6
 800724e:	4649      	mov	r1, r9
 8007250:	4640      	mov	r0, r8
 8007252:	47d0      	blx	sl
 8007254:	3001      	adds	r0, #1
 8007256:	d09b      	beq.n	8007190 <_printf_i+0x164>
 8007258:	3501      	adds	r5, #1
 800725a:	68e3      	ldr	r3, [r4, #12]
 800725c:	9903      	ldr	r1, [sp, #12]
 800725e:	1a5b      	subs	r3, r3, r1
 8007260:	42ab      	cmp	r3, r5
 8007262:	dcf2      	bgt.n	800724a <_printf_i+0x21e>
 8007264:	e7eb      	b.n	800723e <_printf_i+0x212>
 8007266:	2500      	movs	r5, #0
 8007268:	f104 0619 	add.w	r6, r4, #25
 800726c:	e7f5      	b.n	800725a <_printf_i+0x22e>
 800726e:	bf00      	nop
 8007270:	08007959 	.word	0x08007959
 8007274:	0800796a 	.word	0x0800796a

08007278 <_putc_r>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	460d      	mov	r5, r1
 800727c:	4614      	mov	r4, r2
 800727e:	4606      	mov	r6, r0
 8007280:	b118      	cbz	r0, 800728a <_putc_r+0x12>
 8007282:	6983      	ldr	r3, [r0, #24]
 8007284:	b90b      	cbnz	r3, 800728a <_putc_r+0x12>
 8007286:	f7ff faf5 	bl	8006874 <__sinit>
 800728a:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <_putc_r+0x84>)
 800728c:	429c      	cmp	r4, r3
 800728e:	d124      	bne.n	80072da <_putc_r+0x62>
 8007290:	6874      	ldr	r4, [r6, #4]
 8007292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007294:	07d8      	lsls	r0, r3, #31
 8007296:	d405      	bmi.n	80072a4 <_putc_r+0x2c>
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	0599      	lsls	r1, r3, #22
 800729c:	d402      	bmi.n	80072a4 <_putc_r+0x2c>
 800729e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072a0:	f7ff fbe3 	bl	8006a6a <__retarget_lock_acquire_recursive>
 80072a4:	68a3      	ldr	r3, [r4, #8]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	60a3      	str	r3, [r4, #8]
 80072ac:	da05      	bge.n	80072ba <_putc_r+0x42>
 80072ae:	69a2      	ldr	r2, [r4, #24]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	db1c      	blt.n	80072ee <_putc_r+0x76>
 80072b4:	b2eb      	uxtb	r3, r5
 80072b6:	2b0a      	cmp	r3, #10
 80072b8:	d019      	beq.n	80072ee <_putc_r+0x76>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	6022      	str	r2, [r4, #0]
 80072c0:	701d      	strb	r5, [r3, #0]
 80072c2:	b2ed      	uxtb	r5, r5
 80072c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c6:	07da      	lsls	r2, r3, #31
 80072c8:	d405      	bmi.n	80072d6 <_putc_r+0x5e>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	059b      	lsls	r3, r3, #22
 80072ce:	d402      	bmi.n	80072d6 <_putc_r+0x5e>
 80072d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072d2:	f7ff fbcb 	bl	8006a6c <__retarget_lock_release_recursive>
 80072d6:	4628      	mov	r0, r5
 80072d8:	bd70      	pop	{r4, r5, r6, pc}
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <_putc_r+0x88>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	d101      	bne.n	80072e4 <_putc_r+0x6c>
 80072e0:	68b4      	ldr	r4, [r6, #8]
 80072e2:	e7d6      	b.n	8007292 <_putc_r+0x1a>
 80072e4:	4b07      	ldr	r3, [pc, #28]	; (8007304 <_putc_r+0x8c>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	bf08      	it	eq
 80072ea:	68f4      	ldreq	r4, [r6, #12]
 80072ec:	e7d1      	b.n	8007292 <_putc_r+0x1a>
 80072ee:	4629      	mov	r1, r5
 80072f0:	4622      	mov	r2, r4
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7ff f8d2 	bl	800649c <__swbuf_r>
 80072f8:	4605      	mov	r5, r0
 80072fa:	e7e3      	b.n	80072c4 <_putc_r+0x4c>
 80072fc:	08007908 	.word	0x08007908
 8007300:	08007928 	.word	0x08007928
 8007304:	080078e8 	.word	0x080078e8

08007308 <__srget_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	460c      	mov	r4, r1
 800730c:	4605      	mov	r5, r0
 800730e:	b118      	cbz	r0, 8007318 <__srget_r+0x10>
 8007310:	6983      	ldr	r3, [r0, #24]
 8007312:	b90b      	cbnz	r3, 8007318 <__srget_r+0x10>
 8007314:	f7ff faae 	bl	8006874 <__sinit>
 8007318:	4b0e      	ldr	r3, [pc, #56]	; (8007354 <__srget_r+0x4c>)
 800731a:	429c      	cmp	r4, r3
 800731c:	d10d      	bne.n	800733a <__srget_r+0x32>
 800731e:	686c      	ldr	r4, [r5, #4]
 8007320:	4621      	mov	r1, r4
 8007322:	4628      	mov	r0, r5
 8007324:	f000 f8ee 	bl	8007504 <__srefill_r>
 8007328:	b988      	cbnz	r0, 800734e <__srget_r+0x46>
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	3b01      	subs	r3, #1
 800732e:	6063      	str	r3, [r4, #4]
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	6022      	str	r2, [r4, #0]
 8007336:	7818      	ldrb	r0, [r3, #0]
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	4b07      	ldr	r3, [pc, #28]	; (8007358 <__srget_r+0x50>)
 800733c:	429c      	cmp	r4, r3
 800733e:	d101      	bne.n	8007344 <__srget_r+0x3c>
 8007340:	68ac      	ldr	r4, [r5, #8]
 8007342:	e7ed      	b.n	8007320 <__srget_r+0x18>
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <__srget_r+0x54>)
 8007346:	429c      	cmp	r4, r3
 8007348:	bf08      	it	eq
 800734a:	68ec      	ldreq	r4, [r5, #12]
 800734c:	e7e8      	b.n	8007320 <__srget_r+0x18>
 800734e:	f04f 30ff 	mov.w	r0, #4294967295
 8007352:	e7f1      	b.n	8007338 <__srget_r+0x30>
 8007354:	08007908 	.word	0x08007908
 8007358:	08007928 	.word	0x08007928
 800735c:	080078e8 	.word	0x080078e8

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	; (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f000 f954 	bl	8007618 <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	20000240 	.word	0x20000240

08007380 <__sread>:
 8007380:	b510      	push	{r4, lr}
 8007382:	460c      	mov	r4, r1
 8007384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007388:	f000 f8a0 	bl	80074cc <_read_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	bfab      	itete	ge
 8007390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007392:	89a3      	ldrhlt	r3, [r4, #12]
 8007394:	181b      	addge	r3, r3, r0
 8007396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800739a:	bfac      	ite	ge
 800739c:	6563      	strge	r3, [r4, #84]	; 0x54
 800739e:	81a3      	strhlt	r3, [r4, #12]
 80073a0:	bd10      	pop	{r4, pc}

080073a2 <__swrite>:
 80073a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a6:	461f      	mov	r7, r3
 80073a8:	898b      	ldrh	r3, [r1, #12]
 80073aa:	05db      	lsls	r3, r3, #23
 80073ac:	4605      	mov	r5, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	4616      	mov	r6, r2
 80073b2:	d505      	bpl.n	80073c0 <__swrite+0x1e>
 80073b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b8:	2302      	movs	r3, #2
 80073ba:	2200      	movs	r2, #0
 80073bc:	f000 f868 	bl	8007490 <_lseek_r>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	4632      	mov	r2, r6
 80073ce:	463b      	mov	r3, r7
 80073d0:	4628      	mov	r0, r5
 80073d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	f000 b817 	b.w	8007408 <_write_r>

080073da <__sseek>:
 80073da:	b510      	push	{r4, lr}
 80073dc:	460c      	mov	r4, r1
 80073de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e2:	f000 f855 	bl	8007490 <_lseek_r>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	bf15      	itete	ne
 80073ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80073ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073f6:	81a3      	strheq	r3, [r4, #12]
 80073f8:	bf18      	it	ne
 80073fa:	81a3      	strhne	r3, [r4, #12]
 80073fc:	bd10      	pop	{r4, pc}

080073fe <__sclose>:
 80073fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007402:	f000 b813 	b.w	800742c <_close_r>
	...

08007408 <_write_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d07      	ldr	r5, [pc, #28]	; (8007428 <_write_r+0x20>)
 800740c:	4604      	mov	r4, r0
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	2200      	movs	r2, #0
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7f9 fe5e 	bl	80010d8 <_write>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_write_r+0x1e>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_write_r+0x1e>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	20000240 	.word	0x20000240

0800742c <_close_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d06      	ldr	r5, [pc, #24]	; (8007448 <_close_r+0x1c>)
 8007430:	2300      	movs	r3, #0
 8007432:	4604      	mov	r4, r0
 8007434:	4608      	mov	r0, r1
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	f7f9 fe7a 	bl	8001130 <_close>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_close_r+0x1a>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_close_r+0x1a>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20000240 	.word	0x20000240

0800744c <_fstat_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d07      	ldr	r5, [pc, #28]	; (800746c <_fstat_r+0x20>)
 8007450:	2300      	movs	r3, #0
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	4611      	mov	r1, r2
 8007458:	602b      	str	r3, [r5, #0]
 800745a:	f7f9 feb9 	bl	80011d0 <_fstat>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	d102      	bne.n	8007468 <_fstat_r+0x1c>
 8007462:	682b      	ldr	r3, [r5, #0]
 8007464:	b103      	cbz	r3, 8007468 <_fstat_r+0x1c>
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	20000240 	.word	0x20000240

08007470 <_isatty_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d06      	ldr	r5, [pc, #24]	; (800748c <_isatty_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	f7f9 fe16 	bl	80010ac <_isatty>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_isatty_r+0x1a>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_isatty_r+0x1a>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	20000240 	.word	0x20000240

08007490 <_lseek_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	; (80074b0 <_lseek_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7f9 fe5d 	bl	800115e <_lseek>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_lseek_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_lseek_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20000240 	.word	0x20000240

080074b4 <__malloc_lock>:
 80074b4:	4801      	ldr	r0, [pc, #4]	; (80074bc <__malloc_lock+0x8>)
 80074b6:	f7ff bad8 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 80074ba:	bf00      	nop
 80074bc:	20000238 	.word	0x20000238

080074c0 <__malloc_unlock>:
 80074c0:	4801      	ldr	r0, [pc, #4]	; (80074c8 <__malloc_unlock+0x8>)
 80074c2:	f7ff bad3 	b.w	8006a6c <__retarget_lock_release_recursive>
 80074c6:	bf00      	nop
 80074c8:	20000238 	.word	0x20000238

080074cc <_read_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4d07      	ldr	r5, [pc, #28]	; (80074ec <_read_r+0x20>)
 80074d0:	4604      	mov	r4, r0
 80074d2:	4608      	mov	r0, r1
 80074d4:	4611      	mov	r1, r2
 80074d6:	2200      	movs	r2, #0
 80074d8:	602a      	str	r2, [r5, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	f7f9 fe50 	bl	8001180 <_read>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_read_r+0x1e>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_read_r+0x1e>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	20000240 	.word	0x20000240

080074f0 <lflush>:
 80074f0:	8983      	ldrh	r3, [r0, #12]
 80074f2:	f003 0309 	and.w	r3, r3, #9
 80074f6:	2b09      	cmp	r3, #9
 80074f8:	d101      	bne.n	80074fe <lflush+0xe>
 80074fa:	f7ff b951 	b.w	80067a0 <fflush>
 80074fe:	2000      	movs	r0, #0
 8007500:	4770      	bx	lr
	...

08007504 <__srefill_r>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	460c      	mov	r4, r1
 8007508:	4605      	mov	r5, r0
 800750a:	b118      	cbz	r0, 8007514 <__srefill_r+0x10>
 800750c:	6983      	ldr	r3, [r0, #24]
 800750e:	b90b      	cbnz	r3, 8007514 <__srefill_r+0x10>
 8007510:	f7ff f9b0 	bl	8006874 <__sinit>
 8007514:	4b3b      	ldr	r3, [pc, #236]	; (8007604 <__srefill_r+0x100>)
 8007516:	429c      	cmp	r4, r3
 8007518:	d10a      	bne.n	8007530 <__srefill_r+0x2c>
 800751a:	686c      	ldr	r4, [r5, #4]
 800751c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007520:	2300      	movs	r3, #0
 8007522:	6063      	str	r3, [r4, #4]
 8007524:	89a3      	ldrh	r3, [r4, #12]
 8007526:	069e      	lsls	r6, r3, #26
 8007528:	d50c      	bpl.n	8007544 <__srefill_r+0x40>
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	e066      	b.n	80075fe <__srefill_r+0xfa>
 8007530:	4b35      	ldr	r3, [pc, #212]	; (8007608 <__srefill_r+0x104>)
 8007532:	429c      	cmp	r4, r3
 8007534:	d101      	bne.n	800753a <__srefill_r+0x36>
 8007536:	68ac      	ldr	r4, [r5, #8]
 8007538:	e7f0      	b.n	800751c <__srefill_r+0x18>
 800753a:	4b34      	ldr	r3, [pc, #208]	; (800760c <__srefill_r+0x108>)
 800753c:	429c      	cmp	r4, r3
 800753e:	bf08      	it	eq
 8007540:	68ec      	ldreq	r4, [r5, #12]
 8007542:	e7eb      	b.n	800751c <__srefill_r+0x18>
 8007544:	0758      	lsls	r0, r3, #29
 8007546:	d448      	bmi.n	80075da <__srefill_r+0xd6>
 8007548:	06d9      	lsls	r1, r3, #27
 800754a:	d405      	bmi.n	8007558 <__srefill_r+0x54>
 800754c:	2309      	movs	r3, #9
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	e7e8      	b.n	800752a <__srefill_r+0x26>
 8007558:	071a      	lsls	r2, r3, #28
 800755a:	d50b      	bpl.n	8007574 <__srefill_r+0x70>
 800755c:	4621      	mov	r1, r4
 800755e:	4628      	mov	r0, r5
 8007560:	f7ff f8e2 	bl	8006728 <_fflush_r>
 8007564:	2800      	cmp	r0, #0
 8007566:	d1e0      	bne.n	800752a <__srefill_r+0x26>
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	60a0      	str	r0, [r4, #8]
 800756c:	f023 0308 	bic.w	r3, r3, #8
 8007570:	81a3      	strh	r3, [r4, #12]
 8007572:	61a0      	str	r0, [r4, #24]
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f043 0304 	orr.w	r3, r3, #4
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	b91b      	cbnz	r3, 8007588 <__srefill_r+0x84>
 8007580:	4621      	mov	r1, r4
 8007582:	4628      	mov	r0, r5
 8007584:	f7ff fa98 	bl	8006ab8 <__smakebuf_r>
 8007588:	89a6      	ldrh	r6, [r4, #12]
 800758a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800758e:	07b3      	lsls	r3, r6, #30
 8007590:	d00f      	beq.n	80075b2 <__srefill_r+0xae>
 8007592:	2301      	movs	r3, #1
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <__srefill_r+0x10c>)
 8007598:	491e      	ldr	r1, [pc, #120]	; (8007614 <__srefill_r+0x110>)
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	f006 0609 	and.w	r6, r6, #9
 80075a0:	f7ff f9e6 	bl	8006970 <_fwalk>
 80075a4:	2e09      	cmp	r6, #9
 80075a6:	81a7      	strh	r7, [r4, #12]
 80075a8:	d103      	bne.n	80075b2 <__srefill_r+0xae>
 80075aa:	4621      	mov	r1, r4
 80075ac:	4628      	mov	r0, r5
 80075ae:	f7ff f835 	bl	800661c <__sflush_r>
 80075b2:	6922      	ldr	r2, [r4, #16]
 80075b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075b6:	6963      	ldr	r3, [r4, #20]
 80075b8:	6a21      	ldr	r1, [r4, #32]
 80075ba:	6022      	str	r2, [r4, #0]
 80075bc:	4628      	mov	r0, r5
 80075be:	47b0      	blx	r6
 80075c0:	2800      	cmp	r0, #0
 80075c2:	6060      	str	r0, [r4, #4]
 80075c4:	dc1c      	bgt.n	8007600 <__srefill_r+0xfc>
 80075c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ca:	bf17      	itett	ne
 80075cc:	2200      	movne	r2, #0
 80075ce:	f043 0320 	orreq.w	r3, r3, #32
 80075d2:	6062      	strne	r2, [r4, #4]
 80075d4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80075d8:	e7bc      	b.n	8007554 <__srefill_r+0x50>
 80075da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075dc:	2900      	cmp	r1, #0
 80075de:	d0cd      	beq.n	800757c <__srefill_r+0x78>
 80075e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e4:	4299      	cmp	r1, r3
 80075e6:	d002      	beq.n	80075ee <__srefill_r+0xea>
 80075e8:	4628      	mov	r0, r5
 80075ea:	f7ff faad 	bl	8006b48 <_free_r>
 80075ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075f0:	6063      	str	r3, [r4, #4]
 80075f2:	2000      	movs	r0, #0
 80075f4:	6360      	str	r0, [r4, #52]	; 0x34
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0c0      	beq.n	800757c <__srefill_r+0x78>
 80075fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007600:	2000      	movs	r0, #0
 8007602:	e7fc      	b.n	80075fe <__srefill_r+0xfa>
 8007604:	08007908 	.word	0x08007908
 8007608:	08007928 	.word	0x08007928
 800760c:	080078e8 	.word	0x080078e8
 8007610:	080077e0 	.word	0x080077e0
 8007614:	080074f1 	.word	0x080074f1

08007618 <_sbrk>:
 8007618:	4b04      	ldr	r3, [pc, #16]	; (800762c <_sbrk+0x14>)
 800761a:	6819      	ldr	r1, [r3, #0]
 800761c:	4602      	mov	r2, r0
 800761e:	b909      	cbnz	r1, 8007624 <_sbrk+0xc>
 8007620:	4903      	ldr	r1, [pc, #12]	; (8007630 <_sbrk+0x18>)
 8007622:	6019      	str	r1, [r3, #0]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	4402      	add	r2, r0
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	4770      	bx	lr
 800762c:	200000ec 	.word	0x200000ec
 8007630:	20000248 	.word	0x20000248

08007634 <_init>:
 8007634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007636:	bf00      	nop
 8007638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763a:	bc08      	pop	{r3}
 800763c:	469e      	mov	lr, r3
 800763e:	4770      	bx	lr

08007640 <_fini>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	bf00      	nop
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr
