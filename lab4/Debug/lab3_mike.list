
lab3_mike.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080061d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200000a8  0800627c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800627c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014267  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296f  00000000  00000000  0003433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00036cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c763  00000000  00000000  00038658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c2d  00000000  00000000  00054dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aabef  00000000  00000000  000659e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001105d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000402c  00000000  00000000  0011062c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005eac 	.word	0x08005eac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08005eac 	.word	0x08005eac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <disable>:
 */

#include "main.h"
#include "interrupt.h"

uint32_t disable(void) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  int32_t priority_mask = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000592:	f3ef 8310 	mrs	r3, PRIMASK
 8000596:	603b      	str	r3, [r7, #0]
  return(result);
 8000598:	683b      	ldr	r3, [r7, #0]
  priority_mask = __get_PRIMASK(); // Read the current state of the interrupt mask
 800059a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  __disable_irq();                // Globally mask the interrupts off
  return (priority_mask);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <restore>:

void restore(uint32_t priority_mask) {
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f383 8810 	msr	PRIMASK, r3
}
 80005c0:	bf00      	nop
  __set_PRIMASK(priority_mask);
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b089      	sub	sp, #36	; 0x24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	e853 3f00 	ldrex	r3, [r3]
 80005e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	61fb      	str	r3, [r7, #28]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	69fa      	ldr	r2, [r7, #28]
 80005ee:	61ba      	str	r2, [r7, #24]
 80005f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80005f2:	6979      	ldr	r1, [r7, #20]
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	e841 2300 	strex	r3, r2, [r1]
 80005fa:	613b      	str	r3, [r7, #16]
   return(result);
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e9      	bne.n	80005d6 <LL_USART_EnableIT_RXNE+0x8>
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	3724      	adds	r7, #36	; 0x24
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fea2 	bl	800135e <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t command_line[QUEUE_SIZE];
  uint8_t ch;
  //RTC_DateTypeDef date;
  //RTC_TimeTypeDef time;
  int n = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f879 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f99f 	bl	8000964 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f96d 	bl	8000904 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800062a:	f000 f8cb 	bl	80007c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800062e:	482e      	ldr	r0, [pc, #184]	; (80006e8 <main+0xd8>)
 8000630:	f000 fc5a 	bl	8000ee8 <RetargetInit>
  LL_USART_EnableIT_RXNE(USART2);
 8000634:	482d      	ldr	r0, [pc, #180]	; (80006ec <main+0xdc>)
 8000636:	f7ff ffca 	bl	80005ce <LL_USART_EnableIT_RXNE>
  printf("\r\nSystem Running\n\r");
 800063a:	482d      	ldr	r0, [pc, #180]	; (80006f0 <main+0xe0>)
 800063c:	f004 f972 	bl	8004924 <iprintf>
  printf("\r\nSTM$");
 8000640:	482c      	ldr	r0, [pc, #176]	; (80006f4 <main+0xe4>)
 8000642:	f004 f96f 	bl	8004924 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(toggle){
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <main+0xe8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00d      	beq.n	800066a <main+0x5a>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800064e:	2108      	movs	r1, #8
 8000650:	482a      	ldr	r0, [pc, #168]	; (80006fc <main+0xec>)
 8000652:	f001 fa37 	bl	8001ac4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000656:	2064      	movs	r0, #100	; 0x64
 8000658:	f000 fef6 	bl	8001448 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800065c:	2108      	movs	r1, #8
 800065e:	4827      	ldr	r0, [pc, #156]	; (80006fc <main+0xec>)
 8000660:	f001 fa30 	bl	8001ac4 <HAL_GPIO_TogglePin>
		toggle = 0;
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <main+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
	}
    if ((ch = dequeue(&rx_queue))) {
 800066a:	4825      	ldr	r0, [pc, #148]	; (8000700 <main+0xf0>)
 800066c:	f000 fc12 	bl	8000e94 <dequeue>
 8000670:	4603      	mov	r3, r0
 8000672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0e3      	beq.n	8000646 <main+0x36>
      putchar(ch);
 800067e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000682:	4618      	mov	r0, r3
 8000684:	f004 f966 	bl	8004954 <putchar>
      command_line[n] = ch;
 8000688:	463a      	mov	r2, r7
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	4413      	add	r3, r2
 800068e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000692:	701a      	strb	r2, [r3, #0]
      if(ch == '\r' || ch == '\n'){
 8000694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000698:	2b0d      	cmp	r3, #13
 800069a:	d003      	beq.n	80006a4 <main+0x94>
 800069c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006a0:	2b0a      	cmp	r3, #10
 80006a2:	d11d      	bne.n	80006e0 <main+0xd0>
	command_line[n] = '\0'; //end of string
 80006a4:	463a      	mov	r2, r7
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	4413      	add	r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
      	if(!execute_command(command_line)){
 80006ae:	463b      	mov	r3, r7
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f9a1 	bl	80009f8 <execute_command>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d103      	bne.n	80006c4 <main+0xb4>
	  printf("\r\nOK");
 80006bc:	4811      	ldr	r0, [pc, #68]	; (8000704 <main+0xf4>)
 80006be:	f004 f931 	bl	8004924 <iprintf>
 80006c2:	e002      	b.n	80006ca <main+0xba>
	}else{
	  printf("\r\nNOK");
 80006c4:	4810      	ldr	r0, [pc, #64]	; (8000708 <main+0xf8>)
 80006c6:	f004 f92d 	bl	8004924 <iprintf>
	}
	n = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
	printf("\r\n");
 80006ce:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0xfc>)
 80006d0:	f004 f9c4 	bl	8004a5c <puts>
	printDateTime();
 80006d4:	f000 fa9c 	bl	8000c10 <printDateTime>
	printf(" IULS>");
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <main+0x100>)
 80006da:	f004 f923 	bl	8004924 <iprintf>
 80006de:	e002      	b.n	80006e6 <main+0xd6>
      }else{
	n++;
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	3301      	adds	r3, #1
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
	if(toggle){
 80006e6:	e7ae      	b.n	8000646 <main+0x36>
 80006e8:	2000012c 	.word	0x2000012c
 80006ec:	40004400 	.word	0x40004400
 80006f0:	08005ee4 	.word	0x08005ee4
 80006f4:	08005ef8 	.word	0x08005ef8
 80006f8:	200000c8 	.word	0x200000c8
 80006fc:	48000400 	.word	0x48000400
 8000700:	200000d8 	.word	0x200000d8
 8000704:	08005f00 	.word	0x08005f00
 8000708:	08005f08 	.word	0x08005f08
 800070c:	08005f10 	.word	0x08005f10
 8000710:	08005f14 	.word	0x08005f14

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	; 0x58
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2244      	movs	r2, #68	; 0x44
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 f8f6 	bl	8004914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000736:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073a:	f001 f9fb 	bl	8001b34 <HAL_PWREx_ControlVoltageScaling>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000744:	f000 fb68 	bl	8000e18 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000748:	f001 f9d6 	bl	8001af8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <SystemClock_Config+0xac>)
 800074e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <SystemClock_Config+0xac>)
 8000754:	f023 0318 	bic.w	r3, r3, #24
 8000758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800075c:	231c      	movs	r3, #28
 800075e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000770:	23a0      	movs	r3, #160	; 0xa0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fa2f 	bl	8001be0 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000788:	f000 fb46 	bl	8000e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fe81 	bl	80024ac <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007b0:	f000 fb32 	bl	8000e18 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007b4:	f002 fa06 	bl	8002bc4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007b8:	bf00      	nop
 80007ba:	3758      	adds	r7, #88	; 0x58
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b092      	sub	sp, #72	; 0x48
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007da:	2300      	movs	r3, #0
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	222c      	movs	r2, #44	; 0x2c
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f004 f895 	bl	8004914 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <MX_RTC_Init+0x134>)
 80007ec:	4a43      	ldr	r2, [pc, #268]	; (80008fc <MX_RTC_Init+0x138>)
 80007ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007f0:	4b41      	ldr	r3, [pc, #260]	; (80008f8 <MX_RTC_Init+0x134>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80007f6:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <MX_RTC_Init+0x134>)
 80007f8:	227f      	movs	r2, #127	; 0x7f
 80007fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80007fc:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <MX_RTC_Init+0x134>)
 80007fe:	22ff      	movs	r2, #255	; 0xff
 8000800:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000802:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <MX_RTC_Init+0x134>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000808:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <MX_RTC_Init+0x134>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800080e:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <MX_RTC_Init+0x134>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <MX_RTC_Init+0x134>)
 8000816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <MX_RTC_Init+0x134>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000822:	4835      	ldr	r0, [pc, #212]	; (80008f8 <MX_RTC_Init+0x134>)
 8000824:	f002 f9de 	bl	8002be4 <HAL_RTC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 faf3 	bl	8000e18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800083e:	2300      	movs	r3, #0
 8000840:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800084c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000850:	2201      	movs	r2, #1
 8000852:	4619      	mov	r1, r3
 8000854:	4828      	ldr	r0, [pc, #160]	; (80008f8 <MX_RTC_Init+0x134>)
 8000856:	f002 fa47 	bl	8002ce8 <HAL_RTC_SetTime>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000860:	f000 fada 	bl	8000e18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000864:	2301      	movs	r3, #1
 8000866:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800086a:	2301      	movs	r3, #1
 800086c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000870:	2301      	movs	r3, #1
 8000872:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000876:	2300      	movs	r3, #0
 8000878:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800087c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000880:	2201      	movs	r2, #1
 8000882:	4619      	mov	r1, r3
 8000884:	481c      	ldr	r0, [pc, #112]	; (80008f8 <MX_RTC_Init+0x134>)
 8000886:	f002 fb28 	bl	8002eda <HAL_RTC_SetDate>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000890:	f000 fac2 	bl	8000e18 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000894:	2300      	movs	r3, #0
 8000896:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000898:	2300      	movs	r3, #0
 800089a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x30;
 800089c:	2330      	movs	r3, #48	; 0x30
 800089e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_RTC_Init+0x13c>)
 80008ae:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80008be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_RTC_Init+0x134>)
 80008cc:	f002 fbda 	bl	8003084 <HAL_RTC_SetAlarm_IT>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_RTC_Init+0x116>
  {
    Error_Handler();
 80008d6:	f000 fa9f 	bl	8000e18 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80008da:	2300      	movs	r3, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_RTC_Init+0x134>)
 80008e2:	f002 fdc1 	bl	8003468 <HAL_RTCEx_SetWakeUpTimer_IT>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 80008ec:	f000 fa94 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3748      	adds	r7, #72	; 0x48
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000100 	.word	0x20000100
 80008fc:	40002800 	.word	0x40002800
 8000900:	80808000 	.word	0x80808000

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USART2_UART_Init+0x58>)
 800090a:	4a15      	ldr	r2, [pc, #84]	; (8000960 <MX_USART2_UART_Init+0x5c>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART2_UART_Init+0x58>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000948:	f002 fe5e 	bl	8003608 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 fa61 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000012c 	.word	0x2000012c
 8000960:	40004400 	.word	0x40004400

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_GPIO_Init+0x8c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_GPIO_Init+0x8c>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_GPIO_Init+0x8c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_GPIO_Init+0x8c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <MX_GPIO_Init+0x8c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_GPIO_Init+0x8c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_GPIO_Init+0x8c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <MX_GPIO_Init+0x8c>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_GPIO_Init+0x8c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2108      	movs	r1, #8
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <MX_GPIO_Init+0x90>)
 80009c8:	f001 f864 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009cc:	2308      	movs	r3, #8
 80009ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0x90>)
 80009e4:	f000 fee4 	bl	80017b0 <HAL_GPIO_Init>

}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400

080009f8 <execute_command>:

/* USER CODE BEGIN 4 */
int execute_command(uint8_t * line) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint8_t *cmd;
  uint8_t *arg;
  command_t *p = commands;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <execute_command+0x94>)
 8000a02:	617b      	str	r3, [r7, #20]
  int success = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]

  if (!line) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d102      	bne.n	8000a14 <execute_command+0x1c>
    return (-1); // Passed a bad pointer
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a12:	e037      	b.n	8000a84 <execute_command+0x8c>
  }
  if (parse_command(line,&cmd,&arg) == -1) {
 8000a14:	f107 0208 	add.w	r2, r7, #8
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 f838 	bl	8000a94 <parse_command>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a2a:	d120      	bne.n	8000a6e <execute_command+0x76>
    printf("Error with parse command\n\r");
 8000a2c:	4818      	ldr	r0, [pc, #96]	; (8000a90 <execute_command+0x98>)
 8000a2e:	f003 ff79 	bl	8004924 <iprintf>
    return (-1);
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a36:	e025      	b.n	8000a84 <execute_command+0x8c>
  }
  while (p->cmd_string) {
    if (!strcmp(p->cmd_string,(char *) cmd)) {
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbc5 	bl	80001d0 <strcmp>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10d      	bne.n	8000a68 <execute_command+0x70>
      if (!p->cmd_function) {
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <execute_command+0x62>
        return (-1);
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a58:	e014      	b.n	8000a84 <execute_command+0x8c>
      }
      success = (*p->cmd_function)((char *)arg);            // Run the command with the passed arguments
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	4610      	mov	r0, r2
 8000a62:	4798      	blx	r3
 8000a64:	6138      	str	r0, [r7, #16]
      //success = 1;
      break;
 8000a66:	e006      	b.n	8000a76 <execute_command+0x7e>
    }
    p++;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	617b      	str	r3, [r7, #20]
  while (p->cmd_string) {
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1e0      	bne.n	8000a38 <execute_command+0x40>
  }
  if (success == 0) {
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <execute_command+0x88>
    return (0);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e001      	b.n	8000a84 <execute_command+0x8c>
  }
  else {
    return (-1);
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
  }
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	08005f1c 	.word	0x08005f1c

08000a94 <parse_command>:
int parse_command (uint8_t *line, uint8_t **command, uint8_t **args){
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]

  uint8_t *line_temp;
  if((!line) || (!command) || (!args)){ //check for bad pointer
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d005      	beq.n	8000ab2 <parse_command+0x1e>
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <parse_command+0x1e>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <parse_command+0x24>
    return(-1);
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ab6:	e01d      	b.n	8000af4 <parse_command+0x60>
  }
  line_temp= line;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	617b      	str	r3, [r7, #20]
  *command = line;
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	601a      	str	r2, [r3, #0]
  //strcpy(line_left, line);
  while(*line_temp != ','){ //increment through input to find end of command
 8000ac2:	e00b      	b.n	8000adc <parse_command+0x48>
    if(!*line_temp){
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d104      	bne.n	8000ad6 <parse_command+0x42>
      *args = '\0'; //no arguments
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
      return(0);
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e00e      	b.n	8000af4 <parse_command+0x60>
    }
    line_temp++;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
  while(*line_temp != ','){ //increment through input to find end of command
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b2c      	cmp	r3, #44	; 0x2c
 8000ae2:	d1ef      	bne.n	8000ac4 <parse_command+0x30>
  }

  *line_temp = '\0'; //replace comma with null for end of command string
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
  *args = line_temp +1; //one char past null is beginning of arguments
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
  return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <help_command>:
int help_command(char *args){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  printf("\r\nAvailable Commands:\n\r");
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <help_command+0x30>)
 8000b0a:	f003 ff0b 	bl	8004924 <iprintf>
  printf("lon\n\r");
 8000b0e:	4809      	ldr	r0, [pc, #36]	; (8000b34 <help_command+0x34>)
 8000b10:	f003 ff08 	bl	8004924 <iprintf>
  printf("lof\n\r");
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <help_command+0x38>)
 8000b16:	f003 ff05 	bl	8004924 <iprintf>
  printf("test\n\r");
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <help_command+0x3c>)
 8000b1c:	f003 ff02 	bl	8004924 <iprintf>
  printf("ds\n\r");
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <help_command+0x40>)
 8000b22:	f003 feff 	bl	8004924 <iprintf>
  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08005f38 	.word	0x08005f38
 8000b34:	08005f50 	.word	0x08005f50
 8000b38:	08005f58 	.word	0x08005f58
 8000b3c:	08005f60 	.word	0x08005f60
 8000b40:	08005f68 	.word	0x08005f68

08000b44 <lon_command>:
int lon_command(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  if(led_on == 0){
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <lon_command+0x30>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10a      	bne.n	8000b66 <lon_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b50:	2108      	movs	r1, #8
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <lon_command+0x34>)
 8000b54:	f000 ffb6 	bl	8001ac4 <HAL_GPIO_TogglePin>
    led_on = 1;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <lon_command+0x30>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
    printf("\r\nLED ON\n\r");
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <lon_command+0x38>)
 8000b60:	f003 fee0 	bl	8004924 <iprintf>
 8000b64:	e002      	b.n	8000b6c <lon_command+0x28>
  }else{
    printf("\r\nLED ALREADY ON\n\r");
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <lon_command+0x3c>)
 8000b68:	f003 fedc 	bl	8004924 <iprintf>
  }
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c4 	.word	0x200000c4
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	08005f70 	.word	0x08005f70
 8000b80:	08005f7c 	.word	0x08005f7c

08000b84 <lof_command>:
int lof_command(){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  if(led_on == 1){
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <lof_command+0x30>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d10a      	bne.n	8000ba6 <lof_command+0x22>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b90:	2108      	movs	r1, #8
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <lof_command+0x34>)
 8000b94:	f000 ff96 	bl	8001ac4 <HAL_GPIO_TogglePin>
    led_on = 0;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <lof_command+0x30>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
    printf("\r\nLED OFF\n\r");
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <lof_command+0x38>)
 8000ba0:	f003 fec0 	bl	8004924 <iprintf>
 8000ba4:	e002      	b.n	8000bac <lof_command+0x28>
  }else{
    printf("\r\nLED ALREADY OFF\n\r");
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <lof_command+0x3c>)
 8000ba8:	f003 febc 	bl	8004924 <iprintf>
  }
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000c4 	.word	0x200000c4
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	08005f90 	.word	0x08005f90
 8000bc0:	08005f9c 	.word	0x08005f9c

08000bc4 <test_command>:
int test_command(char *args){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  printf("\r\ntest\n\r");
 8000bcc:	480e      	ldr	r0, [pc, #56]	; (8000c08 <test_command+0x44>)
 8000bce:	f003 fea9 	bl	8004924 <iprintf>
  while(*args!='\0'){
 8000bd2:	e00f      	b.n	8000bf4 <test_command+0x30>
    if(*args!=','){
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b2c      	cmp	r3, #44	; 0x2c
 8000bda:	d005      	beq.n	8000be8 <test_command+0x24>
      putchar(*args);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 feb7 	bl	8004954 <putchar>
 8000be6:	e002      	b.n	8000bee <test_command+0x2a>
    }else{
      printf("\r\n");
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <test_command+0x48>)
 8000bea:	f003 ff37 	bl	8004a5c <puts>
    }
    args++;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
  while(*args!='\0'){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1eb      	bne.n	8000bd4 <test_command+0x10>
  }
  return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	08005fb0 	.word	0x08005fb0
 8000c0c:	08005f10 	.word	0x08005f10

08000c10 <printDateTime>:
void printDateTime(){
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af04      	add	r7, sp, #16
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480f      	ldr	r0, [pc, #60]	; (8000c5c <printDateTime+0x4c>)
 8000c1e:	f002 f900 	bl	8002e22 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <printDateTime+0x4c>)
 8000c2c:	f002 f9dc 	bl	8002fe8 <HAL_RTC_GetDate>
	printf("%2.2u/%2.2u/%4.4u %2.2u:%2.2u:%2.2u",date.Month,date.Date,date.Year+2000,time.Hours,time.Minutes,time.Seconds);
 8000c30:	7d7b      	ldrb	r3, [r7, #21]
 8000c32:	461c      	mov	r4, r3
 8000c34:	7dbb      	ldrb	r3, [r7, #22]
 8000c36:	461d      	mov	r5, r3
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000c3e:	783a      	ldrb	r2, [r7, #0]
 8000c40:	7879      	ldrb	r1, [r7, #1]
 8000c42:	78b8      	ldrb	r0, [r7, #2]
 8000c44:	9002      	str	r0, [sp, #8]
 8000c46:	9101      	str	r1, [sp, #4]
 8000c48:	9200      	str	r2, [sp, #0]
 8000c4a:	462a      	mov	r2, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <printDateTime+0x50>)
 8000c50:	f003 fe68 	bl	8004924 <iprintf>
}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5c:	20000100 	.word	0x20000100
 8000c60:	08005fbc 	.word	0x08005fbc

08000c64 <dateSet_command>:
int dateSet_command(char *args){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	//HAL_StatusTypeDef hal;
	int comma_count = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
	char* start_of_num = args;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	61bb      	str	r3, [r7, #24]
	int numbers[3];
	while(*args!='\0'){
 8000c74:	e01f      	b.n	8000cb6 <dateSet_command+0x52>
	    if(*args==','){
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b2c      	cmp	r3, #44	; 0x2c
 8000c7c:	d113      	bne.n	8000ca6 <dateSet_command+0x42>
	    	*args = '\0';
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	        numbers[comma_count] = atoi(start_of_num);
 8000c84:	69b8      	ldr	r0, [r7, #24]
 8000c86:	f003 fe05 	bl	8004894 <atoi>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	f107 0120 	add.w	r1, r7, #32
 8000c94:	440b      	add	r3, r1
 8000c96:	f843 2c18 	str.w	r2, [r3, #-24]
	        comma_count += 1;
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
	        start_of_num = args+1;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
	    }
	    if(comma_count>2){
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	dd01      	ble.n	8000cb0 <dateSet_command+0x4c>
	    	//printf("\r\n error \n\r");
	    	return 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e038      	b.n	8000d22 <dateSet_command+0xbe>
	    }
	    args++;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1db      	bne.n	8000c76 <dateSet_command+0x12>
	  }
	numbers[comma_count] = atoi(start_of_num);
 8000cbe:	69b8      	ldr	r0, [r7, #24]
 8000cc0:	f003 fde8 	bl	8004894 <atoi>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	f107 0120 	add.w	r1, r7, #32
 8000cce:	440b      	add	r3, r1
 8000cd0:	f843 2c18 	str.w	r2, [r3, #-24]
	if(numbers[0]>12 || numbers[0] < 1 || numbers[1] > 31 || numbers[1]<1 || numbers[2] > 100 || numbers[2]<0)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2b0c      	cmp	r3, #12
 8000cd8:	dc0e      	bgt.n	8000cf8 <dateSet_command+0x94>
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	dd0b      	ble.n	8000cf8 <dateSet_command+0x94>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b1f      	cmp	r3, #31
 8000ce4:	dc08      	bgt.n	8000cf8 <dateSet_command+0x94>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	dd05      	ble.n	8000cf8 <dateSet_command+0x94>
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	dc02      	bgt.n	8000cf8 <dateSet_command+0x94>
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da01      	bge.n	8000cfc <dateSet_command+0x98>
		return 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e012      	b.n	8000d22 <dateSet_command+0xbe>
	date.WeekDay = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	753b      	strb	r3, [r7, #20]
	date.Month = numbers[0];
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	757b      	strb	r3, [r7, #21]
	date.Date = numbers[1];
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	75bb      	strb	r3, [r7, #22]
	date.Year = numbers[2];
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	75fb      	strb	r3, [r7, #23]
	HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	2200      	movs	r2, #0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <dateSet_command+0xc8>)
 8000d1c:	f002 f8dd 	bl	8002eda <HAL_RTC_SetDate>
	return 0;
 8000d20:	2300      	movs	r3, #0
	//hal = HAL_RTC_SetDate(&hrtc,&date,RTC_FORMAT_BIN);
	//printf("\r\n%x\r\n",hal);
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3720      	adds	r7, #32
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000100 	.word	0x20000100

08000d30 <timeSet_command>:
int timeSet_command(char *args){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	int comma_count = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* start_of_num = args;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	int numbers[3];
	while(*args!='\0'){
 8000d40:	e01f      	b.n	8000d82 <timeSet_command+0x52>
		if(*args==','){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b2c      	cmp	r3, #44	; 0x2c
 8000d48:	d113      	bne.n	8000d72 <timeSet_command+0x42>
			*args = '\0';
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
		    numbers[comma_count] = atoi(start_of_num);
 8000d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d52:	f003 fd9f 	bl	8004894 <atoi>
 8000d56:	4602      	mov	r2, r0
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d60:	440b      	add	r3, r1
 8000d62:	f843 2c28 	str.w	r2, [r3, #-40]
		    comma_count += 1;
 8000d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d68:	3301      	adds	r3, #1
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		    start_of_num = args+1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(comma_count>2){
 8000d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	dd01      	ble.n	8000d7c <timeSet_command+0x4c>
			//printf("\r\n error \n\r");
		    return 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e036      	b.n	8000dea <timeSet_command+0xba>
		}
		args++;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	607b      	str	r3, [r7, #4]
	while(*args!='\0'){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1db      	bne.n	8000d42 <timeSet_command+0x12>
	}
	if(numbers[0]>24 || numbers[0] < 1 || numbers[1] > 60 || numbers[1]<1 || numbers[2] > 60 || numbers[2]< 1)
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b18      	cmp	r3, #24
 8000d8e:	dc0e      	bgt.n	8000dae <timeSet_command+0x7e>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	dd0b      	ble.n	8000dae <timeSet_command+0x7e>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b3c      	cmp	r3, #60	; 0x3c
 8000d9a:	dc08      	bgt.n	8000dae <timeSet_command+0x7e>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dd05      	ble.n	8000dae <timeSet_command+0x7e>
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b3c      	cmp	r3, #60	; 0x3c
 8000da6:	dc02      	bgt.n	8000dae <timeSet_command+0x7e>
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	dc01      	bgt.n	8000db2 <timeSet_command+0x82>
		return 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e01b      	b.n	8000dea <timeSet_command+0xba>
	numbers[comma_count] = atoi(start_of_num);
 8000db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db4:	f003 fd6e 	bl	8004894 <atoi>
 8000db8:	4602      	mov	r2, r0
 8000dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f843 2c28 	str.w	r2, [r3, #-40]
	time.Hours = numbers[0];
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	753b      	strb	r3, [r7, #20]
	time.Minutes = numbers[1];
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	757b      	strb	r3, [r7, #21]
	time.Seconds = numbers[2];
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	75bb      	strb	r3, [r7, #22]

	HAL_RTC_SetTime(&hrtc,&time,RTC_FORMAT_BIN);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	2200      	movs	r2, #0
 8000de0:	4619      	mov	r1, r3
 8000de2:	4804      	ldr	r0, [pc, #16]	; (8000df4 <timeSet_command+0xc4>)
 8000de4:	f001 ff80 	bl	8002ce8 <HAL_RTC_SetTime>
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3730      	adds	r7, #48	; 0x30
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000100 	.word	0x20000100

08000df8 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	toggle=1;
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200000c8 	.word	0x200000c8

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>

08000e22 <enqueue>:
  buf->head=0;
  buf->tail=0;
  restore(mask);
}

int enqueue (queue_t *buf, uint8_t data) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
  int return_val=0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000e32:	f7ff fba9 	bl	8000588 <disable>
 8000e36:	60b8      	str	r0, [r7, #8]
  if ((((buf->head)+1)%QUEUE_SIZE)!=buf->tail) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	425a      	negs	r2, r3
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	f002 021f 	and.w	r2, r2, #31
 8000e48:	bf58      	it	pl
 8000e4a:	4253      	negpl	r3, r2
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6852      	ldr	r2, [r2, #4]
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d014      	beq.n	8000e7e <enqueue+0x5c>
    buf->buffer[buf->head]=data;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	78fa      	ldrb	r2, [r7, #3]
 8000e5e:	721a      	strb	r2, [r3, #8]
    buf->head=((buf->head)+1)%QUEUE_SIZE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	425a      	negs	r2, r3
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	f002 021f 	and.w	r2, r2, #31
 8000e70:	bf58      	it	pl
 8000e72:	4253      	negpl	r3, r2
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
    return_val=0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e002      	b.n	8000e84 <enqueue+0x62>
  }
  else {
    return_val=-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e82:	60fb      	str	r3, [r7, #12]
  }
  restore(mask);
 8000e84:	68b8      	ldr	r0, [r7, #8]
 8000e86:	f7ff fb92 	bl	80005ae <restore>
  return (return_val);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <dequeue>:

uint8_t dequeue (queue_t *buf) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  int return_val=0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  uint32_t mask;
  mask = disable();
 8000ea0:	f7ff fb72 	bl	8000588 <disable>
 8000ea4:	60b8      	str	r0, [r7, #8]
  if (buf->tail!=buf->head) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d011      	beq.n	8000ed6 <dequeue+0x42>
    return_val=buf->buffer[buf->tail];
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	7a1b      	ldrb	r3, [r3, #8]
 8000ebc:	60fb      	str	r3, [r7, #12]
    buf->tail=((buf->tail)+1)%QUEUE_SIZE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	425a      	negs	r2, r3
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	f002 021f 	and.w	r2, r2, #31
 8000ece:	bf58      	it	pl
 8000ed0:	4253      	negpl	r3, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6053      	str	r3, [r2, #4]
  }
  restore(mask);
 8000ed6:	68b8      	ldr	r0, [r7, #8]
 8000ed8:	f7ff fb69 	bl	80005ae <restore>
  return(return_val);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b2db      	uxtb	r3, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <RetargetInit+0x28>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <RetargetInit+0x2c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6898      	ldr	r0, [r3, #8]
 8000efc:	2300      	movs	r3, #0
 8000efe:	2202      	movs	r2, #2
 8000f00:	2100      	movs	r1, #0
 8000f02:	f003 fdb3 	bl	8004a6c <setvbuf>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001b0 	.word	0x200001b0
 8000f14:	20000044 	.word	0x20000044

08000f18 <_isatty>:

int _isatty(int fd) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db04      	blt.n	8000f30 <_isatty+0x18>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	dc01      	bgt.n	8000f30 <_isatty+0x18>
    return 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e005      	b.n	8000f3c <_isatty+0x24>

  errno = EBADF;
 8000f30:	f003 fcb4 	bl	800489c <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2209      	movs	r2, #9
 8000f38:	601a      	str	r2, [r3, #0]
  return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_write>:

int _write(int fd, char* ptr, int len) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d002      	beq.n	8000f5c <_write+0x18>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d111      	bne.n	8000f80 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <_write+0x54>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	f002 fb9b 	bl	80036a4 <HAL_UART_Transmit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <_write+0x38>
      return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e008      	b.n	8000f8e <_write+0x4a>
    else
      return EIO;
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	e006      	b.n	8000f8e <_write+0x4a>
  }
  errno = EBADF;
 8000f80:	f003 fc8c 	bl	800489c <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2209      	movs	r2, #9
 8000f88:	601a      	str	r2, [r3, #0]
  return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001b0 	.word	0x200001b0

08000f9c <_close>:

int _close(int fd) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db04      	blt.n	8000fb4 <_close+0x18>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	dc01      	bgt.n	8000fb4 <_close+0x18>
    return 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e006      	b.n	8000fc2 <_close+0x26>

  errno = EBADF;
 8000fb4:	f003 fc72 	bl	800489c <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2209      	movs	r2, #9
 8000fbc:	601a      	str	r2, [r3, #0]
  return -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000fd6:	f003 fc61 	bl	800489c <__errno>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2209      	movs	r2, #9
 8000fde:	601a      	str	r2, [r3, #0]
  return -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_read>:

int _read(int fd, char* ptr, int len) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d110      	bne.n	8001020 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <_read+0x4c>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	2201      	movs	r2, #1
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	f002 fbdf 	bl	80037cc <HAL_UART_Receive>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <_read+0x30>
      return 1;
 8001018:	2301      	movs	r3, #1
 800101a:	e008      	b.n	800102e <_read+0x42>
    else
      return EIO;
 800101c:	2305      	movs	r3, #5
 800101e:	e006      	b.n	800102e <_read+0x42>
  }
  errno = EBADF;
 8001020:	f003 fc3c 	bl	800489c <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	2209      	movs	r2, #9
 8001028:	601a      	str	r2, [r3, #0]
  return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001b0 	.word	0x200001b0

0800103c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db08      	blt.n	800105e <_fstat+0x22>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b02      	cmp	r3, #2
 8001050:	dc05      	bgt.n	800105e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001058:	605a      	str	r2, [r3, #4]
    return 0;
 800105a:	2300      	movs	r3, #0
 800105c:	e005      	b.n	800106a <_fstat+0x2e>
  }

  errno = EBADF;
 800105e:	f003 fc1d 	bl	800489c <__errno>
 8001062:	4603      	mov	r3, r0
 8001064:	2209      	movs	r2, #9
 8001066:	601a      	str	r2, [r3, #0]
  return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_MspInit+0x44>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6613      	str	r3, [r2, #96]	; 0x60
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_MspInit+0x44>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_MspInit+0x44>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_MspInit+0x44>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b090      	sub	sp, #64	; 0x40
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2234      	movs	r2, #52	; 0x34
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 fc21 	bl	8004914 <memset>
  if(hrtc->Instance==RTC)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_RTC_MspInit+0x78>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d127      	bne.n	800112c <HAL_RTC_MspInit+0x70>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fbe3 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80010f8:	f7ff fe8e 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_RTC_MspInit+0x7c>)
 80010fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001102:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_RTC_MspInit+0x7c>)
 8001104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2003      	movs	r0, #3
 8001112:	f000 fa98 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001116:	2003      	movs	r0, #3
 8001118:	f000 fab1 	bl	800167e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	2029      	movs	r0, #41	; 0x29
 8001122:	f000 fa90 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001126:	2029      	movs	r0, #41	; 0x29
 8001128:	f000 faa9 	bl	800167e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3740      	adds	r7, #64	; 0x40
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40002800 	.word	0x40002800
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b096      	sub	sp, #88	; 0x58
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2234      	movs	r2, #52	; 0x34
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fbd9 	bl	8004914 <memset>
  if(huart->Instance==USART2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <HAL_UART_MspInit+0xdc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d150      	bne.n	800120e <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800116c:	2302      	movs	r3, #2
 800116e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fb9d 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001184:	f7ff fe48 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_UART_MspInit+0xe0>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_UART_MspInit+0xe0>)
 800118e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001192:	6593      	str	r3, [r2, #88]	; 0x58
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <HAL_UART_MspInit+0xe0>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <HAL_UART_MspInit+0xe0>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_UART_MspInit+0xe0>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_UART_MspInit+0xe0>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011b8:	2304      	movs	r3, #4
 80011ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c8:	2307      	movs	r3, #7
 80011ca:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 faeb 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011ec:	2303      	movs	r3, #3
 80011ee:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f000 fad9 	bl	80017b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2026      	movs	r0, #38	; 0x26
 8001204:	f000 fa1f 	bl	8001646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001208:	2026      	movs	r0, #38	; 0x26
 800120a:	f000 fa38 	bl	800167e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3758      	adds	r7, #88	; 0x58
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40004400 	.word	0x40004400
 800121c:	40021000 	.word	0x40021000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f8cc 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <RTC_WKUP_IRQHandler+0x10>)
 800127a:	f002 f991 	bl	80035a0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000100 	.word	0x20000100

08001288 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800128e:	480f      	ldr	r0, [pc, #60]	; (80012cc <USART2_IRQHandler+0x44>)
 8001290:	f002 fb6e 	bl	8003970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  uint8_t ch;
  ch = getchar();
 8001294:	f003 fb08 	bl	80048a8 <getchar>
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  if (enqueue(&rx_queue,ch)) {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4619      	mov	r1, r3
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <USART2_IRQHandler+0x48>)
 80012a2:	f7ff fdbe 	bl	8000e22 <enqueue>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <USART2_IRQHandler+0x34>
    dequeue(&rx_queue);
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <USART2_IRQHandler+0x48>)
 80012ae:	f7ff fdf1 	bl	8000e94 <dequeue>
    enqueue(&rx_queue,ch);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <USART2_IRQHandler+0x48>)
 80012b8:	f7ff fdb3 	bl	8000e22 <enqueue>
  if(buf.head == (MAX_BUF-1)){
    buf.head = 0;
  }else{
    buf.head++;
    }*/
  HAL_UART_IRQHandler(&huart2);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <USART2_IRQHandler+0x44>)
 80012be:	f002 fb57 	bl	8003970 <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000012c 	.word	0x2000012c
 80012d0:	200000d8 	.word	0x200000d8

080012d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <RTC_Alarm_IRQHandler+0x10>)
 80012da:	f001 ffc3 	bl	8003264 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000100 	.word	0x20000100

080012e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001310:	f7ff ffea 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <LoopForever+0x6>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	; (800134c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <LoopForever+0xe>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	; (8001358 <LoopForever+0x16>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133a:	f003 fac7 	bl	80048cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133e:	f7ff f967 	bl	8000610 <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001344:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001350:	080061d4 	.word	0x080061d4
  ldr r2, =_sbss
 8001354:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001358:	200001c8 	.word	0x200001c8

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>

0800135e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f961 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f80e 	bl	8001390 <HAL_InitTick>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e001      	b.n	8001384 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001380:	f7ff fe78 	bl	8001074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001384:	79fb      	ldrb	r3, [r7, #7]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_InitTick+0x6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d023      	beq.n	80013ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_InitTick+0x70>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_InitTick+0x6c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f96d 	bl	800169a <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10f      	bne.n	80013e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d809      	bhi.n	80013e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d4:	f000 f937 	bl	8001646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_InitTick+0x74>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e007      	b.n	80013f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e004      	b.n	80013f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	e001      	b.n	80013f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000040 	.word	0x20000040
 8001400:	20000038 	.word	0x20000038
 8001404:	2000003c 	.word	0x2000003c

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000040 	.word	0x20000040
 800142c:	200001b4 	.word	0x200001b4

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200001b4 	.word	0x200001b4

08001448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff ffee 	bl	8001430 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001460:	d005      	beq.n	800146e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_Delay+0x44>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146e:	bf00      	nop
 8001470:	f7ff ffde 	bl	8001430 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d8f7      	bhi.n	8001470 <HAL_Delay+0x28>
  {
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000040 	.word	0x20000040

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <__NVIC_EnableIRQ+0x38>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff29 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001658:	f7ff ff3e 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 800165c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f7ff ff8e 	bl	8001584 <NVIC_EncodePriority>
 8001668:	4602      	mov	r2, r0
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff5d 	bl	8001530 <__NVIC_SetPriority>
}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff31 	bl	80014f4 <__NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ffa2 	bl	80015ec <SysTick_Config>
 80016a8:	4603      	mov	r3, r0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d008      	beq.n	80016dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2204      	movs	r2, #4
 80016ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e022      	b.n	8001722 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 020e 	bic.w	r2, r2, #14
 80016ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	f003 021c 	and.w	r2, r3, #28
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001720:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d005      	beq.n	8001752 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2204      	movs	r2, #4
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e029      	b.n	80017a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 020e 	bic.w	r2, r2, #14
 8001760:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f003 021c 	and.w	r2, r3, #28
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
    }
  }
  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017be:	e14e      	b.n	8001a5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8140 	beq.w	8001a58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d005      	beq.n	80017f0 <HAL_GPIO_Init+0x40>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d130      	bne.n	8001852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001826:	2201      	movs	r2, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 0201 	and.w	r2, r3, #1
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b03      	cmp	r3, #3
 800185c:	d017      	beq.n	800188e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d123      	bne.n	80018e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	220f      	movs	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	6939      	ldr	r1, [r7, #16]
 80018de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0203 	and.w	r2, r3, #3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 809a 	beq.w	8001a58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <HAL_GPIO_Init+0x2cc>)
 8001926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_GPIO_Init+0x2cc>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6613      	str	r3, [r2, #96]	; 0x60
 8001930:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <HAL_GPIO_Init+0x2cc>)
 8001932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800193c:	4a50      	ldr	r2, [pc, #320]	; (8001a80 <HAL_GPIO_Init+0x2d0>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001966:	d013      	beq.n	8001990 <HAL_GPIO_Init+0x1e0>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a46      	ldr	r2, [pc, #280]	; (8001a84 <HAL_GPIO_Init+0x2d4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00d      	beq.n	800198c <HAL_GPIO_Init+0x1dc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a45      	ldr	r2, [pc, #276]	; (8001a88 <HAL_GPIO_Init+0x2d8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x1d8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a44      	ldr	r2, [pc, #272]	; (8001a8c <HAL_GPIO_Init+0x2dc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_Init+0x1d4>
 8001980:	2303      	movs	r3, #3
 8001982:	e006      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 8001984:	2307      	movs	r3, #7
 8001986:	e004      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 8001988:	2302      	movs	r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 8001990:	2300      	movs	r3, #0
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	f002 0203 	and.w	r2, r2, #3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4093      	lsls	r3, r2
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a2:	4937      	ldr	r1, [pc, #220]	; (8001a80 <HAL_GPIO_Init+0x2d0>)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b0:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019d4:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019fe:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f47f aea9 	bne.w	80017c0 <HAL_GPIO_Init+0x10>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	48000c00 	.word	0x48000c00
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43d9      	mvns	r1, r3
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40007000 	.word	0x40007000

08001b18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40007000 	.word	0x40007000

08001b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b42:	d130      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b50:	d038      	beq.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2232      	movs	r2, #50	; 0x32
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0c9b      	lsrs	r3, r3, #18
 8001b74:	3301      	adds	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b78:	e002      	b.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8c:	d102      	bne.n	8001b94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f2      	bne.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba0:	d110      	bne.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e00f      	b.n	8001bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb2:	d007      	beq.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	20000038 	.word	0x20000038
 8001bdc:	431bde83 	.word	0x431bde83

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f000 bc56 	b.w	80024a0 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf4:	4ba1      	ldr	r3, [pc, #644]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfe:	4b9f      	ldr	r3, [pc, #636]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80e6 	beq.w	8001de2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4c>
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	f040 808d 	bne.w	8001d3e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	f040 8089 	bne.w	8001d3e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c2c:	4b93      	ldr	r3, [pc, #588]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_RCC_OscConfig+0x66>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f000 bc2d 	b.w	80024a0 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_RCC_OscConfig+0x80>
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c5e:	e005      	b.n	8001c6c <HAL_RCC_OscConfig+0x8c>
 8001c60:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d224      	bcs.n	8001cba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fdbf 	bl	80027f8 <RCC_SetFlashLatencyFromMSIRange>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f000 bc0d 	b.w	80024a0 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c86:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	4977      	ldr	r1, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca4:	4b75      	ldr	r3, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	4972      	ldr	r1, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	e025      	b.n	8001d06 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cba:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6f      	ldr	r2, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	496a      	ldr	r1, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	4965      	ldr	r1, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fd7e 	bl	80027f8 <RCC_SetFlashLatencyFromMSIRange>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e3cc      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d06:	f000 fcb3 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	495a      	ldr	r1, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x2a0>)
 8001d18:	5ccb      	ldrb	r3, [r1, r3]
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_RCC_OscConfig+0x2a4>)
 8001d24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d26:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <HAL_RCC_OscConfig+0x2a8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fb30 	bl	8001390 <HAL_InitTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d052      	beq.n	8001de0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	e3b0      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d032      	beq.n	8001dac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d46:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fb6d 	bl	8001430 <HAL_GetTick>
 8001d56:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fb69 	bl	8001430 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e399      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6c:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	493a      	ldr	r1, [pc, #232]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
 8001daa:	e01a      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a32      	ldr	r2, [pc, #200]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fb3a 	bl	8001430 <HAL_GetTick>
 8001dbc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fb36 	bl	8001430 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e366      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1e0>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d073      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x220>
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d10e      	bne.n	8001e18 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d063      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x2f4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d15f      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e343      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x250>
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0x28c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x274>
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0x28c>
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x29c>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fadc 	bl	8001430 <HAL_GetTick>
 8001e78:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7a:	e010      	b.n	8001e9e <HAL_RCC_OscConfig+0x2be>
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08005fe0 	.word	0x08005fe0
 8001e84:	20000038 	.word	0x20000038
 8001e88:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fad0 	bl	8001430 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e300      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9e:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x2ac>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff fac0 	bl	8001430 <HAL_GetTick>
 8001eb0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fabc 	bl	8001430 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e2ec      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec6:	4b96      	ldr	r3, [pc, #600]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2d4>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d060      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x314>
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d119      	bne.n	8001f22 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d116      	bne.n	8001f22 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef4:	4b8a      	ldr	r3, [pc, #552]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x32c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e2c9      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b84      	ldr	r3, [pc, #528]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	4981      	ldr	r1, [pc, #516]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f20:	e040      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d023      	beq.n	8001f72 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7ff fa7b 	bl	8001430 <HAL_GetTick>
 8001f3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fa77 	bl	8001430 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e2a7      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f50:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b70      	ldr	r3, [pc, #448]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	496d      	ldr	r1, [pc, #436]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e018      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6a      	ldr	r2, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fa57 	bl	8001430 <HAL_GetTick>
 8001f82:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff fa53 	bl	8001430 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e283      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f98:	4b61      	ldr	r3, [pc, #388]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d07f      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05f      	beq.n	8002078 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fbe:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d037      	beq.n	800203e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e25c      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01b      	beq.n	8002028 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff6:	4a4a      	ldr	r2, [pc, #296]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002000:	f7ff fa16 	bl	8001430 <HAL_GetTick>
 8002004:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff fa12 	bl	8001430 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b11      	cmp	r3, #17
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e242      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 800201c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ef      	bne.n	8002008 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 800202a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202e:	f023 0210 	bic.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	493a      	ldr	r1, [pc, #232]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8002040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002044:	4a36      	ldr	r2, [pc, #216]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7ff f9ef 	bl	8001430 <HAL_GetTick>
 8002052:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff f9eb 	bl	8001430 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b11      	cmp	r3, #17
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e21b      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ef      	beq.n	8002056 <HAL_RCC_OscConfig+0x476>
 8002076:	e01b      	b.n	80020b0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff f9d2 	bl	8001430 <HAL_GetTick>
 800208c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff f9ce 	bl	8001430 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b11      	cmp	r3, #17
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e1fe      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 80020a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ef      	bne.n	8002090 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80c1 	beq.w	8002240 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10e      	bne.n	80020ee <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6593      	str	r3, [r2, #88]	; 0x58
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_RCC_OscConfig+0x540>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_OscConfig+0x544>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11c      	bne.n	8002134 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_RCC_OscConfig+0x544>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_RCC_OscConfig+0x544>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7ff f993 	bl	8001430 <HAL_GetTick>
 800210a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210c:	e00c      	b.n	8002128 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7ff f98f 	bl	8001430 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d905      	bls.n	8002128 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1bf      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002128:	4bb1      	ldr	r3, [pc, #708]	; (80023f0 <HAL_RCC_OscConfig+0x810>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ec      	beq.n	800210e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d02c      	beq.n	800219a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002140:	4bac      	ldr	r3, [pc, #688]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	49a8      	ldr	r1, [pc, #672]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002166:	4ba3      	ldr	r3, [pc, #652]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	4aa1      	ldr	r2, [pc, #644]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002176:	4b9f      	ldr	r3, [pc, #636]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	4a9d      	ldr	r2, [pc, #628]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002186:	e018      	b.n	80021ba <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002188:	4b9a      	ldr	r3, [pc, #616]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	4a99      	ldr	r2, [pc, #612]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002198:	e00f      	b.n	80021ba <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800219a:	4b96      	ldr	r3, [pc, #600]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a0:	4a94      	ldr	r2, [pc, #592]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021aa:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	4a90      	ldr	r2, [pc, #576]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80021b2:	f023 0304 	bic.w	r3, r3, #4
 80021b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d016      	beq.n	80021f0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff f935 	bl	8001430 <HAL_GetTick>
 80021c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff f931 	bl	8001430 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e15f      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e0:	4b84      	ldr	r3, [pc, #528]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ed      	beq.n	80021ca <HAL_RCC_OscConfig+0x5ea>
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff f91e 	bl	8001430 <HAL_GetTick>
 80021f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7ff f91a 	bl	8001430 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e148      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800220e:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ed      	bne.n	80021f8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800221c:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a74      	ldr	r2, [pc, #464]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002234:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 800223a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01c      	beq.n	800228e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002254:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800225a:	4a66      	ldr	r2, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff f8e4 	bl	8001430 <HAL_GetTick>
 8002268:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800226c:	f7ff f8e0 	bl	8001430 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e110      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800227e:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ef      	beq.n	800226c <HAL_RCC_OscConfig+0x68c>
 800228c:	e01b      	b.n	80022c6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800228e:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002294:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7ff f8c7 	bl	8001430 <HAL_GetTick>
 80022a2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a6:	f7ff f8c3 	bl	8001430 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0f3      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022b8:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80022ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ef      	bne.n	80022a6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80e7 	beq.w	800249e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	f040 80b7 	bne.w	8002448 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0203 	and.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d124      	bne.n	8002338 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	3b01      	subs	r3, #1
 80022fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d11b      	bne.n	8002338 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d113      	bne.n	8002338 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	3b01      	subs	r3, #1
 800231e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d109      	bne.n	8002338 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	3b01      	subs	r3, #1
 8002332:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d061      	beq.n	80023fc <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d056      	beq.n	80023ec <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2c      	ldr	r2, [pc, #176]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002348:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800234a:	f7ff f871 	bl	8001430 <HAL_GetTick>
 800234e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7ff f86d 	bl	8001430 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e09d      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCC_OscConfig+0x818>)
 8002376:	4013      	ands	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002380:	3a01      	subs	r2, #1
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800238a:	0212      	lsls	r2, r2, #8
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002392:	0852      	lsrs	r2, r2, #1
 8002394:	3a01      	subs	r2, #1
 8002396:	0552      	lsls	r2, r2, #21
 8002398:	4311      	orrs	r1, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800239e:	0852      	lsrs	r2, r2, #1
 80023a0:	3a01      	subs	r2, #1
 80023a2:	0652      	lsls	r2, r2, #25
 80023a4:	430a      	orrs	r2, r1
 80023a6:	4913      	ldr	r1, [pc, #76]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c4:	f7ff f834 	bl	8001430 <HAL_GetTick>
 80023c8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff f830 	bl	8001430 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e060      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_OscConfig+0x814>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ea:	e058      	b.n	800249e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e057      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
 80023f0:	40007000 	.word	0x40007000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d14a      	bne.n	800249e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a23      	ldr	r2, [pc, #140]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002420:	f7ff f806 	bl	8001430 <HAL_GetTick>
 8002424:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff f802 	bl	8001430 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e032      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x848>
 8002446:	e02a      	b.n	800249e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d025      	beq.n	800249a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 8002454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002458:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 8002460:	f023 0303 	bic.w	r3, r3, #3
 8002464:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 800246c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe ffdd 	bl	8001430 <HAL_GetTick>
 8002476:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe ffd9 	bl	8001430 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e009      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x8c8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x89a>
 8002498:	e001      	b.n	800249e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3728      	adds	r7, #40	; 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0c8      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d910      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4961      	ldr	r1, [pc, #388]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b5f      	ldr	r3, [pc, #380]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b0      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d04c      	beq.n	8002596 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d121      	bne.n	8002554 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e09e      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d107      	bne.n	800252c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d115      	bne.n	8002554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e092      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002534:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e086      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e07e      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002554:	4b42      	ldr	r3, [pc, #264]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 0203 	bic.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	493f      	ldr	r1, [pc, #252]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002566:	f7fe ff63 	bl	8001430 <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256c:	e00a      	b.n	8002584 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256e:	f7fe ff5f 	bl	8001430 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e066      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 020c 	and.w	r2, r3, #12
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	429a      	cmp	r2, r3
 8002594:	d1eb      	bne.n	800256e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a2:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	492c      	ldr	r1, [pc, #176]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d210      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4924      	ldr	r1, [pc, #144]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e036      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4918      	ldr	r1, [pc, #96]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4910      	ldr	r1, [pc, #64]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002622:	f000 f825 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	490c      	ldr	r1, [pc, #48]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fea2 	bl	8001390 <HAL_InitTick>
 800264c:	4603      	mov	r3, r0
 800264e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002650:	7afb      	ldrb	r3, [r7, #11]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
 8002664:	08005fe0 	.word	0x08005fe0
 8002668:	20000038 	.word	0x20000038
 800266c:	2000003c 	.word	0x2000003c

08002670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267e:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002688:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d121      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d11e      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a4:	4b34      	ldr	r3, [pc, #208]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026b0:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e005      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026cc:	4a2b      	ldr	r2, [pc, #172]	; (800277c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026e8:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	e004      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f4:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_RCC_GetSysClockFreq+0x114>)
 80026f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d134      	bne.n	8002768 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0xa6>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d003      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0xac>
 8002714:	e005      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002716:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_RCC_GetSysClockFreq+0x110>)
 8002718:	617b      	str	r3, [r7, #20]
      break;
 800271a:	e005      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_GetSysClockFreq+0x114>)
 800271e:	617b      	str	r3, [r7, #20]
      break;
 8002720:	e002      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	617b      	str	r3, [r7, #20]
      break;
 8002726:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	3301      	adds	r3, #1
 8002734:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	fb02 f203 	mul.w	r2, r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	0e5b      	lsrs	r3, r3, #25
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	3301      	adds	r3, #1
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002768:	69bb      	ldr	r3, [r7, #24]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	08005ff8 	.word	0x08005ff8
 8002780:	00f42400 	.word	0x00f42400
 8002784:	007a1200 	.word	0x007a1200

08002788 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000038 	.word	0x20000038

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a4:	f7ff fff0 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4904      	ldr	r1, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08005ff0 	.word	0x08005ff0

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d0:	f7ff ffda 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0adb      	lsrs	r3, r3, #11
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4904      	ldr	r1, [pc, #16]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08005ff0 	.word	0x08005ff0

080027f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002810:	f7ff f982 	bl	8001b18 <HAL_PWREx_GetVoltageRange>
 8002814:	6178      	str	r0, [r7, #20]
 8002816:	e014      	b.n	8002842 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002822:	6593      	str	r3, [r2, #88]	; 0x58
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002830:	f7ff f972 	bl	8001b18 <HAL_PWREx_GetVoltageRange>
 8002834:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002848:	d10b      	bne.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d919      	bls.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2ba0      	cmp	r3, #160	; 0xa0
 8002854:	d902      	bls.n	800285c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002856:	2302      	movs	r3, #2
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	e013      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800285c:	2301      	movs	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	e010      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d902      	bls.n	800286e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002868:	2303      	movs	r3, #3
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e00a      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d102      	bne.n	800287a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002874:	2302      	movs	r3, #2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e004      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b70      	cmp	r3, #112	; 0x70
 800287e:	d101      	bne.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002880:	2301      	movs	r3, #1
 8002882:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 0207 	bic.w	r2, r3, #7
 800288c:	4909      	ldr	r1, [pc, #36]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40022000 	.word	0x40022000

080028b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c0:	2300      	movs	r3, #0
 80028c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c4:	2300      	movs	r3, #0
 80028c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 809e 	beq.w	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028da:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x34>
 80028ea:	2300      	movs	r3, #0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	4a3f      	ldr	r2, [pc, #252]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	; 0x58
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002908:	2301      	movs	r3, #1
 800290a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800290c:	4b3a      	ldr	r3, [pc, #232]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a39      	ldr	r2, [pc, #228]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002918:	f7fe fd8a 	bl	8001430 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800291e:	e009      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fe fd86 	bl	8001430 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d902      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	74fb      	strb	r3, [r7, #19]
        break;
 8002932:	e005      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002934:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ef      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d15a      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002950:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01e      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	429a      	cmp	r2, r3
 8002960:	d019      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002962:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800298e:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fd46 	bl	8001430 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a6:	e00b      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe fd42 	bl	8001430 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d902      	bls.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	74fb      	strb	r3, [r7, #19]
            break;
 80029be:	e006      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0ec      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4904      	ldr	r1, [pc, #16]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029ea:	e009      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
 80029f0:	e006      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a00:	7c7b      	ldrb	r3, [r7, #17]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	4b6e      	ldr	r3, [pc, #440]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a6d      	ldr	r2, [pc, #436]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1e:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f023 0203 	bic.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4964      	ldr	r1, [pc, #400]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a40:	4b5f      	ldr	r3, [pc, #380]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 020c 	bic.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	495c      	ldr	r1, [pc, #368]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a62:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4953      	ldr	r1, [pc, #332]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a84:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	494b      	ldr	r1, [pc, #300]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aa6:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4942      	ldr	r1, [pc, #264]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ac8:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	493a      	ldr	r1, [pc, #232]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aea:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	4931      	ldr	r1, [pc, #196]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	4929      	ldr	r1, [pc, #164]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4920      	ldr	r1, [pc, #128]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	4918      	ldr	r1, [pc, #96]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bce:	f043 0304 	orr.w	r3, r3, #4
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d073      	beq.n	8002cde <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe fa56 	bl	80010bc <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002c16:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	22ca      	movs	r2, #202	; 0xca
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2253      	movs	r2, #83	; 0x53
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fb6b 	bl	800330c <RTC_EnterInitMode>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d14e      	bne.n	8002cde <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c52:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6999      	ldr	r1, [r3, #24]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6912      	ldr	r2, [r2, #16]
 8002c7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6919      	ldr	r1, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	041a      	lsls	r2, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fb71 	bl	8003378 <RTC_ExitInitMode>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11e      	bne.n	8002cde <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002cae:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6999      	ldr	r1, [r3, #24]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_RTC_SetTime+0x1a>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e08b      	b.n	8002e1a <HAL_RTC_SetTime+0x132>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22ca      	movs	r2, #202	; 0xca
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2253      	movs	r2, #83	; 0x53
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 faf2 	bl	800330c <RTC_EnterInitMode>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d163      	bne.n	8002dfa <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d126      	bne.n	8002d86 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fb4f 	bl	80033f4 <RTC_ByteToBcd2>
 8002d56:	4603      	mov	r3, r0
 8002d58:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fb48 	bl	80033f4 <RTC_ByteToBcd2>
 8002d64:	4603      	mov	r3, r0
 8002d66:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d68:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	789b      	ldrb	r3, [r3, #2]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fb40 	bl	80033f4 <RTC_ByteToBcd2>
 8002d74:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d76:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	78db      	ldrb	r3, [r3, #3]
 8002d7e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e018      	b.n	8002db8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	785b      	ldrb	r3, [r3, #1]
 8002da4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002da6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	78db      	ldrb	r3, [r3, #3]
 8002db2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002dc6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd6:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6999      	ldr	r1, [r3, #24]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fac1 	bl	8003378 <RTC_ExitInitMode>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	22ff      	movs	r2, #255	; 0xff
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e50:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	0d9b      	lsrs	r3, r3, #22
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11a      	bne.n	8002ed0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fac8 	bl	8003434 <RTC_Bcd2ToByte>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	785b      	ldrb	r3, [r3, #1]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fabf 	bl	8003434 <RTC_Bcd2ToByte>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	789b      	ldrb	r3, [r3, #2]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fab6 	bl	8003434 <RTC_Bcd2ToByte>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002eda:	b590      	push	{r4, r7, lr}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_RTC_SetDate+0x1a>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e075      	b.n	8002fe0 <HAL_RTC_SetDate+0x106>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10e      	bne.n	8002f28 <HAL_RTC_SetDate+0x4e>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	785b      	ldrb	r3, [r3, #1]
 8002f1a:	f023 0310 	bic.w	r3, r3, #16
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	330a      	adds	r3, #10
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11c      	bne.n	8002f68 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	78db      	ldrb	r3, [r3, #3]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fa5e 	bl	80033f4 <RTC_ByteToBcd2>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fa57 	bl	80033f4 <RTC_ByteToBcd2>
 8002f46:	4603      	mov	r3, r0
 8002f48:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002f4a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	789b      	ldrb	r3, [r3, #2]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa4f 	bl	80033f4 <RTC_ByteToBcd2>
 8002f56:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f58:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e00e      	b.n	8002f86 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	78db      	ldrb	r3, [r3, #3]
 8002f6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f74:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002f7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	22ca      	movs	r2, #202	; 0xca
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2253      	movs	r2, #83	; 0x53
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f9b8 	bl	800330c <RTC_EnterInitMode>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f9de 	bl	8003378 <RTC_ExitInitMode>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}

08002fe8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ffe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003002:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	0b5b      	lsrs	r3, r3, #13
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11a      	bne.n	8003078 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f9f4 	bl	8003434 <RTC_Bcd2ToByte>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	785b      	ldrb	r3, [r3, #1]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f9eb 	bl	8003434 <RTC_Bcd2ToByte>
 800305e:	4603      	mov	r3, r0
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	789b      	ldrb	r3, [r3, #2]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f9e2 	bl	8003434 <RTC_Bcd2ToByte>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_RTC_SetAlarm_IT+0x1a>
 800309a:	2302      	movs	r3, #2
 800309c:	e0db      	b.n	8003256 <HAL_RTC_SetAlarm_IT+0x1d2>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d137      	bne.n	8003124 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2200      	movs	r2, #0
 80030c6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f991 	bl	80033f4 <RTC_ByteToBcd2>
 80030d2:	4603      	mov	r3, r0
 80030d4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f98a 	bl	80033f4 <RTC_ByteToBcd2>
 80030e0:	4603      	mov	r3, r0
 80030e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030e4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f982 	bl	80033f4 <RTC_ByteToBcd2>
 80030f0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030f2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	78db      	ldrb	r3, [r3, #3]
 80030fa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80030fc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f974 	bl	80033f4 <RTC_ByteToBcd2>
 800310c:	4603      	mov	r3, r0
 800310e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003110:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003118:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e023      	b.n	800316c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	785b      	ldrb	r3, [r3, #1]
 8003142:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003144:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800314a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	78db      	ldrb	r3, [r3, #3]
 8003150:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003152:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800315a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800315c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003162:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	22ca      	movs	r2, #202	; 0xca
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2253      	movs	r2, #83	; 0x53
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003190:	d124      	bne.n	80031dc <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699a      	ldr	r2, [r3, #24]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d8:	619a      	str	r2, [r3, #24]
 80031da:	e023      	b.n	8003224 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031ea:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2202      	movs	r2, #2
 80031f2:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003222:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <HAL_RTC_SetAlarm_IT+0x1dc>)
 800322a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800322e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8003236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	bd90      	pop	{r4, r7, pc}
 800325e:	bf00      	nop
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_RTC_AlarmIRQHandler+0x58>)
 800326e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003272:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2201      	movs	r2, #1
 800328c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fdb2 	bl	8000df8 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9a4 	bl	80035f4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40010400 	.word	0x40010400

080032c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032d6:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 80032d8:	f7fe f8aa 	bl	8001430 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80032de:	e009      	b.n	80032f4 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032e0:	f7fe f8a6 	bl	8001430 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ee:	d901      	bls.n	80032f4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e007      	b.n	8003304 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ee      	beq.n	80032e0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d123      	bne.n	800336e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003334:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003336:	f7fe f87b 	bl	8001430 <HAL_GetTick>
 800333a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800333c:	e00d      	b.n	800335a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800333e:	f7fe f877 	bl	8001430 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334c:	d905      	bls.n	800335a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <RTC_EnterInitMode+0x62>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d1e7      	bne.n	800333e <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <RTC_ExitInitMode+0x78>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <RTC_ExitInitMode+0x78>)
 800338a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003390:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <RTC_ExitInitMode+0x78>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10c      	bne.n	80033b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff8f 	bl	80032c0 <HAL_RTC_WaitForSynchro>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01e      	beq.n	80033e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2203      	movs	r2, #3
 80033ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e017      	b.n	80033e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <RTC_ExitInitMode+0x78>)
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <RTC_ExitInitMode+0x78>)
 80033bc:	f023 0320 	bic.w	r3, r3, #32
 80033c0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff7c 	bl	80032c0 <HAL_RTC_WaitForSynchro>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2203      	movs	r2, #3
 80033d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <RTC_ExitInitMode+0x78>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <RTC_ExitInitMode+0x78>)
 80033e0:	f043 0320 	orr.w	r3, r3, #32
 80033e4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40002800 	.word	0x40002800

080033f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003406:	e005      	b.n	8003414 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800340e:	7afb      	ldrb	r3, [r7, #11]
 8003410:	3b0a      	subs	r3, #10
 8003412:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003414:	7afb      	ldrb	r3, [r7, #11]
 8003416:	2b09      	cmp	r3, #9
 8003418:	d8f6      	bhi.n	8003408 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	b2da      	uxtb	r2, r3
 8003422:	7afb      	ldrb	r3, [r7, #11]
 8003424:	4313      	orrs	r3, r2
 8003426:	b2db      	uxtb	r3, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4413      	add	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	b2da      	uxtb	r2, r3
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	4413      	add	r3, r2
 800345a:	b2db      	uxtb	r3, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8003480:	2302      	movs	r3, #2
 8003482:	e087      	b.n	8003594 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	22ca      	movs	r2, #202	; 0xca
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2253      	movs	r2, #83	; 0x53
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2204      	movs	r2, #4
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d120      	bne.n	800350c <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
#endif
  {
    tickstart = HAL_GetTick();
 80034ca:	f7fd ffb1 	bl	8001430 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80034d0:	e015      	b.n	80034fe <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034d2:	f7fd ffad 	bl	8001430 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e0:	d90d      	bls.n	80034fe <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04a      	b.n	8003594 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0e2      	beq.n	80034d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	0419      	lsls	r1, r3, #16
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	430a      	orrs	r2, r1
 8003518:	615a      	str	r2, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f023 0107 	bic.w	r1, r3, #7
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	430a      	orrs	r2, r1
 800352c:	619a      	str	r2, [r3, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d006      	beq.n	8003542 <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a18      	ldr	r2, [pc, #96]	; (800359c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 800353a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353e:	6053      	str	r3, [r2, #4]
 8003540:	e005      	b.n	800354e <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003542:	4b16      	ldr	r3, [pc, #88]	; (800359c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a15      	ldr	r2, [pc, #84]	; (800359c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8003548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354c:	6013      	str	r3, [r2, #0]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8003554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003558:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003568:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003578:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	22ff      	movs	r2, #255	; 0xff
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40010400 	.word	0x40010400

080035a0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 80035aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035ae:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d006      	beq.n	80035cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2204      	movs	r2, #4
 80035c4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f80a 	bl	80035e0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40010400 	.word	0x40010400

080035e0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e040      	b.n	800369c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fd86 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	; 0x24
 8003634:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fc94 	bl	8003f74 <UART_SetConfig>
 800364c:	4603      	mov	r3, r0
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e022      	b.n	800369c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 febc 	bl	80043dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 ff43 	bl	8004520 <UART_CheckIdleState>
 800369a:	4603      	mov	r3, r0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	f040 8082 	bne.w	80037c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_UART_Transmit+0x26>
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07a      	b.n	80037c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_UART_Transmit+0x38>
 80036d8:	2302      	movs	r3, #2
 80036da:	e073      	b.n	80037c4 <HAL_UART_Transmit+0x120>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2221      	movs	r2, #33	; 0x21
 80036f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f2:	f7fd fe9d 	bl	8001430 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003710:	d108      	bne.n	8003724 <HAL_UART_Transmit+0x80>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e003      	b.n	800372c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003734:	e02d      	b.n	8003792 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 ff36 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e039      	b.n	80037c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10b      	bne.n	800376e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	881a      	ldrh	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003762:	b292      	uxth	r2, r2
 8003764:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	3302      	adds	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e008      	b.n	8003780 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b292      	uxth	r2, r2
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3301      	adds	r3, #1
 800377e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1cb      	bne.n	8003736 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2140      	movs	r1, #64	; 0x40
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 ff02 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e005      	b.n	80037c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	f040 80bf 	bne.w	8003964 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_UART_Receive+0x26>
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0b7      	b.n	8003966 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_UART_Receive+0x38>
 8003800:	2302      	movs	r3, #2
 8003802:	e0b0      	b.n	8003966 <HAL_UART_Receive+0x19a>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2222      	movs	r2, #34	; 0x22
 8003818:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003820:	f7fd fe06 	bl	8001430 <HAL_GetTick>
 8003824:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	88fa      	ldrh	r2, [r7, #6]
 800382a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d10e      	bne.n	800385e <HAL_UART_Receive+0x92>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <HAL_UART_Receive+0x88>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800384e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003852:	e02d      	b.n	80038b0 <HAL_UART_Receive+0xe4>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	22ff      	movs	r2, #255	; 0xff
 8003858:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800385c:	e028      	b.n	80038b0 <HAL_UART_Receive+0xe4>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10d      	bne.n	8003882 <HAL_UART_Receive+0xb6>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_UART_Receive+0xac>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003876:	e01b      	b.n	80038b0 <HAL_UART_Receive+0xe4>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	227f      	movs	r2, #127	; 0x7f
 800387c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003880:	e016      	b.n	80038b0 <HAL_UART_Receive+0xe4>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388a:	d10d      	bne.n	80038a8 <HAL_UART_Receive+0xdc>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <HAL_UART_Receive+0xd2>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	227f      	movs	r2, #127	; 0x7f
 8003898:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800389c:	e008      	b.n	80038b0 <HAL_UART_Receive+0xe4>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	223f      	movs	r2, #63	; 0x3f
 80038a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038a6:	e003      	b.n	80038b0 <HAL_UART_Receive+0xe4>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c0:	d108      	bne.n	80038d4 <HAL_UART_Receive+0x108>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d104      	bne.n	80038d4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	e003      	b.n	80038dc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80038e4:	e033      	b.n	800394e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	2120      	movs	r1, #32
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fe5e 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e032      	b.n	8003966 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10c      	bne.n	8003920 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800390c:	b29a      	uxth	r2, r3
 800390e:	8a7b      	ldrh	r3, [r7, #18]
 8003910:	4013      	ands	r3, r2
 8003912:	b29a      	uxth	r2, r3
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	3302      	adds	r3, #2
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e00d      	b.n	800393c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003926:	b29b      	uxth	r3, r3
 8003928:	b2da      	uxtb	r2, r3
 800392a:	8a7b      	ldrh	r3, [r7, #18]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4013      	ands	r3, r2
 8003930:	b2da      	uxtb	r2, r3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3301      	adds	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1c5      	bne.n	80038e6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b0ba      	sub	sp, #232	; 0xe8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003996:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800399a:	f640 030f 	movw	r3, #2063	; 0x80f
 800399e:	4013      	ands	r3, r2
 80039a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d115      	bne.n	80039d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00f      	beq.n	80039d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 82a6 	beq.w	8003f1a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
      }
      return;
 80039d6:	e2a0      	b.n	8003f1a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80039d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8117 	beq.w	8003c10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039f2:	4b85      	ldr	r3, [pc, #532]	; (8003c08 <HAL_UART_IRQHandler+0x298>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 810a 	beq.w	8003c10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d011      	beq.n	8003a2c <HAL_UART_IRQHandler+0xbc>
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d011      	beq.n	8003a5c <HAL_UART_IRQHandler+0xec>
 8003a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d011      	beq.n	8003a8c <HAL_UART_IRQHandler+0x11c>
 8003a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a82:	f043 0202 	orr.w	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d017      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d105      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003abe:	f043 0208 	orr.w	r2, r3, #8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d012      	beq.n	8003afa <HAL_UART_IRQHandler+0x18a>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 820c 	beq.w	8003f1e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04f      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fdf1 	bl	800473a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d141      	bne.n	8003bea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1d9      	bne.n	8003b66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d013      	beq.n	8003be2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <HAL_UART_IRQHandler+0x29c>)
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fdb1 	bl	800172e <HAL_DMA_Abort_IT>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	e00f      	b.n	8003c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9b0 	bl	8003f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	e00b      	b.n	8003c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9ac 	bl	8003f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	e007      	b.n	8003c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9a8 	bl	8003f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c00:	e18d      	b.n	8003f1e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c02:	bf00      	nop
    return;
 8003c04:	e18b      	b.n	8003f1e <HAL_UART_IRQHandler+0x5ae>
 8003c06:	bf00      	nop
 8003c08:	04000120 	.word	0x04000120
 8003c0c:	08004801 	.word	0x08004801

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f040 8146 	bne.w	8003ea6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 813f 	beq.w	8003ea6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8138 	beq.w	8003ea6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	f040 80b4 	bne.w	8003db6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 815f 	beq.w	8003f22 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	f080 8157 	bcs.w	8003f22 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f040 8085 	bne.w	8003d9a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1da      	bne.n	8003c90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3308      	adds	r3, #8
 8003ce0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e1      	bne.n	8003cda <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e3      	bne.n	8003d16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e4      	bne.n	8003d5a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd fc8c 	bl	80016b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8d4 	bl	8003f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003db4:	e0b5      	b.n	8003f22 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80a7 	beq.w	8003f26 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a2 	beq.w	8003f26 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003df6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e04:	647b      	str	r3, [r7, #68]	; 0x44
 8003e06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e4      	bne.n	8003de2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	623b      	str	r3, [r7, #32]
   return(result);
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e3c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e3      	bne.n	8003e18 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0310 	bic.w	r3, r3, #16
 8003e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	69b9      	ldr	r1, [r7, #24]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	617b      	str	r3, [r7, #20]
   return(result);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e4      	bne.n	8003e62 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f85c 	bl	8003f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ea4:	e03f      	b.n	8003f26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x560>
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ec6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fcd9 	bl	8004880 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ece:	e02d      	b.n	8003f2c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00e      	beq.n	8003efa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01c      	beq.n	8003f2a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
    }
    return;
 8003ef8:	e017      	b.n	8003f2a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <HAL_UART_IRQHandler+0x5bc>
 8003f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fc8a 	bl	800482c <UART_EndTransmit_IT>
    return;
 8003f18:	e008      	b.n	8003f2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f1a:	bf00      	nop
 8003f1c:	e006      	b.n	8003f2c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f1e:	bf00      	nop
 8003f20:	e004      	b.n	8003f2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f2a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f2c:	37e8      	adds	r7, #232	; 0xe8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop

08003f34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f74:	b5b0      	push	{r4, r5, r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4baa      	ldr	r3, [pc, #680]	; (8004248 <UART_SetConfig+0x2d4>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	69f9      	ldr	r1, [r7, #28]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a9f      	ldr	r2, [pc, #636]	; (800424c <UART_SetConfig+0x2d8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a96      	ldr	r2, [pc, #600]	; (8004250 <UART_SetConfig+0x2dc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d121      	bne.n	800403e <UART_SetConfig+0xca>
 8003ffa:	4b96      	ldr	r3, [pc, #600]	; (8004254 <UART_SetConfig+0x2e0>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b03      	cmp	r3, #3
 8004006:	d817      	bhi.n	8004038 <UART_SetConfig+0xc4>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0x9c>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004021 	.word	0x08004021
 8004014:	0800402d 	.word	0x0800402d
 8004018:	08004027 	.word	0x08004027
 800401c:	08004033 	.word	0x08004033
 8004020:	2301      	movs	r3, #1
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e096      	b.n	8004154 <UART_SetConfig+0x1e0>
 8004026:	2302      	movs	r3, #2
 8004028:	76fb      	strb	r3, [r7, #27]
 800402a:	e093      	b.n	8004154 <UART_SetConfig+0x1e0>
 800402c:	2304      	movs	r3, #4
 800402e:	76fb      	strb	r3, [r7, #27]
 8004030:	e090      	b.n	8004154 <UART_SetConfig+0x1e0>
 8004032:	2308      	movs	r3, #8
 8004034:	76fb      	strb	r3, [r7, #27]
 8004036:	e08d      	b.n	8004154 <UART_SetConfig+0x1e0>
 8004038:	2310      	movs	r3, #16
 800403a:	76fb      	strb	r3, [r7, #27]
 800403c:	e08a      	b.n	8004154 <UART_SetConfig+0x1e0>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a85      	ldr	r2, [pc, #532]	; (8004258 <UART_SetConfig+0x2e4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d132      	bne.n	80040ae <UART_SetConfig+0x13a>
 8004048:	4b82      	ldr	r3, [pc, #520]	; (8004254 <UART_SetConfig+0x2e0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d828      	bhi.n	80040a8 <UART_SetConfig+0x134>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0xe8>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	08004091 	.word	0x08004091
 8004060:	080040a9 	.word	0x080040a9
 8004064:	080040a9 	.word	0x080040a9
 8004068:	080040a9 	.word	0x080040a9
 800406c:	0800409d 	.word	0x0800409d
 8004070:	080040a9 	.word	0x080040a9
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080040a9 	.word	0x080040a9
 800407c:	08004097 	.word	0x08004097
 8004080:	080040a9 	.word	0x080040a9
 8004084:	080040a9 	.word	0x080040a9
 8004088:	080040a9 	.word	0x080040a9
 800408c:	080040a3 	.word	0x080040a3
 8004090:	2300      	movs	r3, #0
 8004092:	76fb      	strb	r3, [r7, #27]
 8004094:	e05e      	b.n	8004154 <UART_SetConfig+0x1e0>
 8004096:	2302      	movs	r3, #2
 8004098:	76fb      	strb	r3, [r7, #27]
 800409a:	e05b      	b.n	8004154 <UART_SetConfig+0x1e0>
 800409c:	2304      	movs	r3, #4
 800409e:	76fb      	strb	r3, [r7, #27]
 80040a0:	e058      	b.n	8004154 <UART_SetConfig+0x1e0>
 80040a2:	2308      	movs	r3, #8
 80040a4:	76fb      	strb	r3, [r7, #27]
 80040a6:	e055      	b.n	8004154 <UART_SetConfig+0x1e0>
 80040a8:	2310      	movs	r3, #16
 80040aa:	76fb      	strb	r3, [r7, #27]
 80040ac:	e052      	b.n	8004154 <UART_SetConfig+0x1e0>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a6a      	ldr	r2, [pc, #424]	; (800425c <UART_SetConfig+0x2e8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d120      	bne.n	80040fa <UART_SetConfig+0x186>
 80040b8:	4b66      	ldr	r3, [pc, #408]	; (8004254 <UART_SetConfig+0x2e0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040c2:	2b30      	cmp	r3, #48	; 0x30
 80040c4:	d013      	beq.n	80040ee <UART_SetConfig+0x17a>
 80040c6:	2b30      	cmp	r3, #48	; 0x30
 80040c8:	d814      	bhi.n	80040f4 <UART_SetConfig+0x180>
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d009      	beq.n	80040e2 <UART_SetConfig+0x16e>
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d810      	bhi.n	80040f4 <UART_SetConfig+0x180>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <UART_SetConfig+0x168>
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d006      	beq.n	80040e8 <UART_SetConfig+0x174>
 80040da:	e00b      	b.n	80040f4 <UART_SetConfig+0x180>
 80040dc:	2300      	movs	r3, #0
 80040de:	76fb      	strb	r3, [r7, #27]
 80040e0:	e038      	b.n	8004154 <UART_SetConfig+0x1e0>
 80040e2:	2302      	movs	r3, #2
 80040e4:	76fb      	strb	r3, [r7, #27]
 80040e6:	e035      	b.n	8004154 <UART_SetConfig+0x1e0>
 80040e8:	2304      	movs	r3, #4
 80040ea:	76fb      	strb	r3, [r7, #27]
 80040ec:	e032      	b.n	8004154 <UART_SetConfig+0x1e0>
 80040ee:	2308      	movs	r3, #8
 80040f0:	76fb      	strb	r3, [r7, #27]
 80040f2:	e02f      	b.n	8004154 <UART_SetConfig+0x1e0>
 80040f4:	2310      	movs	r3, #16
 80040f6:	76fb      	strb	r3, [r7, #27]
 80040f8:	e02c      	b.n	8004154 <UART_SetConfig+0x1e0>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a53      	ldr	r2, [pc, #332]	; (800424c <UART_SetConfig+0x2d8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d125      	bne.n	8004150 <UART_SetConfig+0x1dc>
 8004104:	4b53      	ldr	r3, [pc, #332]	; (8004254 <UART_SetConfig+0x2e0>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800410e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004112:	d017      	beq.n	8004144 <UART_SetConfig+0x1d0>
 8004114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004118:	d817      	bhi.n	800414a <UART_SetConfig+0x1d6>
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411e:	d00b      	beq.n	8004138 <UART_SetConfig+0x1c4>
 8004120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004124:	d811      	bhi.n	800414a <UART_SetConfig+0x1d6>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <UART_SetConfig+0x1be>
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d006      	beq.n	800413e <UART_SetConfig+0x1ca>
 8004130:	e00b      	b.n	800414a <UART_SetConfig+0x1d6>
 8004132:	2300      	movs	r3, #0
 8004134:	76fb      	strb	r3, [r7, #27]
 8004136:	e00d      	b.n	8004154 <UART_SetConfig+0x1e0>
 8004138:	2302      	movs	r3, #2
 800413a:	76fb      	strb	r3, [r7, #27]
 800413c:	e00a      	b.n	8004154 <UART_SetConfig+0x1e0>
 800413e:	2304      	movs	r3, #4
 8004140:	76fb      	strb	r3, [r7, #27]
 8004142:	e007      	b.n	8004154 <UART_SetConfig+0x1e0>
 8004144:	2308      	movs	r3, #8
 8004146:	76fb      	strb	r3, [r7, #27]
 8004148:	e004      	b.n	8004154 <UART_SetConfig+0x1e0>
 800414a:	2310      	movs	r3, #16
 800414c:	76fb      	strb	r3, [r7, #27]
 800414e:	e001      	b.n	8004154 <UART_SetConfig+0x1e0>
 8004150:	2310      	movs	r3, #16
 8004152:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a3c      	ldr	r2, [pc, #240]	; (800424c <UART_SetConfig+0x2d8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	f040 8082 	bne.w	8004264 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004160:	7efb      	ldrb	r3, [r7, #27]
 8004162:	2b08      	cmp	r3, #8
 8004164:	d823      	bhi.n	80041ae <UART_SetConfig+0x23a>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x1f8>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	08004191 	.word	0x08004191
 8004170:	080041af 	.word	0x080041af
 8004174:	08004199 	.word	0x08004199
 8004178:	080041af 	.word	0x080041af
 800417c:	0800419f 	.word	0x0800419f
 8004180:	080041af 	.word	0x080041af
 8004184:	080041af 	.word	0x080041af
 8004188:	080041af 	.word	0x080041af
 800418c:	080041a7 	.word	0x080041a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe fb06 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8004194:	6178      	str	r0, [r7, #20]
        break;
 8004196:	e00f      	b.n	80041b8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <UART_SetConfig+0x2ec>)
 800419a:	617b      	str	r3, [r7, #20]
        break;
 800419c:	e00c      	b.n	80041b8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419e:	f7fe fa67 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 80041a2:	6178      	str	r0, [r7, #20]
        break;
 80041a4:	e008      	b.n	80041b8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041aa:	617b      	str	r3, [r7, #20]
        break;
 80041ac:	e004      	b.n	80041b8 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	76bb      	strb	r3, [r7, #26]
        break;
 80041b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8100 	beq.w	80043c0 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d305      	bcc.n	80041dc <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d902      	bls.n	80041e2 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	76bb      	strb	r3, [r7, #26]
 80041e0:	e0ee      	b.n	80043c0 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	020b      	lsls	r3, r1, #8
 80041f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041f8:	0202      	lsls	r2, r0, #8
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	6849      	ldr	r1, [r1, #4]
 80041fe:	0849      	lsrs	r1, r1, #1
 8004200:	4608      	mov	r0, r1
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	1814      	adds	r4, r2, r0
 8004208:	eb43 0501 	adc.w	r5, r3, r1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	461a      	mov	r2, r3
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	4620      	mov	r0, r4
 8004218:	4629      	mov	r1, r5
 800421a:	f7fc f839 	bl	8000290 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4613      	mov	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800422c:	d308      	bcc.n	8004240 <UART_SetConfig+0x2cc>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004234:	d204      	bcs.n	8004240 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	e0bf      	b.n	80043c0 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	76bb      	strb	r3, [r7, #26]
 8004244:	e0bc      	b.n	80043c0 <UART_SetConfig+0x44c>
 8004246:	bf00      	nop
 8004248:	efff69f3 	.word	0xefff69f3
 800424c:	40008000 	.word	0x40008000
 8004250:	40013800 	.word	0x40013800
 8004254:	40021000 	.word	0x40021000
 8004258:	40004400 	.word	0x40004400
 800425c:	40004800 	.word	0x40004800
 8004260:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d15b      	bne.n	8004326 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 800426e:	7efb      	ldrb	r3, [r7, #27]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d828      	bhi.n	80042c6 <UART_SetConfig+0x352>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <UART_SetConfig+0x308>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a9 	.word	0x080042a9
 8004284:	080042b1 	.word	0x080042b1
 8004288:	080042c7 	.word	0x080042c7
 800428c:	080042b7 	.word	0x080042b7
 8004290:	080042c7 	.word	0x080042c7
 8004294:	080042c7 	.word	0x080042c7
 8004298:	080042c7 	.word	0x080042c7
 800429c:	080042bf 	.word	0x080042bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a0:	f7fe fa7e 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 80042a4:	6178      	str	r0, [r7, #20]
        break;
 80042a6:	e013      	b.n	80042d0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a8:	f7fe fa90 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 80042ac:	6178      	str	r0, [r7, #20]
        break;
 80042ae:	e00f      	b.n	80042d0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b0:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <UART_SetConfig+0x464>)
 80042b2:	617b      	str	r3, [r7, #20]
        break;
 80042b4:	e00c      	b.n	80042d0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b6:	f7fe f9db 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 80042ba:	6178      	str	r0, [r7, #20]
        break;
 80042bc:	e008      	b.n	80042d0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c2:	617b      	str	r3, [r7, #20]
        break;
 80042c4:	e004      	b.n	80042d0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	76bb      	strb	r3, [r7, #26]
        break;
 80042ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d074      	beq.n	80043c0 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005a      	lsls	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	441a      	add	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d916      	bls.n	8004320 <UART_SetConfig+0x3ac>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d212      	bcs.n	8004320 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f023 030f 	bic.w	r3, r3, #15
 8004302:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	b29b      	uxth	r3, r3
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	b29a      	uxth	r2, r3
 8004310:	89fb      	ldrh	r3, [r7, #14]
 8004312:	4313      	orrs	r3, r2
 8004314:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	89fa      	ldrh	r2, [r7, #14]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e04f      	b.n	80043c0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	76bb      	strb	r3, [r7, #26]
 8004324:	e04c      	b.n	80043c0 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004326:	7efb      	ldrb	r3, [r7, #27]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d828      	bhi.n	800437e <UART_SetConfig+0x40a>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0x3c0>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004359 	.word	0x08004359
 8004338:	08004361 	.word	0x08004361
 800433c:	08004369 	.word	0x08004369
 8004340:	0800437f 	.word	0x0800437f
 8004344:	0800436f 	.word	0x0800436f
 8004348:	0800437f 	.word	0x0800437f
 800434c:	0800437f 	.word	0x0800437f
 8004350:	0800437f 	.word	0x0800437f
 8004354:	08004377 	.word	0x08004377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004358:	f7fe fa22 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 800435c:	6178      	str	r0, [r7, #20]
        break;
 800435e:	e013      	b.n	8004388 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004360:	f7fe fa34 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8004364:	6178      	str	r0, [r7, #20]
        break;
 8004366:	e00f      	b.n	8004388 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <UART_SetConfig+0x464>)
 800436a:	617b      	str	r3, [r7, #20]
        break;
 800436c:	e00c      	b.n	8004388 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436e:	f7fe f97f 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8004372:	6178      	str	r0, [r7, #20]
        break;
 8004374:	e008      	b.n	8004388 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437a:	617b      	str	r3, [r7, #20]
        break;
 800437c:	e004      	b.n	8004388 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	76bb      	strb	r3, [r7, #26]
        break;
 8004386:	bf00      	nop
    }

    if (pclk != 0U)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d018      	beq.n	80043c0 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	085a      	lsrs	r2, r3, #1
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	441a      	add	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b0f      	cmp	r3, #15
 80043a6:	d909      	bls.n	80043bc <UART_SetConfig+0x448>
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ae:	d205      	bcs.n	80043bc <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	e001      	b.n	80043c0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bdb0      	pop	{r4, r5, r7, pc}
 80043d6:	bf00      	nop
 80043d8:	00f42400 	.word	0x00f42400

080043dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01a      	beq.n	80044f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044da:	d10a      	bne.n	80044f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]
  }
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004530:	f7fc ff7e 	bl	8001430 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d10e      	bne.n	8004562 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f82d 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e023      	b.n	80045aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d10e      	bne.n	800458e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f817 	bl	80045b2 <UART_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e00d      	b.n	80045aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b09c      	sub	sp, #112	; 0x70
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c2:	e0a5      	b.n	8004710 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ca:	f000 80a1 	beq.w	8004710 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fc ff2f 	bl	8001430 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80045de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d13e      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f8:	667b      	str	r3, [r7, #100]	; 0x64
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004604:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e6      	bne.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3308      	adds	r3, #8
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	663b      	str	r3, [r7, #96]	; 0x60
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004636:	64ba      	str	r2, [r7, #72]	; 0x48
 8004638:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800463c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e067      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d04f      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467e:	d147      	bne.n	8004710 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004688:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800469e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
 80046aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	613b      	str	r3, [r7, #16]
   return(result);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046dc:	623a      	str	r2, [r7, #32]
 80046de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	69f9      	ldr	r1, [r7, #28]
 80046e2:	6a3a      	ldr	r2, [r7, #32]
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e5      	bne.n	80046bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e010      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	f43f af4a 	beq.w	80045c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3770      	adds	r7, #112	; 0x70
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800473a:	b480      	push	{r7}
 800473c:	b095      	sub	sp, #84	; 0x54
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004760:	643b      	str	r3, [r7, #64]	; 0x40
 8004762:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e6      	bne.n	8004742 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3308      	adds	r3, #8
 800477a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	61fb      	str	r3, [r7, #28]
   return(result);
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	64bb      	str	r3, [r7, #72]	; 0x48
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3308      	adds	r3, #8
 8004792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800479a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e5      	bne.n	8004774 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d118      	bne.n	80047e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0310 	bic.w	r3, r3, #16
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6979      	ldr	r1, [r7, #20]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	613b      	str	r3, [r7, #16]
   return(result);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e6      	bne.n	80047b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80047f4:	bf00      	nop
 80047f6:	3754      	adds	r7, #84	; 0x54
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff fb92 	bl	8003f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	60bb      	str	r3, [r7, #8]
   return(result);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6979      	ldr	r1, [r7, #20]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	613b      	str	r3, [r7, #16]
   return(result);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e6      	bne.n	8004834 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fb5e 	bl	8003f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004878:	bf00      	nop
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <atoi>:
 8004894:	220a      	movs	r2, #10
 8004896:	2100      	movs	r1, #0
 8004898:	f000 ba32 	b.w	8004d00 <strtol>

0800489c <__errno>:
 800489c:	4b01      	ldr	r3, [pc, #4]	; (80048a4 <__errno+0x8>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000044 	.word	0x20000044

080048a8 <getchar>:
 80048a8:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <getchar+0x20>)
 80048aa:	b510      	push	{r4, lr}
 80048ac:	681c      	ldr	r4, [r3, #0]
 80048ae:	b124      	cbz	r4, 80048ba <getchar+0x12>
 80048b0:	69a3      	ldr	r3, [r4, #24]
 80048b2:	b913      	cbnz	r3, 80048ba <getchar+0x12>
 80048b4:	4620      	mov	r0, r4
 80048b6:	f000 fc19 	bl	80050ec <__sinit>
 80048ba:	6861      	ldr	r1, [r4, #4]
 80048bc:	4620      	mov	r0, r4
 80048be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c2:	f000 bccd 	b.w	8005260 <_getc_r>
 80048c6:	bf00      	nop
 80048c8:	20000044 	.word	0x20000044

080048cc <__libc_init_array>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	4d0d      	ldr	r5, [pc, #52]	; (8004904 <__libc_init_array+0x38>)
 80048d0:	4c0d      	ldr	r4, [pc, #52]	; (8004908 <__libc_init_array+0x3c>)
 80048d2:	1b64      	subs	r4, r4, r5
 80048d4:	10a4      	asrs	r4, r4, #2
 80048d6:	2600      	movs	r6, #0
 80048d8:	42a6      	cmp	r6, r4
 80048da:	d109      	bne.n	80048f0 <__libc_init_array+0x24>
 80048dc:	4d0b      	ldr	r5, [pc, #44]	; (800490c <__libc_init_array+0x40>)
 80048de:	4c0c      	ldr	r4, [pc, #48]	; (8004910 <__libc_init_array+0x44>)
 80048e0:	f001 fae4 	bl	8005eac <_init>
 80048e4:	1b64      	subs	r4, r4, r5
 80048e6:	10a4      	asrs	r4, r4, #2
 80048e8:	2600      	movs	r6, #0
 80048ea:	42a6      	cmp	r6, r4
 80048ec:	d105      	bne.n	80048fa <__libc_init_array+0x2e>
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f4:	4798      	blx	r3
 80048f6:	3601      	adds	r6, #1
 80048f8:	e7ee      	b.n	80048d8 <__libc_init_array+0xc>
 80048fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fe:	4798      	blx	r3
 8004900:	3601      	adds	r6, #1
 8004902:	e7f2      	b.n	80048ea <__libc_init_array+0x1e>
 8004904:	080061cc 	.word	0x080061cc
 8004908:	080061cc 	.word	0x080061cc
 800490c:	080061cc 	.word	0x080061cc
 8004910:	080061d0 	.word	0x080061d0

08004914 <memset>:
 8004914:	4402      	add	r2, r0
 8004916:	4603      	mov	r3, r0
 8004918:	4293      	cmp	r3, r2
 800491a:	d100      	bne.n	800491e <memset+0xa>
 800491c:	4770      	bx	lr
 800491e:	f803 1b01 	strb.w	r1, [r3], #1
 8004922:	e7f9      	b.n	8004918 <memset+0x4>

08004924 <iprintf>:
 8004924:	b40f      	push	{r0, r1, r2, r3}
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <iprintf+0x2c>)
 8004928:	b513      	push	{r0, r1, r4, lr}
 800492a:	681c      	ldr	r4, [r3, #0]
 800492c:	b124      	cbz	r4, 8004938 <iprintf+0x14>
 800492e:	69a3      	ldr	r3, [r4, #24]
 8004930:	b913      	cbnz	r3, 8004938 <iprintf+0x14>
 8004932:	4620      	mov	r0, r4
 8004934:	f000 fbda 	bl	80050ec <__sinit>
 8004938:	ab05      	add	r3, sp, #20
 800493a:	9a04      	ldr	r2, [sp, #16]
 800493c:	68a1      	ldr	r1, [r4, #8]
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	4620      	mov	r0, r4
 8004942:	f000 fe11 	bl	8005568 <_vfiprintf_r>
 8004946:	b002      	add	sp, #8
 8004948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494c:	b004      	add	sp, #16
 800494e:	4770      	bx	lr
 8004950:	20000044 	.word	0x20000044

08004954 <putchar>:
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <putchar+0x28>)
 8004956:	b513      	push	{r0, r1, r4, lr}
 8004958:	681c      	ldr	r4, [r3, #0]
 800495a:	4601      	mov	r1, r0
 800495c:	b134      	cbz	r4, 800496c <putchar+0x18>
 800495e:	69a3      	ldr	r3, [r4, #24]
 8004960:	b923      	cbnz	r3, 800496c <putchar+0x18>
 8004962:	9001      	str	r0, [sp, #4]
 8004964:	4620      	mov	r0, r4
 8004966:	f000 fbc1 	bl	80050ec <__sinit>
 800496a:	9901      	ldr	r1, [sp, #4]
 800496c:	68a2      	ldr	r2, [r4, #8]
 800496e:	4620      	mov	r0, r4
 8004970:	b002      	add	sp, #8
 8004972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004976:	f001 b8bb 	b.w	8005af0 <_putc_r>
 800497a:	bf00      	nop
 800497c:	20000044 	.word	0x20000044

08004980 <_puts_r>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	460e      	mov	r6, r1
 8004984:	4605      	mov	r5, r0
 8004986:	b118      	cbz	r0, 8004990 <_puts_r+0x10>
 8004988:	6983      	ldr	r3, [r0, #24]
 800498a:	b90b      	cbnz	r3, 8004990 <_puts_r+0x10>
 800498c:	f000 fbae 	bl	80050ec <__sinit>
 8004990:	69ab      	ldr	r3, [r5, #24]
 8004992:	68ac      	ldr	r4, [r5, #8]
 8004994:	b913      	cbnz	r3, 800499c <_puts_r+0x1c>
 8004996:	4628      	mov	r0, r5
 8004998:	f000 fba8 	bl	80050ec <__sinit>
 800499c:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <_puts_r+0xd0>)
 800499e:	429c      	cmp	r4, r3
 80049a0:	d120      	bne.n	80049e4 <_puts_r+0x64>
 80049a2:	686c      	ldr	r4, [r5, #4]
 80049a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a6:	07db      	lsls	r3, r3, #31
 80049a8:	d405      	bmi.n	80049b6 <_puts_r+0x36>
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	0598      	lsls	r0, r3, #22
 80049ae:	d402      	bmi.n	80049b6 <_puts_r+0x36>
 80049b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049b2:	f000 fc96 	bl	80052e2 <__retarget_lock_acquire_recursive>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	0719      	lsls	r1, r3, #28
 80049ba:	d51d      	bpl.n	80049f8 <_puts_r+0x78>
 80049bc:	6923      	ldr	r3, [r4, #16]
 80049be:	b1db      	cbz	r3, 80049f8 <_puts_r+0x78>
 80049c0:	3e01      	subs	r6, #1
 80049c2:	68a3      	ldr	r3, [r4, #8]
 80049c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049c8:	3b01      	subs	r3, #1
 80049ca:	60a3      	str	r3, [r4, #8]
 80049cc:	bb39      	cbnz	r1, 8004a1e <_puts_r+0x9e>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	da38      	bge.n	8004a44 <_puts_r+0xc4>
 80049d2:	4622      	mov	r2, r4
 80049d4:	210a      	movs	r1, #10
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 f99c 	bl	8004d14 <__swbuf_r>
 80049dc:	3001      	adds	r0, #1
 80049de:	d011      	beq.n	8004a04 <_puts_r+0x84>
 80049e0:	250a      	movs	r5, #10
 80049e2:	e011      	b.n	8004a08 <_puts_r+0x88>
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <_puts_r+0xd4>)
 80049e6:	429c      	cmp	r4, r3
 80049e8:	d101      	bne.n	80049ee <_puts_r+0x6e>
 80049ea:	68ac      	ldr	r4, [r5, #8]
 80049ec:	e7da      	b.n	80049a4 <_puts_r+0x24>
 80049ee:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <_puts_r+0xd8>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	bf08      	it	eq
 80049f4:	68ec      	ldreq	r4, [r5, #12]
 80049f6:	e7d5      	b.n	80049a4 <_puts_r+0x24>
 80049f8:	4621      	mov	r1, r4
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 f9dc 	bl	8004db8 <__swsetup_r>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d0dd      	beq.n	80049c0 <_puts_r+0x40>
 8004a04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a0a:	07da      	lsls	r2, r3, #31
 8004a0c:	d405      	bmi.n	8004a1a <_puts_r+0x9a>
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	059b      	lsls	r3, r3, #22
 8004a12:	d402      	bmi.n	8004a1a <_puts_r+0x9a>
 8004a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a16:	f000 fc65 	bl	80052e4 <__retarget_lock_release_recursive>
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	da04      	bge.n	8004a2c <_puts_r+0xac>
 8004a22:	69a2      	ldr	r2, [r4, #24]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	dc06      	bgt.n	8004a36 <_puts_r+0xb6>
 8004a28:	290a      	cmp	r1, #10
 8004a2a:	d004      	beq.n	8004a36 <_puts_r+0xb6>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	6022      	str	r2, [r4, #0]
 8004a32:	7019      	strb	r1, [r3, #0]
 8004a34:	e7c5      	b.n	80049c2 <_puts_r+0x42>
 8004a36:	4622      	mov	r2, r4
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f000 f96b 	bl	8004d14 <__swbuf_r>
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d1bf      	bne.n	80049c2 <_puts_r+0x42>
 8004a42:	e7df      	b.n	8004a04 <_puts_r+0x84>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	250a      	movs	r5, #10
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	6022      	str	r2, [r4, #0]
 8004a4c:	701d      	strb	r5, [r3, #0]
 8004a4e:	e7db      	b.n	8004a08 <_puts_r+0x88>
 8004a50:	08006150 	.word	0x08006150
 8004a54:	08006170 	.word	0x08006170
 8004a58:	08006130 	.word	0x08006130

08004a5c <puts>:
 8004a5c:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <puts+0xc>)
 8004a5e:	4601      	mov	r1, r0
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	f7ff bf8d 	b.w	8004980 <_puts_r>
 8004a66:	bf00      	nop
 8004a68:	20000044 	.word	0x20000044

08004a6c <setvbuf>:
 8004a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	461d      	mov	r5, r3
 8004a72:	4b5d      	ldr	r3, [pc, #372]	; (8004be8 <setvbuf+0x17c>)
 8004a74:	681f      	ldr	r7, [r3, #0]
 8004a76:	4604      	mov	r4, r0
 8004a78:	460e      	mov	r6, r1
 8004a7a:	4690      	mov	r8, r2
 8004a7c:	b127      	cbz	r7, 8004a88 <setvbuf+0x1c>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	b913      	cbnz	r3, 8004a88 <setvbuf+0x1c>
 8004a82:	4638      	mov	r0, r7
 8004a84:	f000 fb32 	bl	80050ec <__sinit>
 8004a88:	4b58      	ldr	r3, [pc, #352]	; (8004bec <setvbuf+0x180>)
 8004a8a:	429c      	cmp	r4, r3
 8004a8c:	d167      	bne.n	8004b5e <setvbuf+0xf2>
 8004a8e:	687c      	ldr	r4, [r7, #4]
 8004a90:	f1b8 0f02 	cmp.w	r8, #2
 8004a94:	d006      	beq.n	8004aa4 <setvbuf+0x38>
 8004a96:	f1b8 0f01 	cmp.w	r8, #1
 8004a9a:	f200 809f 	bhi.w	8004bdc <setvbuf+0x170>
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	f2c0 809c 	blt.w	8004bdc <setvbuf+0x170>
 8004aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aa6:	07db      	lsls	r3, r3, #31
 8004aa8:	d405      	bmi.n	8004ab6 <setvbuf+0x4a>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	0598      	lsls	r0, r3, #22
 8004aae:	d402      	bmi.n	8004ab6 <setvbuf+0x4a>
 8004ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ab2:	f000 fc16 	bl	80052e2 <__retarget_lock_acquire_recursive>
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f000 fa71 	bl	8004fa0 <_fflush_r>
 8004abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ac0:	b141      	cbz	r1, 8004ad4 <setvbuf+0x68>
 8004ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac6:	4299      	cmp	r1, r3
 8004ac8:	d002      	beq.n	8004ad0 <setvbuf+0x64>
 8004aca:	4638      	mov	r0, r7
 8004acc:	f000 fc78 	bl	80053c0 <_free_r>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6363      	str	r3, [r4, #52]	; 0x34
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61a3      	str	r3, [r4, #24]
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	0619      	lsls	r1, r3, #24
 8004ade:	d503      	bpl.n	8004ae8 <setvbuf+0x7c>
 8004ae0:	6921      	ldr	r1, [r4, #16]
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	f000 fc6c 	bl	80053c0 <_free_r>
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	f1b8 0f02 	cmp.w	r8, #2
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	d06c      	beq.n	8004bd4 <setvbuf+0x168>
 8004afa:	ab01      	add	r3, sp, #4
 8004afc:	466a      	mov	r2, sp
 8004afe:	4621      	mov	r1, r4
 8004b00:	4638      	mov	r0, r7
 8004b02:	f000 fbf0 	bl	80052e6 <__swhatbuf_r>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	4318      	orrs	r0, r3
 8004b0a:	81a0      	strh	r0, [r4, #12]
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	d130      	bne.n	8004b72 <setvbuf+0x106>
 8004b10:	9d00      	ldr	r5, [sp, #0]
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 fc4c 	bl	80053b0 <malloc>
 8004b18:	4606      	mov	r6, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d155      	bne.n	8004bca <setvbuf+0x15e>
 8004b1e:	f8dd 9000 	ldr.w	r9, [sp]
 8004b22:	45a9      	cmp	r9, r5
 8004b24:	d14a      	bne.n	8004bbc <setvbuf+0x150>
 8004b26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60a2      	str	r2, [r4, #8]
 8004b2e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004b32:	6022      	str	r2, [r4, #0]
 8004b34:	6122      	str	r2, [r4, #16]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3c:	6162      	str	r2, [r4, #20]
 8004b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b40:	f043 0302 	orr.w	r3, r3, #2
 8004b44:	07d2      	lsls	r2, r2, #31
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	d405      	bmi.n	8004b56 <setvbuf+0xea>
 8004b4a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004b4e:	d102      	bne.n	8004b56 <setvbuf+0xea>
 8004b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b52:	f000 fbc7 	bl	80052e4 <__retarget_lock_release_recursive>
 8004b56:	4628      	mov	r0, r5
 8004b58:	b003      	add	sp, #12
 8004b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <setvbuf+0x184>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d101      	bne.n	8004b68 <setvbuf+0xfc>
 8004b64:	68bc      	ldr	r4, [r7, #8]
 8004b66:	e793      	b.n	8004a90 <setvbuf+0x24>
 8004b68:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <setvbuf+0x188>)
 8004b6a:	429c      	cmp	r4, r3
 8004b6c:	bf08      	it	eq
 8004b6e:	68fc      	ldreq	r4, [r7, #12]
 8004b70:	e78e      	b.n	8004a90 <setvbuf+0x24>
 8004b72:	2e00      	cmp	r6, #0
 8004b74:	d0cd      	beq.n	8004b12 <setvbuf+0xa6>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	b913      	cbnz	r3, 8004b80 <setvbuf+0x114>
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	f000 fab6 	bl	80050ec <__sinit>
 8004b80:	f1b8 0f01 	cmp.w	r8, #1
 8004b84:	bf08      	it	eq
 8004b86:	89a3      	ldrheq	r3, [r4, #12]
 8004b88:	6026      	str	r6, [r4, #0]
 8004b8a:	bf04      	itt	eq
 8004b8c:	f043 0301 	orreq.w	r3, r3, #1
 8004b90:	81a3      	strheq	r3, [r4, #12]
 8004b92:	89a2      	ldrh	r2, [r4, #12]
 8004b94:	f012 0308 	ands.w	r3, r2, #8
 8004b98:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004b9c:	d01c      	beq.n	8004bd8 <setvbuf+0x16c>
 8004b9e:	07d3      	lsls	r3, r2, #31
 8004ba0:	bf41      	itttt	mi
 8004ba2:	2300      	movmi	r3, #0
 8004ba4:	426d      	negmi	r5, r5
 8004ba6:	60a3      	strmi	r3, [r4, #8]
 8004ba8:	61a5      	strmi	r5, [r4, #24]
 8004baa:	bf58      	it	pl
 8004bac:	60a5      	strpl	r5, [r4, #8]
 8004bae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004bb0:	f015 0501 	ands.w	r5, r5, #1
 8004bb4:	d115      	bne.n	8004be2 <setvbuf+0x176>
 8004bb6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004bba:	e7c8      	b.n	8004b4e <setvbuf+0xe2>
 8004bbc:	4648      	mov	r0, r9
 8004bbe:	f000 fbf7 	bl	80053b0 <malloc>
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d0ae      	beq.n	8004b26 <setvbuf+0xba>
 8004bc8:	464d      	mov	r5, r9
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	e7d0      	b.n	8004b76 <setvbuf+0x10a>
 8004bd4:	2500      	movs	r5, #0
 8004bd6:	e7a8      	b.n	8004b2a <setvbuf+0xbe>
 8004bd8:	60a3      	str	r3, [r4, #8]
 8004bda:	e7e8      	b.n	8004bae <setvbuf+0x142>
 8004bdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004be0:	e7b9      	b.n	8004b56 <setvbuf+0xea>
 8004be2:	2500      	movs	r5, #0
 8004be4:	e7b7      	b.n	8004b56 <setvbuf+0xea>
 8004be6:	bf00      	nop
 8004be8:	20000044 	.word	0x20000044
 8004bec:	08006150 	.word	0x08006150
 8004bf0:	08006170 	.word	0x08006170
 8004bf4:	08006130 	.word	0x08006130

08004bf8 <_strtol_l.isra.0>:
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfe:	d001      	beq.n	8004c04 <_strtol_l.isra.0+0xc>
 8004c00:	2b24      	cmp	r3, #36	; 0x24
 8004c02:	d906      	bls.n	8004c12 <_strtol_l.isra.0+0x1a>
 8004c04:	f7ff fe4a 	bl	800489c <__errno>
 8004c08:	2316      	movs	r3, #22
 8004c0a:	6003      	str	r3, [r0, #0]
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c12:	4f3a      	ldr	r7, [pc, #232]	; (8004cfc <_strtol_l.isra.0+0x104>)
 8004c14:	468e      	mov	lr, r1
 8004c16:	4676      	mov	r6, lr
 8004c18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004c1c:	5de5      	ldrb	r5, [r4, r7]
 8004c1e:	f015 0508 	ands.w	r5, r5, #8
 8004c22:	d1f8      	bne.n	8004c16 <_strtol_l.isra.0+0x1e>
 8004c24:	2c2d      	cmp	r4, #45	; 0x2d
 8004c26:	d134      	bne.n	8004c92 <_strtol_l.isra.0+0x9a>
 8004c28:	f89e 4000 	ldrb.w	r4, [lr]
 8004c2c:	f04f 0801 	mov.w	r8, #1
 8004c30:	f106 0e02 	add.w	lr, r6, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05c      	beq.n	8004cf2 <_strtol_l.isra.0+0xfa>
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d10c      	bne.n	8004c56 <_strtol_l.isra.0+0x5e>
 8004c3c:	2c30      	cmp	r4, #48	; 0x30
 8004c3e:	d10a      	bne.n	8004c56 <_strtol_l.isra.0+0x5e>
 8004c40:	f89e 4000 	ldrb.w	r4, [lr]
 8004c44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004c48:	2c58      	cmp	r4, #88	; 0x58
 8004c4a:	d14d      	bne.n	8004ce8 <_strtol_l.isra.0+0xf0>
 8004c4c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004c50:	2310      	movs	r3, #16
 8004c52:	f10e 0e02 	add.w	lr, lr, #2
 8004c56:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004c5a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004c5e:	2600      	movs	r6, #0
 8004c60:	fbbc f9f3 	udiv	r9, ip, r3
 8004c64:	4635      	mov	r5, r6
 8004c66:	fb03 ca19 	mls	sl, r3, r9, ip
 8004c6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004c6e:	2f09      	cmp	r7, #9
 8004c70:	d818      	bhi.n	8004ca4 <_strtol_l.isra.0+0xac>
 8004c72:	463c      	mov	r4, r7
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	dd24      	ble.n	8004cc2 <_strtol_l.isra.0+0xca>
 8004c78:	2e00      	cmp	r6, #0
 8004c7a:	db1f      	blt.n	8004cbc <_strtol_l.isra.0+0xc4>
 8004c7c:	45a9      	cmp	r9, r5
 8004c7e:	d31d      	bcc.n	8004cbc <_strtol_l.isra.0+0xc4>
 8004c80:	d101      	bne.n	8004c86 <_strtol_l.isra.0+0x8e>
 8004c82:	45a2      	cmp	sl, r4
 8004c84:	db1a      	blt.n	8004cbc <_strtol_l.isra.0+0xc4>
 8004c86:	fb05 4503 	mla	r5, r5, r3, r4
 8004c8a:	2601      	movs	r6, #1
 8004c8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004c90:	e7eb      	b.n	8004c6a <_strtol_l.isra.0+0x72>
 8004c92:	2c2b      	cmp	r4, #43	; 0x2b
 8004c94:	bf08      	it	eq
 8004c96:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004c9a:	46a8      	mov	r8, r5
 8004c9c:	bf08      	it	eq
 8004c9e:	f106 0e02 	addeq.w	lr, r6, #2
 8004ca2:	e7c7      	b.n	8004c34 <_strtol_l.isra.0+0x3c>
 8004ca4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004ca8:	2f19      	cmp	r7, #25
 8004caa:	d801      	bhi.n	8004cb0 <_strtol_l.isra.0+0xb8>
 8004cac:	3c37      	subs	r4, #55	; 0x37
 8004cae:	e7e1      	b.n	8004c74 <_strtol_l.isra.0+0x7c>
 8004cb0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004cb4:	2f19      	cmp	r7, #25
 8004cb6:	d804      	bhi.n	8004cc2 <_strtol_l.isra.0+0xca>
 8004cb8:	3c57      	subs	r4, #87	; 0x57
 8004cba:	e7db      	b.n	8004c74 <_strtol_l.isra.0+0x7c>
 8004cbc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004cc0:	e7e4      	b.n	8004c8c <_strtol_l.isra.0+0x94>
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	da05      	bge.n	8004cd2 <_strtol_l.isra.0+0xda>
 8004cc6:	2322      	movs	r3, #34	; 0x22
 8004cc8:	6003      	str	r3, [r0, #0]
 8004cca:	4665      	mov	r5, ip
 8004ccc:	b942      	cbnz	r2, 8004ce0 <_strtol_l.isra.0+0xe8>
 8004cce:	4628      	mov	r0, r5
 8004cd0:	e79d      	b.n	8004c0e <_strtol_l.isra.0+0x16>
 8004cd2:	f1b8 0f00 	cmp.w	r8, #0
 8004cd6:	d000      	beq.n	8004cda <_strtol_l.isra.0+0xe2>
 8004cd8:	426d      	negs	r5, r5
 8004cda:	2a00      	cmp	r2, #0
 8004cdc:	d0f7      	beq.n	8004cce <_strtol_l.isra.0+0xd6>
 8004cde:	b10e      	cbz	r6, 8004ce4 <_strtol_l.isra.0+0xec>
 8004ce0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	e7f2      	b.n	8004cce <_strtol_l.isra.0+0xd6>
 8004ce8:	2430      	movs	r4, #48	; 0x30
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1b3      	bne.n	8004c56 <_strtol_l.isra.0+0x5e>
 8004cee:	2308      	movs	r3, #8
 8004cf0:	e7b1      	b.n	8004c56 <_strtol_l.isra.0+0x5e>
 8004cf2:	2c30      	cmp	r4, #48	; 0x30
 8004cf4:	d0a4      	beq.n	8004c40 <_strtol_l.isra.0+0x48>
 8004cf6:	230a      	movs	r3, #10
 8004cf8:	e7ad      	b.n	8004c56 <_strtol_l.isra.0+0x5e>
 8004cfa:	bf00      	nop
 8004cfc:	0800602d 	.word	0x0800602d

08004d00 <strtol>:
 8004d00:	4613      	mov	r3, r2
 8004d02:	460a      	mov	r2, r1
 8004d04:	4601      	mov	r1, r0
 8004d06:	4802      	ldr	r0, [pc, #8]	; (8004d10 <strtol+0x10>)
 8004d08:	6800      	ldr	r0, [r0, #0]
 8004d0a:	f7ff bf75 	b.w	8004bf8 <_strtol_l.isra.0>
 8004d0e:	bf00      	nop
 8004d10:	20000044 	.word	0x20000044

08004d14 <__swbuf_r>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	460e      	mov	r6, r1
 8004d18:	4614      	mov	r4, r2
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	b118      	cbz	r0, 8004d26 <__swbuf_r+0x12>
 8004d1e:	6983      	ldr	r3, [r0, #24]
 8004d20:	b90b      	cbnz	r3, 8004d26 <__swbuf_r+0x12>
 8004d22:	f000 f9e3 	bl	80050ec <__sinit>
 8004d26:	4b21      	ldr	r3, [pc, #132]	; (8004dac <__swbuf_r+0x98>)
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	d12b      	bne.n	8004d84 <__swbuf_r+0x70>
 8004d2c:	686c      	ldr	r4, [r5, #4]
 8004d2e:	69a3      	ldr	r3, [r4, #24]
 8004d30:	60a3      	str	r3, [r4, #8]
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	071a      	lsls	r2, r3, #28
 8004d36:	d52f      	bpl.n	8004d98 <__swbuf_r+0x84>
 8004d38:	6923      	ldr	r3, [r4, #16]
 8004d3a:	b36b      	cbz	r3, 8004d98 <__swbuf_r+0x84>
 8004d3c:	6923      	ldr	r3, [r4, #16]
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	1ac0      	subs	r0, r0, r3
 8004d42:	6963      	ldr	r3, [r4, #20]
 8004d44:	b2f6      	uxtb	r6, r6
 8004d46:	4283      	cmp	r3, r0
 8004d48:	4637      	mov	r7, r6
 8004d4a:	dc04      	bgt.n	8004d56 <__swbuf_r+0x42>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 f926 	bl	8004fa0 <_fflush_r>
 8004d54:	bb30      	cbnz	r0, 8004da4 <__swbuf_r+0x90>
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	60a3      	str	r3, [r4, #8]
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	6022      	str	r2, [r4, #0]
 8004d62:	701e      	strb	r6, [r3, #0]
 8004d64:	6963      	ldr	r3, [r4, #20]
 8004d66:	3001      	adds	r0, #1
 8004d68:	4283      	cmp	r3, r0
 8004d6a:	d004      	beq.n	8004d76 <__swbuf_r+0x62>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	07db      	lsls	r3, r3, #31
 8004d70:	d506      	bpl.n	8004d80 <__swbuf_r+0x6c>
 8004d72:	2e0a      	cmp	r6, #10
 8004d74:	d104      	bne.n	8004d80 <__swbuf_r+0x6c>
 8004d76:	4621      	mov	r1, r4
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f000 f911 	bl	8004fa0 <_fflush_r>
 8004d7e:	b988      	cbnz	r0, 8004da4 <__swbuf_r+0x90>
 8004d80:	4638      	mov	r0, r7
 8004d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <__swbuf_r+0x9c>)
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d101      	bne.n	8004d8e <__swbuf_r+0x7a>
 8004d8a:	68ac      	ldr	r4, [r5, #8]
 8004d8c:	e7cf      	b.n	8004d2e <__swbuf_r+0x1a>
 8004d8e:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <__swbuf_r+0xa0>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	bf08      	it	eq
 8004d94:	68ec      	ldreq	r4, [r5, #12]
 8004d96:	e7ca      	b.n	8004d2e <__swbuf_r+0x1a>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 f80c 	bl	8004db8 <__swsetup_r>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d0cb      	beq.n	8004d3c <__swbuf_r+0x28>
 8004da4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004da8:	e7ea      	b.n	8004d80 <__swbuf_r+0x6c>
 8004daa:	bf00      	nop
 8004dac:	08006150 	.word	0x08006150
 8004db0:	08006170 	.word	0x08006170
 8004db4:	08006130 	.word	0x08006130

08004db8 <__swsetup_r>:
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <__swsetup_r+0xcc>)
 8004dba:	b570      	push	{r4, r5, r6, lr}
 8004dbc:	681d      	ldr	r5, [r3, #0]
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	b125      	cbz	r5, 8004dce <__swsetup_r+0x16>
 8004dc4:	69ab      	ldr	r3, [r5, #24]
 8004dc6:	b913      	cbnz	r3, 8004dce <__swsetup_r+0x16>
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f98f 	bl	80050ec <__sinit>
 8004dce:	4b2e      	ldr	r3, [pc, #184]	; (8004e88 <__swsetup_r+0xd0>)
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	d10f      	bne.n	8004df4 <__swsetup_r+0x3c>
 8004dd4:	686c      	ldr	r4, [r5, #4]
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ddc:	0719      	lsls	r1, r3, #28
 8004dde:	d42c      	bmi.n	8004e3a <__swsetup_r+0x82>
 8004de0:	06dd      	lsls	r5, r3, #27
 8004de2:	d411      	bmi.n	8004e08 <__swsetup_r+0x50>
 8004de4:	2309      	movs	r3, #9
 8004de6:	6033      	str	r3, [r6, #0]
 8004de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df2:	e03e      	b.n	8004e72 <__swsetup_r+0xba>
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <__swsetup_r+0xd4>)
 8004df6:	429c      	cmp	r4, r3
 8004df8:	d101      	bne.n	8004dfe <__swsetup_r+0x46>
 8004dfa:	68ac      	ldr	r4, [r5, #8]
 8004dfc:	e7eb      	b.n	8004dd6 <__swsetup_r+0x1e>
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <__swsetup_r+0xd8>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	bf08      	it	eq
 8004e04:	68ec      	ldreq	r4, [r5, #12]
 8004e06:	e7e6      	b.n	8004dd6 <__swsetup_r+0x1e>
 8004e08:	0758      	lsls	r0, r3, #29
 8004e0a:	d512      	bpl.n	8004e32 <__swsetup_r+0x7a>
 8004e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e0e:	b141      	cbz	r1, 8004e22 <__swsetup_r+0x6a>
 8004e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e14:	4299      	cmp	r1, r3
 8004e16:	d002      	beq.n	8004e1e <__swsetup_r+0x66>
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f000 fad1 	bl	80053c0 <_free_r>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6363      	str	r3, [r4, #52]	; 0x34
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	f043 0308 	orr.w	r3, r3, #8
 8004e38:	81a3      	strh	r3, [r4, #12]
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	b94b      	cbnz	r3, 8004e52 <__swsetup_r+0x9a>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d003      	beq.n	8004e52 <__swsetup_r+0x9a>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f000 fa6f 	bl	8005330 <__smakebuf_r>
 8004e52:	89a0      	ldrh	r0, [r4, #12]
 8004e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e58:	f010 0301 	ands.w	r3, r0, #1
 8004e5c:	d00a      	beq.n	8004e74 <__swsetup_r+0xbc>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60a3      	str	r3, [r4, #8]
 8004e62:	6963      	ldr	r3, [r4, #20]
 8004e64:	425b      	negs	r3, r3
 8004e66:	61a3      	str	r3, [r4, #24]
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	b943      	cbnz	r3, 8004e7e <__swsetup_r+0xc6>
 8004e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e70:	d1ba      	bne.n	8004de8 <__swsetup_r+0x30>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	0781      	lsls	r1, r0, #30
 8004e76:	bf58      	it	pl
 8004e78:	6963      	ldrpl	r3, [r4, #20]
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	e7f4      	b.n	8004e68 <__swsetup_r+0xb0>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e7f7      	b.n	8004e72 <__swsetup_r+0xba>
 8004e82:	bf00      	nop
 8004e84:	20000044 	.word	0x20000044
 8004e88:	08006150 	.word	0x08006150
 8004e8c:	08006170 	.word	0x08006170
 8004e90:	08006130 	.word	0x08006130

08004e94 <__sflush_r>:
 8004e94:	898a      	ldrh	r2, [r1, #12]
 8004e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	0710      	lsls	r0, r2, #28
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	d458      	bmi.n	8004f54 <__sflush_r+0xc0>
 8004ea2:	684b      	ldr	r3, [r1, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dc05      	bgt.n	8004eb4 <__sflush_r+0x20>
 8004ea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dc02      	bgt.n	8004eb4 <__sflush_r+0x20>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	d0f9      	beq.n	8004eae <__sflush_r+0x1a>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ec0:	682f      	ldr	r7, [r5, #0]
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	d032      	beq.n	8004f2c <__sflush_r+0x98>
 8004ec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	075a      	lsls	r2, r3, #29
 8004ecc:	d505      	bpl.n	8004eda <__sflush_r+0x46>
 8004ece:	6863      	ldr	r3, [r4, #4]
 8004ed0:	1ac0      	subs	r0, r0, r3
 8004ed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ed4:	b10b      	cbz	r3, 8004eda <__sflush_r+0x46>
 8004ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ed8:	1ac0      	subs	r0, r0, r3
 8004eda:	2300      	movs	r3, #0
 8004edc:	4602      	mov	r2, r0
 8004ede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ee0:	6a21      	ldr	r1, [r4, #32]
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	47b0      	blx	r6
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	d106      	bne.n	8004efa <__sflush_r+0x66>
 8004eec:	6829      	ldr	r1, [r5, #0]
 8004eee:	291d      	cmp	r1, #29
 8004ef0:	d82c      	bhi.n	8004f4c <__sflush_r+0xb8>
 8004ef2:	4a2a      	ldr	r2, [pc, #168]	; (8004f9c <__sflush_r+0x108>)
 8004ef4:	40ca      	lsrs	r2, r1
 8004ef6:	07d6      	lsls	r6, r2, #31
 8004ef8:	d528      	bpl.n	8004f4c <__sflush_r+0xb8>
 8004efa:	2200      	movs	r2, #0
 8004efc:	6062      	str	r2, [r4, #4]
 8004efe:	04d9      	lsls	r1, r3, #19
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	d504      	bpl.n	8004f10 <__sflush_r+0x7c>
 8004f06:	1c42      	adds	r2, r0, #1
 8004f08:	d101      	bne.n	8004f0e <__sflush_r+0x7a>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	b903      	cbnz	r3, 8004f10 <__sflush_r+0x7c>
 8004f0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f12:	602f      	str	r7, [r5, #0]
 8004f14:	2900      	cmp	r1, #0
 8004f16:	d0ca      	beq.n	8004eae <__sflush_r+0x1a>
 8004f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f1c:	4299      	cmp	r1, r3
 8004f1e:	d002      	beq.n	8004f26 <__sflush_r+0x92>
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 fa4d 	bl	80053c0 <_free_r>
 8004f26:	2000      	movs	r0, #0
 8004f28:	6360      	str	r0, [r4, #52]	; 0x34
 8004f2a:	e7c1      	b.n	8004eb0 <__sflush_r+0x1c>
 8004f2c:	6a21      	ldr	r1, [r4, #32]
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b0      	blx	r6
 8004f34:	1c41      	adds	r1, r0, #1
 8004f36:	d1c7      	bne.n	8004ec8 <__sflush_r+0x34>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0c4      	beq.n	8004ec8 <__sflush_r+0x34>
 8004f3e:	2b1d      	cmp	r3, #29
 8004f40:	d001      	beq.n	8004f46 <__sflush_r+0xb2>
 8004f42:	2b16      	cmp	r3, #22
 8004f44:	d101      	bne.n	8004f4a <__sflush_r+0xb6>
 8004f46:	602f      	str	r7, [r5, #0]
 8004f48:	e7b1      	b.n	8004eae <__sflush_r+0x1a>
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f50:	81a3      	strh	r3, [r4, #12]
 8004f52:	e7ad      	b.n	8004eb0 <__sflush_r+0x1c>
 8004f54:	690f      	ldr	r7, [r1, #16]
 8004f56:	2f00      	cmp	r7, #0
 8004f58:	d0a9      	beq.n	8004eae <__sflush_r+0x1a>
 8004f5a:	0793      	lsls	r3, r2, #30
 8004f5c:	680e      	ldr	r6, [r1, #0]
 8004f5e:	bf08      	it	eq
 8004f60:	694b      	ldreq	r3, [r1, #20]
 8004f62:	600f      	str	r7, [r1, #0]
 8004f64:	bf18      	it	ne
 8004f66:	2300      	movne	r3, #0
 8004f68:	eba6 0807 	sub.w	r8, r6, r7
 8004f6c:	608b      	str	r3, [r1, #8]
 8004f6e:	f1b8 0f00 	cmp.w	r8, #0
 8004f72:	dd9c      	ble.n	8004eae <__sflush_r+0x1a>
 8004f74:	6a21      	ldr	r1, [r4, #32]
 8004f76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f78:	4643      	mov	r3, r8
 8004f7a:	463a      	mov	r2, r7
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	47b0      	blx	r6
 8004f80:	2800      	cmp	r0, #0
 8004f82:	dc06      	bgt.n	8004f92 <__sflush_r+0xfe>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8a:	81a3      	strh	r3, [r4, #12]
 8004f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f90:	e78e      	b.n	8004eb0 <__sflush_r+0x1c>
 8004f92:	4407      	add	r7, r0
 8004f94:	eba8 0800 	sub.w	r8, r8, r0
 8004f98:	e7e9      	b.n	8004f6e <__sflush_r+0xda>
 8004f9a:	bf00      	nop
 8004f9c:	20400001 	.word	0x20400001

08004fa0 <_fflush_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	690b      	ldr	r3, [r1, #16]
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	b913      	cbnz	r3, 8004fb0 <_fflush_r+0x10>
 8004faa:	2500      	movs	r5, #0
 8004fac:	4628      	mov	r0, r5
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	b118      	cbz	r0, 8004fba <_fflush_r+0x1a>
 8004fb2:	6983      	ldr	r3, [r0, #24]
 8004fb4:	b90b      	cbnz	r3, 8004fba <_fflush_r+0x1a>
 8004fb6:	f000 f899 	bl	80050ec <__sinit>
 8004fba:	4b14      	ldr	r3, [pc, #80]	; (800500c <_fflush_r+0x6c>)
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	d11b      	bne.n	8004ff8 <_fflush_r+0x58>
 8004fc0:	686c      	ldr	r4, [r5, #4]
 8004fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0ef      	beq.n	8004faa <_fflush_r+0xa>
 8004fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fcc:	07d0      	lsls	r0, r2, #31
 8004fce:	d404      	bmi.n	8004fda <_fflush_r+0x3a>
 8004fd0:	0599      	lsls	r1, r3, #22
 8004fd2:	d402      	bmi.n	8004fda <_fflush_r+0x3a>
 8004fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fd6:	f000 f984 	bl	80052e2 <__retarget_lock_acquire_recursive>
 8004fda:	4628      	mov	r0, r5
 8004fdc:	4621      	mov	r1, r4
 8004fde:	f7ff ff59 	bl	8004e94 <__sflush_r>
 8004fe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fe4:	07da      	lsls	r2, r3, #31
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	d4e0      	bmi.n	8004fac <_fflush_r+0xc>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	059b      	lsls	r3, r3, #22
 8004fee:	d4dd      	bmi.n	8004fac <_fflush_r+0xc>
 8004ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff2:	f000 f977 	bl	80052e4 <__retarget_lock_release_recursive>
 8004ff6:	e7d9      	b.n	8004fac <_fflush_r+0xc>
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <_fflush_r+0x70>)
 8004ffa:	429c      	cmp	r4, r3
 8004ffc:	d101      	bne.n	8005002 <_fflush_r+0x62>
 8004ffe:	68ac      	ldr	r4, [r5, #8]
 8005000:	e7df      	b.n	8004fc2 <_fflush_r+0x22>
 8005002:	4b04      	ldr	r3, [pc, #16]	; (8005014 <_fflush_r+0x74>)
 8005004:	429c      	cmp	r4, r3
 8005006:	bf08      	it	eq
 8005008:	68ec      	ldreq	r4, [r5, #12]
 800500a:	e7da      	b.n	8004fc2 <_fflush_r+0x22>
 800500c:	08006150 	.word	0x08006150
 8005010:	08006170 	.word	0x08006170
 8005014:	08006130 	.word	0x08006130

08005018 <fflush>:
 8005018:	4601      	mov	r1, r0
 800501a:	b920      	cbnz	r0, 8005026 <fflush+0xe>
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <fflush+0x18>)
 800501e:	4905      	ldr	r1, [pc, #20]	; (8005034 <fflush+0x1c>)
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	f000 b8fe 	b.w	8005222 <_fwalk_reent>
 8005026:	4b04      	ldr	r3, [pc, #16]	; (8005038 <fflush+0x20>)
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	f7ff bfb9 	b.w	8004fa0 <_fflush_r>
 800502e:	bf00      	nop
 8005030:	08006028 	.word	0x08006028
 8005034:	08004fa1 	.word	0x08004fa1
 8005038:	20000044 	.word	0x20000044

0800503c <std>:
 800503c:	2300      	movs	r3, #0
 800503e:	b510      	push	{r4, lr}
 8005040:	4604      	mov	r4, r0
 8005042:	e9c0 3300 	strd	r3, r3, [r0]
 8005046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800504a:	6083      	str	r3, [r0, #8]
 800504c:	8181      	strh	r1, [r0, #12]
 800504e:	6643      	str	r3, [r0, #100]	; 0x64
 8005050:	81c2      	strh	r2, [r0, #14]
 8005052:	6183      	str	r3, [r0, #24]
 8005054:	4619      	mov	r1, r3
 8005056:	2208      	movs	r2, #8
 8005058:	305c      	adds	r0, #92	; 0x5c
 800505a:	f7ff fc5b 	bl	8004914 <memset>
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <std+0x38>)
 8005060:	6263      	str	r3, [r4, #36]	; 0x24
 8005062:	4b05      	ldr	r3, [pc, #20]	; (8005078 <std+0x3c>)
 8005064:	62a3      	str	r3, [r4, #40]	; 0x28
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <std+0x40>)
 8005068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800506a:	4b05      	ldr	r3, [pc, #20]	; (8005080 <std+0x44>)
 800506c:	6224      	str	r4, [r4, #32]
 800506e:	6323      	str	r3, [r4, #48]	; 0x30
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	08005bf9 	.word	0x08005bf9
 8005078:	08005c1b 	.word	0x08005c1b
 800507c:	08005c53 	.word	0x08005c53
 8005080:	08005c77 	.word	0x08005c77

08005084 <_cleanup_r>:
 8005084:	4901      	ldr	r1, [pc, #4]	; (800508c <_cleanup_r+0x8>)
 8005086:	f000 b8cc 	b.w	8005222 <_fwalk_reent>
 800508a:	bf00      	nop
 800508c:	08004fa1 	.word	0x08004fa1

08005090 <__sfmoreglue>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	1e4a      	subs	r2, r1, #1
 8005094:	2568      	movs	r5, #104	; 0x68
 8005096:	4355      	muls	r5, r2
 8005098:	460e      	mov	r6, r1
 800509a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800509e:	f000 f9df 	bl	8005460 <_malloc_r>
 80050a2:	4604      	mov	r4, r0
 80050a4:	b140      	cbz	r0, 80050b8 <__sfmoreglue+0x28>
 80050a6:	2100      	movs	r1, #0
 80050a8:	e9c0 1600 	strd	r1, r6, [r0]
 80050ac:	300c      	adds	r0, #12
 80050ae:	60a0      	str	r0, [r4, #8]
 80050b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050b4:	f7ff fc2e 	bl	8004914 <memset>
 80050b8:	4620      	mov	r0, r4
 80050ba:	bd70      	pop	{r4, r5, r6, pc}

080050bc <__sfp_lock_acquire>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sfp_lock_acquire+0x8>)
 80050be:	f000 b910 	b.w	80052e2 <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	200001c0 	.word	0x200001c0

080050c8 <__sfp_lock_release>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sfp_lock_release+0x8>)
 80050ca:	f000 b90b 	b.w	80052e4 <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	200001c0 	.word	0x200001c0

080050d4 <__sinit_lock_acquire>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__sinit_lock_acquire+0x8>)
 80050d6:	f000 b904 	b.w	80052e2 <__retarget_lock_acquire_recursive>
 80050da:	bf00      	nop
 80050dc:	200001bb 	.word	0x200001bb

080050e0 <__sinit_lock_release>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__sinit_lock_release+0x8>)
 80050e2:	f000 b8ff 	b.w	80052e4 <__retarget_lock_release_recursive>
 80050e6:	bf00      	nop
 80050e8:	200001bb 	.word	0x200001bb

080050ec <__sinit>:
 80050ec:	b510      	push	{r4, lr}
 80050ee:	4604      	mov	r4, r0
 80050f0:	f7ff fff0 	bl	80050d4 <__sinit_lock_acquire>
 80050f4:	69a3      	ldr	r3, [r4, #24]
 80050f6:	b11b      	cbz	r3, 8005100 <__sinit+0x14>
 80050f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050fc:	f7ff bff0 	b.w	80050e0 <__sinit_lock_release>
 8005100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005104:	6523      	str	r3, [r4, #80]	; 0x50
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <__sinit+0x68>)
 8005108:	4a13      	ldr	r2, [pc, #76]	; (8005158 <__sinit+0x6c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	62a2      	str	r2, [r4, #40]	; 0x28
 800510e:	42a3      	cmp	r3, r4
 8005110:	bf04      	itt	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	61a3      	streq	r3, [r4, #24]
 8005116:	4620      	mov	r0, r4
 8005118:	f000 f820 	bl	800515c <__sfp>
 800511c:	6060      	str	r0, [r4, #4]
 800511e:	4620      	mov	r0, r4
 8005120:	f000 f81c 	bl	800515c <__sfp>
 8005124:	60a0      	str	r0, [r4, #8]
 8005126:	4620      	mov	r0, r4
 8005128:	f000 f818 	bl	800515c <__sfp>
 800512c:	2200      	movs	r2, #0
 800512e:	60e0      	str	r0, [r4, #12]
 8005130:	2104      	movs	r1, #4
 8005132:	6860      	ldr	r0, [r4, #4]
 8005134:	f7ff ff82 	bl	800503c <std>
 8005138:	68a0      	ldr	r0, [r4, #8]
 800513a:	2201      	movs	r2, #1
 800513c:	2109      	movs	r1, #9
 800513e:	f7ff ff7d 	bl	800503c <std>
 8005142:	68e0      	ldr	r0, [r4, #12]
 8005144:	2202      	movs	r2, #2
 8005146:	2112      	movs	r1, #18
 8005148:	f7ff ff78 	bl	800503c <std>
 800514c:	2301      	movs	r3, #1
 800514e:	61a3      	str	r3, [r4, #24]
 8005150:	e7d2      	b.n	80050f8 <__sinit+0xc>
 8005152:	bf00      	nop
 8005154:	08006028 	.word	0x08006028
 8005158:	08005085 	.word	0x08005085

0800515c <__sfp>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	4607      	mov	r7, r0
 8005160:	f7ff ffac 	bl	80050bc <__sfp_lock_acquire>
 8005164:	4b1e      	ldr	r3, [pc, #120]	; (80051e0 <__sfp+0x84>)
 8005166:	681e      	ldr	r6, [r3, #0]
 8005168:	69b3      	ldr	r3, [r6, #24]
 800516a:	b913      	cbnz	r3, 8005172 <__sfp+0x16>
 800516c:	4630      	mov	r0, r6
 800516e:	f7ff ffbd 	bl	80050ec <__sinit>
 8005172:	3648      	adds	r6, #72	; 0x48
 8005174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005178:	3b01      	subs	r3, #1
 800517a:	d503      	bpl.n	8005184 <__sfp+0x28>
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	b30b      	cbz	r3, 80051c4 <__sfp+0x68>
 8005180:	6836      	ldr	r6, [r6, #0]
 8005182:	e7f7      	b.n	8005174 <__sfp+0x18>
 8005184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005188:	b9d5      	cbnz	r5, 80051c0 <__sfp+0x64>
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <__sfp+0x88>)
 800518c:	60e3      	str	r3, [r4, #12]
 800518e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005192:	6665      	str	r5, [r4, #100]	; 0x64
 8005194:	f000 f8a4 	bl	80052e0 <__retarget_lock_init_recursive>
 8005198:	f7ff ff96 	bl	80050c8 <__sfp_lock_release>
 800519c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051a4:	6025      	str	r5, [r4, #0]
 80051a6:	61a5      	str	r5, [r4, #24]
 80051a8:	2208      	movs	r2, #8
 80051aa:	4629      	mov	r1, r5
 80051ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051b0:	f7ff fbb0 	bl	8004914 <memset>
 80051b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051bc:	4620      	mov	r0, r4
 80051be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c0:	3468      	adds	r4, #104	; 0x68
 80051c2:	e7d9      	b.n	8005178 <__sfp+0x1c>
 80051c4:	2104      	movs	r1, #4
 80051c6:	4638      	mov	r0, r7
 80051c8:	f7ff ff62 	bl	8005090 <__sfmoreglue>
 80051cc:	4604      	mov	r4, r0
 80051ce:	6030      	str	r0, [r6, #0]
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d1d5      	bne.n	8005180 <__sfp+0x24>
 80051d4:	f7ff ff78 	bl	80050c8 <__sfp_lock_release>
 80051d8:	230c      	movs	r3, #12
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	e7ee      	b.n	80051bc <__sfp+0x60>
 80051de:	bf00      	nop
 80051e0:	08006028 	.word	0x08006028
 80051e4:	ffff0001 	.word	0xffff0001

080051e8 <_fwalk>:
 80051e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	460f      	mov	r7, r1
 80051ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051f2:	2600      	movs	r6, #0
 80051f4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80051f8:	f1b8 0801 	subs.w	r8, r8, #1
 80051fc:	d505      	bpl.n	800520a <_fwalk+0x22>
 80051fe:	6824      	ldr	r4, [r4, #0]
 8005200:	2c00      	cmp	r4, #0
 8005202:	d1f7      	bne.n	80051f4 <_fwalk+0xc>
 8005204:	4630      	mov	r0, r6
 8005206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800520a:	89ab      	ldrh	r3, [r5, #12]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d906      	bls.n	800521e <_fwalk+0x36>
 8005210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005214:	3301      	adds	r3, #1
 8005216:	d002      	beq.n	800521e <_fwalk+0x36>
 8005218:	4628      	mov	r0, r5
 800521a:	47b8      	blx	r7
 800521c:	4306      	orrs	r6, r0
 800521e:	3568      	adds	r5, #104	; 0x68
 8005220:	e7ea      	b.n	80051f8 <_fwalk+0x10>

08005222 <_fwalk_reent>:
 8005222:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005226:	4606      	mov	r6, r0
 8005228:	4688      	mov	r8, r1
 800522a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800522e:	2700      	movs	r7, #0
 8005230:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005234:	f1b9 0901 	subs.w	r9, r9, #1
 8005238:	d505      	bpl.n	8005246 <_fwalk_reent+0x24>
 800523a:	6824      	ldr	r4, [r4, #0]
 800523c:	2c00      	cmp	r4, #0
 800523e:	d1f7      	bne.n	8005230 <_fwalk_reent+0xe>
 8005240:	4638      	mov	r0, r7
 8005242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005246:	89ab      	ldrh	r3, [r5, #12]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d907      	bls.n	800525c <_fwalk_reent+0x3a>
 800524c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005250:	3301      	adds	r3, #1
 8005252:	d003      	beq.n	800525c <_fwalk_reent+0x3a>
 8005254:	4629      	mov	r1, r5
 8005256:	4630      	mov	r0, r6
 8005258:	47c0      	blx	r8
 800525a:	4307      	orrs	r7, r0
 800525c:	3568      	adds	r5, #104	; 0x68
 800525e:	e7e9      	b.n	8005234 <_fwalk_reent+0x12>

08005260 <_getc_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	4605      	mov	r5, r0
 8005266:	b118      	cbz	r0, 8005270 <_getc_r+0x10>
 8005268:	6983      	ldr	r3, [r0, #24]
 800526a:	b90b      	cbnz	r3, 8005270 <_getc_r+0x10>
 800526c:	f7ff ff3e 	bl	80050ec <__sinit>
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <_getc_r+0x74>)
 8005272:	429c      	cmp	r4, r3
 8005274:	d11e      	bne.n	80052b4 <_getc_r+0x54>
 8005276:	686c      	ldr	r4, [r5, #4]
 8005278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800527a:	07d8      	lsls	r0, r3, #31
 800527c:	d405      	bmi.n	800528a <_getc_r+0x2a>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	0599      	lsls	r1, r3, #22
 8005282:	d402      	bmi.n	800528a <_getc_r+0x2a>
 8005284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005286:	f000 f82c 	bl	80052e2 <__retarget_lock_acquire_recursive>
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	3b01      	subs	r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	6063      	str	r3, [r4, #4]
 8005292:	da19      	bge.n	80052c8 <_getc_r+0x68>
 8005294:	4628      	mov	r0, r5
 8005296:	4621      	mov	r1, r4
 8005298:	f000 fc72 	bl	8005b80 <__srget_r>
 800529c:	4605      	mov	r5, r0
 800529e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a0:	07da      	lsls	r2, r3, #31
 80052a2:	d405      	bmi.n	80052b0 <_getc_r+0x50>
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	059b      	lsls	r3, r3, #22
 80052a8:	d402      	bmi.n	80052b0 <_getc_r+0x50>
 80052aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ac:	f000 f81a 	bl	80052e4 <__retarget_lock_release_recursive>
 80052b0:	4628      	mov	r0, r5
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <_getc_r+0x78>)
 80052b6:	429c      	cmp	r4, r3
 80052b8:	d101      	bne.n	80052be <_getc_r+0x5e>
 80052ba:	68ac      	ldr	r4, [r5, #8]
 80052bc:	e7dc      	b.n	8005278 <_getc_r+0x18>
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <_getc_r+0x7c>)
 80052c0:	429c      	cmp	r4, r3
 80052c2:	bf08      	it	eq
 80052c4:	68ec      	ldreq	r4, [r5, #12]
 80052c6:	e7d7      	b.n	8005278 <_getc_r+0x18>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	6022      	str	r2, [r4, #0]
 80052ce:	781d      	ldrb	r5, [r3, #0]
 80052d0:	e7e5      	b.n	800529e <_getc_r+0x3e>
 80052d2:	bf00      	nop
 80052d4:	08006150 	.word	0x08006150
 80052d8:	08006170 	.word	0x08006170
 80052dc:	08006130 	.word	0x08006130

080052e0 <__retarget_lock_init_recursive>:
 80052e0:	4770      	bx	lr

080052e2 <__retarget_lock_acquire_recursive>:
 80052e2:	4770      	bx	lr

080052e4 <__retarget_lock_release_recursive>:
 80052e4:	4770      	bx	lr

080052e6 <__swhatbuf_r>:
 80052e6:	b570      	push	{r4, r5, r6, lr}
 80052e8:	460e      	mov	r6, r1
 80052ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ee:	2900      	cmp	r1, #0
 80052f0:	b096      	sub	sp, #88	; 0x58
 80052f2:	4614      	mov	r4, r2
 80052f4:	461d      	mov	r5, r3
 80052f6:	da07      	bge.n	8005308 <__swhatbuf_r+0x22>
 80052f8:	2300      	movs	r3, #0
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	89b3      	ldrh	r3, [r6, #12]
 80052fe:	061a      	lsls	r2, r3, #24
 8005300:	d410      	bmi.n	8005324 <__swhatbuf_r+0x3e>
 8005302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005306:	e00e      	b.n	8005326 <__swhatbuf_r+0x40>
 8005308:	466a      	mov	r2, sp
 800530a:	f000 fcdb 	bl	8005cc4 <_fstat_r>
 800530e:	2800      	cmp	r0, #0
 8005310:	dbf2      	blt.n	80052f8 <__swhatbuf_r+0x12>
 8005312:	9a01      	ldr	r2, [sp, #4]
 8005314:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005318:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800531c:	425a      	negs	r2, r3
 800531e:	415a      	adcs	r2, r3
 8005320:	602a      	str	r2, [r5, #0]
 8005322:	e7ee      	b.n	8005302 <__swhatbuf_r+0x1c>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	2000      	movs	r0, #0
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	b016      	add	sp, #88	; 0x58
 800532c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005330 <__smakebuf_r>:
 8005330:	898b      	ldrh	r3, [r1, #12]
 8005332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005334:	079d      	lsls	r5, r3, #30
 8005336:	4606      	mov	r6, r0
 8005338:	460c      	mov	r4, r1
 800533a:	d507      	bpl.n	800534c <__smakebuf_r+0x1c>
 800533c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	6123      	str	r3, [r4, #16]
 8005344:	2301      	movs	r3, #1
 8005346:	6163      	str	r3, [r4, #20]
 8005348:	b002      	add	sp, #8
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	ab01      	add	r3, sp, #4
 800534e:	466a      	mov	r2, sp
 8005350:	f7ff ffc9 	bl	80052e6 <__swhatbuf_r>
 8005354:	9900      	ldr	r1, [sp, #0]
 8005356:	4605      	mov	r5, r0
 8005358:	4630      	mov	r0, r6
 800535a:	f000 f881 	bl	8005460 <_malloc_r>
 800535e:	b948      	cbnz	r0, 8005374 <__smakebuf_r+0x44>
 8005360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005364:	059a      	lsls	r2, r3, #22
 8005366:	d4ef      	bmi.n	8005348 <__smakebuf_r+0x18>
 8005368:	f023 0303 	bic.w	r3, r3, #3
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	e7e3      	b.n	800533c <__smakebuf_r+0xc>
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <__smakebuf_r+0x7c>)
 8005376:	62b3      	str	r3, [r6, #40]	; 0x28
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	6020      	str	r0, [r4, #0]
 800537c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	9b00      	ldr	r3, [sp, #0]
 8005384:	6163      	str	r3, [r4, #20]
 8005386:	9b01      	ldr	r3, [sp, #4]
 8005388:	6120      	str	r0, [r4, #16]
 800538a:	b15b      	cbz	r3, 80053a4 <__smakebuf_r+0x74>
 800538c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005390:	4630      	mov	r0, r6
 8005392:	f000 fca9 	bl	8005ce8 <_isatty_r>
 8005396:	b128      	cbz	r0, 80053a4 <__smakebuf_r+0x74>
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	89a0      	ldrh	r0, [r4, #12]
 80053a6:	4305      	orrs	r5, r0
 80053a8:	81a5      	strh	r5, [r4, #12]
 80053aa:	e7cd      	b.n	8005348 <__smakebuf_r+0x18>
 80053ac:	08005085 	.word	0x08005085

080053b0 <malloc>:
 80053b0:	4b02      	ldr	r3, [pc, #8]	; (80053bc <malloc+0xc>)
 80053b2:	4601      	mov	r1, r0
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	f000 b853 	b.w	8005460 <_malloc_r>
 80053ba:	bf00      	nop
 80053bc:	20000044 	.word	0x20000044

080053c0 <_free_r>:
 80053c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053c2:	2900      	cmp	r1, #0
 80053c4:	d048      	beq.n	8005458 <_free_r+0x98>
 80053c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ca:	9001      	str	r0, [sp, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f1a1 0404 	sub.w	r4, r1, #4
 80053d2:	bfb8      	it	lt
 80053d4:	18e4      	addlt	r4, r4, r3
 80053d6:	f000 fca9 	bl	8005d2c <__malloc_lock>
 80053da:	4a20      	ldr	r2, [pc, #128]	; (800545c <_free_r+0x9c>)
 80053dc:	9801      	ldr	r0, [sp, #4]
 80053de:	6813      	ldr	r3, [r2, #0]
 80053e0:	4615      	mov	r5, r2
 80053e2:	b933      	cbnz	r3, 80053f2 <_free_r+0x32>
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	6014      	str	r4, [r2, #0]
 80053e8:	b003      	add	sp, #12
 80053ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ee:	f000 bca3 	b.w	8005d38 <__malloc_unlock>
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	d90b      	bls.n	800540e <_free_r+0x4e>
 80053f6:	6821      	ldr	r1, [r4, #0]
 80053f8:	1862      	adds	r2, r4, r1
 80053fa:	4293      	cmp	r3, r2
 80053fc:	bf04      	itt	eq
 80053fe:	681a      	ldreq	r2, [r3, #0]
 8005400:	685b      	ldreq	r3, [r3, #4]
 8005402:	6063      	str	r3, [r4, #4]
 8005404:	bf04      	itt	eq
 8005406:	1852      	addeq	r2, r2, r1
 8005408:	6022      	streq	r2, [r4, #0]
 800540a:	602c      	str	r4, [r5, #0]
 800540c:	e7ec      	b.n	80053e8 <_free_r+0x28>
 800540e:	461a      	mov	r2, r3
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	b10b      	cbz	r3, 8005418 <_free_r+0x58>
 8005414:	42a3      	cmp	r3, r4
 8005416:	d9fa      	bls.n	800540e <_free_r+0x4e>
 8005418:	6811      	ldr	r1, [r2, #0]
 800541a:	1855      	adds	r5, r2, r1
 800541c:	42a5      	cmp	r5, r4
 800541e:	d10b      	bne.n	8005438 <_free_r+0x78>
 8005420:	6824      	ldr	r4, [r4, #0]
 8005422:	4421      	add	r1, r4
 8005424:	1854      	adds	r4, r2, r1
 8005426:	42a3      	cmp	r3, r4
 8005428:	6011      	str	r1, [r2, #0]
 800542a:	d1dd      	bne.n	80053e8 <_free_r+0x28>
 800542c:	681c      	ldr	r4, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	6053      	str	r3, [r2, #4]
 8005432:	4421      	add	r1, r4
 8005434:	6011      	str	r1, [r2, #0]
 8005436:	e7d7      	b.n	80053e8 <_free_r+0x28>
 8005438:	d902      	bls.n	8005440 <_free_r+0x80>
 800543a:	230c      	movs	r3, #12
 800543c:	6003      	str	r3, [r0, #0]
 800543e:	e7d3      	b.n	80053e8 <_free_r+0x28>
 8005440:	6825      	ldr	r5, [r4, #0]
 8005442:	1961      	adds	r1, r4, r5
 8005444:	428b      	cmp	r3, r1
 8005446:	bf04      	itt	eq
 8005448:	6819      	ldreq	r1, [r3, #0]
 800544a:	685b      	ldreq	r3, [r3, #4]
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	bf04      	itt	eq
 8005450:	1949      	addeq	r1, r1, r5
 8005452:	6021      	streq	r1, [r4, #0]
 8005454:	6054      	str	r4, [r2, #4]
 8005456:	e7c7      	b.n	80053e8 <_free_r+0x28>
 8005458:	b003      	add	sp, #12
 800545a:	bd30      	pop	{r4, r5, pc}
 800545c:	200000cc 	.word	0x200000cc

08005460 <_malloc_r>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	1ccd      	adds	r5, r1, #3
 8005464:	f025 0503 	bic.w	r5, r5, #3
 8005468:	3508      	adds	r5, #8
 800546a:	2d0c      	cmp	r5, #12
 800546c:	bf38      	it	cc
 800546e:	250c      	movcc	r5, #12
 8005470:	2d00      	cmp	r5, #0
 8005472:	4606      	mov	r6, r0
 8005474:	db01      	blt.n	800547a <_malloc_r+0x1a>
 8005476:	42a9      	cmp	r1, r5
 8005478:	d903      	bls.n	8005482 <_malloc_r+0x22>
 800547a:	230c      	movs	r3, #12
 800547c:	6033      	str	r3, [r6, #0]
 800547e:	2000      	movs	r0, #0
 8005480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005482:	f000 fc53 	bl	8005d2c <__malloc_lock>
 8005486:	4921      	ldr	r1, [pc, #132]	; (800550c <_malloc_r+0xac>)
 8005488:	680a      	ldr	r2, [r1, #0]
 800548a:	4614      	mov	r4, r2
 800548c:	b99c      	cbnz	r4, 80054b6 <_malloc_r+0x56>
 800548e:	4f20      	ldr	r7, [pc, #128]	; (8005510 <_malloc_r+0xb0>)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	b923      	cbnz	r3, 800549e <_malloc_r+0x3e>
 8005494:	4621      	mov	r1, r4
 8005496:	4630      	mov	r0, r6
 8005498:	f000 fb9e 	bl	8005bd8 <_sbrk_r>
 800549c:	6038      	str	r0, [r7, #0]
 800549e:	4629      	mov	r1, r5
 80054a0:	4630      	mov	r0, r6
 80054a2:	f000 fb99 	bl	8005bd8 <_sbrk_r>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	d123      	bne.n	80054f2 <_malloc_r+0x92>
 80054aa:	230c      	movs	r3, #12
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 fc42 	bl	8005d38 <__malloc_unlock>
 80054b4:	e7e3      	b.n	800547e <_malloc_r+0x1e>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	1b5b      	subs	r3, r3, r5
 80054ba:	d417      	bmi.n	80054ec <_malloc_r+0x8c>
 80054bc:	2b0b      	cmp	r3, #11
 80054be:	d903      	bls.n	80054c8 <_malloc_r+0x68>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	441c      	add	r4, r3
 80054c4:	6025      	str	r5, [r4, #0]
 80054c6:	e004      	b.n	80054d2 <_malloc_r+0x72>
 80054c8:	6863      	ldr	r3, [r4, #4]
 80054ca:	42a2      	cmp	r2, r4
 80054cc:	bf0c      	ite	eq
 80054ce:	600b      	streq	r3, [r1, #0]
 80054d0:	6053      	strne	r3, [r2, #4]
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 fc30 	bl	8005d38 <__malloc_unlock>
 80054d8:	f104 000b 	add.w	r0, r4, #11
 80054dc:	1d23      	adds	r3, r4, #4
 80054de:	f020 0007 	bic.w	r0, r0, #7
 80054e2:	1ac2      	subs	r2, r0, r3
 80054e4:	d0cc      	beq.n	8005480 <_malloc_r+0x20>
 80054e6:	1a1b      	subs	r3, r3, r0
 80054e8:	50a3      	str	r3, [r4, r2]
 80054ea:	e7c9      	b.n	8005480 <_malloc_r+0x20>
 80054ec:	4622      	mov	r2, r4
 80054ee:	6864      	ldr	r4, [r4, #4]
 80054f0:	e7cc      	b.n	800548c <_malloc_r+0x2c>
 80054f2:	1cc4      	adds	r4, r0, #3
 80054f4:	f024 0403 	bic.w	r4, r4, #3
 80054f8:	42a0      	cmp	r0, r4
 80054fa:	d0e3      	beq.n	80054c4 <_malloc_r+0x64>
 80054fc:	1a21      	subs	r1, r4, r0
 80054fe:	4630      	mov	r0, r6
 8005500:	f000 fb6a 	bl	8005bd8 <_sbrk_r>
 8005504:	3001      	adds	r0, #1
 8005506:	d1dd      	bne.n	80054c4 <_malloc_r+0x64>
 8005508:	e7cf      	b.n	80054aa <_malloc_r+0x4a>
 800550a:	bf00      	nop
 800550c:	200000cc 	.word	0x200000cc
 8005510:	200000d0 	.word	0x200000d0

08005514 <__sfputc_r>:
 8005514:	6893      	ldr	r3, [r2, #8]
 8005516:	3b01      	subs	r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	b410      	push	{r4}
 800551c:	6093      	str	r3, [r2, #8]
 800551e:	da08      	bge.n	8005532 <__sfputc_r+0x1e>
 8005520:	6994      	ldr	r4, [r2, #24]
 8005522:	42a3      	cmp	r3, r4
 8005524:	db01      	blt.n	800552a <__sfputc_r+0x16>
 8005526:	290a      	cmp	r1, #10
 8005528:	d103      	bne.n	8005532 <__sfputc_r+0x1e>
 800552a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800552e:	f7ff bbf1 	b.w	8004d14 <__swbuf_r>
 8005532:	6813      	ldr	r3, [r2, #0]
 8005534:	1c58      	adds	r0, r3, #1
 8005536:	6010      	str	r0, [r2, #0]
 8005538:	7019      	strb	r1, [r3, #0]
 800553a:	4608      	mov	r0, r1
 800553c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005540:	4770      	bx	lr

08005542 <__sfputs_r>:
 8005542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005544:	4606      	mov	r6, r0
 8005546:	460f      	mov	r7, r1
 8005548:	4614      	mov	r4, r2
 800554a:	18d5      	adds	r5, r2, r3
 800554c:	42ac      	cmp	r4, r5
 800554e:	d101      	bne.n	8005554 <__sfputs_r+0x12>
 8005550:	2000      	movs	r0, #0
 8005552:	e007      	b.n	8005564 <__sfputs_r+0x22>
 8005554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005558:	463a      	mov	r2, r7
 800555a:	4630      	mov	r0, r6
 800555c:	f7ff ffda 	bl	8005514 <__sfputc_r>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d1f3      	bne.n	800554c <__sfputs_r+0xa>
 8005564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005568 <_vfiprintf_r>:
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	460d      	mov	r5, r1
 800556e:	b09d      	sub	sp, #116	; 0x74
 8005570:	4614      	mov	r4, r2
 8005572:	4698      	mov	r8, r3
 8005574:	4606      	mov	r6, r0
 8005576:	b118      	cbz	r0, 8005580 <_vfiprintf_r+0x18>
 8005578:	6983      	ldr	r3, [r0, #24]
 800557a:	b90b      	cbnz	r3, 8005580 <_vfiprintf_r+0x18>
 800557c:	f7ff fdb6 	bl	80050ec <__sinit>
 8005580:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <_vfiprintf_r+0x240>)
 8005582:	429d      	cmp	r5, r3
 8005584:	d11b      	bne.n	80055be <_vfiprintf_r+0x56>
 8005586:	6875      	ldr	r5, [r6, #4]
 8005588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800558a:	07d9      	lsls	r1, r3, #31
 800558c:	d405      	bmi.n	800559a <_vfiprintf_r+0x32>
 800558e:	89ab      	ldrh	r3, [r5, #12]
 8005590:	059a      	lsls	r2, r3, #22
 8005592:	d402      	bmi.n	800559a <_vfiprintf_r+0x32>
 8005594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005596:	f7ff fea4 	bl	80052e2 <__retarget_lock_acquire_recursive>
 800559a:	89ab      	ldrh	r3, [r5, #12]
 800559c:	071b      	lsls	r3, r3, #28
 800559e:	d501      	bpl.n	80055a4 <_vfiprintf_r+0x3c>
 80055a0:	692b      	ldr	r3, [r5, #16]
 80055a2:	b9eb      	cbnz	r3, 80055e0 <_vfiprintf_r+0x78>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4630      	mov	r0, r6
 80055a8:	f7ff fc06 	bl	8004db8 <__swsetup_r>
 80055ac:	b1c0      	cbz	r0, 80055e0 <_vfiprintf_r+0x78>
 80055ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055b0:	07dc      	lsls	r4, r3, #31
 80055b2:	d50e      	bpl.n	80055d2 <_vfiprintf_r+0x6a>
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055b8:	b01d      	add	sp, #116	; 0x74
 80055ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055be:	4b7b      	ldr	r3, [pc, #492]	; (80057ac <_vfiprintf_r+0x244>)
 80055c0:	429d      	cmp	r5, r3
 80055c2:	d101      	bne.n	80055c8 <_vfiprintf_r+0x60>
 80055c4:	68b5      	ldr	r5, [r6, #8]
 80055c6:	e7df      	b.n	8005588 <_vfiprintf_r+0x20>
 80055c8:	4b79      	ldr	r3, [pc, #484]	; (80057b0 <_vfiprintf_r+0x248>)
 80055ca:	429d      	cmp	r5, r3
 80055cc:	bf08      	it	eq
 80055ce:	68f5      	ldreq	r5, [r6, #12]
 80055d0:	e7da      	b.n	8005588 <_vfiprintf_r+0x20>
 80055d2:	89ab      	ldrh	r3, [r5, #12]
 80055d4:	0598      	lsls	r0, r3, #22
 80055d6:	d4ed      	bmi.n	80055b4 <_vfiprintf_r+0x4c>
 80055d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055da:	f7ff fe83 	bl	80052e4 <__retarget_lock_release_recursive>
 80055de:	e7e9      	b.n	80055b4 <_vfiprintf_r+0x4c>
 80055e0:	2300      	movs	r3, #0
 80055e2:	9309      	str	r3, [sp, #36]	; 0x24
 80055e4:	2320      	movs	r3, #32
 80055e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ee:	2330      	movs	r3, #48	; 0x30
 80055f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80057b4 <_vfiprintf_r+0x24c>
 80055f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055f8:	f04f 0901 	mov.w	r9, #1
 80055fc:	4623      	mov	r3, r4
 80055fe:	469a      	mov	sl, r3
 8005600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005604:	b10a      	cbz	r2, 800560a <_vfiprintf_r+0xa2>
 8005606:	2a25      	cmp	r2, #37	; 0x25
 8005608:	d1f9      	bne.n	80055fe <_vfiprintf_r+0x96>
 800560a:	ebba 0b04 	subs.w	fp, sl, r4
 800560e:	d00b      	beq.n	8005628 <_vfiprintf_r+0xc0>
 8005610:	465b      	mov	r3, fp
 8005612:	4622      	mov	r2, r4
 8005614:	4629      	mov	r1, r5
 8005616:	4630      	mov	r0, r6
 8005618:	f7ff ff93 	bl	8005542 <__sfputs_r>
 800561c:	3001      	adds	r0, #1
 800561e:	f000 80aa 	beq.w	8005776 <_vfiprintf_r+0x20e>
 8005622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005624:	445a      	add	r2, fp
 8005626:	9209      	str	r2, [sp, #36]	; 0x24
 8005628:	f89a 3000 	ldrb.w	r3, [sl]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80a2 	beq.w	8005776 <_vfiprintf_r+0x20e>
 8005632:	2300      	movs	r3, #0
 8005634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800563c:	f10a 0a01 	add.w	sl, sl, #1
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	9307      	str	r3, [sp, #28]
 8005644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005648:	931a      	str	r3, [sp, #104]	; 0x68
 800564a:	4654      	mov	r4, sl
 800564c:	2205      	movs	r2, #5
 800564e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005652:	4858      	ldr	r0, [pc, #352]	; (80057b4 <_vfiprintf_r+0x24c>)
 8005654:	f7fa fdcc 	bl	80001f0 <memchr>
 8005658:	9a04      	ldr	r2, [sp, #16]
 800565a:	b9d8      	cbnz	r0, 8005694 <_vfiprintf_r+0x12c>
 800565c:	06d1      	lsls	r1, r2, #27
 800565e:	bf44      	itt	mi
 8005660:	2320      	movmi	r3, #32
 8005662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005666:	0713      	lsls	r3, r2, #28
 8005668:	bf44      	itt	mi
 800566a:	232b      	movmi	r3, #43	; 0x2b
 800566c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005670:	f89a 3000 	ldrb.w	r3, [sl]
 8005674:	2b2a      	cmp	r3, #42	; 0x2a
 8005676:	d015      	beq.n	80056a4 <_vfiprintf_r+0x13c>
 8005678:	9a07      	ldr	r2, [sp, #28]
 800567a:	4654      	mov	r4, sl
 800567c:	2000      	movs	r0, #0
 800567e:	f04f 0c0a 	mov.w	ip, #10
 8005682:	4621      	mov	r1, r4
 8005684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005688:	3b30      	subs	r3, #48	; 0x30
 800568a:	2b09      	cmp	r3, #9
 800568c:	d94e      	bls.n	800572c <_vfiprintf_r+0x1c4>
 800568e:	b1b0      	cbz	r0, 80056be <_vfiprintf_r+0x156>
 8005690:	9207      	str	r2, [sp, #28]
 8005692:	e014      	b.n	80056be <_vfiprintf_r+0x156>
 8005694:	eba0 0308 	sub.w	r3, r0, r8
 8005698:	fa09 f303 	lsl.w	r3, r9, r3
 800569c:	4313      	orrs	r3, r2
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	46a2      	mov	sl, r4
 80056a2:	e7d2      	b.n	800564a <_vfiprintf_r+0xe2>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	1d19      	adds	r1, r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	9103      	str	r1, [sp, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bfbb      	ittet	lt
 80056b0:	425b      	neglt	r3, r3
 80056b2:	f042 0202 	orrlt.w	r2, r2, #2
 80056b6:	9307      	strge	r3, [sp, #28]
 80056b8:	9307      	strlt	r3, [sp, #28]
 80056ba:	bfb8      	it	lt
 80056bc:	9204      	strlt	r2, [sp, #16]
 80056be:	7823      	ldrb	r3, [r4, #0]
 80056c0:	2b2e      	cmp	r3, #46	; 0x2e
 80056c2:	d10c      	bne.n	80056de <_vfiprintf_r+0x176>
 80056c4:	7863      	ldrb	r3, [r4, #1]
 80056c6:	2b2a      	cmp	r3, #42	; 0x2a
 80056c8:	d135      	bne.n	8005736 <_vfiprintf_r+0x1ce>
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	9203      	str	r2, [sp, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfb8      	it	lt
 80056d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056da:	3402      	adds	r4, #2
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057c4 <_vfiprintf_r+0x25c>
 80056e2:	7821      	ldrb	r1, [r4, #0]
 80056e4:	2203      	movs	r2, #3
 80056e6:	4650      	mov	r0, sl
 80056e8:	f7fa fd82 	bl	80001f0 <memchr>
 80056ec:	b140      	cbz	r0, 8005700 <_vfiprintf_r+0x198>
 80056ee:	2340      	movs	r3, #64	; 0x40
 80056f0:	eba0 000a 	sub.w	r0, r0, sl
 80056f4:	fa03 f000 	lsl.w	r0, r3, r0
 80056f8:	9b04      	ldr	r3, [sp, #16]
 80056fa:	4303      	orrs	r3, r0
 80056fc:	3401      	adds	r4, #1
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005704:	482c      	ldr	r0, [pc, #176]	; (80057b8 <_vfiprintf_r+0x250>)
 8005706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800570a:	2206      	movs	r2, #6
 800570c:	f7fa fd70 	bl	80001f0 <memchr>
 8005710:	2800      	cmp	r0, #0
 8005712:	d03f      	beq.n	8005794 <_vfiprintf_r+0x22c>
 8005714:	4b29      	ldr	r3, [pc, #164]	; (80057bc <_vfiprintf_r+0x254>)
 8005716:	bb1b      	cbnz	r3, 8005760 <_vfiprintf_r+0x1f8>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	3307      	adds	r3, #7
 800571c:	f023 0307 	bic.w	r3, r3, #7
 8005720:	3308      	adds	r3, #8
 8005722:	9303      	str	r3, [sp, #12]
 8005724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005726:	443b      	add	r3, r7
 8005728:	9309      	str	r3, [sp, #36]	; 0x24
 800572a:	e767      	b.n	80055fc <_vfiprintf_r+0x94>
 800572c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005730:	460c      	mov	r4, r1
 8005732:	2001      	movs	r0, #1
 8005734:	e7a5      	b.n	8005682 <_vfiprintf_r+0x11a>
 8005736:	2300      	movs	r3, #0
 8005738:	3401      	adds	r4, #1
 800573a:	9305      	str	r3, [sp, #20]
 800573c:	4619      	mov	r1, r3
 800573e:	f04f 0c0a 	mov.w	ip, #10
 8005742:	4620      	mov	r0, r4
 8005744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005748:	3a30      	subs	r2, #48	; 0x30
 800574a:	2a09      	cmp	r2, #9
 800574c:	d903      	bls.n	8005756 <_vfiprintf_r+0x1ee>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0c5      	beq.n	80056de <_vfiprintf_r+0x176>
 8005752:	9105      	str	r1, [sp, #20]
 8005754:	e7c3      	b.n	80056de <_vfiprintf_r+0x176>
 8005756:	fb0c 2101 	mla	r1, ip, r1, r2
 800575a:	4604      	mov	r4, r0
 800575c:	2301      	movs	r3, #1
 800575e:	e7f0      	b.n	8005742 <_vfiprintf_r+0x1da>
 8005760:	ab03      	add	r3, sp, #12
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	462a      	mov	r2, r5
 8005766:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <_vfiprintf_r+0x258>)
 8005768:	a904      	add	r1, sp, #16
 800576a:	4630      	mov	r0, r6
 800576c:	f3af 8000 	nop.w
 8005770:	4607      	mov	r7, r0
 8005772:	1c78      	adds	r0, r7, #1
 8005774:	d1d6      	bne.n	8005724 <_vfiprintf_r+0x1bc>
 8005776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005778:	07d9      	lsls	r1, r3, #31
 800577a:	d405      	bmi.n	8005788 <_vfiprintf_r+0x220>
 800577c:	89ab      	ldrh	r3, [r5, #12]
 800577e:	059a      	lsls	r2, r3, #22
 8005780:	d402      	bmi.n	8005788 <_vfiprintf_r+0x220>
 8005782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005784:	f7ff fdae 	bl	80052e4 <__retarget_lock_release_recursive>
 8005788:	89ab      	ldrh	r3, [r5, #12]
 800578a:	065b      	lsls	r3, r3, #25
 800578c:	f53f af12 	bmi.w	80055b4 <_vfiprintf_r+0x4c>
 8005790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005792:	e711      	b.n	80055b8 <_vfiprintf_r+0x50>
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	462a      	mov	r2, r5
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <_vfiprintf_r+0x258>)
 800579c:	a904      	add	r1, sp, #16
 800579e:	4630      	mov	r0, r6
 80057a0:	f000 f880 	bl	80058a4 <_printf_i>
 80057a4:	e7e4      	b.n	8005770 <_vfiprintf_r+0x208>
 80057a6:	bf00      	nop
 80057a8:	08006150 	.word	0x08006150
 80057ac:	08006170 	.word	0x08006170
 80057b0:	08006130 	.word	0x08006130
 80057b4:	08006190 	.word	0x08006190
 80057b8:	0800619a 	.word	0x0800619a
 80057bc:	00000000 	.word	0x00000000
 80057c0:	08005543 	.word	0x08005543
 80057c4:	08006196 	.word	0x08006196

080057c8 <_printf_common>:
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	4616      	mov	r6, r2
 80057ce:	4699      	mov	r9, r3
 80057d0:	688a      	ldr	r2, [r1, #8]
 80057d2:	690b      	ldr	r3, [r1, #16]
 80057d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057d8:	4293      	cmp	r3, r2
 80057da:	bfb8      	it	lt
 80057dc:	4613      	movlt	r3, r2
 80057de:	6033      	str	r3, [r6, #0]
 80057e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057e4:	4607      	mov	r7, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	b10a      	cbz	r2, 80057ee <_printf_common+0x26>
 80057ea:	3301      	adds	r3, #1
 80057ec:	6033      	str	r3, [r6, #0]
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	0699      	lsls	r1, r3, #26
 80057f2:	bf42      	ittt	mi
 80057f4:	6833      	ldrmi	r3, [r6, #0]
 80057f6:	3302      	addmi	r3, #2
 80057f8:	6033      	strmi	r3, [r6, #0]
 80057fa:	6825      	ldr	r5, [r4, #0]
 80057fc:	f015 0506 	ands.w	r5, r5, #6
 8005800:	d106      	bne.n	8005810 <_printf_common+0x48>
 8005802:	f104 0a19 	add.w	sl, r4, #25
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	6832      	ldr	r2, [r6, #0]
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	42ab      	cmp	r3, r5
 800580e:	dc26      	bgt.n	800585e <_printf_common+0x96>
 8005810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005814:	1e13      	subs	r3, r2, #0
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	bf18      	it	ne
 800581a:	2301      	movne	r3, #1
 800581c:	0692      	lsls	r2, r2, #26
 800581e:	d42b      	bmi.n	8005878 <_printf_common+0xb0>
 8005820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005824:	4649      	mov	r1, r9
 8005826:	4638      	mov	r0, r7
 8005828:	47c0      	blx	r8
 800582a:	3001      	adds	r0, #1
 800582c:	d01e      	beq.n	800586c <_printf_common+0xa4>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	68e5      	ldr	r5, [r4, #12]
 8005832:	6832      	ldr	r2, [r6, #0]
 8005834:	f003 0306 	and.w	r3, r3, #6
 8005838:	2b04      	cmp	r3, #4
 800583a:	bf08      	it	eq
 800583c:	1aad      	subeq	r5, r5, r2
 800583e:	68a3      	ldr	r3, [r4, #8]
 8005840:	6922      	ldr	r2, [r4, #16]
 8005842:	bf0c      	ite	eq
 8005844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005848:	2500      	movne	r5, #0
 800584a:	4293      	cmp	r3, r2
 800584c:	bfc4      	itt	gt
 800584e:	1a9b      	subgt	r3, r3, r2
 8005850:	18ed      	addgt	r5, r5, r3
 8005852:	2600      	movs	r6, #0
 8005854:	341a      	adds	r4, #26
 8005856:	42b5      	cmp	r5, r6
 8005858:	d11a      	bne.n	8005890 <_printf_common+0xc8>
 800585a:	2000      	movs	r0, #0
 800585c:	e008      	b.n	8005870 <_printf_common+0xa8>
 800585e:	2301      	movs	r3, #1
 8005860:	4652      	mov	r2, sl
 8005862:	4649      	mov	r1, r9
 8005864:	4638      	mov	r0, r7
 8005866:	47c0      	blx	r8
 8005868:	3001      	adds	r0, #1
 800586a:	d103      	bne.n	8005874 <_printf_common+0xac>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005874:	3501      	adds	r5, #1
 8005876:	e7c6      	b.n	8005806 <_printf_common+0x3e>
 8005878:	18e1      	adds	r1, r4, r3
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	2030      	movs	r0, #48	; 0x30
 800587e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005882:	4422      	add	r2, r4
 8005884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800588c:	3302      	adds	r3, #2
 800588e:	e7c7      	b.n	8005820 <_printf_common+0x58>
 8005890:	2301      	movs	r3, #1
 8005892:	4622      	mov	r2, r4
 8005894:	4649      	mov	r1, r9
 8005896:	4638      	mov	r0, r7
 8005898:	47c0      	blx	r8
 800589a:	3001      	adds	r0, #1
 800589c:	d0e6      	beq.n	800586c <_printf_common+0xa4>
 800589e:	3601      	adds	r6, #1
 80058a0:	e7d9      	b.n	8005856 <_printf_common+0x8e>
	...

080058a4 <_printf_i>:
 80058a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	460c      	mov	r4, r1
 80058aa:	4691      	mov	r9, r2
 80058ac:	7e27      	ldrb	r7, [r4, #24]
 80058ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058b0:	2f78      	cmp	r7, #120	; 0x78
 80058b2:	4680      	mov	r8, r0
 80058b4:	469a      	mov	sl, r3
 80058b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058ba:	d807      	bhi.n	80058cc <_printf_i+0x28>
 80058bc:	2f62      	cmp	r7, #98	; 0x62
 80058be:	d80a      	bhi.n	80058d6 <_printf_i+0x32>
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	f000 80d8 	beq.w	8005a76 <_printf_i+0x1d2>
 80058c6:	2f58      	cmp	r7, #88	; 0x58
 80058c8:	f000 80a3 	beq.w	8005a12 <_printf_i+0x16e>
 80058cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058d4:	e03a      	b.n	800594c <_printf_i+0xa8>
 80058d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058da:	2b15      	cmp	r3, #21
 80058dc:	d8f6      	bhi.n	80058cc <_printf_i+0x28>
 80058de:	a001      	add	r0, pc, #4	; (adr r0, 80058e4 <_printf_i+0x40>)
 80058e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058e4:	0800593d 	.word	0x0800593d
 80058e8:	08005951 	.word	0x08005951
 80058ec:	080058cd 	.word	0x080058cd
 80058f0:	080058cd 	.word	0x080058cd
 80058f4:	080058cd 	.word	0x080058cd
 80058f8:	080058cd 	.word	0x080058cd
 80058fc:	08005951 	.word	0x08005951
 8005900:	080058cd 	.word	0x080058cd
 8005904:	080058cd 	.word	0x080058cd
 8005908:	080058cd 	.word	0x080058cd
 800590c:	080058cd 	.word	0x080058cd
 8005910:	08005a5d 	.word	0x08005a5d
 8005914:	08005981 	.word	0x08005981
 8005918:	08005a3f 	.word	0x08005a3f
 800591c:	080058cd 	.word	0x080058cd
 8005920:	080058cd 	.word	0x080058cd
 8005924:	08005a7f 	.word	0x08005a7f
 8005928:	080058cd 	.word	0x080058cd
 800592c:	08005981 	.word	0x08005981
 8005930:	080058cd 	.word	0x080058cd
 8005934:	080058cd 	.word	0x080058cd
 8005938:	08005a47 	.word	0x08005a47
 800593c:	680b      	ldr	r3, [r1, #0]
 800593e:	1d1a      	adds	r2, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	600a      	str	r2, [r1, #0]
 8005944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800594c:	2301      	movs	r3, #1
 800594e:	e0a3      	b.n	8005a98 <_printf_i+0x1f4>
 8005950:	6825      	ldr	r5, [r4, #0]
 8005952:	6808      	ldr	r0, [r1, #0]
 8005954:	062e      	lsls	r6, r5, #24
 8005956:	f100 0304 	add.w	r3, r0, #4
 800595a:	d50a      	bpl.n	8005972 <_printf_i+0xce>
 800595c:	6805      	ldr	r5, [r0, #0]
 800595e:	600b      	str	r3, [r1, #0]
 8005960:	2d00      	cmp	r5, #0
 8005962:	da03      	bge.n	800596c <_printf_i+0xc8>
 8005964:	232d      	movs	r3, #45	; 0x2d
 8005966:	426d      	negs	r5, r5
 8005968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800596c:	485e      	ldr	r0, [pc, #376]	; (8005ae8 <_printf_i+0x244>)
 800596e:	230a      	movs	r3, #10
 8005970:	e019      	b.n	80059a6 <_printf_i+0x102>
 8005972:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005976:	6805      	ldr	r5, [r0, #0]
 8005978:	600b      	str	r3, [r1, #0]
 800597a:	bf18      	it	ne
 800597c:	b22d      	sxthne	r5, r5
 800597e:	e7ef      	b.n	8005960 <_printf_i+0xbc>
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	6825      	ldr	r5, [r4, #0]
 8005984:	1d18      	adds	r0, r3, #4
 8005986:	6008      	str	r0, [r1, #0]
 8005988:	0628      	lsls	r0, r5, #24
 800598a:	d501      	bpl.n	8005990 <_printf_i+0xec>
 800598c:	681d      	ldr	r5, [r3, #0]
 800598e:	e002      	b.n	8005996 <_printf_i+0xf2>
 8005990:	0669      	lsls	r1, r5, #25
 8005992:	d5fb      	bpl.n	800598c <_printf_i+0xe8>
 8005994:	881d      	ldrh	r5, [r3, #0]
 8005996:	4854      	ldr	r0, [pc, #336]	; (8005ae8 <_printf_i+0x244>)
 8005998:	2f6f      	cmp	r7, #111	; 0x6f
 800599a:	bf0c      	ite	eq
 800599c:	2308      	moveq	r3, #8
 800599e:	230a      	movne	r3, #10
 80059a0:	2100      	movs	r1, #0
 80059a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059a6:	6866      	ldr	r6, [r4, #4]
 80059a8:	60a6      	str	r6, [r4, #8]
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	bfa2      	ittt	ge
 80059ae:	6821      	ldrge	r1, [r4, #0]
 80059b0:	f021 0104 	bicge.w	r1, r1, #4
 80059b4:	6021      	strge	r1, [r4, #0]
 80059b6:	b90d      	cbnz	r5, 80059bc <_printf_i+0x118>
 80059b8:	2e00      	cmp	r6, #0
 80059ba:	d04d      	beq.n	8005a58 <_printf_i+0x1b4>
 80059bc:	4616      	mov	r6, r2
 80059be:	fbb5 f1f3 	udiv	r1, r5, r3
 80059c2:	fb03 5711 	mls	r7, r3, r1, r5
 80059c6:	5dc7      	ldrb	r7, [r0, r7]
 80059c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059cc:	462f      	mov	r7, r5
 80059ce:	42bb      	cmp	r3, r7
 80059d0:	460d      	mov	r5, r1
 80059d2:	d9f4      	bls.n	80059be <_printf_i+0x11a>
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d10b      	bne.n	80059f0 <_printf_i+0x14c>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	07df      	lsls	r7, r3, #31
 80059dc:	d508      	bpl.n	80059f0 <_printf_i+0x14c>
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	6861      	ldr	r1, [r4, #4]
 80059e2:	4299      	cmp	r1, r3
 80059e4:	bfde      	ittt	le
 80059e6:	2330      	movle	r3, #48	; 0x30
 80059e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80059f0:	1b92      	subs	r2, r2, r6
 80059f2:	6122      	str	r2, [r4, #16]
 80059f4:	f8cd a000 	str.w	sl, [sp]
 80059f8:	464b      	mov	r3, r9
 80059fa:	aa03      	add	r2, sp, #12
 80059fc:	4621      	mov	r1, r4
 80059fe:	4640      	mov	r0, r8
 8005a00:	f7ff fee2 	bl	80057c8 <_printf_common>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d14c      	bne.n	8005aa2 <_printf_i+0x1fe>
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a0c:	b004      	add	sp, #16
 8005a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a12:	4835      	ldr	r0, [pc, #212]	; (8005ae8 <_printf_i+0x244>)
 8005a14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	680e      	ldr	r6, [r1, #0]
 8005a1c:	061f      	lsls	r7, r3, #24
 8005a1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a22:	600e      	str	r6, [r1, #0]
 8005a24:	d514      	bpl.n	8005a50 <_printf_i+0x1ac>
 8005a26:	07d9      	lsls	r1, r3, #31
 8005a28:	bf44      	itt	mi
 8005a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a2e:	6023      	strmi	r3, [r4, #0]
 8005a30:	b91d      	cbnz	r5, 8005a3a <_printf_i+0x196>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f023 0320 	bic.w	r3, r3, #32
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	e7b0      	b.n	80059a0 <_printf_i+0xfc>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f043 0320 	orr.w	r3, r3, #32
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	2378      	movs	r3, #120	; 0x78
 8005a48:	4828      	ldr	r0, [pc, #160]	; (8005aec <_printf_i+0x248>)
 8005a4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a4e:	e7e3      	b.n	8005a18 <_printf_i+0x174>
 8005a50:	065e      	lsls	r6, r3, #25
 8005a52:	bf48      	it	mi
 8005a54:	b2ad      	uxthmi	r5, r5
 8005a56:	e7e6      	b.n	8005a26 <_printf_i+0x182>
 8005a58:	4616      	mov	r6, r2
 8005a5a:	e7bb      	b.n	80059d4 <_printf_i+0x130>
 8005a5c:	680b      	ldr	r3, [r1, #0]
 8005a5e:	6826      	ldr	r6, [r4, #0]
 8005a60:	6960      	ldr	r0, [r4, #20]
 8005a62:	1d1d      	adds	r5, r3, #4
 8005a64:	600d      	str	r5, [r1, #0]
 8005a66:	0635      	lsls	r5, r6, #24
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0x1cc>
 8005a6c:	6018      	str	r0, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0x1d2>
 8005a70:	0671      	lsls	r1, r6, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0x1c8>
 8005a74:	8018      	strh	r0, [r3, #0]
 8005a76:	2300      	movs	r3, #0
 8005a78:	6123      	str	r3, [r4, #16]
 8005a7a:	4616      	mov	r6, r2
 8005a7c:	e7ba      	b.n	80059f4 <_printf_i+0x150>
 8005a7e:	680b      	ldr	r3, [r1, #0]
 8005a80:	1d1a      	adds	r2, r3, #4
 8005a82:	600a      	str	r2, [r1, #0]
 8005a84:	681e      	ldr	r6, [r3, #0]
 8005a86:	6862      	ldr	r2, [r4, #4]
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7fa fbb0 	bl	80001f0 <memchr>
 8005a90:	b108      	cbz	r0, 8005a96 <_printf_i+0x1f2>
 8005a92:	1b80      	subs	r0, r0, r6
 8005a94:	6060      	str	r0, [r4, #4]
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa0:	e7a8      	b.n	80059f4 <_printf_i+0x150>
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	47d0      	blx	sl
 8005aac:	3001      	adds	r0, #1
 8005aae:	d0ab      	beq.n	8005a08 <_printf_i+0x164>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	079b      	lsls	r3, r3, #30
 8005ab4:	d413      	bmi.n	8005ade <_printf_i+0x23a>
 8005ab6:	68e0      	ldr	r0, [r4, #12]
 8005ab8:	9b03      	ldr	r3, [sp, #12]
 8005aba:	4298      	cmp	r0, r3
 8005abc:	bfb8      	it	lt
 8005abe:	4618      	movlt	r0, r3
 8005ac0:	e7a4      	b.n	8005a0c <_printf_i+0x168>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d09b      	beq.n	8005a08 <_printf_i+0x164>
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	9903      	ldr	r1, [sp, #12]
 8005ad6:	1a5b      	subs	r3, r3, r1
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dcf2      	bgt.n	8005ac2 <_printf_i+0x21e>
 8005adc:	e7eb      	b.n	8005ab6 <_printf_i+0x212>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	f104 0619 	add.w	r6, r4, #25
 8005ae4:	e7f5      	b.n	8005ad2 <_printf_i+0x22e>
 8005ae6:	bf00      	nop
 8005ae8:	080061a1 	.word	0x080061a1
 8005aec:	080061b2 	.word	0x080061b2

08005af0 <_putc_r>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	460d      	mov	r5, r1
 8005af4:	4614      	mov	r4, r2
 8005af6:	4606      	mov	r6, r0
 8005af8:	b118      	cbz	r0, 8005b02 <_putc_r+0x12>
 8005afa:	6983      	ldr	r3, [r0, #24]
 8005afc:	b90b      	cbnz	r3, 8005b02 <_putc_r+0x12>
 8005afe:	f7ff faf5 	bl	80050ec <__sinit>
 8005b02:	4b1c      	ldr	r3, [pc, #112]	; (8005b74 <_putc_r+0x84>)
 8005b04:	429c      	cmp	r4, r3
 8005b06:	d124      	bne.n	8005b52 <_putc_r+0x62>
 8005b08:	6874      	ldr	r4, [r6, #4]
 8005b0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0c:	07d8      	lsls	r0, r3, #31
 8005b0e:	d405      	bmi.n	8005b1c <_putc_r+0x2c>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	0599      	lsls	r1, r3, #22
 8005b14:	d402      	bmi.n	8005b1c <_putc_r+0x2c>
 8005b16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b18:	f7ff fbe3 	bl	80052e2 <__retarget_lock_acquire_recursive>
 8005b1c:	68a3      	ldr	r3, [r4, #8]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	60a3      	str	r3, [r4, #8]
 8005b24:	da05      	bge.n	8005b32 <_putc_r+0x42>
 8005b26:	69a2      	ldr	r2, [r4, #24]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	db1c      	blt.n	8005b66 <_putc_r+0x76>
 8005b2c:	b2eb      	uxtb	r3, r5
 8005b2e:	2b0a      	cmp	r3, #10
 8005b30:	d019      	beq.n	8005b66 <_putc_r+0x76>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	6022      	str	r2, [r4, #0]
 8005b38:	701d      	strb	r5, [r3, #0]
 8005b3a:	b2ed      	uxtb	r5, r5
 8005b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b3e:	07da      	lsls	r2, r3, #31
 8005b40:	d405      	bmi.n	8005b4e <_putc_r+0x5e>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	059b      	lsls	r3, r3, #22
 8005b46:	d402      	bmi.n	8005b4e <_putc_r+0x5e>
 8005b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b4a:	f7ff fbcb 	bl	80052e4 <__retarget_lock_release_recursive>
 8005b4e:	4628      	mov	r0, r5
 8005b50:	bd70      	pop	{r4, r5, r6, pc}
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <_putc_r+0x88>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d101      	bne.n	8005b5c <_putc_r+0x6c>
 8005b58:	68b4      	ldr	r4, [r6, #8]
 8005b5a:	e7d6      	b.n	8005b0a <_putc_r+0x1a>
 8005b5c:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <_putc_r+0x8c>)
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	bf08      	it	eq
 8005b62:	68f4      	ldreq	r4, [r6, #12]
 8005b64:	e7d1      	b.n	8005b0a <_putc_r+0x1a>
 8005b66:	4629      	mov	r1, r5
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff f8d2 	bl	8004d14 <__swbuf_r>
 8005b70:	4605      	mov	r5, r0
 8005b72:	e7e3      	b.n	8005b3c <_putc_r+0x4c>
 8005b74:	08006150 	.word	0x08006150
 8005b78:	08006170 	.word	0x08006170
 8005b7c:	08006130 	.word	0x08006130

08005b80 <__srget_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	460c      	mov	r4, r1
 8005b84:	4605      	mov	r5, r0
 8005b86:	b118      	cbz	r0, 8005b90 <__srget_r+0x10>
 8005b88:	6983      	ldr	r3, [r0, #24]
 8005b8a:	b90b      	cbnz	r3, 8005b90 <__srget_r+0x10>
 8005b8c:	f7ff faae 	bl	80050ec <__sinit>
 8005b90:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <__srget_r+0x4c>)
 8005b92:	429c      	cmp	r4, r3
 8005b94:	d10d      	bne.n	8005bb2 <__srget_r+0x32>
 8005b96:	686c      	ldr	r4, [r5, #4]
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 f8ee 	bl	8005d7c <__srefill_r>
 8005ba0:	b988      	cbnz	r0, 8005bc6 <__srget_r+0x46>
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	6063      	str	r3, [r4, #4]
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	6022      	str	r2, [r4, #0]
 8005bae:	7818      	ldrb	r0, [r3, #0]
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <__srget_r+0x50>)
 8005bb4:	429c      	cmp	r4, r3
 8005bb6:	d101      	bne.n	8005bbc <__srget_r+0x3c>
 8005bb8:	68ac      	ldr	r4, [r5, #8]
 8005bba:	e7ed      	b.n	8005b98 <__srget_r+0x18>
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <__srget_r+0x54>)
 8005bbe:	429c      	cmp	r4, r3
 8005bc0:	bf08      	it	eq
 8005bc2:	68ec      	ldreq	r4, [r5, #12]
 8005bc4:	e7e8      	b.n	8005b98 <__srget_r+0x18>
 8005bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bca:	e7f1      	b.n	8005bb0 <__srget_r+0x30>
 8005bcc:	08006150 	.word	0x08006150
 8005bd0:	08006170 	.word	0x08006170
 8005bd4:	08006130 	.word	0x08006130

08005bd8 <_sbrk_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d06      	ldr	r5, [pc, #24]	; (8005bf4 <_sbrk_r+0x1c>)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f000 f954 	bl	8005e90 <_sbrk>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_sbrk_r+0x1a>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_sbrk_r+0x1a>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	200001c4 	.word	0x200001c4

08005bf8 <__sread>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c00:	f000 f8a0 	bl	8005d44 <_read_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	bfab      	itete	ge
 8005c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c0c:	181b      	addge	r3, r3, r0
 8005c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c12:	bfac      	ite	ge
 8005c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c16:	81a3      	strhlt	r3, [r4, #12]
 8005c18:	bd10      	pop	{r4, pc}

08005c1a <__swrite>:
 8005c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	461f      	mov	r7, r3
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	05db      	lsls	r3, r3, #23
 8005c24:	4605      	mov	r5, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	4616      	mov	r6, r2
 8005c2a:	d505      	bpl.n	8005c38 <__swrite+0x1e>
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	2302      	movs	r3, #2
 8005c32:	2200      	movs	r2, #0
 8005c34:	f000 f868 	bl	8005d08 <_lseek_r>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	4628      	mov	r0, r5
 8005c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4e:	f000 b817 	b.w	8005c80 <_write_r>

08005c52 <__sseek>:
 8005c52:	b510      	push	{r4, lr}
 8005c54:	460c      	mov	r4, r1
 8005c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5a:	f000 f855 	bl	8005d08 <_lseek_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	bf15      	itete	ne
 8005c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c6e:	81a3      	strheq	r3, [r4, #12]
 8005c70:	bf18      	it	ne
 8005c72:	81a3      	strhne	r3, [r4, #12]
 8005c74:	bd10      	pop	{r4, pc}

08005c76 <__sclose>:
 8005c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7a:	f000 b813 	b.w	8005ca4 <_close_r>
	...

08005c80 <_write_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4d07      	ldr	r5, [pc, #28]	; (8005ca0 <_write_r+0x20>)
 8005c84:	4604      	mov	r4, r0
 8005c86:	4608      	mov	r0, r1
 8005c88:	4611      	mov	r1, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	602a      	str	r2, [r5, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f7fb f958 	bl	8000f44 <_write>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_write_r+0x1e>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_write_r+0x1e>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	200001c4 	.word	0x200001c4

08005ca4 <_close_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d06      	ldr	r5, [pc, #24]	; (8005cc0 <_close_r+0x1c>)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	f7fb f974 	bl	8000f9c <_close>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_close_r+0x1a>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_close_r+0x1a>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	200001c4 	.word	0x200001c4

08005cc4 <_fstat_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d07      	ldr	r5, [pc, #28]	; (8005ce4 <_fstat_r+0x20>)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	f7fb f9b3 	bl	800103c <_fstat>
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	d102      	bne.n	8005ce0 <_fstat_r+0x1c>
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	b103      	cbz	r3, 8005ce0 <_fstat_r+0x1c>
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	bd38      	pop	{r3, r4, r5, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200001c4 	.word	0x200001c4

08005ce8 <_isatty_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d06      	ldr	r5, [pc, #24]	; (8005d04 <_isatty_r+0x1c>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	f7fb f910 	bl	8000f18 <_isatty>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_isatty_r+0x1a>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_isatty_r+0x1a>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200001c4 	.word	0x200001c4

08005d08 <_lseek_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d07      	ldr	r5, [pc, #28]	; (8005d28 <_lseek_r+0x20>)
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fb f957 	bl	8000fca <_lseek>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_lseek_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_lseek_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200001c4 	.word	0x200001c4

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f7ff bad8 	b.w	80052e2 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	200001bc 	.word	0x200001bc

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f7ff bad3 	b.w	80052e4 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	200001bc 	.word	0x200001bc

08005d44 <_read_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d07      	ldr	r5, [pc, #28]	; (8005d64 <_read_r+0x20>)
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	602a      	str	r2, [r5, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f7fb f94a 	bl	8000fec <_read>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_read_r+0x1e>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_read_r+0x1e>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	200001c4 	.word	0x200001c4

08005d68 <lflush>:
 8005d68:	8983      	ldrh	r3, [r0, #12]
 8005d6a:	f003 0309 	and.w	r3, r3, #9
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	d101      	bne.n	8005d76 <lflush+0xe>
 8005d72:	f7ff b951 	b.w	8005018 <fflush>
 8005d76:	2000      	movs	r0, #0
 8005d78:	4770      	bx	lr
	...

08005d7c <__srefill_r>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	460c      	mov	r4, r1
 8005d80:	4605      	mov	r5, r0
 8005d82:	b118      	cbz	r0, 8005d8c <__srefill_r+0x10>
 8005d84:	6983      	ldr	r3, [r0, #24]
 8005d86:	b90b      	cbnz	r3, 8005d8c <__srefill_r+0x10>
 8005d88:	f7ff f9b0 	bl	80050ec <__sinit>
 8005d8c:	4b3b      	ldr	r3, [pc, #236]	; (8005e7c <__srefill_r+0x100>)
 8005d8e:	429c      	cmp	r4, r3
 8005d90:	d10a      	bne.n	8005da8 <__srefill_r+0x2c>
 8005d92:	686c      	ldr	r4, [r5, #4]
 8005d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6063      	str	r3, [r4, #4]
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	069e      	lsls	r6, r3, #26
 8005da0:	d50c      	bpl.n	8005dbc <__srefill_r+0x40>
 8005da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005da6:	e066      	b.n	8005e76 <__srefill_r+0xfa>
 8005da8:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <__srefill_r+0x104>)
 8005daa:	429c      	cmp	r4, r3
 8005dac:	d101      	bne.n	8005db2 <__srefill_r+0x36>
 8005dae:	68ac      	ldr	r4, [r5, #8]
 8005db0:	e7f0      	b.n	8005d94 <__srefill_r+0x18>
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <__srefill_r+0x108>)
 8005db4:	429c      	cmp	r4, r3
 8005db6:	bf08      	it	eq
 8005db8:	68ec      	ldreq	r4, [r5, #12]
 8005dba:	e7eb      	b.n	8005d94 <__srefill_r+0x18>
 8005dbc:	0758      	lsls	r0, r3, #29
 8005dbe:	d448      	bmi.n	8005e52 <__srefill_r+0xd6>
 8005dc0:	06d9      	lsls	r1, r3, #27
 8005dc2:	d405      	bmi.n	8005dd0 <__srefill_r+0x54>
 8005dc4:	2309      	movs	r3, #9
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	e7e8      	b.n	8005da2 <__srefill_r+0x26>
 8005dd0:	071a      	lsls	r2, r3, #28
 8005dd2:	d50b      	bpl.n	8005dec <__srefill_r+0x70>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f7ff f8e2 	bl	8004fa0 <_fflush_r>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d1e0      	bne.n	8005da2 <__srefill_r+0x26>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	60a0      	str	r0, [r4, #8]
 8005de4:	f023 0308 	bic.w	r3, r3, #8
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	61a0      	str	r0, [r4, #24]
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	f043 0304 	orr.w	r3, r3, #4
 8005df2:	81a3      	strh	r3, [r4, #12]
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	b91b      	cbnz	r3, 8005e00 <__srefill_r+0x84>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f7ff fa98 	bl	8005330 <__smakebuf_r>
 8005e00:	89a6      	ldrh	r6, [r4, #12]
 8005e02:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005e06:	07b3      	lsls	r3, r6, #30
 8005e08:	d00f      	beq.n	8005e2a <__srefill_r+0xae>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	81a3      	strh	r3, [r4, #12]
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <__srefill_r+0x10c>)
 8005e10:	491e      	ldr	r1, [pc, #120]	; (8005e8c <__srefill_r+0x110>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	f006 0609 	and.w	r6, r6, #9
 8005e18:	f7ff f9e6 	bl	80051e8 <_fwalk>
 8005e1c:	2e09      	cmp	r6, #9
 8005e1e:	81a7      	strh	r7, [r4, #12]
 8005e20:	d103      	bne.n	8005e2a <__srefill_r+0xae>
 8005e22:	4621      	mov	r1, r4
 8005e24:	4628      	mov	r0, r5
 8005e26:	f7ff f835 	bl	8004e94 <__sflush_r>
 8005e2a:	6922      	ldr	r2, [r4, #16]
 8005e2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e2e:	6963      	ldr	r3, [r4, #20]
 8005e30:	6a21      	ldr	r1, [r4, #32]
 8005e32:	6022      	str	r2, [r4, #0]
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b0      	blx	r6
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	6060      	str	r0, [r4, #4]
 8005e3c:	dc1c      	bgt.n	8005e78 <__srefill_r+0xfc>
 8005e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e42:	bf17      	itett	ne
 8005e44:	2200      	movne	r2, #0
 8005e46:	f043 0320 	orreq.w	r3, r3, #32
 8005e4a:	6062      	strne	r2, [r4, #4]
 8005e4c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005e50:	e7bc      	b.n	8005dcc <__srefill_r+0x50>
 8005e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e54:	2900      	cmp	r1, #0
 8005e56:	d0cd      	beq.n	8005df4 <__srefill_r+0x78>
 8005e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e5c:	4299      	cmp	r1, r3
 8005e5e:	d002      	beq.n	8005e66 <__srefill_r+0xea>
 8005e60:	4628      	mov	r0, r5
 8005e62:	f7ff faad 	bl	80053c0 <_free_r>
 8005e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0c0      	beq.n	8005df4 <__srefill_r+0x78>
 8005e72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e7fc      	b.n	8005e76 <__srefill_r+0xfa>
 8005e7c:	08006150 	.word	0x08006150
 8005e80:	08006170 	.word	0x08006170
 8005e84:	08006130 	.word	0x08006130
 8005e88:	08006028 	.word	0x08006028
 8005e8c:	08005d69 	.word	0x08005d69

08005e90 <_sbrk>:
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <_sbrk+0x14>)
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	4602      	mov	r2, r0
 8005e96:	b909      	cbnz	r1, 8005e9c <_sbrk+0xc>
 8005e98:	4903      	ldr	r1, [pc, #12]	; (8005ea8 <_sbrk+0x18>)
 8005e9a:	6019      	str	r1, [r3, #0]
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	4402      	add	r2, r0
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	4770      	bx	lr
 8005ea4:	200000d4 	.word	0x200000d4
 8005ea8:	200001c8 	.word	0x200001c8

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
