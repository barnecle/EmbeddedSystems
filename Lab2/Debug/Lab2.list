
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bdc  08004bdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be4  08004be4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08004c5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004c5c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010758  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002200  00000000  00000000  000307f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000329f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  00033468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b088  00000000  00000000  00033e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3c1  00000000  00000000  0004ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2bbb  00000000  00000000  0005c249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fee04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ac  00000000  00000000  000fee58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ad0 	.word	0x08004ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004ad0 	.word	0x08004ad0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char buf[20];
  char c;
  int i=0;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  int led_on = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb40 	bl	8000c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f867 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8eb 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f8b9 	bl	8000718 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005a6:	482b      	ldr	r0, [pc, #172]	; (8000654 <main+0xcc>)
 80005a8:	f000 f936 	bl	8000818 <RetargetInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\r\nSTM32 $ ");
 80005ac:	482a      	ldr	r0, [pc, #168]	; (8000658 <main+0xd0>)
 80005ae:	f003 f8dd 	bl	800376c <iprintf>
  while (1)
  {
	c = getchar();
 80005b2:	f003 f89d 	bl	80036f0 <getchar>
 80005b6:	4603      	mov	r3, r0
 80005b8:	75fb      	strb	r3, [r7, #23]
	if(c=='\n' || c=='\r'){
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	d002      	beq.n	80005c6 <main+0x3e>
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	2b0d      	cmp	r3, #13
 80005c4:	d12c      	bne.n	8000620 <main+0x98>
		buf[i] = '\0';
 80005c6:	463a      	mov	r2, r7
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	4413      	add	r3, r2
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
		i = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
		if(strcmp(buf,"LON") == 0 && led_on == 0){
 80005d4:	463b      	mov	r3, r7
 80005d6:	4921      	ldr	r1, [pc, #132]	; (800065c <main+0xd4>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fdf9 	bl	80001d0 <strcmp>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d108      	bne.n	80005f6 <main+0x6e>
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d105      	bne.n	80005f6 <main+0x6e>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005ea:	2108      	movs	r1, #8
 80005ec:	481c      	ldr	r0, [pc, #112]	; (8000660 <main+0xd8>)
 80005ee:	f000 fea3 	bl	8001338 <HAL_GPIO_TogglePin>
			led_on = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
		}
		if(strcmp(buf,"LOF") == 0 && led_on == 1){
 80005f6:	463b      	mov	r3, r7
 80005f8:	491a      	ldr	r1, [pc, #104]	; (8000664 <main+0xdc>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fde8 	bl	80001d0 <strcmp>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d108      	bne.n	8000618 <main+0x90>
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d105      	bne.n	8000618 <main+0x90>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800060c:	2108      	movs	r1, #8
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <main+0xd8>)
 8000610:	f000 fe92 	bl	8001338 <HAL_GPIO_TogglePin>
			led_on = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
		}
		printf("\r\nSTM32 $ ");
 8000618:	480f      	ldr	r0, [pc, #60]	; (8000658 <main+0xd0>)
 800061a:	f003 f8a7 	bl	800376c <iprintf>
 800061e:	e018      	b.n	8000652 <main+0xca>
	}
	else{
		putchar(c);
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	4618      	mov	r0, r3
 8000624:	f003 f8ba 	bl	800379c <putchar>
		buf[i%20] = c;
 8000628:	69f9      	ldr	r1, [r7, #28]
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <main+0xe0>)
 800062c:	fb83 2301 	smull	r2, r3, r3, r1
 8000630:	10da      	asrs	r2, r3, #3
 8000632:	17cb      	asrs	r3, r1, #31
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	4613      	mov	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	1aca      	subs	r2, r1, r3
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4413      	add	r3, r2
 8000646:	7dfa      	ldrb	r2, [r7, #23]
 8000648:	f803 2c20 	strb.w	r2, [r3, #-32]
		i++;
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	3301      	adds	r3, #1
 8000650:	61fb      	str	r3, [r7, #28]
	c = getchar();
 8000652:	e7ae      	b.n	80005b2 <main+0x2a>
 8000654:	20000098 	.word	0x20000098
 8000658:	08004ae8 	.word	0x08004ae8
 800065c:	08004af4 	.word	0x08004af4
 8000660:	48000400 	.word	0x48000400
 8000664:	08004af8 	.word	0x08004af8
 8000668:	66666667 	.word	0x66666667

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	; 0x58
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2244      	movs	r2, #68	; 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 f86e 	bl	800375c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000692:	f000 fe89 	bl	80013a8 <HAL_PWREx_ControlVoltageScaling>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800069c:	f000 f8b6 	bl	800080c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a0:	f000 fe64 	bl	800136c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <SystemClock_Config+0xa8>)
 80006a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006aa:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <SystemClock_Config+0xa8>)
 80006ac:	f023 0318 	bic.w	r3, r3, #24
 80006b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006b4:	2314      	movs	r3, #20
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80006c4:	23a0      	movs	r3, #160	; 0xa0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 febf 	bl	8001454 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006dc:	f000 f896 	bl	800080c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	2101      	movs	r1, #1
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fb11 	bl	8001d20 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000704:	f000 f882 	bl	800080c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000708:	f001 fe96 	bl	8002438 <HAL_RCCEx_EnableMSIPLLMode>
}
 800070c:	bf00      	nop
 800070e:	3758      	adds	r7, #88	; 0x58
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART2_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000724:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800075c:	f001 fe7c 	bl	8002458 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f851 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000098 	.word	0x20000098
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_GPIO_Init+0x8c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_GPIO_Init+0x8c>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_GPIO_Init+0x8c>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_GPIO_Init+0x8c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_GPIO_Init+0x8c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_GPIO_Init+0x8c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_GPIO_Init+0x8c>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <MX_GPIO_Init+0x8c>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_GPIO_Init+0x8c>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	480b      	ldr	r0, [pc, #44]	; (8000808 <MX_GPIO_Init+0x90>)
 80007dc:	f000 fd94 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007e0:	2308      	movs	r3, #8
 80007e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0x90>)
 80007f8:	f000 fc14 	bl	8001024 <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <RetargetInit+0x28>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <RetargetInit+0x2c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6898      	ldr	r0, [r3, #8]
 800082c:	2300      	movs	r3, #0
 800082e:	2202      	movs	r2, #2
 8000830:	2100      	movs	r1, #0
 8000832:	f002 ffc9 	bl	80037c8 <setvbuf>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000011c 	.word	0x2000011c
 8000844:	2000000c 	.word	0x2000000c

08000848 <_isatty>:

int _isatty(int fd) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db04      	blt.n	8000860 <_isatty+0x18>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b02      	cmp	r3, #2
 800085a:	dc01      	bgt.n	8000860 <_isatty+0x18>
    return 1;
 800085c:	2301      	movs	r3, #1
 800085e:	e005      	b.n	800086c <_isatty+0x24>

  errno = EBADF;
 8000860:	f002 ff40 	bl	80036e4 <__errno>
 8000864:	4603      	mov	r3, r0
 8000866:	2209      	movs	r2, #9
 8000868:	601a      	str	r2, [r3, #0]
  return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <_write>:

int _write(int fd, char* ptr, int len) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d002      	beq.n	800088c <_write+0x18>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d111      	bne.n	80008b0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <_write+0x54>)
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	b29a      	uxth	r2, r3
 8000894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	f001 fe2b 	bl	80024f4 <HAL_UART_Transmit>
 800089e:	4603      	mov	r3, r0
 80008a0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <_write+0x38>
      return len;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	e008      	b.n	80008be <_write+0x4a>
    else
      return EIO;
 80008ac:	2305      	movs	r3, #5
 80008ae:	e006      	b.n	80008be <_write+0x4a>
  }
  errno = EBADF;
 80008b0:	f002 ff18 	bl	80036e4 <__errno>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2209      	movs	r2, #9
 80008b8:	601a      	str	r2, [r3, #0]
  return -1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000011c 	.word	0x2000011c

080008cc <_close>:

int _close(int fd) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db04      	blt.n	80008e4 <_close+0x18>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	dc01      	bgt.n	80008e4 <_close+0x18>
    return 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	e006      	b.n	80008f2 <_close+0x26>

  errno = EBADF;
 80008e4:	f002 fefe 	bl	80036e4 <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2209      	movs	r2, #9
 80008ec:	601a      	str	r2, [r3, #0]
  return -1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000906:	f002 feed 	bl	80036e4 <__errno>
 800090a:	4603      	mov	r3, r0
 800090c:	2209      	movs	r2, #9
 800090e:	601a      	str	r2, [r3, #0]
  return -1;
 8000910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_read>:

int _read(int fd, char* ptr, int len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d110      	bne.n	8000950 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <_read+0x4c>)
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000936:	2201      	movs	r2, #1
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	f001 fe6f 	bl	800261c <HAL_UART_Receive>
 800093e:	4603      	mov	r3, r0
 8000940:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000942:	7dfb      	ldrb	r3, [r7, #23]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d101      	bne.n	800094c <_read+0x30>
      return 1;
 8000948:	2301      	movs	r3, #1
 800094a:	e008      	b.n	800095e <_read+0x42>
    else
      return EIO;
 800094c:	2305      	movs	r3, #5
 800094e:	e006      	b.n	800095e <_read+0x42>
  }
  errno = EBADF;
 8000950:	f002 fec8 	bl	80036e4 <__errno>
 8000954:	4603      	mov	r3, r0
 8000956:	2209      	movs	r2, #9
 8000958:	601a      	str	r2, [r3, #0]
  return -1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000011c 	.word	0x2000011c

0800096c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db08      	blt.n	800098e <_fstat+0x22>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	dc05      	bgt.n	800098e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000988:	605a      	str	r2, [r3, #4]
    return 0;
 800098a:	2300      	movs	r3, #0
 800098c:	e005      	b.n	800099a <_fstat+0x2e>
  }

  errno = EBADF;
 800098e:	f002 fea9 	bl	80036e4 <__errno>
 8000992:	4603      	mov	r3, r0
 8000994:	2209      	movs	r2, #9
 8000996:	601a      	str	r2, [r3, #0]
  return 0;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6613      	str	r3, [r2, #96]	; 0x60
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6593      	str	r3, [r2, #88]	; 0x58
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b096      	sub	sp, #88	; 0x58
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2234      	movs	r2, #52	; 0x34
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fea5 	bl	800375c <memset>
  if(huart->Instance==USART2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a2c      	ldr	r2, [pc, #176]	; (8000ac8 <HAL_UART_MspInit+0xdc>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d150      	bne.n	8000abe <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fb7f 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a34:	f7ff feea 	bl	800080c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <HAL_UART_MspInit+0xe0>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3c:	4a23      	ldr	r2, [pc, #140]	; (8000acc <HAL_UART_MspInit+0xe0>)
 8000a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a42:	6593      	str	r3, [r2, #88]	; 0x58
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_UART_MspInit+0xe0>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <HAL_UART_MspInit+0xe0>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a54:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <HAL_UART_MspInit+0xe0>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_UART_MspInit+0xe0>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f000 facd 	bl	8001024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fabb 	bl	8001024 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2026      	movs	r0, #38	; 0x26
 8000ab4:	f000 fa01 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab8:	2026      	movs	r0, #38	; 0x26
 8000aba:	f000 fa1a 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3758      	adds	r7, #88	; 0x58
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 f8d2 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <USART2_IRQHandler+0x10>)
 8000b2a:	f001 fe49 	bl	80027c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000098 	.word	0x20000098

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f002 fdbc 	bl	80036e4 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000a000 	.word	0x2000a000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	2000008c 	.word	0x2000008c
 8000ba0:	20000138 	.word	0x20000138

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f002 fd8d 	bl	8003714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fcc5 	bl	8000588 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c0c:	08004bec 	.word	0x08004bec
  ldr r2, =_sbss
 8000c10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c14:	20000134 	.word	0x20000134

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>

08000c1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f93d 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f80e 	bl	8000c4c <HAL_InitTick>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	e001      	b.n	8000c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3c:	f7ff feb2 	bl	80009a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_InitTick+0x70>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f949 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d809      	bhi.n	8000c9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c90:	f000 f913 	bl	8000eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_InitTick+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e001      	b.n	8000cac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000120 	.word	0x20000120

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000120 	.word	0x20000120

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff3e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff31 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d008      	beq.n	8000f50 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2204      	movs	r2, #4
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e022      	b.n	8000f96 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 020e 	bic.w	r2, r2, #14
 8000f5e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f74:	f003 021c 	and.w	r2, r3, #28
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d005      	beq.n	8000fc6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e029      	b.n	800101a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 020e 	bic.w	r2, r2, #14
 8000fd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f003 021c 	and.w	r2, r3, #28
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	4798      	blx	r3
    }
  }
  return status;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e14e      	b.n	80012d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8140 	beq.w	80012cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x40>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 0201 	and.w	r2, r3, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d017      	beq.n	8001102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	6939      	ldr	r1, [r7, #16]
 8001152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0203 	and.w	r2, r3, #3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 809a 	beq.w	80012cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	4b55      	ldr	r3, [pc, #340]	; (80012f0 <HAL_GPIO_Init+0x2cc>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_GPIO_Init+0x2cc>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6613      	str	r3, [r2, #96]	; 0x60
 80011a4:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <HAL_GPIO_Init+0x2cc>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b0:	4a50      	ldr	r2, [pc, #320]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011da:	d013      	beq.n	8001204 <HAL_GPIO_Init+0x1e0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00d      	beq.n	8001200 <HAL_GPIO_Init+0x1dc>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a45      	ldr	r2, [pc, #276]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d007      	beq.n	80011fc <HAL_GPIO_Init+0x1d8>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a44      	ldr	r2, [pc, #272]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_GPIO_Init+0x1d4>
 80011f4:	2303      	movs	r3, #3
 80011f6:	e006      	b.n	8001206 <HAL_GPIO_Init+0x1e2>
 80011f8:	2307      	movs	r3, #7
 80011fa:	e004      	b.n	8001206 <HAL_GPIO_Init+0x1e2>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e002      	b.n	8001206 <HAL_GPIO_Init+0x1e2>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_GPIO_Init+0x1e2>
 8001204:	2300      	movs	r3, #0
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	f002 0203 	and.w	r2, r2, #3
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	4093      	lsls	r3, r2
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001216:	4937      	ldr	r1, [pc, #220]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001224:	4b37      	ldr	r3, [pc, #220]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001248:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001272:	4a24      	ldr	r2, [pc, #144]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f47f aea9 	bne.w	8001034 <HAL_GPIO_Init+0x10>
  }
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	48000800 	.word	0x48000800
 8001300:	48000c00 	.word	0x48000c00
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001324:	e002      	b.n	800132c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43d9      	mvns	r1, r3
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	400b      	ands	r3, r1
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40007000 	.word	0x40007000

080013a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b6:	d130      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013c4:	d038      	beq.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2232      	movs	r2, #50	; 0x32
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9b      	lsrs	r3, r3, #18
 80013e8:	3301      	adds	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ec:	e002      	b.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d102      	bne.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f2      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001414:	d110      	bne.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e00f      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001426:	d007      	beq.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001430:	4a05      	ldr	r2, [pc, #20]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000
 800144c:	20000000 	.word	0x20000000
 8001450:	431bde83 	.word	0x431bde83

08001454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	f000 bc56 	b.w	8001d14 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001468:	4ba1      	ldr	r3, [pc, #644]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001472:	4b9f      	ldr	r3, [pc, #636]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80e6 	beq.w	8001656 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <HAL_RCC_OscConfig+0x4c>
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	f040 808d 	bne.w	80015b2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b01      	cmp	r3, #1
 800149c:	f040 8089 	bne.w	80015b2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a0:	4b93      	ldr	r3, [pc, #588]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_RCC_OscConfig+0x66>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f000 bc2d 	b.w	8001d14 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014be:	4b8c      	ldr	r3, [pc, #560]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <HAL_RCC_OscConfig+0x80>
 80014ca:	4b89      	ldr	r3, [pc, #548]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d2:	e005      	b.n	80014e0 <HAL_RCC_OscConfig+0x8c>
 80014d4:	4b86      	ldr	r3, [pc, #536]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80014d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d224      	bcs.n	800152e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fdbf 	bl	800206c <RCC_SetFlashLatencyFromMSIRange>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f000 bc0d 	b.w	8001d14 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a7c      	ldr	r2, [pc, #496]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	4977      	ldr	r1, [pc, #476]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001518:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	4972      	ldr	r1, [pc, #456]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e025      	b.n	800157a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152e:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6f      	ldr	r2, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	496a      	ldr	r1, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154c:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	4965      	ldr	r1, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fd7e 	bl	800206c <RCC_SetFlashLatencyFromMSIRange>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e3cc      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800157a:	f000 fcb3 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 800157e:	4602      	mov	r2, r0
 8001580:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	495a      	ldr	r1, [pc, #360]	; (80016f4 <HAL_RCC_OscConfig+0x2a0>)
 800158c:	5ccb      	ldrb	r3, [r1, r3]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	fa22 f303 	lsr.w	r3, r2, r3
 8001596:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001598:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800159a:	4b58      	ldr	r3, [pc, #352]	; (80016fc <HAL_RCC_OscConfig+0x2a8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb54 	bl	8000c4c <HAL_InitTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d052      	beq.n	8001654 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	e3b0      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d032      	beq.n	8001620 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a4c      	ldr	r2, [pc, #304]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb91 	bl	8000cec <HAL_GetTick>
 80015ca:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ce:	f7ff fb8d 	bl	8000cec <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e399      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ec:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a3f      	ldr	r2, [pc, #252]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	493a      	ldr	r1, [pc, #232]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	4935      	ldr	r1, [pc, #212]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
 800161e:	e01a      	b.n	8001656 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001620:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb5e 	bl	8000cec <HAL_GetTick>
 8001630:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001634:	f7ff fb5a 	bl	8000cec <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e366      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1e0>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d073      	beq.n	800174a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d005      	beq.n	8001674 <HAL_RCC_OscConfig+0x220>
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d10e      	bne.n	800168c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d10b      	bne.n	800168c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d063      	beq.n	8001748 <HAL_RCC_OscConfig+0x2f4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d15f      	bne.n	8001748 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e343      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d106      	bne.n	80016a4 <HAL_RCC_OscConfig+0x250>
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e01d      	b.n	80016e0 <HAL_RCC_OscConfig+0x28c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x274>
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0x28c>
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 80016da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb00 	bl	8000cec <HAL_GetTick>
 80016ec:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	e010      	b.n	8001712 <HAL_RCC_OscConfig+0x2be>
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08004afc 	.word	0x08004afc
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff faf4 	bl	8000cec <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e300      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001712:	4ba0      	ldr	r3, [pc, #640]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x2ac>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fae4 	bl	8000cec <HAL_GetTick>
 8001724:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fae0 	bl	8000cec <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e2ec      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800173a:	4b96      	ldr	r3, [pc, #600]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x2d4>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d060      	beq.n	8001818 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d005      	beq.n	8001768 <HAL_RCC_OscConfig+0x314>
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d119      	bne.n	8001796 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d116      	bne.n	8001796 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001768:	4b8a      	ldr	r3, [pc, #552]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_OscConfig+0x32c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e2c9      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b84      	ldr	r3, [pc, #528]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	4981      	ldr	r1, [pc, #516]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001794:	e040      	b.n	8001818 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d023      	beq.n	80017e6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179e:	4b7d      	ldr	r3, [pc, #500]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7c      	ldr	r2, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fa9f 	bl	8000cec <HAL_GetTick>
 80017ae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fa9b 	bl	8000cec <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e2a7      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c4:	4b73      	ldr	r3, [pc, #460]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b70      	ldr	r3, [pc, #448]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	496d      	ldr	r1, [pc, #436]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
 80017e4:	e018      	b.n	8001818 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6a      	ldr	r2, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80017ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fa7b 	bl	8000cec <HAL_GetTick>
 80017f6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fa77 	bl	8000cec <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e283      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800180c:	4b61      	ldr	r3, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d07f      	beq.n	8001924 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d05f      	beq.n	80018ec <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001832:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	429a      	cmp	r2, r3
 8001840:	d037      	beq.n	80018b2 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e25c      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186a:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001874:	f7ff fa3a 	bl	8000cec <HAL_GetTick>
 8001878:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff fa36 	bl	8000cec <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b11      	cmp	r3, #17
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e242      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ef      	bne.n	800187c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a2:	f023 0210 	bic.w	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	493a      	ldr	r1, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b8:	4a36      	ldr	r2, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff fa13 	bl	8000cec <HAL_GetTick>
 80018c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa0f 	bl	8000cec <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b11      	cmp	r3, #17
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e21b      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0ef      	beq.n	80018ca <HAL_RCC_OscConfig+0x476>
 80018ea:	e01b      	b.n	8001924 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f9f6 	bl	8000cec <HAL_GetTick>
 8001900:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff f9f2 	bl	8000cec <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b11      	cmp	r3, #17
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1fe      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ef      	bne.n	8001904 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80c1 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10e      	bne.n	8001962 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	4a12      	ldr	r2, [pc, #72]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	; 0x58
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x540>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_RCC_OscConfig+0x544>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d11c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_OscConfig+0x544>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <HAL_RCC_OscConfig+0x544>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7ff f9b7 	bl	8000cec <HAL_GetTick>
 800197e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	e00c      	b.n	800199c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff f9b3 	bl	8000cec <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d905      	bls.n	800199c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1bf      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199c:	4bb1      	ldr	r3, [pc, #708]	; (8001c64 <HAL_RCC_OscConfig+0x810>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ec      	beq.n	8001982 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d02c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80019b4:	4bac      	ldr	r3, [pc, #688]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c6:	49a8      	ldr	r1, [pc, #672]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d010      	beq.n	80019fc <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019da:	4ba3      	ldr	r3, [pc, #652]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e0:	4aa1      	ldr	r2, [pc, #644]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019ea:	4b9f      	ldr	r3, [pc, #636]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 80019ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f0:	4a9d      	ldr	r2, [pc, #628]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fa:	e018      	b.n	8001a2e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019fc:	4b9a      	ldr	r3, [pc, #616]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	4a99      	ldr	r2, [pc, #612]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0c:	e00f      	b.n	8001a2e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a0e:	4b96      	ldr	r3, [pc, #600]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a14:	4a94      	ldr	r2, [pc, #592]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a1e:	4b92      	ldr	r3, [pc, #584]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	4a90      	ldr	r2, [pc, #576]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a26:	f023 0304 	bic.w	r3, r3, #4
 8001a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d016      	beq.n	8001a64 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f959 	bl	8000cec <HAL_GetTick>
 8001a3a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f955 	bl	8000cec <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e15f      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a54:	4b84      	ldr	r3, [pc, #528]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ed      	beq.n	8001a3e <HAL_RCC_OscConfig+0x5ea>
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f942 	bl	8000cec <HAL_GetTick>
 8001a68:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f93e 	bl	8000cec <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e148      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a82:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ed      	bne.n	8001a6c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001a90:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a74      	ldr	r2, [pc, #464]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	4a6e      	ldr	r2, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d03c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ac8:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ace:	4a66      	ldr	r2, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f908 	bl	8000cec <HAL_GetTick>
 8001adc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae0:	f7ff f904 	bl	8000cec <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e110      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af2:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ef      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x68c>
 8001b00:	e01b      	b.n	8001b3a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b02:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b08:	4a57      	ldr	r2, [pc, #348]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff f8eb 	bl	8000cec <HAL_GetTick>
 8001b16:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1a:	f7ff f8e7 	bl	8000cec <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0f3      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ef      	bne.n	8001b1a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80e7 	beq.w	8001d12 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	f040 80b7 	bne.w	8001cbc <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0203 	and.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d124      	bne.n	8001bac <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d11b      	bne.n	8001bac <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d113      	bne.n	8001bac <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	3b01      	subs	r3, #1
 8001b92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d061      	beq.n	8001c70 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d056      	beq.n	8001c60 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2c      	ldr	r2, [pc, #176]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bbe:	f7ff f895 	bl	8000cec <HAL_GetTick>
 8001bc2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7ff f891 	bl	8000cec <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e09d      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_RCC_OscConfig+0x818>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bfe:	0212      	lsls	r2, r2, #8
 8001c00:	4311      	orrs	r1, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c06:	0852      	lsrs	r2, r2, #1
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	0552      	lsls	r2, r2, #21
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c12:	0852      	lsrs	r2, r2, #1
 8001c14:	3a01      	subs	r2, #1
 8001c16:	0652      	lsls	r2, r2, #25
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	4913      	ldr	r1, [pc, #76]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c38:	f7ff f858 	bl	8000cec <HAL_GetTick>
 8001c3c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f854 	bl	8000cec <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e060      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_OscConfig+0x814>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c5e:	e058      	b.n	8001d12 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e057      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
 8001c64:	40007000 	.word	0x40007000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d14a      	bne.n	8001d12 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c94:	f7ff f82a 	bl	8000cec <HAL_GetTick>
 8001c98:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff f826 	bl	8000cec <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e032      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x848>
 8001cba:	e02a      	b.n	8001d12 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d025      	beq.n	8001d0e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001cd4:	f023 0303 	bic.w	r3, r3, #3
 8001cd8:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001ce0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ce4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f801 	bl	8000cec <HAL_GetTick>
 8001cea:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe fffd 	bl	8000cec <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e009      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x8c8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x89a>
 8001d0c:	e001      	b.n	8001d12 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0c8      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d910      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4961      	ldr	r1, [pc, #388]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b0      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d04c      	beq.n	8001e0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d78:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d121      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e09e      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d115      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e092      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da8:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e086      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e07e      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc8:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 0203 	bic.w	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	493f      	ldr	r1, [pc, #252]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dda:	f7fe ff87 	bl	8000cec <HAL_GetTick>
 8001dde:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7fe ff83 	bl	8000cec <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e066      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 020c 	and.w	r2, r3, #12
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d1eb      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	492c      	ldr	r1, [pc, #176]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d210      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4924      	ldr	r1, [pc, #144]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e036      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4918      	ldr	r1, [pc, #96]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4910      	ldr	r1, [pc, #64]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e96:	f000 f825 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fec6 	bl	8000c4c <HAL_InitTick>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08004afc 	.word	0x08004afc
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efc:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x34>
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d121      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d11e      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e005      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f40:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d102      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	e004      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f68:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d134      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d003      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0xac>
 8001f88:	e005      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f8c:	617b      	str	r3, [r7, #20]
      break;
 8001f8e:	e005      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f92:	617b      	str	r3, [r7, #20]
      break;
 8001f94:	e002      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	617b      	str	r3, [r7, #20]
      break;
 8001f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	fb02 f203 	mul.w	r2, r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	0e5b      	lsrs	r3, r3, #25
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08004b14 	.word	0x08004b14
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200

08001ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_GetHCLKFreq+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002018:	f7ff fff0 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_RCC_GetPCLK1Freq+0x28>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08004b0c 	.word	0x08004b0c

08002040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002044:	f7ff ffda 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0adb      	lsrs	r3, r3, #11
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4904      	ldr	r1, [pc, #16]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	08004b0c 	.word	0x08004b0c

0800206c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002084:	f7ff f982 	bl	800138c <HAL_PWREx_GetVoltageRange>
 8002088:	6178      	str	r0, [r7, #20]
 800208a:	e014      	b.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020a4:	f7ff f972 	bl	800138c <HAL_PWREx_GetVoltageRange>
 80020a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020bc:	d10b      	bne.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d919      	bls.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2ba0      	cmp	r3, #160	; 0xa0
 80020c8:	d902      	bls.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ca:	2302      	movs	r3, #2
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e013      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	e010      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d902      	bls.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020dc:	2303      	movs	r3, #3
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	e00a      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b80      	cmp	r3, #128	; 0x80
 80020e6:	d102      	bne.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e8:	2302      	movs	r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e004      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b70      	cmp	r3, #112	; 0x70
 80020f2:	d101      	bne.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 0207 	bic.w	r2, r3, #7
 8002100:	4909      	ldr	r1, [pc, #36]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	40022000 	.word	0x40022000

0800212c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002134:	2300      	movs	r3, #0
 8002136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002138:	2300      	movs	r3, #0
 800213a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 809e 	beq.w	8002286 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800214e:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00d      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b40      	ldr	r3, [pc, #256]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	4a3f      	ldr	r2, [pc, #252]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216e:	6593      	str	r3, [r2, #88]	; 0x58
 8002170:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217c:	2301      	movs	r3, #1
 800217e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a39      	ldr	r2, [pc, #228]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800218c:	f7fe fdae 	bl	8000cec <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002192:	e009      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002194:	f7fe fdaa 	bl	8000cec <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d902      	bls.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	74fb      	strb	r3, [r7, #19]
        break;
 80021a6:	e005      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ef      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d15a      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ba:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01e      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d019      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d016      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe fd6a 	bl	8000cec <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221a:	e00b      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7fe fd66 	bl	8000cec <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d902      	bls.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	74fb      	strb	r3, [r7, #19]
            break;
 8002232:	e006      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0ec      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4904      	ldr	r1, [pc, #16]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800225e:	e009      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	74bb      	strb	r3, [r7, #18]
 8002264:	e006      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002274:	7c7b      	ldrb	r3, [r7, #17]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b6e      	ldr	r3, [pc, #440]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	4a6d      	ldr	r2, [pc, #436]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002292:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f023 0203 	bic.w	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4964      	ldr	r1, [pc, #400]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022b4:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 020c 	bic.w	r2, r3, #12
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	495c      	ldr	r1, [pc, #368]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022d6:	4b57      	ldr	r3, [pc, #348]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4953      	ldr	r1, [pc, #332]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f8:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	494b      	ldr	r1, [pc, #300]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231a:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4942      	ldr	r1, [pc, #264]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800233c:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	493a      	ldr	r1, [pc, #232]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235e:	4b35      	ldr	r3, [pc, #212]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	4931      	ldr	r1, [pc, #196]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002380:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	4929      	ldr	r1, [pc, #164]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	4920      	ldr	r1, [pc, #128]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	4918      	ldr	r1, [pc, #96]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e2:	d105      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	490a      	ldr	r1, [pc, #40]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800241a:	d105      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002426:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002428:	7cbb      	ldrb	r3, [r7, #18]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6013      	str	r3, [r2, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e040      	b.n	80024ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe fab6 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2224      	movs	r2, #36	; 0x24
 8002484:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fc94 	bl	8002dc4 <UART_SetConfig>
 800249c:	4603      	mov	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e022      	b.n	80024ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 febc 	bl	800322c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 ff43 	bl	8003370 <UART_CheckIdleState>
 80024ea:	4603      	mov	r3, r0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002508:	2b20      	cmp	r3, #32
 800250a:	f040 8082 	bne.w	8002612 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_UART_Transmit+0x26>
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07a      	b.n	8002614 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_UART_Transmit+0x38>
 8002528:	2302      	movs	r3, #2
 800252a:	e073      	b.n	8002614 <HAL_UART_Transmit+0x120>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2221      	movs	r2, #33	; 0x21
 8002540:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002542:	f7fe fbd3 	bl	8000cec <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	88fa      	ldrh	r2, [r7, #6]
 800254c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002560:	d108      	bne.n	8002574 <HAL_UART_Transmit+0x80>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e003      	b.n	800257c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002584:	e02d      	b.n	80025e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 ff36 	bl	8003402 <UART_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e039      	b.n	8002614 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10b      	bne.n	80025be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b2:	b292      	uxth	r2, r2
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	3302      	adds	r3, #2
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	e008      	b.n	80025d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b292      	uxth	r2, r2
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1cb      	bne.n	8002586 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 ff02 	bl	8003402 <UART_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e005      	b.n	8002614 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002612:	2302      	movs	r3, #2
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002630:	2b20      	cmp	r3, #32
 8002632:	f040 80bf 	bne.w	80027b4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_UART_Receive+0x26>
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0b7      	b.n	80027b6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_UART_Receive+0x38>
 8002650:	2302      	movs	r3, #2
 8002652:	e0b0      	b.n	80027b6 <HAL_UART_Receive+0x19a>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2222      	movs	r2, #34	; 0x22
 8002668:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002670:	f7fe fb3c 	bl	8000cec <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	88fa      	ldrh	r2, [r7, #6]
 800267a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d10e      	bne.n	80026ae <HAL_UART_Receive+0x92>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_UART_Receive+0x88>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800269e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026a2:	e02d      	b.n	8002700 <HAL_UART_Receive+0xe4>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	22ff      	movs	r2, #255	; 0xff
 80026a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026ac:	e028      	b.n	8002700 <HAL_UART_Receive+0xe4>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_UART_Receive+0xb6>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d104      	bne.n	80026c8 <HAL_UART_Receive+0xac>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	22ff      	movs	r2, #255	; 0xff
 80026c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026c6:	e01b      	b.n	8002700 <HAL_UART_Receive+0xe4>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	227f      	movs	r2, #127	; 0x7f
 80026cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026d0:	e016      	b.n	8002700 <HAL_UART_Receive+0xe4>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026da:	d10d      	bne.n	80026f8 <HAL_UART_Receive+0xdc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <HAL_UART_Receive+0xd2>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	227f      	movs	r2, #127	; 0x7f
 80026e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026ec:	e008      	b.n	8002700 <HAL_UART_Receive+0xe4>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	223f      	movs	r2, #63	; 0x3f
 80026f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026f6:	e003      	b.n	8002700 <HAL_UART_Receive+0xe4>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002706:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	d108      	bne.n	8002724 <HAL_UART_Receive+0x108>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e003      	b.n	800272c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002734:	e033      	b.n	800279e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	2120      	movs	r1, #32
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fe5e 	bl	8003402 <UART_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e032      	b.n	80027b6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10c      	bne.n	8002770 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800275c:	b29a      	uxth	r2, r3
 800275e:	8a7b      	ldrh	r3, [r7, #18]
 8002760:	4013      	ands	r3, r2
 8002762:	b29a      	uxth	r2, r3
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	3302      	adds	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e00d      	b.n	800278c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002776:	b29b      	uxth	r3, r3
 8002778:	b2da      	uxtb	r2, r3
 800277a:	8a7b      	ldrh	r3, [r7, #18]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4013      	ands	r3, r2
 8002780:	b2da      	uxtb	r2, r3
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1c5      	bne.n	8002736 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0ba      	sub	sp, #232	; 0xe8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80027ee:	4013      	ands	r3, r2
 80027f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80027f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d115      	bne.n	8002828 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00f      	beq.n	8002828 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 82a6 	beq.w	8002d6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
      }
      return;
 8002826:	e2a0      	b.n	8002d6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8117 	beq.w	8002a60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800283e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002842:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <HAL_UART_IRQHandler+0x298>)
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 810a 	beq.w	8002a60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800284c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d011      	beq.n	800287c <HAL_UART_IRQHandler+0xbc>
 8002858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d011      	beq.n	80028ac <HAL_UART_IRQHandler+0xec>
 8002888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2202      	movs	r2, #2
 800289a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028a2:	f043 0204 	orr.w	r2, r3, #4
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d011      	beq.n	80028dc <HAL_UART_IRQHandler+0x11c>
 80028b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2204      	movs	r2, #4
 80028ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2208      	movs	r2, #8
 8002906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290e:	f043 0208 	orr.w	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_UART_IRQHandler+0x18a>
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 820c 	beq.w	8002d6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d005      	beq.n	80029a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800299a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04f      	beq.n	8002a42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fdf1 	bl	800358a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d141      	bne.n	8002a3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3308      	adds	r3, #8
 80029bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3308      	adds	r3, #8
 80029de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1d9      	bne.n	80029b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <HAL_UART_IRQHandler+0x29c>)
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fac3 	bl	8000fa2 <HAL_DMA_Abort_IT>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d017      	beq.n	8002a52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a30:	e00f      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9b0 	bl	8002d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	e00b      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9ac 	bl	8002d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	e007      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9a8 	bl	8002d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002a50:	e18d      	b.n	8002d6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a52:	bf00      	nop
    return;
 8002a54:	e18b      	b.n	8002d6e <HAL_UART_IRQHandler+0x5ae>
 8002a56:	bf00      	nop
 8002a58:	04000120 	.word	0x04000120
 8002a5c:	08003651 	.word	0x08003651

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 8146 	bne.w	8002cf6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 813f 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8138 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	f040 80b4 	bne.w	8002c06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 815f 	beq.w	8002d72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	f080 8157 	bcs.w	8002d72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8085 	bne.w	8002bea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1da      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3308      	adds	r3, #8
 8002b30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b34:	e853 3f00 	ldrex	r3, [r3]
 8002b38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3308      	adds	r3, #8
 8002b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e1      	bne.n	8002b2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3308      	adds	r3, #8
 8002b86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e3      	bne.n	8002b66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bba:	f023 0310 	bic.w	r3, r3, #16
 8002bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e4      	bne.n	8002baa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe f99e 	bl	8000f26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8d4 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c04:	e0b5      	b.n	8002d72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80a7 	beq.w	8002d76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a2 	beq.w	8002d76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	e853 3f00 	ldrex	r3, [r3]
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
 8002c56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5c:	e841 2300 	strex	r3, r2, [r1]
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e4      	bne.n	8002c32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	e853 3f00 	ldrex	r3, [r3]
 8002c76:	623b      	str	r3, [r7, #32]
   return(result);
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3308      	adds	r3, #8
 8002c88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c8c:	633a      	str	r2, [r7, #48]	; 0x30
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e3      	bne.n	8002c68 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0310 	bic.w	r3, r3, #16
 8002cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e4      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f85c 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cf4:	e03f      	b.n	8002d76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00e      	beq.n	8002d20 <HAL_UART_IRQHandler+0x560>
 8002d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fcd9 	bl	80036d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d1e:	e02d      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01c      	beq.n	8002d7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
    }
    return;
 8002d48:	e017      	b.n	8002d7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d012      	beq.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
 8002d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fc8a 	bl	800367c <UART_EndTransmit_IT>
    return;
 8002d68:	e008      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d6a:	bf00      	nop
 8002d6c:	e006      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d6e:	bf00      	nop
 8002d70:	e004      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d7c:	37e8      	adds	r7, #232	; 0xe8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop

08002d84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b5b0      	push	{r4, r5, r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4baa      	ldr	r3, [pc, #680]	; (8003098 <UART_SetConfig+0x2d4>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	69f9      	ldr	r1, [r7, #28]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a9f      	ldr	r2, [pc, #636]	; (800309c <UART_SetConfig+0x2d8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a96      	ldr	r2, [pc, #600]	; (80030a0 <UART_SetConfig+0x2dc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d121      	bne.n	8002e8e <UART_SetConfig+0xca>
 8002e4a:	4b96      	ldr	r3, [pc, #600]	; (80030a4 <UART_SetConfig+0x2e0>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d817      	bhi.n	8002e88 <UART_SetConfig+0xc4>
 8002e58:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <UART_SetConfig+0x9c>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e7d 	.word	0x08002e7d
 8002e68:	08002e77 	.word	0x08002e77
 8002e6c:	08002e83 	.word	0x08002e83
 8002e70:	2301      	movs	r3, #1
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e096      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002e76:	2302      	movs	r3, #2
 8002e78:	76fb      	strb	r3, [r7, #27]
 8002e7a:	e093      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	76fb      	strb	r3, [r7, #27]
 8002e80:	e090      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002e82:	2308      	movs	r3, #8
 8002e84:	76fb      	strb	r3, [r7, #27]
 8002e86:	e08d      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	76fb      	strb	r3, [r7, #27]
 8002e8c:	e08a      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a85      	ldr	r2, [pc, #532]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d132      	bne.n	8002efe <UART_SetConfig+0x13a>
 8002e98:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <UART_SetConfig+0x2e0>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d828      	bhi.n	8002ef8 <UART_SetConfig+0x134>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <UART_SetConfig+0xe8>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ef9 	.word	0x08002ef9
 8002eb4:	08002ef9 	.word	0x08002ef9
 8002eb8:	08002ef9 	.word	0x08002ef9
 8002ebc:	08002eed 	.word	0x08002eed
 8002ec0:	08002ef9 	.word	0x08002ef9
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	08002ef9 	.word	0x08002ef9
 8002ecc:	08002ee7 	.word	0x08002ee7
 8002ed0:	08002ef9 	.word	0x08002ef9
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002ef9 	.word	0x08002ef9
 8002edc:	08002ef3 	.word	0x08002ef3
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e05e      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	76fb      	strb	r3, [r7, #27]
 8002eea:	e05b      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002eec:	2304      	movs	r3, #4
 8002eee:	76fb      	strb	r3, [r7, #27]
 8002ef0:	e058      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	76fb      	strb	r3, [r7, #27]
 8002ef6:	e055      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	76fb      	strb	r3, [r7, #27]
 8002efc:	e052      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6a      	ldr	r2, [pc, #424]	; (80030ac <UART_SetConfig+0x2e8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d120      	bne.n	8002f4a <UART_SetConfig+0x186>
 8002f08:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <UART_SetConfig+0x2e0>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f12:	2b30      	cmp	r3, #48	; 0x30
 8002f14:	d013      	beq.n	8002f3e <UART_SetConfig+0x17a>
 8002f16:	2b30      	cmp	r3, #48	; 0x30
 8002f18:	d814      	bhi.n	8002f44 <UART_SetConfig+0x180>
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d009      	beq.n	8002f32 <UART_SetConfig+0x16e>
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d810      	bhi.n	8002f44 <UART_SetConfig+0x180>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <UART_SetConfig+0x168>
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d006      	beq.n	8002f38 <UART_SetConfig+0x174>
 8002f2a:	e00b      	b.n	8002f44 <UART_SetConfig+0x180>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e038      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f32:	2302      	movs	r3, #2
 8002f34:	76fb      	strb	r3, [r7, #27]
 8002f36:	e035      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	76fb      	strb	r3, [r7, #27]
 8002f3c:	e032      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f3e:	2308      	movs	r3, #8
 8002f40:	76fb      	strb	r3, [r7, #27]
 8002f42:	e02f      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f44:	2310      	movs	r3, #16
 8002f46:	76fb      	strb	r3, [r7, #27]
 8002f48:	e02c      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a53      	ldr	r2, [pc, #332]	; (800309c <UART_SetConfig+0x2d8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d125      	bne.n	8002fa0 <UART_SetConfig+0x1dc>
 8002f54:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <UART_SetConfig+0x2e0>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f62:	d017      	beq.n	8002f94 <UART_SetConfig+0x1d0>
 8002f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f68:	d817      	bhi.n	8002f9a <UART_SetConfig+0x1d6>
 8002f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6e:	d00b      	beq.n	8002f88 <UART_SetConfig+0x1c4>
 8002f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f74:	d811      	bhi.n	8002f9a <UART_SetConfig+0x1d6>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <UART_SetConfig+0x1be>
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	d006      	beq.n	8002f8e <UART_SetConfig+0x1ca>
 8002f80:	e00b      	b.n	8002f9a <UART_SetConfig+0x1d6>
 8002f82:	2300      	movs	r3, #0
 8002f84:	76fb      	strb	r3, [r7, #27]
 8002f86:	e00d      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	76fb      	strb	r3, [r7, #27]
 8002f8c:	e00a      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f8e:	2304      	movs	r3, #4
 8002f90:	76fb      	strb	r3, [r7, #27]
 8002f92:	e007      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f94:	2308      	movs	r3, #8
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e004      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e001      	b.n	8002fa4 <UART_SetConfig+0x1e0>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	; (800309c <UART_SetConfig+0x2d8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	f040 8082 	bne.w	80030b4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fb0:	7efb      	ldrb	r3, [r7, #27]
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d823      	bhi.n	8002ffe <UART_SetConfig+0x23a>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <UART_SetConfig+0x1f8>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fef 	.word	0x08002fef
 8002fd0:	08002fff 	.word	0x08002fff
 8002fd4:	08002fff 	.word	0x08002fff
 8002fd8:	08002fff 	.word	0x08002fff
 8002fdc:	08002ff7 	.word	0x08002ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f7ff f818 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8002fe4:	6178      	str	r0, [r7, #20]
        break;
 8002fe6:	e00f      	b.n	8003008 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <UART_SetConfig+0x2ec>)
 8002fea:	617b      	str	r3, [r7, #20]
        break;
 8002fec:	e00c      	b.n	8003008 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7fe ff79 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8002ff2:	6178      	str	r0, [r7, #20]
        break;
 8002ff4:	e008      	b.n	8003008 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffa:	617b      	str	r3, [r7, #20]
        break;
 8002ffc:	e004      	b.n	8003008 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	76bb      	strb	r3, [r7, #26]
        break;
 8003006:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8100 	beq.w	8003210 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	d305      	bcc.n	800302c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	d902      	bls.n	8003032 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	76bb      	strb	r3, [r7, #26]
 8003030:	e0ee      	b.n	8003210 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	4618      	mov	r0, r3
 8003036:	f04f 0100 	mov.w	r1, #0
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	020b      	lsls	r3, r1, #8
 8003044:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003048:	0202      	lsls	r2, r0, #8
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	6849      	ldr	r1, [r1, #4]
 800304e:	0849      	lsrs	r1, r1, #1
 8003050:	4608      	mov	r0, r1
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	1814      	adds	r4, r2, r0
 8003058:	eb43 0501 	adc.w	r5, r3, r1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	461a      	mov	r2, r3
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f7fd f911 	bl	8000290 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4613      	mov	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307c:	d308      	bcc.n	8003090 <UART_SetConfig+0x2cc>
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003084:	d204      	bcs.n	8003090 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e0bf      	b.n	8003210 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	76bb      	strb	r3, [r7, #26]
 8003094:	e0bc      	b.n	8003210 <UART_SetConfig+0x44c>
 8003096:	bf00      	nop
 8003098:	efff69f3 	.word	0xefff69f3
 800309c:	40008000 	.word	0x40008000
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40004400 	.word	0x40004400
 80030ac:	40004800 	.word	0x40004800
 80030b0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030bc:	d15b      	bne.n	8003176 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 80030be:	7efb      	ldrb	r3, [r7, #27]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d828      	bhi.n	8003116 <UART_SetConfig+0x352>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0x308>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030f1 	.word	0x080030f1
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	08003101 	.word	0x08003101
 80030d8:	08003117 	.word	0x08003117
 80030dc:	08003107 	.word	0x08003107
 80030e0:	08003117 	.word	0x08003117
 80030e4:	08003117 	.word	0x08003117
 80030e8:	08003117 	.word	0x08003117
 80030ec:	0800310f 	.word	0x0800310f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f0:	f7fe ff90 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80030f4:	6178      	str	r0, [r7, #20]
        break;
 80030f6:	e013      	b.n	8003120 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030f8:	f7fe ffa2 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 80030fc:	6178      	str	r0, [r7, #20]
        break;
 80030fe:	e00f      	b.n	8003120 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003100:	4b49      	ldr	r3, [pc, #292]	; (8003228 <UART_SetConfig+0x464>)
 8003102:	617b      	str	r3, [r7, #20]
        break;
 8003104:	e00c      	b.n	8003120 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003106:	f7fe feed 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 800310a:	6178      	str	r0, [r7, #20]
        break;
 800310c:	e008      	b.n	8003120 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003112:	617b      	str	r3, [r7, #20]
        break;
 8003114:	e004      	b.n	8003120 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	76bb      	strb	r3, [r7, #26]
        break;
 800311e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d074      	beq.n	8003210 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005a      	lsls	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	441a      	add	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b0f      	cmp	r3, #15
 8003140:	d916      	bls.n	8003170 <UART_SetConfig+0x3ac>
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003148:	d212      	bcs.n	8003170 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	b29b      	uxth	r3, r3
 800314e:	f023 030f 	bic.w	r3, r3, #15
 8003152:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	b29b      	uxth	r3, r3
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	b29a      	uxth	r2, r3
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	4313      	orrs	r3, r2
 8003164:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	89fa      	ldrh	r2, [r7, #14]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	e04f      	b.n	8003210 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	76bb      	strb	r3, [r7, #26]
 8003174:	e04c      	b.n	8003210 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003176:	7efb      	ldrb	r3, [r7, #27]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d828      	bhi.n	80031ce <UART_SetConfig+0x40a>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x3c0>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031b1 	.word	0x080031b1
 800318c:	080031b9 	.word	0x080031b9
 8003190:	080031cf 	.word	0x080031cf
 8003194:	080031bf 	.word	0x080031bf
 8003198:	080031cf 	.word	0x080031cf
 800319c:	080031cf 	.word	0x080031cf
 80031a0:	080031cf 	.word	0x080031cf
 80031a4:	080031c7 	.word	0x080031c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7fe ff34 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80031ac:	6178      	str	r0, [r7, #20]
        break;
 80031ae:	e013      	b.n	80031d8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b0:	f7fe ff46 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 80031b4:	6178      	str	r0, [r7, #20]
        break;
 80031b6:	e00f      	b.n	80031d8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <UART_SetConfig+0x464>)
 80031ba:	617b      	str	r3, [r7, #20]
        break;
 80031bc:	e00c      	b.n	80031d8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031be:	f7fe fe91 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 80031c2:	6178      	str	r0, [r7, #20]
        break;
 80031c4:	e008      	b.n	80031d8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ca:	617b      	str	r3, [r7, #20]
        break;
 80031cc:	e004      	b.n	80031d8 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	76bb      	strb	r3, [r7, #26]
        break;
 80031d6:	bf00      	nop
    }

    if (pclk != 0U)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d018      	beq.n	8003210 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	085a      	lsrs	r2, r3, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	441a      	add	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b0f      	cmp	r3, #15
 80031f6:	d909      	bls.n	800320c <UART_SetConfig+0x448>
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d205      	bcs.n	800320c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	e001      	b.n	8003210 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800321c:	7ebb      	ldrb	r3, [r7, #26]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bdb0      	pop	{r4, r5, r7, pc}
 8003226:	bf00      	nop
 8003228:	00f42400 	.word	0x00f42400

0800322c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01a      	beq.n	8003342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332a:	d10a      	bne.n	8003342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
  }
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af02      	add	r7, sp, #8
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003380:	f7fd fcb4 	bl	8000cec <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b08      	cmp	r3, #8
 8003392:	d10e      	bne.n	80033b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f82d 	bl	8003402 <UART_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e023      	b.n	80033fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d10e      	bne.n	80033de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f817 	bl	8003402 <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e00d      	b.n	80033fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b09c      	sub	sp, #112	; 0x70
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003412:	e0a5      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341a:	f000 80a1 	beq.w	8003560 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7fd fc65 	bl	8000cec <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <UART_WaitOnFlagUntilTimeout+0x32>
 800342e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003430:	2b00      	cmp	r3, #0
 8003432:	d13e      	bne.n	80034b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003448:	667b      	str	r3, [r7, #100]	; 0x64
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003454:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003458:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e6      	bne.n	8003434 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3308      	adds	r3, #8
 800346c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	663b      	str	r3, [r7, #96]	; 0x60
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003486:	64ba      	str	r2, [r7, #72]	; 0x48
 8003488:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800348c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e5      	bne.n	8003466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e067      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d04f      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ce:	d147      	bne.n	8003560 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
 80034fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	613b      	str	r3, [r7, #16]
   return(result);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	66bb      	str	r3, [r7, #104]	; 0x68
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800352c:	623a      	str	r2, [r7, #32]
 800352e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	69f9      	ldr	r1, [r7, #28]
 8003532:	6a3a      	ldr	r2, [r7, #32]
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	61bb      	str	r3, [r7, #24]
   return(result);
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e010      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	f43f af4a 	beq.w	8003414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3770      	adds	r7, #112	; 0x70
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800358a:	b480      	push	{r7}
 800358c:	b095      	sub	sp, #84	; 0x54
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
 80035b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e6      	bne.n	8003592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d118      	bne.n	8003632 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	60bb      	str	r3, [r7, #8]
   return(result);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f023 0310 	bic.w	r3, r3, #16
 8003614:	647b      	str	r3, [r7, #68]	; 0x44
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6979      	ldr	r1, [r7, #20]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	613b      	str	r3, [r7, #16]
   return(result);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e6      	bne.n	8003600 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003644:	bf00      	nop
 8003646:	3754      	adds	r7, #84	; 0x54
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff fb92 	bl	8002d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	60bb      	str	r3, [r7, #8]
   return(result);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	613b      	str	r3, [r7, #16]
   return(result);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e6      	bne.n	8003684 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fb5e 	bl	8002d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c8:	bf00      	nop
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <__errno>:
 80036e4:	4b01      	ldr	r3, [pc, #4]	; (80036ec <__errno+0x8>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	2000000c 	.word	0x2000000c

080036f0 <getchar>:
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <getchar+0x20>)
 80036f2:	b510      	push	{r4, lr}
 80036f4:	681c      	ldr	r4, [r3, #0]
 80036f6:	b124      	cbz	r4, 8003702 <getchar+0x12>
 80036f8:	69a3      	ldr	r3, [r4, #24]
 80036fa:	b913      	cbnz	r3, 8003702 <getchar+0x12>
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 fa55 	bl	8003bac <__sinit>
 8003702:	6861      	ldr	r1, [r4, #4]
 8003704:	4620      	mov	r0, r4
 8003706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800370a:	f000 bb09 	b.w	8003d20 <_getc_r>
 800370e:	bf00      	nop
 8003710:	2000000c 	.word	0x2000000c

08003714 <__libc_init_array>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	4d0d      	ldr	r5, [pc, #52]	; (800374c <__libc_init_array+0x38>)
 8003718:	4c0d      	ldr	r4, [pc, #52]	; (8003750 <__libc_init_array+0x3c>)
 800371a:	1b64      	subs	r4, r4, r5
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	2600      	movs	r6, #0
 8003720:	42a6      	cmp	r6, r4
 8003722:	d109      	bne.n	8003738 <__libc_init_array+0x24>
 8003724:	4d0b      	ldr	r5, [pc, #44]	; (8003754 <__libc_init_array+0x40>)
 8003726:	4c0c      	ldr	r4, [pc, #48]	; (8003758 <__libc_init_array+0x44>)
 8003728:	f001 f9d2 	bl	8004ad0 <_init>
 800372c:	1b64      	subs	r4, r4, r5
 800372e:	10a4      	asrs	r4, r4, #2
 8003730:	2600      	movs	r6, #0
 8003732:	42a6      	cmp	r6, r4
 8003734:	d105      	bne.n	8003742 <__libc_init_array+0x2e>
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	f855 3b04 	ldr.w	r3, [r5], #4
 800373c:	4798      	blx	r3
 800373e:	3601      	adds	r6, #1
 8003740:	e7ee      	b.n	8003720 <__libc_init_array+0xc>
 8003742:	f855 3b04 	ldr.w	r3, [r5], #4
 8003746:	4798      	blx	r3
 8003748:	3601      	adds	r6, #1
 800374a:	e7f2      	b.n	8003732 <__libc_init_array+0x1e>
 800374c:	08004be4 	.word	0x08004be4
 8003750:	08004be4 	.word	0x08004be4
 8003754:	08004be4 	.word	0x08004be4
 8003758:	08004be8 	.word	0x08004be8

0800375c <memset>:
 800375c:	4402      	add	r2, r0
 800375e:	4603      	mov	r3, r0
 8003760:	4293      	cmp	r3, r2
 8003762:	d100      	bne.n	8003766 <memset+0xa>
 8003764:	4770      	bx	lr
 8003766:	f803 1b01 	strb.w	r1, [r3], #1
 800376a:	e7f9      	b.n	8003760 <memset+0x4>

0800376c <iprintf>:
 800376c:	b40f      	push	{r0, r1, r2, r3}
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <iprintf+0x2c>)
 8003770:	b513      	push	{r0, r1, r4, lr}
 8003772:	681c      	ldr	r4, [r3, #0]
 8003774:	b124      	cbz	r4, 8003780 <iprintf+0x14>
 8003776:	69a3      	ldr	r3, [r4, #24]
 8003778:	b913      	cbnz	r3, 8003780 <iprintf+0x14>
 800377a:	4620      	mov	r0, r4
 800377c:	f000 fa16 	bl	8003bac <__sinit>
 8003780:	ab05      	add	r3, sp, #20
 8003782:	9a04      	ldr	r2, [sp, #16]
 8003784:	68a1      	ldr	r1, [r4, #8]
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	4620      	mov	r0, r4
 800378a:	f000 fc4d 	bl	8004028 <_vfiprintf_r>
 800378e:	b002      	add	sp, #8
 8003790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003794:	b004      	add	sp, #16
 8003796:	4770      	bx	lr
 8003798:	2000000c 	.word	0x2000000c

0800379c <putchar>:
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <putchar+0x28>)
 800379e:	b513      	push	{r0, r1, r4, lr}
 80037a0:	681c      	ldr	r4, [r3, #0]
 80037a2:	4601      	mov	r1, r0
 80037a4:	b134      	cbz	r4, 80037b4 <putchar+0x18>
 80037a6:	69a3      	ldr	r3, [r4, #24]
 80037a8:	b923      	cbnz	r3, 80037b4 <putchar+0x18>
 80037aa:	9001      	str	r0, [sp, #4]
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 f9fd 	bl	8003bac <__sinit>
 80037b2:	9901      	ldr	r1, [sp, #4]
 80037b4:	68a2      	ldr	r2, [r4, #8]
 80037b6:	4620      	mov	r0, r4
 80037b8:	b002      	add	sp, #8
 80037ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037be:	f000 bef7 	b.w	80045b0 <_putc_r>
 80037c2:	bf00      	nop
 80037c4:	2000000c 	.word	0x2000000c

080037c8 <setvbuf>:
 80037c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037cc:	461d      	mov	r5, r3
 80037ce:	4b5d      	ldr	r3, [pc, #372]	; (8003944 <setvbuf+0x17c>)
 80037d0:	681f      	ldr	r7, [r3, #0]
 80037d2:	4604      	mov	r4, r0
 80037d4:	460e      	mov	r6, r1
 80037d6:	4690      	mov	r8, r2
 80037d8:	b127      	cbz	r7, 80037e4 <setvbuf+0x1c>
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	b913      	cbnz	r3, 80037e4 <setvbuf+0x1c>
 80037de:	4638      	mov	r0, r7
 80037e0:	f000 f9e4 	bl	8003bac <__sinit>
 80037e4:	4b58      	ldr	r3, [pc, #352]	; (8003948 <setvbuf+0x180>)
 80037e6:	429c      	cmp	r4, r3
 80037e8:	d167      	bne.n	80038ba <setvbuf+0xf2>
 80037ea:	687c      	ldr	r4, [r7, #4]
 80037ec:	f1b8 0f02 	cmp.w	r8, #2
 80037f0:	d006      	beq.n	8003800 <setvbuf+0x38>
 80037f2:	f1b8 0f01 	cmp.w	r8, #1
 80037f6:	f200 809f 	bhi.w	8003938 <setvbuf+0x170>
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	f2c0 809c 	blt.w	8003938 <setvbuf+0x170>
 8003800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003802:	07db      	lsls	r3, r3, #31
 8003804:	d405      	bmi.n	8003812 <setvbuf+0x4a>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	0598      	lsls	r0, r3, #22
 800380a:	d402      	bmi.n	8003812 <setvbuf+0x4a>
 800380c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800380e:	f000 fac8 	bl	8003da2 <__retarget_lock_acquire_recursive>
 8003812:	4621      	mov	r1, r4
 8003814:	4638      	mov	r0, r7
 8003816:	f000 f923 	bl	8003a60 <_fflush_r>
 800381a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800381c:	b141      	cbz	r1, 8003830 <setvbuf+0x68>
 800381e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003822:	4299      	cmp	r1, r3
 8003824:	d002      	beq.n	800382c <setvbuf+0x64>
 8003826:	4638      	mov	r0, r7
 8003828:	f000 fb2a 	bl	8003e80 <_free_r>
 800382c:	2300      	movs	r3, #0
 800382e:	6363      	str	r3, [r4, #52]	; 0x34
 8003830:	2300      	movs	r3, #0
 8003832:	61a3      	str	r3, [r4, #24]
 8003834:	6063      	str	r3, [r4, #4]
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	0619      	lsls	r1, r3, #24
 800383a:	d503      	bpl.n	8003844 <setvbuf+0x7c>
 800383c:	6921      	ldr	r1, [r4, #16]
 800383e:	4638      	mov	r0, r7
 8003840:	f000 fb1e 	bl	8003e80 <_free_r>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	f1b8 0f02 	cmp.w	r8, #2
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	d06c      	beq.n	8003930 <setvbuf+0x168>
 8003856:	ab01      	add	r3, sp, #4
 8003858:	466a      	mov	r2, sp
 800385a:	4621      	mov	r1, r4
 800385c:	4638      	mov	r0, r7
 800385e:	f000 faa2 	bl	8003da6 <__swhatbuf_r>
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	4318      	orrs	r0, r3
 8003866:	81a0      	strh	r0, [r4, #12]
 8003868:	2d00      	cmp	r5, #0
 800386a:	d130      	bne.n	80038ce <setvbuf+0x106>
 800386c:	9d00      	ldr	r5, [sp, #0]
 800386e:	4628      	mov	r0, r5
 8003870:	f000 fafe 	bl	8003e70 <malloc>
 8003874:	4606      	mov	r6, r0
 8003876:	2800      	cmp	r0, #0
 8003878:	d155      	bne.n	8003926 <setvbuf+0x15e>
 800387a:	f8dd 9000 	ldr.w	r9, [sp]
 800387e:	45a9      	cmp	r9, r5
 8003880:	d14a      	bne.n	8003918 <setvbuf+0x150>
 8003882:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003886:	2200      	movs	r2, #0
 8003888:	60a2      	str	r2, [r4, #8]
 800388a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800388e:	6022      	str	r2, [r4, #0]
 8003890:	6122      	str	r2, [r4, #16]
 8003892:	2201      	movs	r2, #1
 8003894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003898:	6162      	str	r2, [r4, #20]
 800389a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	07d2      	lsls	r2, r2, #31
 80038a2:	81a3      	strh	r3, [r4, #12]
 80038a4:	d405      	bmi.n	80038b2 <setvbuf+0xea>
 80038a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80038aa:	d102      	bne.n	80038b2 <setvbuf+0xea>
 80038ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038ae:	f000 fa79 	bl	8003da4 <__retarget_lock_release_recursive>
 80038b2:	4628      	mov	r0, r5
 80038b4:	b003      	add	sp, #12
 80038b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <setvbuf+0x184>)
 80038bc:	429c      	cmp	r4, r3
 80038be:	d101      	bne.n	80038c4 <setvbuf+0xfc>
 80038c0:	68bc      	ldr	r4, [r7, #8]
 80038c2:	e793      	b.n	80037ec <setvbuf+0x24>
 80038c4:	4b22      	ldr	r3, [pc, #136]	; (8003950 <setvbuf+0x188>)
 80038c6:	429c      	cmp	r4, r3
 80038c8:	bf08      	it	eq
 80038ca:	68fc      	ldreq	r4, [r7, #12]
 80038cc:	e78e      	b.n	80037ec <setvbuf+0x24>
 80038ce:	2e00      	cmp	r6, #0
 80038d0:	d0cd      	beq.n	800386e <setvbuf+0xa6>
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	b913      	cbnz	r3, 80038dc <setvbuf+0x114>
 80038d6:	4638      	mov	r0, r7
 80038d8:	f000 f968 	bl	8003bac <__sinit>
 80038dc:	f1b8 0f01 	cmp.w	r8, #1
 80038e0:	bf08      	it	eq
 80038e2:	89a3      	ldrheq	r3, [r4, #12]
 80038e4:	6026      	str	r6, [r4, #0]
 80038e6:	bf04      	itt	eq
 80038e8:	f043 0301 	orreq.w	r3, r3, #1
 80038ec:	81a3      	strheq	r3, [r4, #12]
 80038ee:	89a2      	ldrh	r2, [r4, #12]
 80038f0:	f012 0308 	ands.w	r3, r2, #8
 80038f4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80038f8:	d01c      	beq.n	8003934 <setvbuf+0x16c>
 80038fa:	07d3      	lsls	r3, r2, #31
 80038fc:	bf41      	itttt	mi
 80038fe:	2300      	movmi	r3, #0
 8003900:	426d      	negmi	r5, r5
 8003902:	60a3      	strmi	r3, [r4, #8]
 8003904:	61a5      	strmi	r5, [r4, #24]
 8003906:	bf58      	it	pl
 8003908:	60a5      	strpl	r5, [r4, #8]
 800390a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800390c:	f015 0501 	ands.w	r5, r5, #1
 8003910:	d115      	bne.n	800393e <setvbuf+0x176>
 8003912:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003916:	e7c8      	b.n	80038aa <setvbuf+0xe2>
 8003918:	4648      	mov	r0, r9
 800391a:	f000 faa9 	bl	8003e70 <malloc>
 800391e:	4606      	mov	r6, r0
 8003920:	2800      	cmp	r0, #0
 8003922:	d0ae      	beq.n	8003882 <setvbuf+0xba>
 8003924:	464d      	mov	r5, r9
 8003926:	89a3      	ldrh	r3, [r4, #12]
 8003928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392c:	81a3      	strh	r3, [r4, #12]
 800392e:	e7d0      	b.n	80038d2 <setvbuf+0x10a>
 8003930:	2500      	movs	r5, #0
 8003932:	e7a8      	b.n	8003886 <setvbuf+0xbe>
 8003934:	60a3      	str	r3, [r4, #8]
 8003936:	e7e8      	b.n	800390a <setvbuf+0x142>
 8003938:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800393c:	e7b9      	b.n	80038b2 <setvbuf+0xea>
 800393e:	2500      	movs	r5, #0
 8003940:	e7b7      	b.n	80038b2 <setvbuf+0xea>
 8003942:	bf00      	nop
 8003944:	2000000c 	.word	0x2000000c
 8003948:	08004b68 	.word	0x08004b68
 800394c:	08004b88 	.word	0x08004b88
 8003950:	08004b48 	.word	0x08004b48

08003954 <__sflush_r>:
 8003954:	898a      	ldrh	r2, [r1, #12]
 8003956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395a:	4605      	mov	r5, r0
 800395c:	0710      	lsls	r0, r2, #28
 800395e:	460c      	mov	r4, r1
 8003960:	d458      	bmi.n	8003a14 <__sflush_r+0xc0>
 8003962:	684b      	ldr	r3, [r1, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	dc05      	bgt.n	8003974 <__sflush_r+0x20>
 8003968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	dc02      	bgt.n	8003974 <__sflush_r+0x20>
 800396e:	2000      	movs	r0, #0
 8003970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003976:	2e00      	cmp	r6, #0
 8003978:	d0f9      	beq.n	800396e <__sflush_r+0x1a>
 800397a:	2300      	movs	r3, #0
 800397c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003980:	682f      	ldr	r7, [r5, #0]
 8003982:	602b      	str	r3, [r5, #0]
 8003984:	d032      	beq.n	80039ec <__sflush_r+0x98>
 8003986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	075a      	lsls	r2, r3, #29
 800398c:	d505      	bpl.n	800399a <__sflush_r+0x46>
 800398e:	6863      	ldr	r3, [r4, #4]
 8003990:	1ac0      	subs	r0, r0, r3
 8003992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003994:	b10b      	cbz	r3, 800399a <__sflush_r+0x46>
 8003996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003998:	1ac0      	subs	r0, r0, r3
 800399a:	2300      	movs	r3, #0
 800399c:	4602      	mov	r2, r0
 800399e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039a0:	6a21      	ldr	r1, [r4, #32]
 80039a2:	4628      	mov	r0, r5
 80039a4:	47b0      	blx	r6
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	d106      	bne.n	80039ba <__sflush_r+0x66>
 80039ac:	6829      	ldr	r1, [r5, #0]
 80039ae:	291d      	cmp	r1, #29
 80039b0:	d82c      	bhi.n	8003a0c <__sflush_r+0xb8>
 80039b2:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <__sflush_r+0x108>)
 80039b4:	40ca      	lsrs	r2, r1
 80039b6:	07d6      	lsls	r6, r2, #31
 80039b8:	d528      	bpl.n	8003a0c <__sflush_r+0xb8>
 80039ba:	2200      	movs	r2, #0
 80039bc:	6062      	str	r2, [r4, #4]
 80039be:	04d9      	lsls	r1, r3, #19
 80039c0:	6922      	ldr	r2, [r4, #16]
 80039c2:	6022      	str	r2, [r4, #0]
 80039c4:	d504      	bpl.n	80039d0 <__sflush_r+0x7c>
 80039c6:	1c42      	adds	r2, r0, #1
 80039c8:	d101      	bne.n	80039ce <__sflush_r+0x7a>
 80039ca:	682b      	ldr	r3, [r5, #0]
 80039cc:	b903      	cbnz	r3, 80039d0 <__sflush_r+0x7c>
 80039ce:	6560      	str	r0, [r4, #84]	; 0x54
 80039d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039d2:	602f      	str	r7, [r5, #0]
 80039d4:	2900      	cmp	r1, #0
 80039d6:	d0ca      	beq.n	800396e <__sflush_r+0x1a>
 80039d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039dc:	4299      	cmp	r1, r3
 80039de:	d002      	beq.n	80039e6 <__sflush_r+0x92>
 80039e0:	4628      	mov	r0, r5
 80039e2:	f000 fa4d 	bl	8003e80 <_free_r>
 80039e6:	2000      	movs	r0, #0
 80039e8:	6360      	str	r0, [r4, #52]	; 0x34
 80039ea:	e7c1      	b.n	8003970 <__sflush_r+0x1c>
 80039ec:	6a21      	ldr	r1, [r4, #32]
 80039ee:	2301      	movs	r3, #1
 80039f0:	4628      	mov	r0, r5
 80039f2:	47b0      	blx	r6
 80039f4:	1c41      	adds	r1, r0, #1
 80039f6:	d1c7      	bne.n	8003988 <__sflush_r+0x34>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0c4      	beq.n	8003988 <__sflush_r+0x34>
 80039fe:	2b1d      	cmp	r3, #29
 8003a00:	d001      	beq.n	8003a06 <__sflush_r+0xb2>
 8003a02:	2b16      	cmp	r3, #22
 8003a04:	d101      	bne.n	8003a0a <__sflush_r+0xb6>
 8003a06:	602f      	str	r7, [r5, #0]
 8003a08:	e7b1      	b.n	800396e <__sflush_r+0x1a>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	e7ad      	b.n	8003970 <__sflush_r+0x1c>
 8003a14:	690f      	ldr	r7, [r1, #16]
 8003a16:	2f00      	cmp	r7, #0
 8003a18:	d0a9      	beq.n	800396e <__sflush_r+0x1a>
 8003a1a:	0793      	lsls	r3, r2, #30
 8003a1c:	680e      	ldr	r6, [r1, #0]
 8003a1e:	bf08      	it	eq
 8003a20:	694b      	ldreq	r3, [r1, #20]
 8003a22:	600f      	str	r7, [r1, #0]
 8003a24:	bf18      	it	ne
 8003a26:	2300      	movne	r3, #0
 8003a28:	eba6 0807 	sub.w	r8, r6, r7
 8003a2c:	608b      	str	r3, [r1, #8]
 8003a2e:	f1b8 0f00 	cmp.w	r8, #0
 8003a32:	dd9c      	ble.n	800396e <__sflush_r+0x1a>
 8003a34:	6a21      	ldr	r1, [r4, #32]
 8003a36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a38:	4643      	mov	r3, r8
 8003a3a:	463a      	mov	r2, r7
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	47b0      	blx	r6
 8003a40:	2800      	cmp	r0, #0
 8003a42:	dc06      	bgt.n	8003a52 <__sflush_r+0xfe>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a50:	e78e      	b.n	8003970 <__sflush_r+0x1c>
 8003a52:	4407      	add	r7, r0
 8003a54:	eba8 0800 	sub.w	r8, r8, r0
 8003a58:	e7e9      	b.n	8003a2e <__sflush_r+0xda>
 8003a5a:	bf00      	nop
 8003a5c:	20400001 	.word	0x20400001

08003a60 <_fflush_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	690b      	ldr	r3, [r1, #16]
 8003a64:	4605      	mov	r5, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	b913      	cbnz	r3, 8003a70 <_fflush_r+0x10>
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
 8003a70:	b118      	cbz	r0, 8003a7a <_fflush_r+0x1a>
 8003a72:	6983      	ldr	r3, [r0, #24]
 8003a74:	b90b      	cbnz	r3, 8003a7a <_fflush_r+0x1a>
 8003a76:	f000 f899 	bl	8003bac <__sinit>
 8003a7a:	4b14      	ldr	r3, [pc, #80]	; (8003acc <_fflush_r+0x6c>)
 8003a7c:	429c      	cmp	r4, r3
 8003a7e:	d11b      	bne.n	8003ab8 <_fflush_r+0x58>
 8003a80:	686c      	ldr	r4, [r5, #4]
 8003a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0ef      	beq.n	8003a6a <_fflush_r+0xa>
 8003a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a8c:	07d0      	lsls	r0, r2, #31
 8003a8e:	d404      	bmi.n	8003a9a <_fflush_r+0x3a>
 8003a90:	0599      	lsls	r1, r3, #22
 8003a92:	d402      	bmi.n	8003a9a <_fflush_r+0x3a>
 8003a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a96:	f000 f984 	bl	8003da2 <__retarget_lock_acquire_recursive>
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	f7ff ff59 	bl	8003954 <__sflush_r>
 8003aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aa4:	07da      	lsls	r2, r3, #31
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	d4e0      	bmi.n	8003a6c <_fflush_r+0xc>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	059b      	lsls	r3, r3, #22
 8003aae:	d4dd      	bmi.n	8003a6c <_fflush_r+0xc>
 8003ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ab2:	f000 f977 	bl	8003da4 <__retarget_lock_release_recursive>
 8003ab6:	e7d9      	b.n	8003a6c <_fflush_r+0xc>
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <_fflush_r+0x70>)
 8003aba:	429c      	cmp	r4, r3
 8003abc:	d101      	bne.n	8003ac2 <_fflush_r+0x62>
 8003abe:	68ac      	ldr	r4, [r5, #8]
 8003ac0:	e7df      	b.n	8003a82 <_fflush_r+0x22>
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <_fflush_r+0x74>)
 8003ac4:	429c      	cmp	r4, r3
 8003ac6:	bf08      	it	eq
 8003ac8:	68ec      	ldreq	r4, [r5, #12]
 8003aca:	e7da      	b.n	8003a82 <_fflush_r+0x22>
 8003acc:	08004b68 	.word	0x08004b68
 8003ad0:	08004b88 	.word	0x08004b88
 8003ad4:	08004b48 	.word	0x08004b48

08003ad8 <fflush>:
 8003ad8:	4601      	mov	r1, r0
 8003ada:	b920      	cbnz	r0, 8003ae6 <fflush+0xe>
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <fflush+0x18>)
 8003ade:	4905      	ldr	r1, [pc, #20]	; (8003af4 <fflush+0x1c>)
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f000 b8fe 	b.w	8003ce2 <_fwalk_reent>
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <fflush+0x20>)
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	f7ff bfb9 	b.w	8003a60 <_fflush_r>
 8003aee:	bf00      	nop
 8003af0:	08004b44 	.word	0x08004b44
 8003af4:	08003a61 	.word	0x08003a61
 8003af8:	2000000c 	.word	0x2000000c

08003afc <std>:
 8003afc:	2300      	movs	r3, #0
 8003afe:	b510      	push	{r4, lr}
 8003b00:	4604      	mov	r4, r0
 8003b02:	e9c0 3300 	strd	r3, r3, [r0]
 8003b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b0a:	6083      	str	r3, [r0, #8]
 8003b0c:	8181      	strh	r1, [r0, #12]
 8003b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b10:	81c2      	strh	r2, [r0, #14]
 8003b12:	6183      	str	r3, [r0, #24]
 8003b14:	4619      	mov	r1, r3
 8003b16:	2208      	movs	r2, #8
 8003b18:	305c      	adds	r0, #92	; 0x5c
 8003b1a:	f7ff fe1f 	bl	800375c <memset>
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <std+0x38>)
 8003b20:	6263      	str	r3, [r4, #36]	; 0x24
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <std+0x3c>)
 8003b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <std+0x40>)
 8003b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <std+0x44>)
 8003b2c:	6224      	str	r4, [r4, #32]
 8003b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	bf00      	nop
 8003b34:	080046b9 	.word	0x080046b9
 8003b38:	080046db 	.word	0x080046db
 8003b3c:	08004713 	.word	0x08004713
 8003b40:	08004737 	.word	0x08004737

08003b44 <_cleanup_r>:
 8003b44:	4901      	ldr	r1, [pc, #4]	; (8003b4c <_cleanup_r+0x8>)
 8003b46:	f000 b8cc 	b.w	8003ce2 <_fwalk_reent>
 8003b4a:	bf00      	nop
 8003b4c:	08003a61 	.word	0x08003a61

08003b50 <__sfmoreglue>:
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	1e4a      	subs	r2, r1, #1
 8003b54:	2568      	movs	r5, #104	; 0x68
 8003b56:	4355      	muls	r5, r2
 8003b58:	460e      	mov	r6, r1
 8003b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b5e:	f000 f9df 	bl	8003f20 <_malloc_r>
 8003b62:	4604      	mov	r4, r0
 8003b64:	b140      	cbz	r0, 8003b78 <__sfmoreglue+0x28>
 8003b66:	2100      	movs	r1, #0
 8003b68:	e9c0 1600 	strd	r1, r6, [r0]
 8003b6c:	300c      	adds	r0, #12
 8003b6e:	60a0      	str	r0, [r4, #8]
 8003b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b74:	f7ff fdf2 	bl	800375c <memset>
 8003b78:	4620      	mov	r0, r4
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}

08003b7c <__sfp_lock_acquire>:
 8003b7c:	4801      	ldr	r0, [pc, #4]	; (8003b84 <__sfp_lock_acquire+0x8>)
 8003b7e:	f000 b910 	b.w	8003da2 <__retarget_lock_acquire_recursive>
 8003b82:	bf00      	nop
 8003b84:	2000012c 	.word	0x2000012c

08003b88 <__sfp_lock_release>:
 8003b88:	4801      	ldr	r0, [pc, #4]	; (8003b90 <__sfp_lock_release+0x8>)
 8003b8a:	f000 b90b 	b.w	8003da4 <__retarget_lock_release_recursive>
 8003b8e:	bf00      	nop
 8003b90:	2000012c 	.word	0x2000012c

08003b94 <__sinit_lock_acquire>:
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <__sinit_lock_acquire+0x8>)
 8003b96:	f000 b904 	b.w	8003da2 <__retarget_lock_acquire_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	20000127 	.word	0x20000127

08003ba0 <__sinit_lock_release>:
 8003ba0:	4801      	ldr	r0, [pc, #4]	; (8003ba8 <__sinit_lock_release+0x8>)
 8003ba2:	f000 b8ff 	b.w	8003da4 <__retarget_lock_release_recursive>
 8003ba6:	bf00      	nop
 8003ba8:	20000127 	.word	0x20000127

08003bac <__sinit>:
 8003bac:	b510      	push	{r4, lr}
 8003bae:	4604      	mov	r4, r0
 8003bb0:	f7ff fff0 	bl	8003b94 <__sinit_lock_acquire>
 8003bb4:	69a3      	ldr	r3, [r4, #24]
 8003bb6:	b11b      	cbz	r3, 8003bc0 <__sinit+0x14>
 8003bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bbc:	f7ff bff0 	b.w	8003ba0 <__sinit_lock_release>
 8003bc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bc4:	6523      	str	r3, [r4, #80]	; 0x50
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <__sinit+0x68>)
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <__sinit+0x6c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bce:	42a3      	cmp	r3, r4
 8003bd0:	bf04      	itt	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	61a3      	streq	r3, [r4, #24]
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f000 f820 	bl	8003c1c <__sfp>
 8003bdc:	6060      	str	r0, [r4, #4]
 8003bde:	4620      	mov	r0, r4
 8003be0:	f000 f81c 	bl	8003c1c <__sfp>
 8003be4:	60a0      	str	r0, [r4, #8]
 8003be6:	4620      	mov	r0, r4
 8003be8:	f000 f818 	bl	8003c1c <__sfp>
 8003bec:	2200      	movs	r2, #0
 8003bee:	60e0      	str	r0, [r4, #12]
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	6860      	ldr	r0, [r4, #4]
 8003bf4:	f7ff ff82 	bl	8003afc <std>
 8003bf8:	68a0      	ldr	r0, [r4, #8]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2109      	movs	r1, #9
 8003bfe:	f7ff ff7d 	bl	8003afc <std>
 8003c02:	68e0      	ldr	r0, [r4, #12]
 8003c04:	2202      	movs	r2, #2
 8003c06:	2112      	movs	r1, #18
 8003c08:	f7ff ff78 	bl	8003afc <std>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	61a3      	str	r3, [r4, #24]
 8003c10:	e7d2      	b.n	8003bb8 <__sinit+0xc>
 8003c12:	bf00      	nop
 8003c14:	08004b44 	.word	0x08004b44
 8003c18:	08003b45 	.word	0x08003b45

08003c1c <__sfp>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	4607      	mov	r7, r0
 8003c20:	f7ff ffac 	bl	8003b7c <__sfp_lock_acquire>
 8003c24:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <__sfp+0x84>)
 8003c26:	681e      	ldr	r6, [r3, #0]
 8003c28:	69b3      	ldr	r3, [r6, #24]
 8003c2a:	b913      	cbnz	r3, 8003c32 <__sfp+0x16>
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f7ff ffbd 	bl	8003bac <__sinit>
 8003c32:	3648      	adds	r6, #72	; 0x48
 8003c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	d503      	bpl.n	8003c44 <__sfp+0x28>
 8003c3c:	6833      	ldr	r3, [r6, #0]
 8003c3e:	b30b      	cbz	r3, 8003c84 <__sfp+0x68>
 8003c40:	6836      	ldr	r6, [r6, #0]
 8003c42:	e7f7      	b.n	8003c34 <__sfp+0x18>
 8003c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c48:	b9d5      	cbnz	r5, 8003c80 <__sfp+0x64>
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <__sfp+0x88>)
 8003c4c:	60e3      	str	r3, [r4, #12]
 8003c4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c52:	6665      	str	r5, [r4, #100]	; 0x64
 8003c54:	f000 f8a4 	bl	8003da0 <__retarget_lock_init_recursive>
 8003c58:	f7ff ff96 	bl	8003b88 <__sfp_lock_release>
 8003c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c64:	6025      	str	r5, [r4, #0]
 8003c66:	61a5      	str	r5, [r4, #24]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c70:	f7ff fd74 	bl	800375c <memset>
 8003c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c80:	3468      	adds	r4, #104	; 0x68
 8003c82:	e7d9      	b.n	8003c38 <__sfp+0x1c>
 8003c84:	2104      	movs	r1, #4
 8003c86:	4638      	mov	r0, r7
 8003c88:	f7ff ff62 	bl	8003b50 <__sfmoreglue>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	6030      	str	r0, [r6, #0]
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d1d5      	bne.n	8003c40 <__sfp+0x24>
 8003c94:	f7ff ff78 	bl	8003b88 <__sfp_lock_release>
 8003c98:	230c      	movs	r3, #12
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	e7ee      	b.n	8003c7c <__sfp+0x60>
 8003c9e:	bf00      	nop
 8003ca0:	08004b44 	.word	0x08004b44
 8003ca4:	ffff0001 	.word	0xffff0001

08003ca8 <_fwalk>:
 8003ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cac:	460f      	mov	r7, r1
 8003cae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003cb8:	f1b8 0801 	subs.w	r8, r8, #1
 8003cbc:	d505      	bpl.n	8003cca <_fwalk+0x22>
 8003cbe:	6824      	ldr	r4, [r4, #0]
 8003cc0:	2c00      	cmp	r4, #0
 8003cc2:	d1f7      	bne.n	8003cb4 <_fwalk+0xc>
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cca:	89ab      	ldrh	r3, [r5, #12]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d906      	bls.n	8003cde <_fwalk+0x36>
 8003cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	d002      	beq.n	8003cde <_fwalk+0x36>
 8003cd8:	4628      	mov	r0, r5
 8003cda:	47b8      	blx	r7
 8003cdc:	4306      	orrs	r6, r0
 8003cde:	3568      	adds	r5, #104	; 0x68
 8003ce0:	e7ea      	b.n	8003cb8 <_fwalk+0x10>

08003ce2 <_fwalk_reent>:
 8003ce2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	4688      	mov	r8, r1
 8003cea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cee:	2700      	movs	r7, #0
 8003cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8003cf8:	d505      	bpl.n	8003d06 <_fwalk_reent+0x24>
 8003cfa:	6824      	ldr	r4, [r4, #0]
 8003cfc:	2c00      	cmp	r4, #0
 8003cfe:	d1f7      	bne.n	8003cf0 <_fwalk_reent+0xe>
 8003d00:	4638      	mov	r0, r7
 8003d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d06:	89ab      	ldrh	r3, [r5, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d907      	bls.n	8003d1c <_fwalk_reent+0x3a>
 8003d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d10:	3301      	adds	r3, #1
 8003d12:	d003      	beq.n	8003d1c <_fwalk_reent+0x3a>
 8003d14:	4629      	mov	r1, r5
 8003d16:	4630      	mov	r0, r6
 8003d18:	47c0      	blx	r8
 8003d1a:	4307      	orrs	r7, r0
 8003d1c:	3568      	adds	r5, #104	; 0x68
 8003d1e:	e7e9      	b.n	8003cf4 <_fwalk_reent+0x12>

08003d20 <_getc_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	460c      	mov	r4, r1
 8003d24:	4605      	mov	r5, r0
 8003d26:	b118      	cbz	r0, 8003d30 <_getc_r+0x10>
 8003d28:	6983      	ldr	r3, [r0, #24]
 8003d2a:	b90b      	cbnz	r3, 8003d30 <_getc_r+0x10>
 8003d2c:	f7ff ff3e 	bl	8003bac <__sinit>
 8003d30:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <_getc_r+0x74>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d11e      	bne.n	8003d74 <_getc_r+0x54>
 8003d36:	686c      	ldr	r4, [r5, #4]
 8003d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d3a:	07d8      	lsls	r0, r3, #31
 8003d3c:	d405      	bmi.n	8003d4a <_getc_r+0x2a>
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	0599      	lsls	r1, r3, #22
 8003d42:	d402      	bmi.n	8003d4a <_getc_r+0x2a>
 8003d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d46:	f000 f82c 	bl	8003da2 <__retarget_lock_acquire_recursive>
 8003d4a:	6863      	ldr	r3, [r4, #4]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	da19      	bge.n	8003d88 <_getc_r+0x68>
 8003d54:	4628      	mov	r0, r5
 8003d56:	4621      	mov	r1, r4
 8003d58:	f000 fc72 	bl	8004640 <__srget_r>
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d60:	07da      	lsls	r2, r3, #31
 8003d62:	d405      	bmi.n	8003d70 <_getc_r+0x50>
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	059b      	lsls	r3, r3, #22
 8003d68:	d402      	bmi.n	8003d70 <_getc_r+0x50>
 8003d6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d6c:	f000 f81a 	bl	8003da4 <__retarget_lock_release_recursive>
 8003d70:	4628      	mov	r0, r5
 8003d72:	bd38      	pop	{r3, r4, r5, pc}
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <_getc_r+0x78>)
 8003d76:	429c      	cmp	r4, r3
 8003d78:	d101      	bne.n	8003d7e <_getc_r+0x5e>
 8003d7a:	68ac      	ldr	r4, [r5, #8]
 8003d7c:	e7dc      	b.n	8003d38 <_getc_r+0x18>
 8003d7e:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <_getc_r+0x7c>)
 8003d80:	429c      	cmp	r4, r3
 8003d82:	bf08      	it	eq
 8003d84:	68ec      	ldreq	r4, [r5, #12]
 8003d86:	e7d7      	b.n	8003d38 <_getc_r+0x18>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	6022      	str	r2, [r4, #0]
 8003d8e:	781d      	ldrb	r5, [r3, #0]
 8003d90:	e7e5      	b.n	8003d5e <_getc_r+0x3e>
 8003d92:	bf00      	nop
 8003d94:	08004b68 	.word	0x08004b68
 8003d98:	08004b88 	.word	0x08004b88
 8003d9c:	08004b48 	.word	0x08004b48

08003da0 <__retarget_lock_init_recursive>:
 8003da0:	4770      	bx	lr

08003da2 <__retarget_lock_acquire_recursive>:
 8003da2:	4770      	bx	lr

08003da4 <__retarget_lock_release_recursive>:
 8003da4:	4770      	bx	lr

08003da6 <__swhatbuf_r>:
 8003da6:	b570      	push	{r4, r5, r6, lr}
 8003da8:	460e      	mov	r6, r1
 8003daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dae:	2900      	cmp	r1, #0
 8003db0:	b096      	sub	sp, #88	; 0x58
 8003db2:	4614      	mov	r4, r2
 8003db4:	461d      	mov	r5, r3
 8003db6:	da07      	bge.n	8003dc8 <__swhatbuf_r+0x22>
 8003db8:	2300      	movs	r3, #0
 8003dba:	602b      	str	r3, [r5, #0]
 8003dbc:	89b3      	ldrh	r3, [r6, #12]
 8003dbe:	061a      	lsls	r2, r3, #24
 8003dc0:	d410      	bmi.n	8003de4 <__swhatbuf_r+0x3e>
 8003dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc6:	e00e      	b.n	8003de6 <__swhatbuf_r+0x40>
 8003dc8:	466a      	mov	r2, sp
 8003dca:	f000 fd9b 	bl	8004904 <_fstat_r>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	dbf2      	blt.n	8003db8 <__swhatbuf_r+0x12>
 8003dd2:	9a01      	ldr	r2, [sp, #4]
 8003dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ddc:	425a      	negs	r2, r3
 8003dde:	415a      	adcs	r2, r3
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	e7ee      	b.n	8003dc2 <__swhatbuf_r+0x1c>
 8003de4:	2340      	movs	r3, #64	; 0x40
 8003de6:	2000      	movs	r0, #0
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	b016      	add	sp, #88	; 0x58
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08003df0 <__smakebuf_r>:
 8003df0:	898b      	ldrh	r3, [r1, #12]
 8003df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003df4:	079d      	lsls	r5, r3, #30
 8003df6:	4606      	mov	r6, r0
 8003df8:	460c      	mov	r4, r1
 8003dfa:	d507      	bpl.n	8003e0c <__smakebuf_r+0x1c>
 8003dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	2301      	movs	r3, #1
 8003e06:	6163      	str	r3, [r4, #20]
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	ab01      	add	r3, sp, #4
 8003e0e:	466a      	mov	r2, sp
 8003e10:	f7ff ffc9 	bl	8003da6 <__swhatbuf_r>
 8003e14:	9900      	ldr	r1, [sp, #0]
 8003e16:	4605      	mov	r5, r0
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f000 f881 	bl	8003f20 <_malloc_r>
 8003e1e:	b948      	cbnz	r0, 8003e34 <__smakebuf_r+0x44>
 8003e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e24:	059a      	lsls	r2, r3, #22
 8003e26:	d4ef      	bmi.n	8003e08 <__smakebuf_r+0x18>
 8003e28:	f023 0303 	bic.w	r3, r3, #3
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	81a3      	strh	r3, [r4, #12]
 8003e32:	e7e3      	b.n	8003dfc <__smakebuf_r+0xc>
 8003e34:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <__smakebuf_r+0x7c>)
 8003e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	6020      	str	r0, [r4, #0]
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	9b00      	ldr	r3, [sp, #0]
 8003e44:	6163      	str	r3, [r4, #20]
 8003e46:	9b01      	ldr	r3, [sp, #4]
 8003e48:	6120      	str	r0, [r4, #16]
 8003e4a:	b15b      	cbz	r3, 8003e64 <__smakebuf_r+0x74>
 8003e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e50:	4630      	mov	r0, r6
 8003e52:	f000 fd69 	bl	8004928 <_isatty_r>
 8003e56:	b128      	cbz	r0, 8003e64 <__smakebuf_r+0x74>
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	89a0      	ldrh	r0, [r4, #12]
 8003e66:	4305      	orrs	r5, r0
 8003e68:	81a5      	strh	r5, [r4, #12]
 8003e6a:	e7cd      	b.n	8003e08 <__smakebuf_r+0x18>
 8003e6c:	08003b45 	.word	0x08003b45

08003e70 <malloc>:
 8003e70:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <malloc+0xc>)
 8003e72:	4601      	mov	r1, r0
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	f000 b853 	b.w	8003f20 <_malloc_r>
 8003e7a:	bf00      	nop
 8003e7c:	2000000c 	.word	0x2000000c

08003e80 <_free_r>:
 8003e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e82:	2900      	cmp	r1, #0
 8003e84:	d048      	beq.n	8003f18 <_free_r+0x98>
 8003e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e8a:	9001      	str	r0, [sp, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e92:	bfb8      	it	lt
 8003e94:	18e4      	addlt	r4, r4, r3
 8003e96:	f000 fd69 	bl	800496c <__malloc_lock>
 8003e9a:	4a20      	ldr	r2, [pc, #128]	; (8003f1c <_free_r+0x9c>)
 8003e9c:	9801      	ldr	r0, [sp, #4]
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	4615      	mov	r5, r2
 8003ea2:	b933      	cbnz	r3, 8003eb2 <_free_r+0x32>
 8003ea4:	6063      	str	r3, [r4, #4]
 8003ea6:	6014      	str	r4, [r2, #0]
 8003ea8:	b003      	add	sp, #12
 8003eaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eae:	f000 bd63 	b.w	8004978 <__malloc_unlock>
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	d90b      	bls.n	8003ece <_free_r+0x4e>
 8003eb6:	6821      	ldr	r1, [r4, #0]
 8003eb8:	1862      	adds	r2, r4, r1
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	bf04      	itt	eq
 8003ebe:	681a      	ldreq	r2, [r3, #0]
 8003ec0:	685b      	ldreq	r3, [r3, #4]
 8003ec2:	6063      	str	r3, [r4, #4]
 8003ec4:	bf04      	itt	eq
 8003ec6:	1852      	addeq	r2, r2, r1
 8003ec8:	6022      	streq	r2, [r4, #0]
 8003eca:	602c      	str	r4, [r5, #0]
 8003ecc:	e7ec      	b.n	8003ea8 <_free_r+0x28>
 8003ece:	461a      	mov	r2, r3
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	b10b      	cbz	r3, 8003ed8 <_free_r+0x58>
 8003ed4:	42a3      	cmp	r3, r4
 8003ed6:	d9fa      	bls.n	8003ece <_free_r+0x4e>
 8003ed8:	6811      	ldr	r1, [r2, #0]
 8003eda:	1855      	adds	r5, r2, r1
 8003edc:	42a5      	cmp	r5, r4
 8003ede:	d10b      	bne.n	8003ef8 <_free_r+0x78>
 8003ee0:	6824      	ldr	r4, [r4, #0]
 8003ee2:	4421      	add	r1, r4
 8003ee4:	1854      	adds	r4, r2, r1
 8003ee6:	42a3      	cmp	r3, r4
 8003ee8:	6011      	str	r1, [r2, #0]
 8003eea:	d1dd      	bne.n	8003ea8 <_free_r+0x28>
 8003eec:	681c      	ldr	r4, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	6053      	str	r3, [r2, #4]
 8003ef2:	4421      	add	r1, r4
 8003ef4:	6011      	str	r1, [r2, #0]
 8003ef6:	e7d7      	b.n	8003ea8 <_free_r+0x28>
 8003ef8:	d902      	bls.n	8003f00 <_free_r+0x80>
 8003efa:	230c      	movs	r3, #12
 8003efc:	6003      	str	r3, [r0, #0]
 8003efe:	e7d3      	b.n	8003ea8 <_free_r+0x28>
 8003f00:	6825      	ldr	r5, [r4, #0]
 8003f02:	1961      	adds	r1, r4, r5
 8003f04:	428b      	cmp	r3, r1
 8003f06:	bf04      	itt	eq
 8003f08:	6819      	ldreq	r1, [r3, #0]
 8003f0a:	685b      	ldreq	r3, [r3, #4]
 8003f0c:	6063      	str	r3, [r4, #4]
 8003f0e:	bf04      	itt	eq
 8003f10:	1949      	addeq	r1, r1, r5
 8003f12:	6021      	streq	r1, [r4, #0]
 8003f14:	6054      	str	r4, [r2, #4]
 8003f16:	e7c7      	b.n	8003ea8 <_free_r+0x28>
 8003f18:	b003      	add	sp, #12
 8003f1a:	bd30      	pop	{r4, r5, pc}
 8003f1c:	20000090 	.word	0x20000090

08003f20 <_malloc_r>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	1ccd      	adds	r5, r1, #3
 8003f24:	f025 0503 	bic.w	r5, r5, #3
 8003f28:	3508      	adds	r5, #8
 8003f2a:	2d0c      	cmp	r5, #12
 8003f2c:	bf38      	it	cc
 8003f2e:	250c      	movcc	r5, #12
 8003f30:	2d00      	cmp	r5, #0
 8003f32:	4606      	mov	r6, r0
 8003f34:	db01      	blt.n	8003f3a <_malloc_r+0x1a>
 8003f36:	42a9      	cmp	r1, r5
 8003f38:	d903      	bls.n	8003f42 <_malloc_r+0x22>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	6033      	str	r3, [r6, #0]
 8003f3e:	2000      	movs	r0, #0
 8003f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f42:	f000 fd13 	bl	800496c <__malloc_lock>
 8003f46:	4921      	ldr	r1, [pc, #132]	; (8003fcc <_malloc_r+0xac>)
 8003f48:	680a      	ldr	r2, [r1, #0]
 8003f4a:	4614      	mov	r4, r2
 8003f4c:	b99c      	cbnz	r4, 8003f76 <_malloc_r+0x56>
 8003f4e:	4f20      	ldr	r7, [pc, #128]	; (8003fd0 <_malloc_r+0xb0>)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	b923      	cbnz	r3, 8003f5e <_malloc_r+0x3e>
 8003f54:	4621      	mov	r1, r4
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 fb9e 	bl	8004698 <_sbrk_r>
 8003f5c:	6038      	str	r0, [r7, #0]
 8003f5e:	4629      	mov	r1, r5
 8003f60:	4630      	mov	r0, r6
 8003f62:	f000 fb99 	bl	8004698 <_sbrk_r>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	d123      	bne.n	8003fb2 <_malloc_r+0x92>
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	6033      	str	r3, [r6, #0]
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f000 fd02 	bl	8004978 <__malloc_unlock>
 8003f74:	e7e3      	b.n	8003f3e <_malloc_r+0x1e>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	1b5b      	subs	r3, r3, r5
 8003f7a:	d417      	bmi.n	8003fac <_malloc_r+0x8c>
 8003f7c:	2b0b      	cmp	r3, #11
 8003f7e:	d903      	bls.n	8003f88 <_malloc_r+0x68>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	441c      	add	r4, r3
 8003f84:	6025      	str	r5, [r4, #0]
 8003f86:	e004      	b.n	8003f92 <_malloc_r+0x72>
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	42a2      	cmp	r2, r4
 8003f8c:	bf0c      	ite	eq
 8003f8e:	600b      	streq	r3, [r1, #0]
 8003f90:	6053      	strne	r3, [r2, #4]
 8003f92:	4630      	mov	r0, r6
 8003f94:	f000 fcf0 	bl	8004978 <__malloc_unlock>
 8003f98:	f104 000b 	add.w	r0, r4, #11
 8003f9c:	1d23      	adds	r3, r4, #4
 8003f9e:	f020 0007 	bic.w	r0, r0, #7
 8003fa2:	1ac2      	subs	r2, r0, r3
 8003fa4:	d0cc      	beq.n	8003f40 <_malloc_r+0x20>
 8003fa6:	1a1b      	subs	r3, r3, r0
 8003fa8:	50a3      	str	r3, [r4, r2]
 8003faa:	e7c9      	b.n	8003f40 <_malloc_r+0x20>
 8003fac:	4622      	mov	r2, r4
 8003fae:	6864      	ldr	r4, [r4, #4]
 8003fb0:	e7cc      	b.n	8003f4c <_malloc_r+0x2c>
 8003fb2:	1cc4      	adds	r4, r0, #3
 8003fb4:	f024 0403 	bic.w	r4, r4, #3
 8003fb8:	42a0      	cmp	r0, r4
 8003fba:	d0e3      	beq.n	8003f84 <_malloc_r+0x64>
 8003fbc:	1a21      	subs	r1, r4, r0
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f000 fb6a 	bl	8004698 <_sbrk_r>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d1dd      	bne.n	8003f84 <_malloc_r+0x64>
 8003fc8:	e7cf      	b.n	8003f6a <_malloc_r+0x4a>
 8003fca:	bf00      	nop
 8003fcc:	20000090 	.word	0x20000090
 8003fd0:	20000094 	.word	0x20000094

08003fd4 <__sfputc_r>:
 8003fd4:	6893      	ldr	r3, [r2, #8]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	b410      	push	{r4}
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	da08      	bge.n	8003ff2 <__sfputc_r+0x1e>
 8003fe0:	6994      	ldr	r4, [r2, #24]
 8003fe2:	42a3      	cmp	r3, r4
 8003fe4:	db01      	blt.n	8003fea <__sfputc_r+0x16>
 8003fe6:	290a      	cmp	r1, #10
 8003fe8:	d103      	bne.n	8003ff2 <__sfputc_r+0x1e>
 8003fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fee:	f000 bba7 	b.w	8004740 <__swbuf_r>
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	1c58      	adds	r0, r3, #1
 8003ff6:	6010      	str	r0, [r2, #0]
 8003ff8:	7019      	strb	r1, [r3, #0]
 8003ffa:	4608      	mov	r0, r1
 8003ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004000:	4770      	bx	lr

08004002 <__sfputs_r>:
 8004002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004004:	4606      	mov	r6, r0
 8004006:	460f      	mov	r7, r1
 8004008:	4614      	mov	r4, r2
 800400a:	18d5      	adds	r5, r2, r3
 800400c:	42ac      	cmp	r4, r5
 800400e:	d101      	bne.n	8004014 <__sfputs_r+0x12>
 8004010:	2000      	movs	r0, #0
 8004012:	e007      	b.n	8004024 <__sfputs_r+0x22>
 8004014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004018:	463a      	mov	r2, r7
 800401a:	4630      	mov	r0, r6
 800401c:	f7ff ffda 	bl	8003fd4 <__sfputc_r>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d1f3      	bne.n	800400c <__sfputs_r+0xa>
 8004024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004028 <_vfiprintf_r>:
 8004028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	460d      	mov	r5, r1
 800402e:	b09d      	sub	sp, #116	; 0x74
 8004030:	4614      	mov	r4, r2
 8004032:	4698      	mov	r8, r3
 8004034:	4606      	mov	r6, r0
 8004036:	b118      	cbz	r0, 8004040 <_vfiprintf_r+0x18>
 8004038:	6983      	ldr	r3, [r0, #24]
 800403a:	b90b      	cbnz	r3, 8004040 <_vfiprintf_r+0x18>
 800403c:	f7ff fdb6 	bl	8003bac <__sinit>
 8004040:	4b89      	ldr	r3, [pc, #548]	; (8004268 <_vfiprintf_r+0x240>)
 8004042:	429d      	cmp	r5, r3
 8004044:	d11b      	bne.n	800407e <_vfiprintf_r+0x56>
 8004046:	6875      	ldr	r5, [r6, #4]
 8004048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800404a:	07d9      	lsls	r1, r3, #31
 800404c:	d405      	bmi.n	800405a <_vfiprintf_r+0x32>
 800404e:	89ab      	ldrh	r3, [r5, #12]
 8004050:	059a      	lsls	r2, r3, #22
 8004052:	d402      	bmi.n	800405a <_vfiprintf_r+0x32>
 8004054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004056:	f7ff fea4 	bl	8003da2 <__retarget_lock_acquire_recursive>
 800405a:	89ab      	ldrh	r3, [r5, #12]
 800405c:	071b      	lsls	r3, r3, #28
 800405e:	d501      	bpl.n	8004064 <_vfiprintf_r+0x3c>
 8004060:	692b      	ldr	r3, [r5, #16]
 8004062:	b9eb      	cbnz	r3, 80040a0 <_vfiprintf_r+0x78>
 8004064:	4629      	mov	r1, r5
 8004066:	4630      	mov	r0, r6
 8004068:	f000 fbce 	bl	8004808 <__swsetup_r>
 800406c:	b1c0      	cbz	r0, 80040a0 <_vfiprintf_r+0x78>
 800406e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004070:	07dc      	lsls	r4, r3, #31
 8004072:	d50e      	bpl.n	8004092 <_vfiprintf_r+0x6a>
 8004074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004078:	b01d      	add	sp, #116	; 0x74
 800407a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407e:	4b7b      	ldr	r3, [pc, #492]	; (800426c <_vfiprintf_r+0x244>)
 8004080:	429d      	cmp	r5, r3
 8004082:	d101      	bne.n	8004088 <_vfiprintf_r+0x60>
 8004084:	68b5      	ldr	r5, [r6, #8]
 8004086:	e7df      	b.n	8004048 <_vfiprintf_r+0x20>
 8004088:	4b79      	ldr	r3, [pc, #484]	; (8004270 <_vfiprintf_r+0x248>)
 800408a:	429d      	cmp	r5, r3
 800408c:	bf08      	it	eq
 800408e:	68f5      	ldreq	r5, [r6, #12]
 8004090:	e7da      	b.n	8004048 <_vfiprintf_r+0x20>
 8004092:	89ab      	ldrh	r3, [r5, #12]
 8004094:	0598      	lsls	r0, r3, #22
 8004096:	d4ed      	bmi.n	8004074 <_vfiprintf_r+0x4c>
 8004098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800409a:	f7ff fe83 	bl	8003da4 <__retarget_lock_release_recursive>
 800409e:	e7e9      	b.n	8004074 <_vfiprintf_r+0x4c>
 80040a0:	2300      	movs	r3, #0
 80040a2:	9309      	str	r3, [sp, #36]	; 0x24
 80040a4:	2320      	movs	r3, #32
 80040a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ae:	2330      	movs	r3, #48	; 0x30
 80040b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004274 <_vfiprintf_r+0x24c>
 80040b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040b8:	f04f 0901 	mov.w	r9, #1
 80040bc:	4623      	mov	r3, r4
 80040be:	469a      	mov	sl, r3
 80040c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040c4:	b10a      	cbz	r2, 80040ca <_vfiprintf_r+0xa2>
 80040c6:	2a25      	cmp	r2, #37	; 0x25
 80040c8:	d1f9      	bne.n	80040be <_vfiprintf_r+0x96>
 80040ca:	ebba 0b04 	subs.w	fp, sl, r4
 80040ce:	d00b      	beq.n	80040e8 <_vfiprintf_r+0xc0>
 80040d0:	465b      	mov	r3, fp
 80040d2:	4622      	mov	r2, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	4630      	mov	r0, r6
 80040d8:	f7ff ff93 	bl	8004002 <__sfputs_r>
 80040dc:	3001      	adds	r0, #1
 80040de:	f000 80aa 	beq.w	8004236 <_vfiprintf_r+0x20e>
 80040e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040e4:	445a      	add	r2, fp
 80040e6:	9209      	str	r2, [sp, #36]	; 0x24
 80040e8:	f89a 3000 	ldrb.w	r3, [sl]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80a2 	beq.w	8004236 <_vfiprintf_r+0x20e>
 80040f2:	2300      	movs	r3, #0
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040fc:	f10a 0a01 	add.w	sl, sl, #1
 8004100:	9304      	str	r3, [sp, #16]
 8004102:	9307      	str	r3, [sp, #28]
 8004104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004108:	931a      	str	r3, [sp, #104]	; 0x68
 800410a:	4654      	mov	r4, sl
 800410c:	2205      	movs	r2, #5
 800410e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004112:	4858      	ldr	r0, [pc, #352]	; (8004274 <_vfiprintf_r+0x24c>)
 8004114:	f7fc f86c 	bl	80001f0 <memchr>
 8004118:	9a04      	ldr	r2, [sp, #16]
 800411a:	b9d8      	cbnz	r0, 8004154 <_vfiprintf_r+0x12c>
 800411c:	06d1      	lsls	r1, r2, #27
 800411e:	bf44      	itt	mi
 8004120:	2320      	movmi	r3, #32
 8004122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004126:	0713      	lsls	r3, r2, #28
 8004128:	bf44      	itt	mi
 800412a:	232b      	movmi	r3, #43	; 0x2b
 800412c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004130:	f89a 3000 	ldrb.w	r3, [sl]
 8004134:	2b2a      	cmp	r3, #42	; 0x2a
 8004136:	d015      	beq.n	8004164 <_vfiprintf_r+0x13c>
 8004138:	9a07      	ldr	r2, [sp, #28]
 800413a:	4654      	mov	r4, sl
 800413c:	2000      	movs	r0, #0
 800413e:	f04f 0c0a 	mov.w	ip, #10
 8004142:	4621      	mov	r1, r4
 8004144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004148:	3b30      	subs	r3, #48	; 0x30
 800414a:	2b09      	cmp	r3, #9
 800414c:	d94e      	bls.n	80041ec <_vfiprintf_r+0x1c4>
 800414e:	b1b0      	cbz	r0, 800417e <_vfiprintf_r+0x156>
 8004150:	9207      	str	r2, [sp, #28]
 8004152:	e014      	b.n	800417e <_vfiprintf_r+0x156>
 8004154:	eba0 0308 	sub.w	r3, r0, r8
 8004158:	fa09 f303 	lsl.w	r3, r9, r3
 800415c:	4313      	orrs	r3, r2
 800415e:	9304      	str	r3, [sp, #16]
 8004160:	46a2      	mov	sl, r4
 8004162:	e7d2      	b.n	800410a <_vfiprintf_r+0xe2>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	1d19      	adds	r1, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	9103      	str	r1, [sp, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	bfbb      	ittet	lt
 8004170:	425b      	neglt	r3, r3
 8004172:	f042 0202 	orrlt.w	r2, r2, #2
 8004176:	9307      	strge	r3, [sp, #28]
 8004178:	9307      	strlt	r3, [sp, #28]
 800417a:	bfb8      	it	lt
 800417c:	9204      	strlt	r2, [sp, #16]
 800417e:	7823      	ldrb	r3, [r4, #0]
 8004180:	2b2e      	cmp	r3, #46	; 0x2e
 8004182:	d10c      	bne.n	800419e <_vfiprintf_r+0x176>
 8004184:	7863      	ldrb	r3, [r4, #1]
 8004186:	2b2a      	cmp	r3, #42	; 0x2a
 8004188:	d135      	bne.n	80041f6 <_vfiprintf_r+0x1ce>
 800418a:	9b03      	ldr	r3, [sp, #12]
 800418c:	1d1a      	adds	r2, r3, #4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	9203      	str	r2, [sp, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfb8      	it	lt
 8004196:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800419a:	3402      	adds	r4, #2
 800419c:	9305      	str	r3, [sp, #20]
 800419e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004284 <_vfiprintf_r+0x25c>
 80041a2:	7821      	ldrb	r1, [r4, #0]
 80041a4:	2203      	movs	r2, #3
 80041a6:	4650      	mov	r0, sl
 80041a8:	f7fc f822 	bl	80001f0 <memchr>
 80041ac:	b140      	cbz	r0, 80041c0 <_vfiprintf_r+0x198>
 80041ae:	2340      	movs	r3, #64	; 0x40
 80041b0:	eba0 000a 	sub.w	r0, r0, sl
 80041b4:	fa03 f000 	lsl.w	r0, r3, r0
 80041b8:	9b04      	ldr	r3, [sp, #16]
 80041ba:	4303      	orrs	r3, r0
 80041bc:	3401      	adds	r4, #1
 80041be:	9304      	str	r3, [sp, #16]
 80041c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c4:	482c      	ldr	r0, [pc, #176]	; (8004278 <_vfiprintf_r+0x250>)
 80041c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041ca:	2206      	movs	r2, #6
 80041cc:	f7fc f810 	bl	80001f0 <memchr>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d03f      	beq.n	8004254 <_vfiprintf_r+0x22c>
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <_vfiprintf_r+0x254>)
 80041d6:	bb1b      	cbnz	r3, 8004220 <_vfiprintf_r+0x1f8>
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	3307      	adds	r3, #7
 80041dc:	f023 0307 	bic.w	r3, r3, #7
 80041e0:	3308      	adds	r3, #8
 80041e2:	9303      	str	r3, [sp, #12]
 80041e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e6:	443b      	add	r3, r7
 80041e8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ea:	e767      	b.n	80040bc <_vfiprintf_r+0x94>
 80041ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80041f0:	460c      	mov	r4, r1
 80041f2:	2001      	movs	r0, #1
 80041f4:	e7a5      	b.n	8004142 <_vfiprintf_r+0x11a>
 80041f6:	2300      	movs	r3, #0
 80041f8:	3401      	adds	r4, #1
 80041fa:	9305      	str	r3, [sp, #20]
 80041fc:	4619      	mov	r1, r3
 80041fe:	f04f 0c0a 	mov.w	ip, #10
 8004202:	4620      	mov	r0, r4
 8004204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004208:	3a30      	subs	r2, #48	; 0x30
 800420a:	2a09      	cmp	r2, #9
 800420c:	d903      	bls.n	8004216 <_vfiprintf_r+0x1ee>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0c5      	beq.n	800419e <_vfiprintf_r+0x176>
 8004212:	9105      	str	r1, [sp, #20]
 8004214:	e7c3      	b.n	800419e <_vfiprintf_r+0x176>
 8004216:	fb0c 2101 	mla	r1, ip, r1, r2
 800421a:	4604      	mov	r4, r0
 800421c:	2301      	movs	r3, #1
 800421e:	e7f0      	b.n	8004202 <_vfiprintf_r+0x1da>
 8004220:	ab03      	add	r3, sp, #12
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	462a      	mov	r2, r5
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <_vfiprintf_r+0x258>)
 8004228:	a904      	add	r1, sp, #16
 800422a:	4630      	mov	r0, r6
 800422c:	f3af 8000 	nop.w
 8004230:	4607      	mov	r7, r0
 8004232:	1c78      	adds	r0, r7, #1
 8004234:	d1d6      	bne.n	80041e4 <_vfiprintf_r+0x1bc>
 8004236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004238:	07d9      	lsls	r1, r3, #31
 800423a:	d405      	bmi.n	8004248 <_vfiprintf_r+0x220>
 800423c:	89ab      	ldrh	r3, [r5, #12]
 800423e:	059a      	lsls	r2, r3, #22
 8004240:	d402      	bmi.n	8004248 <_vfiprintf_r+0x220>
 8004242:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004244:	f7ff fdae 	bl	8003da4 <__retarget_lock_release_recursive>
 8004248:	89ab      	ldrh	r3, [r5, #12]
 800424a:	065b      	lsls	r3, r3, #25
 800424c:	f53f af12 	bmi.w	8004074 <_vfiprintf_r+0x4c>
 8004250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004252:	e711      	b.n	8004078 <_vfiprintf_r+0x50>
 8004254:	ab03      	add	r3, sp, #12
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	462a      	mov	r2, r5
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <_vfiprintf_r+0x258>)
 800425c:	a904      	add	r1, sp, #16
 800425e:	4630      	mov	r0, r6
 8004260:	f000 f880 	bl	8004364 <_printf_i>
 8004264:	e7e4      	b.n	8004230 <_vfiprintf_r+0x208>
 8004266:	bf00      	nop
 8004268:	08004b68 	.word	0x08004b68
 800426c:	08004b88 	.word	0x08004b88
 8004270:	08004b48 	.word	0x08004b48
 8004274:	08004ba8 	.word	0x08004ba8
 8004278:	08004bb2 	.word	0x08004bb2
 800427c:	00000000 	.word	0x00000000
 8004280:	08004003 	.word	0x08004003
 8004284:	08004bae 	.word	0x08004bae

08004288 <_printf_common>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	4616      	mov	r6, r2
 800428e:	4699      	mov	r9, r3
 8004290:	688a      	ldr	r2, [r1, #8]
 8004292:	690b      	ldr	r3, [r1, #16]
 8004294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004298:	4293      	cmp	r3, r2
 800429a:	bfb8      	it	lt
 800429c:	4613      	movlt	r3, r2
 800429e:	6033      	str	r3, [r6, #0]
 80042a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042a4:	4607      	mov	r7, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	b10a      	cbz	r2, 80042ae <_printf_common+0x26>
 80042aa:	3301      	adds	r3, #1
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	0699      	lsls	r1, r3, #26
 80042b2:	bf42      	ittt	mi
 80042b4:	6833      	ldrmi	r3, [r6, #0]
 80042b6:	3302      	addmi	r3, #2
 80042b8:	6033      	strmi	r3, [r6, #0]
 80042ba:	6825      	ldr	r5, [r4, #0]
 80042bc:	f015 0506 	ands.w	r5, r5, #6
 80042c0:	d106      	bne.n	80042d0 <_printf_common+0x48>
 80042c2:	f104 0a19 	add.w	sl, r4, #25
 80042c6:	68e3      	ldr	r3, [r4, #12]
 80042c8:	6832      	ldr	r2, [r6, #0]
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	42ab      	cmp	r3, r5
 80042ce:	dc26      	bgt.n	800431e <_printf_common+0x96>
 80042d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042d4:	1e13      	subs	r3, r2, #0
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	bf18      	it	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	0692      	lsls	r2, r2, #26
 80042de:	d42b      	bmi.n	8004338 <_printf_common+0xb0>
 80042e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042e4:	4649      	mov	r1, r9
 80042e6:	4638      	mov	r0, r7
 80042e8:	47c0      	blx	r8
 80042ea:	3001      	adds	r0, #1
 80042ec:	d01e      	beq.n	800432c <_printf_common+0xa4>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	68e5      	ldr	r5, [r4, #12]
 80042f2:	6832      	ldr	r2, [r6, #0]
 80042f4:	f003 0306 	and.w	r3, r3, #6
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	bf08      	it	eq
 80042fc:	1aad      	subeq	r5, r5, r2
 80042fe:	68a3      	ldr	r3, [r4, #8]
 8004300:	6922      	ldr	r2, [r4, #16]
 8004302:	bf0c      	ite	eq
 8004304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004308:	2500      	movne	r5, #0
 800430a:	4293      	cmp	r3, r2
 800430c:	bfc4      	itt	gt
 800430e:	1a9b      	subgt	r3, r3, r2
 8004310:	18ed      	addgt	r5, r5, r3
 8004312:	2600      	movs	r6, #0
 8004314:	341a      	adds	r4, #26
 8004316:	42b5      	cmp	r5, r6
 8004318:	d11a      	bne.n	8004350 <_printf_common+0xc8>
 800431a:	2000      	movs	r0, #0
 800431c:	e008      	b.n	8004330 <_printf_common+0xa8>
 800431e:	2301      	movs	r3, #1
 8004320:	4652      	mov	r2, sl
 8004322:	4649      	mov	r1, r9
 8004324:	4638      	mov	r0, r7
 8004326:	47c0      	blx	r8
 8004328:	3001      	adds	r0, #1
 800432a:	d103      	bne.n	8004334 <_printf_common+0xac>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004334:	3501      	adds	r5, #1
 8004336:	e7c6      	b.n	80042c6 <_printf_common+0x3e>
 8004338:	18e1      	adds	r1, r4, r3
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	2030      	movs	r0, #48	; 0x30
 800433e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004342:	4422      	add	r2, r4
 8004344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800434c:	3302      	adds	r3, #2
 800434e:	e7c7      	b.n	80042e0 <_printf_common+0x58>
 8004350:	2301      	movs	r3, #1
 8004352:	4622      	mov	r2, r4
 8004354:	4649      	mov	r1, r9
 8004356:	4638      	mov	r0, r7
 8004358:	47c0      	blx	r8
 800435a:	3001      	adds	r0, #1
 800435c:	d0e6      	beq.n	800432c <_printf_common+0xa4>
 800435e:	3601      	adds	r6, #1
 8004360:	e7d9      	b.n	8004316 <_printf_common+0x8e>
	...

08004364 <_printf_i>:
 8004364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	460c      	mov	r4, r1
 800436a:	4691      	mov	r9, r2
 800436c:	7e27      	ldrb	r7, [r4, #24]
 800436e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004370:	2f78      	cmp	r7, #120	; 0x78
 8004372:	4680      	mov	r8, r0
 8004374:	469a      	mov	sl, r3
 8004376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800437a:	d807      	bhi.n	800438c <_printf_i+0x28>
 800437c:	2f62      	cmp	r7, #98	; 0x62
 800437e:	d80a      	bhi.n	8004396 <_printf_i+0x32>
 8004380:	2f00      	cmp	r7, #0
 8004382:	f000 80d8 	beq.w	8004536 <_printf_i+0x1d2>
 8004386:	2f58      	cmp	r7, #88	; 0x58
 8004388:	f000 80a3 	beq.w	80044d2 <_printf_i+0x16e>
 800438c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004394:	e03a      	b.n	800440c <_printf_i+0xa8>
 8004396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800439a:	2b15      	cmp	r3, #21
 800439c:	d8f6      	bhi.n	800438c <_printf_i+0x28>
 800439e:	a001      	add	r0, pc, #4	; (adr r0, 80043a4 <_printf_i+0x40>)
 80043a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	08004411 	.word	0x08004411
 80043ac:	0800438d 	.word	0x0800438d
 80043b0:	0800438d 	.word	0x0800438d
 80043b4:	0800438d 	.word	0x0800438d
 80043b8:	0800438d 	.word	0x0800438d
 80043bc:	08004411 	.word	0x08004411
 80043c0:	0800438d 	.word	0x0800438d
 80043c4:	0800438d 	.word	0x0800438d
 80043c8:	0800438d 	.word	0x0800438d
 80043cc:	0800438d 	.word	0x0800438d
 80043d0:	0800451d 	.word	0x0800451d
 80043d4:	08004441 	.word	0x08004441
 80043d8:	080044ff 	.word	0x080044ff
 80043dc:	0800438d 	.word	0x0800438d
 80043e0:	0800438d 	.word	0x0800438d
 80043e4:	0800453f 	.word	0x0800453f
 80043e8:	0800438d 	.word	0x0800438d
 80043ec:	08004441 	.word	0x08004441
 80043f0:	0800438d 	.word	0x0800438d
 80043f4:	0800438d 	.word	0x0800438d
 80043f8:	08004507 	.word	0x08004507
 80043fc:	680b      	ldr	r3, [r1, #0]
 80043fe:	1d1a      	adds	r2, r3, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	600a      	str	r2, [r1, #0]
 8004404:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800440c:	2301      	movs	r3, #1
 800440e:	e0a3      	b.n	8004558 <_printf_i+0x1f4>
 8004410:	6825      	ldr	r5, [r4, #0]
 8004412:	6808      	ldr	r0, [r1, #0]
 8004414:	062e      	lsls	r6, r5, #24
 8004416:	f100 0304 	add.w	r3, r0, #4
 800441a:	d50a      	bpl.n	8004432 <_printf_i+0xce>
 800441c:	6805      	ldr	r5, [r0, #0]
 800441e:	600b      	str	r3, [r1, #0]
 8004420:	2d00      	cmp	r5, #0
 8004422:	da03      	bge.n	800442c <_printf_i+0xc8>
 8004424:	232d      	movs	r3, #45	; 0x2d
 8004426:	426d      	negs	r5, r5
 8004428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442c:	485e      	ldr	r0, [pc, #376]	; (80045a8 <_printf_i+0x244>)
 800442e:	230a      	movs	r3, #10
 8004430:	e019      	b.n	8004466 <_printf_i+0x102>
 8004432:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004436:	6805      	ldr	r5, [r0, #0]
 8004438:	600b      	str	r3, [r1, #0]
 800443a:	bf18      	it	ne
 800443c:	b22d      	sxthne	r5, r5
 800443e:	e7ef      	b.n	8004420 <_printf_i+0xbc>
 8004440:	680b      	ldr	r3, [r1, #0]
 8004442:	6825      	ldr	r5, [r4, #0]
 8004444:	1d18      	adds	r0, r3, #4
 8004446:	6008      	str	r0, [r1, #0]
 8004448:	0628      	lsls	r0, r5, #24
 800444a:	d501      	bpl.n	8004450 <_printf_i+0xec>
 800444c:	681d      	ldr	r5, [r3, #0]
 800444e:	e002      	b.n	8004456 <_printf_i+0xf2>
 8004450:	0669      	lsls	r1, r5, #25
 8004452:	d5fb      	bpl.n	800444c <_printf_i+0xe8>
 8004454:	881d      	ldrh	r5, [r3, #0]
 8004456:	4854      	ldr	r0, [pc, #336]	; (80045a8 <_printf_i+0x244>)
 8004458:	2f6f      	cmp	r7, #111	; 0x6f
 800445a:	bf0c      	ite	eq
 800445c:	2308      	moveq	r3, #8
 800445e:	230a      	movne	r3, #10
 8004460:	2100      	movs	r1, #0
 8004462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004466:	6866      	ldr	r6, [r4, #4]
 8004468:	60a6      	str	r6, [r4, #8]
 800446a:	2e00      	cmp	r6, #0
 800446c:	bfa2      	ittt	ge
 800446e:	6821      	ldrge	r1, [r4, #0]
 8004470:	f021 0104 	bicge.w	r1, r1, #4
 8004474:	6021      	strge	r1, [r4, #0]
 8004476:	b90d      	cbnz	r5, 800447c <_printf_i+0x118>
 8004478:	2e00      	cmp	r6, #0
 800447a:	d04d      	beq.n	8004518 <_printf_i+0x1b4>
 800447c:	4616      	mov	r6, r2
 800447e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004482:	fb03 5711 	mls	r7, r3, r1, r5
 8004486:	5dc7      	ldrb	r7, [r0, r7]
 8004488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800448c:	462f      	mov	r7, r5
 800448e:	42bb      	cmp	r3, r7
 8004490:	460d      	mov	r5, r1
 8004492:	d9f4      	bls.n	800447e <_printf_i+0x11a>
 8004494:	2b08      	cmp	r3, #8
 8004496:	d10b      	bne.n	80044b0 <_printf_i+0x14c>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	07df      	lsls	r7, r3, #31
 800449c:	d508      	bpl.n	80044b0 <_printf_i+0x14c>
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	6861      	ldr	r1, [r4, #4]
 80044a2:	4299      	cmp	r1, r3
 80044a4:	bfde      	ittt	le
 80044a6:	2330      	movle	r3, #48	; 0x30
 80044a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044ac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80044b0:	1b92      	subs	r2, r2, r6
 80044b2:	6122      	str	r2, [r4, #16]
 80044b4:	f8cd a000 	str.w	sl, [sp]
 80044b8:	464b      	mov	r3, r9
 80044ba:	aa03      	add	r2, sp, #12
 80044bc:	4621      	mov	r1, r4
 80044be:	4640      	mov	r0, r8
 80044c0:	f7ff fee2 	bl	8004288 <_printf_common>
 80044c4:	3001      	adds	r0, #1
 80044c6:	d14c      	bne.n	8004562 <_printf_i+0x1fe>
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044cc:	b004      	add	sp, #16
 80044ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d2:	4835      	ldr	r0, [pc, #212]	; (80045a8 <_printf_i+0x244>)
 80044d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	680e      	ldr	r6, [r1, #0]
 80044dc:	061f      	lsls	r7, r3, #24
 80044de:	f856 5b04 	ldr.w	r5, [r6], #4
 80044e2:	600e      	str	r6, [r1, #0]
 80044e4:	d514      	bpl.n	8004510 <_printf_i+0x1ac>
 80044e6:	07d9      	lsls	r1, r3, #31
 80044e8:	bf44      	itt	mi
 80044ea:	f043 0320 	orrmi.w	r3, r3, #32
 80044ee:	6023      	strmi	r3, [r4, #0]
 80044f0:	b91d      	cbnz	r5, 80044fa <_printf_i+0x196>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	f023 0320 	bic.w	r3, r3, #32
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	2310      	movs	r3, #16
 80044fc:	e7b0      	b.n	8004460 <_printf_i+0xfc>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	f043 0320 	orr.w	r3, r3, #32
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	2378      	movs	r3, #120	; 0x78
 8004508:	4828      	ldr	r0, [pc, #160]	; (80045ac <_printf_i+0x248>)
 800450a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800450e:	e7e3      	b.n	80044d8 <_printf_i+0x174>
 8004510:	065e      	lsls	r6, r3, #25
 8004512:	bf48      	it	mi
 8004514:	b2ad      	uxthmi	r5, r5
 8004516:	e7e6      	b.n	80044e6 <_printf_i+0x182>
 8004518:	4616      	mov	r6, r2
 800451a:	e7bb      	b.n	8004494 <_printf_i+0x130>
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	6826      	ldr	r6, [r4, #0]
 8004520:	6960      	ldr	r0, [r4, #20]
 8004522:	1d1d      	adds	r5, r3, #4
 8004524:	600d      	str	r5, [r1, #0]
 8004526:	0635      	lsls	r5, r6, #24
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	d501      	bpl.n	8004530 <_printf_i+0x1cc>
 800452c:	6018      	str	r0, [r3, #0]
 800452e:	e002      	b.n	8004536 <_printf_i+0x1d2>
 8004530:	0671      	lsls	r1, r6, #25
 8004532:	d5fb      	bpl.n	800452c <_printf_i+0x1c8>
 8004534:	8018      	strh	r0, [r3, #0]
 8004536:	2300      	movs	r3, #0
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	4616      	mov	r6, r2
 800453c:	e7ba      	b.n	80044b4 <_printf_i+0x150>
 800453e:	680b      	ldr	r3, [r1, #0]
 8004540:	1d1a      	adds	r2, r3, #4
 8004542:	600a      	str	r2, [r1, #0]
 8004544:	681e      	ldr	r6, [r3, #0]
 8004546:	6862      	ldr	r2, [r4, #4]
 8004548:	2100      	movs	r1, #0
 800454a:	4630      	mov	r0, r6
 800454c:	f7fb fe50 	bl	80001f0 <memchr>
 8004550:	b108      	cbz	r0, 8004556 <_printf_i+0x1f2>
 8004552:	1b80      	subs	r0, r0, r6
 8004554:	6060      	str	r0, [r4, #4]
 8004556:	6863      	ldr	r3, [r4, #4]
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	2300      	movs	r3, #0
 800455c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004560:	e7a8      	b.n	80044b4 <_printf_i+0x150>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	4632      	mov	r2, r6
 8004566:	4649      	mov	r1, r9
 8004568:	4640      	mov	r0, r8
 800456a:	47d0      	blx	sl
 800456c:	3001      	adds	r0, #1
 800456e:	d0ab      	beq.n	80044c8 <_printf_i+0x164>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	079b      	lsls	r3, r3, #30
 8004574:	d413      	bmi.n	800459e <_printf_i+0x23a>
 8004576:	68e0      	ldr	r0, [r4, #12]
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	4298      	cmp	r0, r3
 800457c:	bfb8      	it	lt
 800457e:	4618      	movlt	r0, r3
 8004580:	e7a4      	b.n	80044cc <_printf_i+0x168>
 8004582:	2301      	movs	r3, #1
 8004584:	4632      	mov	r2, r6
 8004586:	4649      	mov	r1, r9
 8004588:	4640      	mov	r0, r8
 800458a:	47d0      	blx	sl
 800458c:	3001      	adds	r0, #1
 800458e:	d09b      	beq.n	80044c8 <_printf_i+0x164>
 8004590:	3501      	adds	r5, #1
 8004592:	68e3      	ldr	r3, [r4, #12]
 8004594:	9903      	ldr	r1, [sp, #12]
 8004596:	1a5b      	subs	r3, r3, r1
 8004598:	42ab      	cmp	r3, r5
 800459a:	dcf2      	bgt.n	8004582 <_printf_i+0x21e>
 800459c:	e7eb      	b.n	8004576 <_printf_i+0x212>
 800459e:	2500      	movs	r5, #0
 80045a0:	f104 0619 	add.w	r6, r4, #25
 80045a4:	e7f5      	b.n	8004592 <_printf_i+0x22e>
 80045a6:	bf00      	nop
 80045a8:	08004bb9 	.word	0x08004bb9
 80045ac:	08004bca 	.word	0x08004bca

080045b0 <_putc_r>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	460d      	mov	r5, r1
 80045b4:	4614      	mov	r4, r2
 80045b6:	4606      	mov	r6, r0
 80045b8:	b118      	cbz	r0, 80045c2 <_putc_r+0x12>
 80045ba:	6983      	ldr	r3, [r0, #24]
 80045bc:	b90b      	cbnz	r3, 80045c2 <_putc_r+0x12>
 80045be:	f7ff faf5 	bl	8003bac <__sinit>
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <_putc_r+0x84>)
 80045c4:	429c      	cmp	r4, r3
 80045c6:	d124      	bne.n	8004612 <_putc_r+0x62>
 80045c8:	6874      	ldr	r4, [r6, #4]
 80045ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045cc:	07d8      	lsls	r0, r3, #31
 80045ce:	d405      	bmi.n	80045dc <_putc_r+0x2c>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	0599      	lsls	r1, r3, #22
 80045d4:	d402      	bmi.n	80045dc <_putc_r+0x2c>
 80045d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045d8:	f7ff fbe3 	bl	8003da2 <__retarget_lock_acquire_recursive>
 80045dc:	68a3      	ldr	r3, [r4, #8]
 80045de:	3b01      	subs	r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	60a3      	str	r3, [r4, #8]
 80045e4:	da05      	bge.n	80045f2 <_putc_r+0x42>
 80045e6:	69a2      	ldr	r2, [r4, #24]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	db1c      	blt.n	8004626 <_putc_r+0x76>
 80045ec:	b2eb      	uxtb	r3, r5
 80045ee:	2b0a      	cmp	r3, #10
 80045f0:	d019      	beq.n	8004626 <_putc_r+0x76>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	6022      	str	r2, [r4, #0]
 80045f8:	701d      	strb	r5, [r3, #0]
 80045fa:	b2ed      	uxtb	r5, r5
 80045fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045fe:	07da      	lsls	r2, r3, #31
 8004600:	d405      	bmi.n	800460e <_putc_r+0x5e>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	059b      	lsls	r3, r3, #22
 8004606:	d402      	bmi.n	800460e <_putc_r+0x5e>
 8004608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800460a:	f7ff fbcb 	bl	8003da4 <__retarget_lock_release_recursive>
 800460e:	4628      	mov	r0, r5
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <_putc_r+0x88>)
 8004614:	429c      	cmp	r4, r3
 8004616:	d101      	bne.n	800461c <_putc_r+0x6c>
 8004618:	68b4      	ldr	r4, [r6, #8]
 800461a:	e7d6      	b.n	80045ca <_putc_r+0x1a>
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <_putc_r+0x8c>)
 800461e:	429c      	cmp	r4, r3
 8004620:	bf08      	it	eq
 8004622:	68f4      	ldreq	r4, [r6, #12]
 8004624:	e7d1      	b.n	80045ca <_putc_r+0x1a>
 8004626:	4629      	mov	r1, r5
 8004628:	4622      	mov	r2, r4
 800462a:	4630      	mov	r0, r6
 800462c:	f000 f888 	bl	8004740 <__swbuf_r>
 8004630:	4605      	mov	r5, r0
 8004632:	e7e3      	b.n	80045fc <_putc_r+0x4c>
 8004634:	08004b68 	.word	0x08004b68
 8004638:	08004b88 	.word	0x08004b88
 800463c:	08004b48 	.word	0x08004b48

08004640 <__srget_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	460c      	mov	r4, r1
 8004644:	4605      	mov	r5, r0
 8004646:	b118      	cbz	r0, 8004650 <__srget_r+0x10>
 8004648:	6983      	ldr	r3, [r0, #24]
 800464a:	b90b      	cbnz	r3, 8004650 <__srget_r+0x10>
 800464c:	f7ff faae 	bl	8003bac <__sinit>
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <__srget_r+0x4c>)
 8004652:	429c      	cmp	r4, r3
 8004654:	d10d      	bne.n	8004672 <__srget_r+0x32>
 8004656:	686c      	ldr	r4, [r5, #4]
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f9ae 	bl	80049bc <__srefill_r>
 8004660:	b988      	cbnz	r0, 8004686 <__srget_r+0x46>
 8004662:	6863      	ldr	r3, [r4, #4]
 8004664:	3b01      	subs	r3, #1
 8004666:	6063      	str	r3, [r4, #4]
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	7818      	ldrb	r0, [r3, #0]
 8004670:	bd38      	pop	{r3, r4, r5, pc}
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <__srget_r+0x50>)
 8004674:	429c      	cmp	r4, r3
 8004676:	d101      	bne.n	800467c <__srget_r+0x3c>
 8004678:	68ac      	ldr	r4, [r5, #8]
 800467a:	e7ed      	b.n	8004658 <__srget_r+0x18>
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <__srget_r+0x54>)
 800467e:	429c      	cmp	r4, r3
 8004680:	bf08      	it	eq
 8004682:	68ec      	ldreq	r4, [r5, #12]
 8004684:	e7e8      	b.n	8004658 <__srget_r+0x18>
 8004686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800468a:	e7f1      	b.n	8004670 <__srget_r+0x30>
 800468c:	08004b68 	.word	0x08004b68
 8004690:	08004b88 	.word	0x08004b88
 8004694:	08004b48 	.word	0x08004b48

08004698 <_sbrk_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4d06      	ldr	r5, [pc, #24]	; (80046b4 <_sbrk_r+0x1c>)
 800469c:	2300      	movs	r3, #0
 800469e:	4604      	mov	r4, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc fa48 	bl	8000b38 <_sbrk>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d102      	bne.n	80046b2 <_sbrk_r+0x1a>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	b103      	cbz	r3, 80046b2 <_sbrk_r+0x1a>
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	20000130 	.word	0x20000130

080046b8 <__sread>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	460c      	mov	r4, r1
 80046bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c0:	f000 f960 	bl	8004984 <_read_r>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	bfab      	itete	ge
 80046c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046ca:	89a3      	ldrhlt	r3, [r4, #12]
 80046cc:	181b      	addge	r3, r3, r0
 80046ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046d2:	bfac      	ite	ge
 80046d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80046d6:	81a3      	strhlt	r3, [r4, #12]
 80046d8:	bd10      	pop	{r4, pc}

080046da <__swrite>:
 80046da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046de:	461f      	mov	r7, r3
 80046e0:	898b      	ldrh	r3, [r1, #12]
 80046e2:	05db      	lsls	r3, r3, #23
 80046e4:	4605      	mov	r5, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	4616      	mov	r6, r2
 80046ea:	d505      	bpl.n	80046f8 <__swrite+0x1e>
 80046ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f0:	2302      	movs	r3, #2
 80046f2:	2200      	movs	r2, #0
 80046f4:	f000 f928 	bl	8004948 <_lseek_r>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	4632      	mov	r2, r6
 8004706:	463b      	mov	r3, r7
 8004708:	4628      	mov	r0, r5
 800470a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	f000 b869 	b.w	80047e4 <_write_r>

08004712 <__sseek>:
 8004712:	b510      	push	{r4, lr}
 8004714:	460c      	mov	r4, r1
 8004716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471a:	f000 f915 	bl	8004948 <_lseek_r>
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	bf15      	itete	ne
 8004724:	6560      	strne	r0, [r4, #84]	; 0x54
 8004726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800472a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800472e:	81a3      	strheq	r3, [r4, #12]
 8004730:	bf18      	it	ne
 8004732:	81a3      	strhne	r3, [r4, #12]
 8004734:	bd10      	pop	{r4, pc}

08004736 <__sclose>:
 8004736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473a:	f000 b8d3 	b.w	80048e4 <_close_r>
	...

08004740 <__swbuf_r>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	460e      	mov	r6, r1
 8004744:	4614      	mov	r4, r2
 8004746:	4605      	mov	r5, r0
 8004748:	b118      	cbz	r0, 8004752 <__swbuf_r+0x12>
 800474a:	6983      	ldr	r3, [r0, #24]
 800474c:	b90b      	cbnz	r3, 8004752 <__swbuf_r+0x12>
 800474e:	f7ff fa2d 	bl	8003bac <__sinit>
 8004752:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <__swbuf_r+0x98>)
 8004754:	429c      	cmp	r4, r3
 8004756:	d12b      	bne.n	80047b0 <__swbuf_r+0x70>
 8004758:	686c      	ldr	r4, [r5, #4]
 800475a:	69a3      	ldr	r3, [r4, #24]
 800475c:	60a3      	str	r3, [r4, #8]
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	071a      	lsls	r2, r3, #28
 8004762:	d52f      	bpl.n	80047c4 <__swbuf_r+0x84>
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	b36b      	cbz	r3, 80047c4 <__swbuf_r+0x84>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	1ac0      	subs	r0, r0, r3
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	b2f6      	uxtb	r6, r6
 8004772:	4283      	cmp	r3, r0
 8004774:	4637      	mov	r7, r6
 8004776:	dc04      	bgt.n	8004782 <__swbuf_r+0x42>
 8004778:	4621      	mov	r1, r4
 800477a:	4628      	mov	r0, r5
 800477c:	f7ff f970 	bl	8003a60 <_fflush_r>
 8004780:	bb30      	cbnz	r0, 80047d0 <__swbuf_r+0x90>
 8004782:	68a3      	ldr	r3, [r4, #8]
 8004784:	3b01      	subs	r3, #1
 8004786:	60a3      	str	r3, [r4, #8]
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	6022      	str	r2, [r4, #0]
 800478e:	701e      	strb	r6, [r3, #0]
 8004790:	6963      	ldr	r3, [r4, #20]
 8004792:	3001      	adds	r0, #1
 8004794:	4283      	cmp	r3, r0
 8004796:	d004      	beq.n	80047a2 <__swbuf_r+0x62>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	07db      	lsls	r3, r3, #31
 800479c:	d506      	bpl.n	80047ac <__swbuf_r+0x6c>
 800479e:	2e0a      	cmp	r6, #10
 80047a0:	d104      	bne.n	80047ac <__swbuf_r+0x6c>
 80047a2:	4621      	mov	r1, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7ff f95b 	bl	8003a60 <_fflush_r>
 80047aa:	b988      	cbnz	r0, 80047d0 <__swbuf_r+0x90>
 80047ac:	4638      	mov	r0, r7
 80047ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <__swbuf_r+0x9c>)
 80047b2:	429c      	cmp	r4, r3
 80047b4:	d101      	bne.n	80047ba <__swbuf_r+0x7a>
 80047b6:	68ac      	ldr	r4, [r5, #8]
 80047b8:	e7cf      	b.n	800475a <__swbuf_r+0x1a>
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <__swbuf_r+0xa0>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	bf08      	it	eq
 80047c0:	68ec      	ldreq	r4, [r5, #12]
 80047c2:	e7ca      	b.n	800475a <__swbuf_r+0x1a>
 80047c4:	4621      	mov	r1, r4
 80047c6:	4628      	mov	r0, r5
 80047c8:	f000 f81e 	bl	8004808 <__swsetup_r>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d0cb      	beq.n	8004768 <__swbuf_r+0x28>
 80047d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80047d4:	e7ea      	b.n	80047ac <__swbuf_r+0x6c>
 80047d6:	bf00      	nop
 80047d8:	08004b68 	.word	0x08004b68
 80047dc:	08004b88 	.word	0x08004b88
 80047e0:	08004b48 	.word	0x08004b48

080047e4 <_write_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d07      	ldr	r5, [pc, #28]	; (8004804 <_write_r+0x20>)
 80047e8:	4604      	mov	r4, r0
 80047ea:	4608      	mov	r0, r1
 80047ec:	4611      	mov	r1, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	602a      	str	r2, [r5, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7fc f83e 	bl	8000874 <_write>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_write_r+0x1e>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_write_r+0x1e>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	20000130 	.word	0x20000130

08004808 <__swsetup_r>:
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <__swsetup_r+0xcc>)
 800480a:	b570      	push	{r4, r5, r6, lr}
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	4606      	mov	r6, r0
 8004810:	460c      	mov	r4, r1
 8004812:	b125      	cbz	r5, 800481e <__swsetup_r+0x16>
 8004814:	69ab      	ldr	r3, [r5, #24]
 8004816:	b913      	cbnz	r3, 800481e <__swsetup_r+0x16>
 8004818:	4628      	mov	r0, r5
 800481a:	f7ff f9c7 	bl	8003bac <__sinit>
 800481e:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <__swsetup_r+0xd0>)
 8004820:	429c      	cmp	r4, r3
 8004822:	d10f      	bne.n	8004844 <__swsetup_r+0x3c>
 8004824:	686c      	ldr	r4, [r5, #4]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800482c:	0719      	lsls	r1, r3, #28
 800482e:	d42c      	bmi.n	800488a <__swsetup_r+0x82>
 8004830:	06dd      	lsls	r5, r3, #27
 8004832:	d411      	bmi.n	8004858 <__swsetup_r+0x50>
 8004834:	2309      	movs	r3, #9
 8004836:	6033      	str	r3, [r6, #0]
 8004838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004842:	e03e      	b.n	80048c2 <__swsetup_r+0xba>
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <__swsetup_r+0xd4>)
 8004846:	429c      	cmp	r4, r3
 8004848:	d101      	bne.n	800484e <__swsetup_r+0x46>
 800484a:	68ac      	ldr	r4, [r5, #8]
 800484c:	e7eb      	b.n	8004826 <__swsetup_r+0x1e>
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <__swsetup_r+0xd8>)
 8004850:	429c      	cmp	r4, r3
 8004852:	bf08      	it	eq
 8004854:	68ec      	ldreq	r4, [r5, #12]
 8004856:	e7e6      	b.n	8004826 <__swsetup_r+0x1e>
 8004858:	0758      	lsls	r0, r3, #29
 800485a:	d512      	bpl.n	8004882 <__swsetup_r+0x7a>
 800485c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800485e:	b141      	cbz	r1, 8004872 <__swsetup_r+0x6a>
 8004860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <__swsetup_r+0x66>
 8004868:	4630      	mov	r0, r6
 800486a:	f7ff fb09 	bl	8003e80 <_free_r>
 800486e:	2300      	movs	r3, #0
 8004870:	6363      	str	r3, [r4, #52]	; 0x34
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	2300      	movs	r3, #0
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f043 0308 	orr.w	r3, r3, #8
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	b94b      	cbnz	r3, 80048a2 <__swsetup_r+0x9a>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004898:	d003      	beq.n	80048a2 <__swsetup_r+0x9a>
 800489a:	4621      	mov	r1, r4
 800489c:	4630      	mov	r0, r6
 800489e:	f7ff faa7 	bl	8003df0 <__smakebuf_r>
 80048a2:	89a0      	ldrh	r0, [r4, #12]
 80048a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048a8:	f010 0301 	ands.w	r3, r0, #1
 80048ac:	d00a      	beq.n	80048c4 <__swsetup_r+0xbc>
 80048ae:	2300      	movs	r3, #0
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6963      	ldr	r3, [r4, #20]
 80048b4:	425b      	negs	r3, r3
 80048b6:	61a3      	str	r3, [r4, #24]
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	b943      	cbnz	r3, 80048ce <__swsetup_r+0xc6>
 80048bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048c0:	d1ba      	bne.n	8004838 <__swsetup_r+0x30>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	0781      	lsls	r1, r0, #30
 80048c6:	bf58      	it	pl
 80048c8:	6963      	ldrpl	r3, [r4, #20]
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	e7f4      	b.n	80048b8 <__swsetup_r+0xb0>
 80048ce:	2000      	movs	r0, #0
 80048d0:	e7f7      	b.n	80048c2 <__swsetup_r+0xba>
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c
 80048d8:	08004b68 	.word	0x08004b68
 80048dc:	08004b88 	.word	0x08004b88
 80048e0:	08004b48 	.word	0x08004b48

080048e4 <_close_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d06      	ldr	r5, [pc, #24]	; (8004900 <_close_r+0x1c>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7fb ffec 	bl	80008cc <_close>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_close_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_close_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	20000130 	.word	0x20000130

08004904 <_fstat_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4d07      	ldr	r5, [pc, #28]	; (8004924 <_fstat_r+0x20>)
 8004908:	2300      	movs	r3, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	f7fc f82b 	bl	800096c <_fstat>
 8004916:	1c43      	adds	r3, r0, #1
 8004918:	d102      	bne.n	8004920 <_fstat_r+0x1c>
 800491a:	682b      	ldr	r3, [r5, #0]
 800491c:	b103      	cbz	r3, 8004920 <_fstat_r+0x1c>
 800491e:	6023      	str	r3, [r4, #0]
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	bf00      	nop
 8004924:	20000130 	.word	0x20000130

08004928 <_isatty_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d06      	ldr	r5, [pc, #24]	; (8004944 <_isatty_r+0x1c>)
 800492c:	2300      	movs	r3, #0
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	f7fb ff88 	bl	8000848 <_isatty>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_isatty_r+0x1a>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_isatty_r+0x1a>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000130 	.word	0x20000130

08004948 <_lseek_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d07      	ldr	r5, [pc, #28]	; (8004968 <_lseek_r+0x20>)
 800494c:	4604      	mov	r4, r0
 800494e:	4608      	mov	r0, r1
 8004950:	4611      	mov	r1, r2
 8004952:	2200      	movs	r2, #0
 8004954:	602a      	str	r2, [r5, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fb ffcf 	bl	80008fa <_lseek>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_lseek_r+0x1e>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_lseek_r+0x1e>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000130 	.word	0x20000130

0800496c <__malloc_lock>:
 800496c:	4801      	ldr	r0, [pc, #4]	; (8004974 <__malloc_lock+0x8>)
 800496e:	f7ff ba18 	b.w	8003da2 <__retarget_lock_acquire_recursive>
 8004972:	bf00      	nop
 8004974:	20000128 	.word	0x20000128

08004978 <__malloc_unlock>:
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <__malloc_unlock+0x8>)
 800497a:	f7ff ba13 	b.w	8003da4 <__retarget_lock_release_recursive>
 800497e:	bf00      	nop
 8004980:	20000128 	.word	0x20000128

08004984 <_read_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4d07      	ldr	r5, [pc, #28]	; (80049a4 <_read_r+0x20>)
 8004988:	4604      	mov	r4, r0
 800498a:	4608      	mov	r0, r1
 800498c:	4611      	mov	r1, r2
 800498e:	2200      	movs	r2, #0
 8004990:	602a      	str	r2, [r5, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	f7fb ffc2 	bl	800091c <_read>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d102      	bne.n	80049a2 <_read_r+0x1e>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	b103      	cbz	r3, 80049a2 <_read_r+0x1e>
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	20000130 	.word	0x20000130

080049a8 <lflush>:
 80049a8:	8983      	ldrh	r3, [r0, #12]
 80049aa:	f003 0309 	and.w	r3, r3, #9
 80049ae:	2b09      	cmp	r3, #9
 80049b0:	d101      	bne.n	80049b6 <lflush+0xe>
 80049b2:	f7ff b891 	b.w	8003ad8 <fflush>
 80049b6:	2000      	movs	r0, #0
 80049b8:	4770      	bx	lr
	...

080049bc <__srefill_r>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	460c      	mov	r4, r1
 80049c0:	4605      	mov	r5, r0
 80049c2:	b118      	cbz	r0, 80049cc <__srefill_r+0x10>
 80049c4:	6983      	ldr	r3, [r0, #24]
 80049c6:	b90b      	cbnz	r3, 80049cc <__srefill_r+0x10>
 80049c8:	f7ff f8f0 	bl	8003bac <__sinit>
 80049cc:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <__srefill_r+0x100>)
 80049ce:	429c      	cmp	r4, r3
 80049d0:	d10a      	bne.n	80049e8 <__srefill_r+0x2c>
 80049d2:	686c      	ldr	r4, [r5, #4]
 80049d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049d8:	2300      	movs	r3, #0
 80049da:	6063      	str	r3, [r4, #4]
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	069e      	lsls	r6, r3, #26
 80049e0:	d50c      	bpl.n	80049fc <__srefill_r+0x40>
 80049e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e6:	e066      	b.n	8004ab6 <__srefill_r+0xfa>
 80049e8:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <__srefill_r+0x104>)
 80049ea:	429c      	cmp	r4, r3
 80049ec:	d101      	bne.n	80049f2 <__srefill_r+0x36>
 80049ee:	68ac      	ldr	r4, [r5, #8]
 80049f0:	e7f0      	b.n	80049d4 <__srefill_r+0x18>
 80049f2:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <__srefill_r+0x108>)
 80049f4:	429c      	cmp	r4, r3
 80049f6:	bf08      	it	eq
 80049f8:	68ec      	ldreq	r4, [r5, #12]
 80049fa:	e7eb      	b.n	80049d4 <__srefill_r+0x18>
 80049fc:	0758      	lsls	r0, r3, #29
 80049fe:	d448      	bmi.n	8004a92 <__srefill_r+0xd6>
 8004a00:	06d9      	lsls	r1, r3, #27
 8004a02:	d405      	bmi.n	8004a10 <__srefill_r+0x54>
 8004a04:	2309      	movs	r3, #9
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a0c:	81a3      	strh	r3, [r4, #12]
 8004a0e:	e7e8      	b.n	80049e2 <__srefill_r+0x26>
 8004a10:	071a      	lsls	r2, r3, #28
 8004a12:	d50b      	bpl.n	8004a2c <__srefill_r+0x70>
 8004a14:	4621      	mov	r1, r4
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7ff f822 	bl	8003a60 <_fflush_r>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d1e0      	bne.n	80049e2 <__srefill_r+0x26>
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	60a0      	str	r0, [r4, #8]
 8004a24:	f023 0308 	bic.w	r3, r3, #8
 8004a28:	81a3      	strh	r3, [r4, #12]
 8004a2a:	61a0      	str	r0, [r4, #24]
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	f043 0304 	orr.w	r3, r3, #4
 8004a32:	81a3      	strh	r3, [r4, #12]
 8004a34:	6923      	ldr	r3, [r4, #16]
 8004a36:	b91b      	cbnz	r3, 8004a40 <__srefill_r+0x84>
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f7ff f9d8 	bl	8003df0 <__smakebuf_r>
 8004a40:	89a6      	ldrh	r6, [r4, #12]
 8004a42:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004a46:	07b3      	lsls	r3, r6, #30
 8004a48:	d00f      	beq.n	8004a6a <__srefill_r+0xae>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	81a3      	strh	r3, [r4, #12]
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <__srefill_r+0x10c>)
 8004a50:	491e      	ldr	r1, [pc, #120]	; (8004acc <__srefill_r+0x110>)
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	f006 0609 	and.w	r6, r6, #9
 8004a58:	f7ff f926 	bl	8003ca8 <_fwalk>
 8004a5c:	2e09      	cmp	r6, #9
 8004a5e:	81a7      	strh	r7, [r4, #12]
 8004a60:	d103      	bne.n	8004a6a <__srefill_r+0xae>
 8004a62:	4621      	mov	r1, r4
 8004a64:	4628      	mov	r0, r5
 8004a66:	f7fe ff75 	bl	8003954 <__sflush_r>
 8004a6a:	6922      	ldr	r2, [r4, #16]
 8004a6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a6e:	6963      	ldr	r3, [r4, #20]
 8004a70:	6a21      	ldr	r1, [r4, #32]
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b0      	blx	r6
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	6060      	str	r0, [r4, #4]
 8004a7c:	dc1c      	bgt.n	8004ab8 <__srefill_r+0xfc>
 8004a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a82:	bf17      	itett	ne
 8004a84:	2200      	movne	r2, #0
 8004a86:	f043 0320 	orreq.w	r3, r3, #32
 8004a8a:	6062      	strne	r2, [r4, #4]
 8004a8c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004a90:	e7bc      	b.n	8004a0c <__srefill_r+0x50>
 8004a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a94:	2900      	cmp	r1, #0
 8004a96:	d0cd      	beq.n	8004a34 <__srefill_r+0x78>
 8004a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d002      	beq.n	8004aa6 <__srefill_r+0xea>
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f7ff f9ed 	bl	8003e80 <_free_r>
 8004aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aa8:	6063      	str	r3, [r4, #4]
 8004aaa:	2000      	movs	r0, #0
 8004aac:	6360      	str	r0, [r4, #52]	; 0x34
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0c0      	beq.n	8004a34 <__srefill_r+0x78>
 8004ab2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e7fc      	b.n	8004ab6 <__srefill_r+0xfa>
 8004abc:	08004b68 	.word	0x08004b68
 8004ac0:	08004b88 	.word	0x08004b88
 8004ac4:	08004b48 	.word	0x08004b48
 8004ac8:	08004b44 	.word	0x08004b44
 8004acc:	080049a9 	.word	0x080049a9

08004ad0 <_init>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr

08004adc <_fini>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr
