ARM GAS  /tmp/ccjspM2O.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	NMI_Handler:
  27              	.LFB291:
  28              		.file 1 "Core/Src/stm32l4xx_it.c"
   1:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32l4xx_it.c **** /**
   3:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32l4xx_it.c ****   * @file    stm32l4xx_it.c
   5:Core/Src/stm32l4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32l4xx_it.c ****   * @attention
   8:Core/Src/stm32l4xx_it.c ****   *
   9:Core/Src/stm32l4xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32l4xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32l4xx_it.c ****   *
  12:Core/Src/stm32l4xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32l4xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32l4xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32l4xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32l4xx_it.c ****   *
  17:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32l4xx_it.c ****   */
  19:Core/Src/stm32l4xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32l4xx_it.c **** 
  21:Core/Src/stm32l4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32l4xx_it.c **** #include "main.h"
  23:Core/Src/stm32l4xx_it.c **** #include "stm32l4xx_it.h"
  24:Core/Src/stm32l4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32l4xx_it.c **** #include "queue.h"
  27:Core/Src/stm32l4xx_it.c **** #include <stdio.h>
  28:Core/Src/stm32l4xx_it.c **** /* USER CODE END Includes */
  29:Core/Src/stm32l4xx_it.c **** 
  30:Core/Src/stm32l4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccjspM2O.s 			page 2


  31:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN TD */
  32:Core/Src/stm32l4xx_it.c **** 
  33:Core/Src/stm32l4xx_it.c **** /* USER CODE END TD */
  34:Core/Src/stm32l4xx_it.c **** 
  35:Core/Src/stm32l4xx_it.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PD */
  37:Core/Src/stm32l4xx_it.c **** 
  38:Core/Src/stm32l4xx_it.c **** /* USER CODE END PD */
  39:Core/Src/stm32l4xx_it.c **** 
  40:Core/Src/stm32l4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PM */
  42:Core/Src/stm32l4xx_it.c **** 
  43:Core/Src/stm32l4xx_it.c **** /* USER CODE END PM */
  44:Core/Src/stm32l4xx_it.c **** 
  45:Core/Src/stm32l4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PV */
  47:Core/Src/stm32l4xx_it.c **** extern int alarm_flag;
  48:Core/Src/stm32l4xx_it.c **** 
  49:Core/Src/stm32l4xx_it.c **** /* USER CODE END PV */
  50:Core/Src/stm32l4xx_it.c **** 
  51:Core/Src/stm32l4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  52:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PFP */
  53:Core/Src/stm32l4xx_it.c **** 
  54:Core/Src/stm32l4xx_it.c **** /* USER CODE END PFP */
  55:Core/Src/stm32l4xx_it.c **** 
  56:Core/Src/stm32l4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  57:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN 0 */
  58:Core/Src/stm32l4xx_it.c **** 
  59:Core/Src/stm32l4xx_it.c **** /* USER CODE END 0 */
  60:Core/Src/stm32l4xx_it.c **** 
  61:Core/Src/stm32l4xx_it.c **** /* External variables --------------------------------------------------------*/
  62:Core/Src/stm32l4xx_it.c **** extern RTC_HandleTypeDef hrtc;
  63:Core/Src/stm32l4xx_it.c **** extern TIM_HandleTypeDef htim2;
  64:Core/Src/stm32l4xx_it.c **** extern UART_HandleTypeDef huart2;
  65:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN EV */
  66:Core/Src/stm32l4xx_it.c **** extern queue_t rx_queue;
  67:Core/Src/stm32l4xx_it.c **** /* USER CODE END EV */
  68:Core/Src/stm32l4xx_it.c **** 
  69:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32l4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  71:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  72:Core/Src/stm32l4xx_it.c **** /**
  73:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  74:Core/Src/stm32l4xx_it.c ****   */
  75:Core/Src/stm32l4xx_it.c **** void NMI_Handler(void)
  76:Core/Src/stm32l4xx_it.c **** {
  29              		.loc 1 76 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  77:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32l4xx_it.c **** 
  79:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  80:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
ARM GAS  /tmp/ccjspM2O.s 			page 3


  81:Core/Src/stm32l4xx_it.c ****   while (1)
  36              		.loc 1 81 3 discriminator 1 view .LVU1
  82:Core/Src/stm32l4xx_it.c ****   {
  83:Core/Src/stm32l4xx_it.c ****   }
  37              		.loc 1 83 3 discriminator 1 view .LVU2
  81:Core/Src/stm32l4xx_it.c ****   {
  38              		.loc 1 81 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE291:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	HardFault_Handler:
  52              	.LFB292:
  84:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  85:Core/Src/stm32l4xx_it.c **** }
  86:Core/Src/stm32l4xx_it.c **** 
  87:Core/Src/stm32l4xx_it.c **** /**
  88:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  89:Core/Src/stm32l4xx_it.c ****   */
  90:Core/Src/stm32l4xx_it.c **** void HardFault_Handler(void)
  91:Core/Src/stm32l4xx_it.c **** {
  53              		.loc 1 91 1 view -0
  54              		.cfi_startproc
  55              		@ Volatile: function does not return.
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.L4:
  92:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  93:Core/Src/stm32l4xx_it.c **** 
  94:Core/Src/stm32l4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  95:Core/Src/stm32l4xx_it.c ****   while (1)
  60              		.loc 1 95 3 discriminator 1 view .LVU5
  96:Core/Src/stm32l4xx_it.c ****   {
  97:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  98:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  99:Core/Src/stm32l4xx_it.c ****   }
  61              		.loc 1 99 3 discriminator 1 view .LVU6
  95:Core/Src/stm32l4xx_it.c ****   {
  62              		.loc 1 95 9 discriminator 1 view .LVU7
  63 0000 FEE7     		b	.L4
  64              		.cfi_endproc
  65              	.LFE292:
  67              		.section	.text.MemManage_Handler,"ax",%progbits
  68              		.align	1
  69              		.global	MemManage_Handler
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	MemManage_Handler:
ARM GAS  /tmp/ccjspM2O.s 			page 4


  76              	.LFB293:
 100:Core/Src/stm32l4xx_it.c **** }
 101:Core/Src/stm32l4xx_it.c **** 
 102:Core/Src/stm32l4xx_it.c **** /**
 103:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Memory management fault.
 104:Core/Src/stm32l4xx_it.c ****   */
 105:Core/Src/stm32l4xx_it.c **** void MemManage_Handler(void)
 106:Core/Src/stm32l4xx_it.c **** {
  77              		.loc 1 106 1 view -0
  78              		.cfi_startproc
  79              		@ Volatile: function does not return.
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.L6:
 107:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 108:Core/Src/stm32l4xx_it.c **** 
 109:Core/Src/stm32l4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 110:Core/Src/stm32l4xx_it.c ****   while (1)
  84              		.loc 1 110 3 discriminator 1 view .LVU9
 111:Core/Src/stm32l4xx_it.c ****   {
 112:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 113:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 114:Core/Src/stm32l4xx_it.c ****   }
  85              		.loc 1 114 3 discriminator 1 view .LVU10
 110:Core/Src/stm32l4xx_it.c ****   {
  86              		.loc 1 110 9 discriminator 1 view .LVU11
  87 0000 FEE7     		b	.L6
  88              		.cfi_endproc
  89              	.LFE293:
  91              		.section	.text.BusFault_Handler,"ax",%progbits
  92              		.align	1
  93              		.global	BusFault_Handler
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv4-sp-d16
  99              	BusFault_Handler:
 100              	.LFB294:
 115:Core/Src/stm32l4xx_it.c **** }
 116:Core/Src/stm32l4xx_it.c **** 
 117:Core/Src/stm32l4xx_it.c **** /**
 118:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 119:Core/Src/stm32l4xx_it.c ****   */
 120:Core/Src/stm32l4xx_it.c **** void BusFault_Handler(void)
 121:Core/Src/stm32l4xx_it.c **** {
 101              		.loc 1 121 1 view -0
 102              		.cfi_startproc
 103              		@ Volatile: function does not return.
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107              	.L8:
 122:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 123:Core/Src/stm32l4xx_it.c **** 
 124:Core/Src/stm32l4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 125:Core/Src/stm32l4xx_it.c ****   while (1)
ARM GAS  /tmp/ccjspM2O.s 			page 5


 108              		.loc 1 125 3 discriminator 1 view .LVU13
 126:Core/Src/stm32l4xx_it.c ****   {
 127:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 128:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 129:Core/Src/stm32l4xx_it.c ****   }
 109              		.loc 1 129 3 discriminator 1 view .LVU14
 125:Core/Src/stm32l4xx_it.c ****   {
 110              		.loc 1 125 9 discriminator 1 view .LVU15
 111 0000 FEE7     		b	.L8
 112              		.cfi_endproc
 113              	.LFE294:
 115              		.section	.text.UsageFault_Handler,"ax",%progbits
 116              		.align	1
 117              		.global	UsageFault_Handler
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv4-sp-d16
 123              	UsageFault_Handler:
 124              	.LFB295:
 130:Core/Src/stm32l4xx_it.c **** }
 131:Core/Src/stm32l4xx_it.c **** 
 132:Core/Src/stm32l4xx_it.c **** /**
 133:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 134:Core/Src/stm32l4xx_it.c ****   */
 135:Core/Src/stm32l4xx_it.c **** void UsageFault_Handler(void)
 136:Core/Src/stm32l4xx_it.c **** {
 125              		.loc 1 136 1 view -0
 126              		.cfi_startproc
 127              		@ Volatile: function does not return.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131              	.L10:
 137:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 138:Core/Src/stm32l4xx_it.c **** 
 139:Core/Src/stm32l4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 140:Core/Src/stm32l4xx_it.c ****   while (1)
 132              		.loc 1 140 3 discriminator 1 view .LVU17
 141:Core/Src/stm32l4xx_it.c ****   {
 142:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 143:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 144:Core/Src/stm32l4xx_it.c ****   }
 133              		.loc 1 144 3 discriminator 1 view .LVU18
 140:Core/Src/stm32l4xx_it.c ****   {
 134              		.loc 1 140 9 discriminator 1 view .LVU19
 135 0000 FEE7     		b	.L10
 136              		.cfi_endproc
 137              	.LFE295:
 139              		.section	.text.SVC_Handler,"ax",%progbits
 140              		.align	1
 141              		.global	SVC_Handler
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv4-sp-d16
 147              	SVC_Handler:
ARM GAS  /tmp/ccjspM2O.s 			page 6


 148              	.LFB296:
 145:Core/Src/stm32l4xx_it.c **** }
 146:Core/Src/stm32l4xx_it.c **** 
 147:Core/Src/stm32l4xx_it.c **** /**
 148:Core/Src/stm32l4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 149:Core/Src/stm32l4xx_it.c ****   */
 150:Core/Src/stm32l4xx_it.c **** void SVC_Handler(void)
 151:Core/Src/stm32l4xx_it.c **** {
 149              		.loc 1 151 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 152:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 153:Core/Src/stm32l4xx_it.c **** 
 154:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 155:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 156:Core/Src/stm32l4xx_it.c **** 
 157:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 158:Core/Src/stm32l4xx_it.c **** }
 154              		.loc 1 158 1 view .LVU21
 155 0000 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE296:
 159              		.section	.text.DebugMon_Handler,"ax",%progbits
 160              		.align	1
 161              		.global	DebugMon_Handler
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu fpv4-sp-d16
 167              	DebugMon_Handler:
 168              	.LFB297:
 159:Core/Src/stm32l4xx_it.c **** 
 160:Core/Src/stm32l4xx_it.c **** /**
 161:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Debug monitor.
 162:Core/Src/stm32l4xx_it.c ****   */
 163:Core/Src/stm32l4xx_it.c **** void DebugMon_Handler(void)
 164:Core/Src/stm32l4xx_it.c **** {
 169              		.loc 1 164 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 165:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 166:Core/Src/stm32l4xx_it.c **** 
 167:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 168:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 169:Core/Src/stm32l4xx_it.c **** 
 170:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 171:Core/Src/stm32l4xx_it.c **** }
 174              		.loc 1 171 1 view .LVU23
 175 0000 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE297:
 179              		.section	.text.PendSV_Handler,"ax",%progbits
 180              		.align	1
ARM GAS  /tmp/ccjspM2O.s 			page 7


 181              		.global	PendSV_Handler
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv4-sp-d16
 187              	PendSV_Handler:
 188              	.LFB298:
 172:Core/Src/stm32l4xx_it.c **** 
 173:Core/Src/stm32l4xx_it.c **** /**
 174:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Pendable request for system service.
 175:Core/Src/stm32l4xx_it.c ****   */
 176:Core/Src/stm32l4xx_it.c **** void PendSV_Handler(void)
 177:Core/Src/stm32l4xx_it.c **** {
 189              		.loc 1 177 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 178:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 179:Core/Src/stm32l4xx_it.c **** 
 180:Core/Src/stm32l4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 181:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 182:Core/Src/stm32l4xx_it.c **** 
 183:Core/Src/stm32l4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 184:Core/Src/stm32l4xx_it.c **** }
 194              		.loc 1 184 1 view .LVU25
 195 0000 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE298:
 199              		.section	.text.SysTick_Handler,"ax",%progbits
 200              		.align	1
 201              		.global	SysTick_Handler
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu fpv4-sp-d16
 207              	SysTick_Handler:
 208              	.LFB299:
 185:Core/Src/stm32l4xx_it.c **** 
 186:Core/Src/stm32l4xx_it.c **** /**
 187:Core/Src/stm32l4xx_it.c ****   * @brief This function handles System tick timer.
 188:Core/Src/stm32l4xx_it.c ****   */
 189:Core/Src/stm32l4xx_it.c **** void SysTick_Handler(void)
 190:Core/Src/stm32l4xx_it.c **** {
 209              		.loc 1 190 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213 0000 08B5     		push	{r3, lr}
 214              	.LCFI0:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 3, -8
 217              		.cfi_offset 14, -4
 191:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 192:Core/Src/stm32l4xx_it.c **** 
 193:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 194:Core/Src/stm32l4xx_it.c ****   HAL_IncTick();
ARM GAS  /tmp/ccjspM2O.s 			page 8


 218              		.loc 1 194 3 view .LVU27
 219 0002 FFF7FEFF 		bl	HAL_IncTick
 220              	.LVL0:
 195:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 196:Core/Src/stm32l4xx_it.c **** 
 197:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 198:Core/Src/stm32l4xx_it.c **** }
 221              		.loc 1 198 1 is_stmt 0 view .LVU28
 222 0006 08BD     		pop	{r3, pc}
 223              		.cfi_endproc
 224              	.LFE299:
 226              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 227              		.align	1
 228              		.global	TIM2_IRQHandler
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv4-sp-d16
 234              	TIM2_IRQHandler:
 235              	.LFB300:
 199:Core/Src/stm32l4xx_it.c **** 
 200:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 201:Core/Src/stm32l4xx_it.c **** /* STM32L4xx Peripheral Interrupt Handlers                                    */
 202:Core/Src/stm32l4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 203:Core/Src/stm32l4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 204:Core/Src/stm32l4xx_it.c **** /* please refer to the startup file (startup_stm32l4xx.s).                    */
 205:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 206:Core/Src/stm32l4xx_it.c **** 
 207:Core/Src/stm32l4xx_it.c **** /**
 208:Core/Src/stm32l4xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 209:Core/Src/stm32l4xx_it.c ****   */
 210:Core/Src/stm32l4xx_it.c **** void TIM2_IRQHandler(void)
 211:Core/Src/stm32l4xx_it.c **** {
 236              		.loc 1 211 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 08B5     		push	{r3, lr}
 241              	.LCFI1:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 3, -8
 244              		.cfi_offset 14, -4
 212:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 213:Core/Src/stm32l4xx_it.c **** 
 214:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 215:Core/Src/stm32l4xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 245              		.loc 1 215 3 view .LVU30
 246 0002 0248     		ldr	r0, .L18
 247 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 248              	.LVL1:
 216:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 217:Core/Src/stm32l4xx_it.c **** 
 218:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 219:Core/Src/stm32l4xx_it.c **** }
 249              		.loc 1 219 1 is_stmt 0 view .LVU31
 250 0008 08BD     		pop	{r3, pc}
 251              	.L19:
ARM GAS  /tmp/ccjspM2O.s 			page 9


 252 000a 00BF     		.align	2
 253              	.L18:
 254 000c 00000000 		.word	htim2
 255              		.cfi_endproc
 256              	.LFE300:
 258              		.section	.text.USART2_IRQHandler,"ax",%progbits
 259              		.align	1
 260              		.global	USART2_IRQHandler
 261              		.syntax unified
 262              		.thumb
 263              		.thumb_func
 264              		.fpu fpv4-sp-d16
 266              	USART2_IRQHandler:
 267              	.LFB301:
 220:Core/Src/stm32l4xx_it.c **** 
 221:Core/Src/stm32l4xx_it.c **** /**
 222:Core/Src/stm32l4xx_it.c ****   * @brief This function handles USART2 global interrupt.
 223:Core/Src/stm32l4xx_it.c ****   */
 224:Core/Src/stm32l4xx_it.c **** void USART2_IRQHandler(void)
 225:Core/Src/stm32l4xx_it.c **** {
 268              		.loc 1 225 1 is_stmt 1 view -0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272 0000 38B5     		push	{r3, r4, r5, lr}
 273              	.LCFI2:
 274              		.cfi_def_cfa_offset 16
 275              		.cfi_offset 3, -16
 276              		.cfi_offset 4, -12
 277              		.cfi_offset 5, -8
 278              		.cfi_offset 14, -4
 226:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 227:Core/Src/stm32l4xx_it.c ****   uint8_t ch;
 279              		.loc 1 227 3 view .LVU33
 228:Core/Src/stm32l4xx_it.c ****   ch = getchar();
 280              		.loc 1 228 3 view .LVU34
 281              		.loc 1 228 8 is_stmt 0 view .LVU35
 282 0002 FFF7FEFF 		bl	getchar
 283              	.LVL2:
 284              		.loc 1 228 6 view .LVU36
 285 0006 C4B2     		uxtb	r4, r0
 286              	.LVL3:
 229:Core/Src/stm32l4xx_it.c ****   if (enqueue(&rx_queue,ch)) {
 287              		.loc 1 229 3 is_stmt 1 view .LVU37
 288              		.loc 1 229 7 is_stmt 0 view .LVU38
 289 0008 2146     		mov	r1, r4
 290 000a 0848     		ldr	r0, .L24
 291 000c FFF7FEFF 		bl	enqueue
 292              	.LVL4:
 293              		.loc 1 229 6 view .LVU39
 294 0010 18B9     		cbnz	r0, .L23
 295              	.L21:
 230:Core/Src/stm32l4xx_it.c ****     dequeue(&rx_queue);
 231:Core/Src/stm32l4xx_it.c ****     enqueue(&rx_queue,ch);
 232:Core/Src/stm32l4xx_it.c ****   }
 233:Core/Src/stm32l4xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 234:Core/Src/stm32l4xx_it.c ****   HAL_UART_IRQHandler(&huart2);
ARM GAS  /tmp/ccjspM2O.s 			page 10


 296              		.loc 1 234 3 is_stmt 1 view .LVU40
 297 0012 0748     		ldr	r0, .L24+4
 298 0014 FFF7FEFF 		bl	HAL_UART_IRQHandler
 299              	.LVL5:
 235:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 236:Core/Src/stm32l4xx_it.c **** 
 237:Core/Src/stm32l4xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 238:Core/Src/stm32l4xx_it.c **** }
 300              		.loc 1 238 1 is_stmt 0 view .LVU41
 301 0018 38BD     		pop	{r3, r4, r5, pc}
 302              	.LVL6:
 303              	.L23:
 230:Core/Src/stm32l4xx_it.c ****     dequeue(&rx_queue);
 304              		.loc 1 230 5 is_stmt 1 view .LVU42
 305 001a 044D     		ldr	r5, .L24
 306 001c 2846     		mov	r0, r5
 307 001e FFF7FEFF 		bl	dequeue
 308              	.LVL7:
 231:Core/Src/stm32l4xx_it.c ****   }
 309              		.loc 1 231 5 view .LVU43
 310 0022 2146     		mov	r1, r4
 311 0024 2846     		mov	r0, r5
 312 0026 FFF7FEFF 		bl	enqueue
 313              	.LVL8:
 314 002a F2E7     		b	.L21
 315              	.L25:
 316              		.align	2
 317              	.L24:
 318 002c 00000000 		.word	rx_queue
 319 0030 00000000 		.word	huart2
 320              		.cfi_endproc
 321              	.LFE301:
 323              		.section	.text.RTC_Alarm_IRQHandler,"ax",%progbits
 324              		.align	1
 325              		.global	RTC_Alarm_IRQHandler
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu fpv4-sp-d16
 331              	RTC_Alarm_IRQHandler:
 332              	.LFB302:
 239:Core/Src/stm32l4xx_it.c **** 
 240:Core/Src/stm32l4xx_it.c **** /**
 241:Core/Src/stm32l4xx_it.c ****   * @brief This function handles RTC alarm interrupt through EXTI line 18.
 242:Core/Src/stm32l4xx_it.c ****   */
 243:Core/Src/stm32l4xx_it.c **** void RTC_Alarm_IRQHandler(void)
 244:Core/Src/stm32l4xx_it.c **** {
 333              		.loc 1 244 1 view -0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337 0000 08B5     		push	{r3, lr}
 338              	.LCFI3:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 3, -8
 341              		.cfi_offset 14, -4
 245:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
ARM GAS  /tmp/ccjspM2O.s 			page 11


 246:Core/Src/stm32l4xx_it.c **** 
 247:Core/Src/stm32l4xx_it.c ****   /* USER CODE END RTC_Alarm_IRQn 0 */
 248:Core/Src/stm32l4xx_it.c ****   HAL_RTC_AlarmIRQHandler(&hrtc);
 342              		.loc 1 248 3 view .LVU45
 343 0002 0348     		ldr	r0, .L28
 344 0004 FFF7FEFF 		bl	HAL_RTC_AlarmIRQHandler
 345              	.LVL9:
 249:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
 250:Core/Src/stm32l4xx_it.c ****   alarm_flag = 1;
 346              		.loc 1 250 3 view .LVU46
 347              		.loc 1 250 14 is_stmt 0 view .LVU47
 348 0008 024B     		ldr	r3, .L28+4
 349 000a 0122     		movs	r2, #1
 350 000c 1A60     		str	r2, [r3]
 251:Core/Src/stm32l4xx_it.c ****   /* USER CODE END RTC_Alarm_IRQn 1 */
 252:Core/Src/stm32l4xx_it.c **** }
 351              		.loc 1 252 1 view .LVU48
 352 000e 08BD     		pop	{r3, pc}
 353              	.L29:
 354              		.align	2
 355              	.L28:
 356 0010 00000000 		.word	hrtc
 357 0014 00000000 		.word	alarm_flag
 358              		.cfi_endproc
 359              	.LFE302:
 361              		.text
 362              	.Letext0:
 363              		.file 2 "/opt/gcc-arm-none-eabi/gcc-arm-none-eabi-10.3-2021.07/arm-none-eabi/include/machine/_defa
 364              		.file 3 "/opt/gcc-arm-none-eabi/gcc-arm-none-eabi-10.3-2021.07/arm-none-eabi/include/sys/_stdint.h
 365              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 366              		.file 5 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 367              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 368              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rtc.h"
 369              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 370              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 371              		.file 10 "Core/Inc/queue.h"
 372              		.file 11 "/opt/gcc-arm-none-eabi/gcc-arm-none-eabi-10.3-2021.07/arm-none-eabi/include/stdio.h"
 373              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
ARM GAS  /tmp/ccjspM2O.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_it.c
     /tmp/ccjspM2O.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccjspM2O.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:51     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccjspM2O.s:68     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:75     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccjspM2O.s:92     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:99     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccjspM2O.s:116    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:123    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccjspM2O.s:140    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:147    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccjspM2O.s:160    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:167    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccjspM2O.s:180    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:187    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccjspM2O.s:200    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccjspM2O.s:207    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccjspM2O.s:227    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccjspM2O.s:234    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccjspM2O.s:254    .text.TIM2_IRQHandler:000000000000000c $d
     /tmp/ccjspM2O.s:259    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccjspM2O.s:266    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccjspM2O.s:318    .text.USART2_IRQHandler:000000000000002c $d
     /tmp/ccjspM2O.s:324    .text.RTC_Alarm_IRQHandler:0000000000000000 $t
     /tmp/ccjspM2O.s:331    .text.RTC_Alarm_IRQHandler:0000000000000000 RTC_Alarm_IRQHandler
     /tmp/ccjspM2O.s:356    .text.RTC_Alarm_IRQHandler:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim2
getchar
enqueue
HAL_UART_IRQHandler
dequeue
rx_queue
huart2
HAL_RTC_AlarmIRQHandler
hrtc
alarm_flag
